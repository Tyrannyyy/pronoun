// dear imgui, v1.60
// (main code and documentation)

// Call and read ImGui::ShowDemoWindow() in imgui_demo.cpp for demo code.
// Newcomers, read 'Programmer guide' below for notes on how to setup Dear ImGui in your codebase.
// Get latest version at https://github.com/ocornut/imgui
// Releases change-log at https://github.com/ocornut/imgui/releases
// Gallery (please post your screenshots/video there!): https://github.com/ocornut/imgui/issues/1269
// Developed by Omar Cornut and every direct or indirect contributors to the GitHub.
// This library is free but I need your support to sustain development and maintenance.
// If you work for a company, please consider financial support, see README. For individuals: https://www.patreon.com/imgui

// It is recommended that you don't modify imgui.cpp! It will become difficult for you to update the library.
// Note that 'ImGui::' being a namespace, you can add functions into the namespace from your own source files, without 
// modifying imgui.h or imgui.cpp. You may include imgui_internal.h to access internal data structures, but it doesn't 
// come with any guarantee of forward compatibility. Discussing your changes on the GitHub Issue Tracker may lead you 
// to a better solution or official support for them.

/*

 Index
 - MISSION STATEMENT
 - END-USER GUIDE
 - PROGRAMMER GUIDE (read me!)
   - Read first
   - How to update to a newer version of Dear ImGui
   - Getting started with integrating Dear ImGui in your code/engine
   - Using gamepad/keyboard navigation controls [BETA]
 - API BREAKING CHANGES (read me when you update!)
 - ISSUES & TODO LIST
 - FREQUENTLY ASKED QUESTIONS (FAQ), TIPS
   - How can I tell whether to dispatch mouse/keyboard to imgui or to my application?
   - How can I display an image? What is ImTextureID, how does it works?
   - How can I have multiple widgets with the same label or without a label? A primer on labels and the ID Stack.
   - How can I load a different font than the default?
   - How can I easily use icons in my application?
   - How can I load multiple fonts?
   - How can I display and input non-latin characters such as Chinese, Japanese, Korean, Cyrillic?
   - How can I use the drawing facilities without an ImGui window? (using ImDrawList API)
   - I integrated Dear ImGui in my engine and the text or lines are blurry..
   - I integrated Dear ImGui in my engine and some elements are clipping or disappearing when I move windows around..
   - How can I help?
 - ISSUES & TODO-LIST
 - CODE


 MISSION STATEMENT
 =================

 - Easy to use to create code-driven and data-driven tools
 - Easy to use to create ad hoc short-lived tools and long-lived, more elaborate tools
 - Easy to hack and improve
 - Minimize screen real-estate usage
 - Minimize setup and maintenance
 - Minimize state storage on user side
 - Portable, minimize dependencies, run on target (consoles, phones, etc.)
 - Efficient runtime and memory consumption (NB- we do allocate when "growing" content e.g. creating a window, 
   opening a tree node for the first time, etc. but a typical frame should not allocate anything)

 Designed for developers and content-creators, not the typical end-user! Some of the weaknesses includes:
 - Doesn't look fancy, doesn't animate
 - Limited layout features, intricate layouts are typically crafted in code


 END-USER GUIDE
 ==============

 - Double-click on title bar to collapse window.
 - Click upper right corner to close a window, available when 'bool* p_open' is passed to ImGui::Begin().
 - Click and drag on lower right corner to resize window (double-click to auto fit window to its contents).
 - Click and drag on any empty space to move window.
 - TAB/SHIFT+TAB to cycle through keyboard editable fields.
 - CTRL+Click on a slider or drag box to input value as text.
 - Use mouse wheel to scroll.
 - Text editor:
   - Hold SHIFT or use mouse to select text.
   - CTRL+Left/Right to word jump.
   - CTRL+Shift+Left/Right to select words.
   - CTRL+A our Double-Click to select all.
   - CTRL+X,CTRL+C,CTRL+V to use OS clipboard/
   - CTRL+Z,CTRL+Y to undo/redo.
   - ESCAPE to revert text to its original value.
   - You can apply arithmetic operators +,*,/ on numerical values. Use +- to subtract (because - would set a negative value!)
   - Controls are automatically adjusted for OSX to match standard OSX text editing operations.
 - General Keyboard controls: enable with ImGuiConfigFlags_NavEnableKeyboard.
 - General Gamepad controls: enable with ImGuiConfigFlags_NavEnableGamepad. See suggested mappings in imgui.h ImGuiNavInput_ + download PNG/PSD at http://goo.gl/9LgVZW


 PROGRAMMER GUIDE
 ================

 READ FIRST

 - Read the FAQ below this section!
 - Your code creates the UI, if your code doesn't run the UI is gone! The UI can be highly dynamic, there are no construction
   or destruction steps, less data retention on your side, less state duplication, less state synchronization, less bugs.
 - Call and read ImGui::ShowDemoWindow() for demo code demonstrating most features.
 - You can learn about immediate-mode gui principles at http://www.johno.se/book/imgui.html or watch http://mollyrocket.com/861

 HOW TO UPDATE TO A NEWER VERSION OF DEAR IMGUI

 - Overwrite all the sources files except for imconfig.h (if you have made modification to your copy of imconfig.h)
 - Read the "API BREAKING CHANGES" section (below). This is where we list occasional API breaking changes. 
   If a function/type has been renamed / or marked obsolete, try to fix the name in your code before it is permanently removed 
   from the public API. If you have a problem with a missing function/symbols, search for its name in the code, there will 
   likely be a comment about it. Please report any issue to the GitHub page!
 - Try to keep your copy of dear imgui reasonably up to date.

 GETTING STARTED WITH INTEGRATING DEAR IMGUI IN YOUR CODE/ENGINE

 - Run and study the examples and demo to get acquainted with the library.
 - Add the Dear ImGui source files to your projects, using your preferred build system. 
   It is recommended you build the .cpp files as part of your project and not as a library.
 - You can later customize the imconfig.h file to tweak some compilation time behavior, such as integrating imgui types with your own maths types.
 - You may be able to grab and copy a ready made imgui_impl_*** file from the examples/ folder.
 - When using Dear ImGui, your programming IDE is your friend: follow the declaration of variables, functions and types to find comments about them.

 - Init: retrieve the ImGuiIO structure with ImGui::GetIO() and fill the fields marked 'Settings': at minimum you need to set io.DisplaySize
   (application resolution). Later on you will fill your keyboard mapping, clipboard handlers, and other advanced features but for a basic 
   integration you don't need to worry about it all.
 - Init: call io.Fonts->GetTexDataAsRGBA32(...), it will build the font atlas texture, then load the texture pixels into graphics memory.
 - Every frame:
    - In your main loop as early a possible, fill the IO fields marked 'Input' (e.g. mouse position, buttons, keyboard info, etc.)
    - Call ImGui::NewFrame() to begin the frame
    - You can use any ImGui function you want between NewFrame() and Render()
    - Call ImGui::Render() as late as you can to end the frame and finalize render data. it will call your io.RenderDrawListFn handler.
       (Even if you don't render, call Render() and ignore the callback, or call EndFrame() instead. Otherwhise some features will break)
 - All rendering information are stored into command-lists until ImGui::Render() is called.
 - Dear ImGui never touches or knows about your GPU state. the only function that knows about GPU is the RenderDrawListFn handler that you provide.
 - Effectively it means you can create widgets at any time in your code, regardless of considerations of being in "update" vs "render" phases 
   of your own application.
 - Refer to the examples applications in the examples/ folder for instruction on how to setup your code.
 - A minimal application skeleton may be:

     // Application init
     ImGui::CreateContext();
     ImGuiIO& io = ImGui::GetIO();
     io.DisplaySize.x = 1920.0f;
     io.DisplaySize.y = 1280.0f;
     // TODO: Fill others settings of the io structure later.

     // Load texture atlas (there is a default font so you don't need to care about choosing a font yet)
     unsigned char* pixels;
     int width, height;
     io.Fonts->GetTexDataAsRGBA32(pixels, &width, &height);
     // TODO: At this points you've got the texture data and you need to upload that your your graphic system:
     MyTexture* texture = MyEngine::CreateTextureFromMemoryPixels(pixels, width, height, TEXTURE_TYPE_RGBA)
     // TODO: Store your texture pointer/identifier (whatever your engine uses) in 'io.Fonts->TexID'. This will be passed back to your via the renderer.
     io.Fonts->TexID = (void*)texture;

     // Application main loop
     while (true)
     {
        // Setup low-level inputs (e.g. on Win32, GetKeyboardState(), or write to those fields from your Windows message loop handlers, etc.)
        ImGuiIO& io = ImGui::GetIO();
        io.DeltaTime = 1.0f/60.0f;
        io.MousePos = mouse_pos;
        io.MouseDown[0] = mouse_button_0;
        io.MouseDown[1] = mouse_button_1;

        // Call NewFrame(), after this point you can use ImGui::* functions anytime
        ImGui::NewFrame();

        // Most of your application code here
        MyGameUpdate(); // may use any ImGui functions, e.g. ImGui::Begin("My window"); ImGui::Text("Hello, world!"); ImGui::End();
        MyGameRender(); // may use any ImGui functions as well!
     
        // Render & swap video buffers
        ImGui::Render();
        MyImGuiRenderFunction(ImGui::GetDrawData());
        SwapBuffers();
     }

     // Shutdown
     ImGui::DestroyContext();


 - A minimal render function skeleton may be:

    void void MyRenderFunction(ImDrawData* draw_data)
    {
       // TODO: Setup render state: alpha-blending enabled, no face culling, no depth testing, scissor enabled
       // TODO: Setup viewport, orthographic projection matrix
       // TODO: Setup shader: vertex { float2 pos, float2 uv, u32 color }, fragment shader sample color from 1 texture, multiply by vertex color.
       for (int n = 0; n < draw_data->CmdListsCount; n++)
       {
          const ImDrawVert* vtx_buffer = cmd_list->VtxBuffer.Data;  // vertex buffer generated by ImGui
          const ImDrawIdx* idx_buffer = cmd_list->IdxBuffer.Data;   // index buffer generated by ImGui
          for (int cmd_i = 0; cmd_i < cmd_list->CmdBuffer.Size; cmd_i++)
          {
             const ImDrawCmd* pcmd = &cmd_list->CmdBuffer[cmd_i];
             if (pcmd->UserCallback)
             {
                 pcmd->UserCallback(cmd_list, pcmd);
             }
             else
             {
                 // The texture for the draw call is specified by pcmd->TextureId. 
                 // The vast majority of draw calls with use the imgui texture atlas, which value you have set yourself during initialization. 
                 MyEngineBindTexture(pcmd->TextureId);

                 // We are using scissoring to clip some objects. All low-level graphics API supports it.
                 // If your engine doesn't support scissoring yet, you may ignore this at first. You will get some small glitches 
                 // (some elements visible outside their bounds) but you can fix that once everywhere else works!
                 MyEngineScissor((int)pcmd->ClipRect.x, (int)pcmd->ClipRect.y, (int)(pcmd->ClipRect.z - pcmd->ClipRect.x), (int)(pcmd->ClipRect.w - pcmd->ClipRect.y));

                 // Render 'pcmd->ElemCount/3' indexed triangles.
                 // By default the indices ImDrawIdx are 16-bits, you can change them to 32-bits if your engine doesn't support 16-bits indices.
                 MyEngineDrawIndexedTriangles(pcmd->ElemCount, sizeof(ImDrawIdx) == 2 ? GL_UNSIGNED_SHORT : GL_UNSIGNED_INT, idx_buffer, vtx_buffer);
             }
             idx_buffer += pcmd->ElemCount;
          }
       }
    }

 - The examples/ folders contains many functional implementation of the pseudo-code above.
 - When calling NewFrame(), the 'io.WantCaptureMouse', 'io.WantCaptureKeyboard' and 'io.WantTextInput' flags are updated. 
   They tell you if ImGui intends to use your inputs. When a flag is set you want to hide the corresponding inputs from the rest of your application.
   However, in both cases you need to pass on the inputs to imgui. Read the FAQ below for more information about those flags.
 - Please read the FAQ above. Amusingly, it is called a FAQ because people frequently have the same issues!

 USING GAMEPAD/KEYBOARD NAVIGATION CONTROLS [BETA]

 - The gamepad/keyboard navigation is in Beta. Ask questions and report issues at https://github.com/ocornut/imgui/issues/787
 - The initial focus was to support game controllers, but keyboard is becoming increasingly and decently usable.
 - Gamepad:
    - Set io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad to enable.
    - Backend: Set io.BackendFlags |= ImGuiBackendFlags_HasGamepad + fill the io.NavInputs[] fields before calling NewFrame(). 
      Note that io.NavInputs[] is cleared by EndFrame().
    - See 'enum ImGuiNavInput_' in imgui.h for a description of inputs. For each entry of io.NavInputs[], set the following values:
         0.0f= not held. 1.0f= fully held. Pass intermediate 0.0f..1.0f values for analog triggers/sticks.
    - We uses a simple >0.0f test for activation testing, and won't attempt to test for a dead-zone.
      Your code will probably need to transform your raw inputs (such as e.g. remapping your 0.2..0.9 raw input range to 0.0..1.0 imgui range, etc.).
    - You can download PNG/PSD files depicting the gamepad controls for common controllers at: goo.gl/9LgVZW.
    - If you need to share inputs between your game and the imgui parts, the easiest approach is to go all-or-nothing, with a buttons combo 
      to toggle the target. Please reach out if you think the game vs navigation input sharing could be improved.
 - Keyboard:
    - Set io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard to enable. 
      NewFrame() will automatically fill io.NavInputs[] based on your io.KeyDown[] + io.KeyMap[] arrays.
    - When keyboard navigation is active (io.NavActive + ImGuiConfigFlags_NavEnableKeyboard), the io.WantCaptureKeyboard flag
      will be set. For more advanced uses, you may want to read from:
       - io.NavActive: true when a window is focused and it doesn't have the ImGuiWindowFlags_NoNavInputs flag set.
       - io.NavVisible: true when the navigation cursor is visible (and usually goes false when mouse is used).
       - or query focus information with e.g. IsWindowFocused(ImGuiFocusedFlags_AnyWindow), IsItemFocused() etc. functions.
      Please reach out if you think the game vs navigation input sharing could be improved.
 - Mouse:
    - PS4 users: Consider emulating a mouse cursor with DualShock4 touch pad or a spare analog stick as a mouse-emulation fallback.
    - Consoles/Tablet/Phone users: Consider using a Synergy 1.x server (on your PC) + uSynergy.c (on your console/tablet/phone app) to share your PC mouse/keyboard.
    - On a TV/console system where readability may be lower or mouse inputs may be awkward, you may want to set the ImGuiConfigFlags_NavEnableSetMousePos flag.
      Enabling ImGuiConfigFlags_NavEnableSetMousePos + ImGuiBackendFlags_HasSetMousePos instructs dear imgui to move your mouse cursor along with navigation movements.
      When enabled, the NewFrame() function may alter 'io.MousePos' and set 'io.WantSetMousePos' to notify you that it wants the mouse cursor to be moved.
      When that happens your back-end NEEDS to move the OS or underlying mouse cursor on the next frame. Some of the binding in examples/ do that.
      (If you set the NavEnableSetMousePos flag but don't honor 'io.WantSetMousePos' properly, imgui will misbehave as it will see your mouse as moving back and forth!)
      (In a setup when you may not have easy control over the mouse cursor, e.g. uSynergy.c doesn't expose moving remote mouse cursor, you may want
       to set a boolean to ignore your other external mouse positions until the external source is moved again.)


 API BREAKING CHANGES
 ====================

 Occasionally introducing changes that are breaking the API. The breakage are generally minor and easy to fix.
 Here is a change-log of API breaking changes, if you are using one of the functions listed, expect to have to fix some code.
 Also read releases logs https://github.com/ocornut/imgui/releases for more details.

 - 2018/03/20 (1.60) - Renamed io.WantMoveMouse to io.WantSetMousePos for consistency and ease of understanding (was added in 1.52, _not_ used by core and only honored by some binding ahead of merging the Nav branch).
 - 2018/03/12 (1.60) - Removed ImGuiCol_CloseButton, ImGuiCol_CloseButtonActive, ImGuiCol_CloseButtonHovered as the closing cross uses regular button colors now.
 - 2018/03/08 (1.60) - Changed ImFont::DisplayOffset.y to default to 0 instead of +1. Fixed rounding of Ascent/Descent to match TrueType renderer. If you were adding or subtracting to ImFont::DisplayOffset check if your fonts are correctly aligned vertically.
 - 2018/03/03 (1.60) - Renamed ImGuiStyleVar_Count_ to ImGuiStyleVar_COUNT and ImGuiMouseCursor_Count_ to ImGuiMouseCursor_COUNT for consistency with other public enums.
 - 2018/02/18 (1.60) - BeginDragDropSource(): temporarily removed the optional mouse_button=0 parameter because it is not really usable in many situations at the moment. 
 - 2018/02/16 (1.60) - obsoleted the io.RenderDrawListsFn callback, you can call your graphics engine render function after ImGui::Render(). Use ImGui::GetDrawData() to retrieve the ImDrawData* to display.
 - 2018/02/07 (1.60) - reorganized context handling to be more explicit,
                       - YOU NOW NEED TO CALL ImGui::CreateContext() AT THE BEGINNING OF YOUR APP, AND CALL ImGui::DestroyContext() AT THE END.
                       - removed Shutdown() function, as DestroyContext() serve this purpose.
                       - you may pass a ImFontAtlas* pointer to CreateContext() to share a font atlas between contexts. Otherwhise CreateContext() will create its own font atlas instance.
                       - removed allocator parameters from CreateContext(), they are now setup with SetAllocatorFunctions(), and shared by all contexts.
                       - removed the default global context and font atlas instance, which were confusing for users of DLL reloading and users of multiple contexts.
 - 2018/01/31 (1.60) - moved sample TTF files from extra_fonts/ to misc/fonts/. If you loaded files directly from the imgui repo you may need to update your paths.
 - 2018/01/11 (1.60) - obsoleted IsAnyWindowHovered() in favor of IsWindowHovered(ImGuiHoveredFlags_AnyWindow). Kept redirection function (will obsolete).
 - 2018/01/11 (1.60) - obsoleted IsAnyWindowFocused() in favor of IsWindowFocused(ImGuiFocusedFlags_AnyWindow). Kept redirection function (will obsolete).
 - 2018/01/03 (1.60) - renamed ImGuiSizeConstraintCallback to ImGuiSizeCallback, ImGuiSizeConstraintCallbackData to ImGuiSizeCallbackData.
 - 2017/12/29 (1.60) - removed CalcItemRectClosestPoint() which was weird and not really used by anyone except demo code. If you need it it's easy to replicate on your side.
 - 2017/12/24 (1.53) - renamed the emblematic ShowTestWindow() function to ShowDemoWindow(). Kept redirection function (will obsolete).
 - 2017/12/21 (1.53) - ImDrawList: renamed style.AntiAliasedShapes to style.AntiAliasedFill for consistency and as a way to explicitly break code that manipulate those flag at runtime. You can now manipulate ImDrawList::Flags
 - 2017/12/21 (1.53) - ImDrawList: removed 'bool anti_aliased = true' final parameter of ImDrawList::AddPolyline() and ImDrawList::AddConvexPolyFilled(). Prefer manipulating ImDrawList::Flags if you need to toggle them during the frame.
 - 2017/12/14 (1.53) - using the ImGuiWindowFlags_NoScrollWithMouse flag on a child window forwards the mouse wheel event to the parent window, unless either ImGuiWindowFlags_NoInputs or ImGuiWindowFlags_NoScrollbar are also set.
 - 2017/12/13 (1.53) - renamed GetItemsLineHeightWithSpacing() to GetFrameHeightWithSpacing(). Kept redirection function (will obsolete).
 - 2017/12/13 (1.53) - obsoleted IsRootWindowFocused() in favor of using IsWindowFocused(ImGuiFocusedFlags_RootWindow). Kept redirection function (will obsolete).
                     - obsoleted IsRootWindowOrAnyChildFocused() in favor of using IsWindowFocused(ImGuiFocusedFlags_RootAndChildWindows). Kept redirection function (will obsolete).
 - 2017/12/12 (1.53) - renamed ImGuiTreeNodeFlags_AllowOverlapMode to ImGuiTreeNodeFlags_AllowItemOverlap. Kept redirection enum (will obsolete).
 - 2017/12/10 (1.53) - removed SetNextWindowContentWidth(), prefer using SetNextWindowContentSize(). Kept redirection function (will obsolete).
 - 2017/11/27 (1.53) - renamed ImGuiTextBuffer::append() helper to appendf(), appendv() to appendfv(). If you copied the 'Log' demo in your code, it uses appendv() so that needs to be renamed.
 - 2017/11/18 (1.53) - Style, Begin: removed ImGuiWindowFlags_ShowBorders window flag. Borders are now fully set up in the ImGuiStyle structure (see e.g. style.FrameBorderSize, style.WindowBorderSize). Use ImGui::ShowStyleEditor() to look them up.
                       Please note that the style system will keep evolving (hopefully stabilizing in Q1 2018), and so custom styles will probably subtly break over time. It is recommended you use the StyleColorsClassic(), StyleColorsDark(), StyleColorsLight() functions.
 - 2017/11/18 (1.53) - Style: removed ImGuiCol_ComboBg in favor of combo boxes using ImGuiCol_PopupBg for consistency.
 - 2017/11/18 (1.53) - Style: renamed ImGuiCol_ChildWindowBg to ImGuiCol_ChildBg.
 - 2017/11/18 (1.53) - Style: renamed style.ChildWindowRounding to style.ChildRounding, ImGuiStyleVar_ChildWindowRounding to ImGuiStyleVar_ChildRounding.
 - 2017/11/02 (1.53) - obsoleted IsRootWindowOrAnyChildHovered() in favor of using IsWindowHovered(ImGuiHoveredFlags_RootAndChildWindows);
 - 2017/10/24 (1.52) - renamed IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCS/IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCS to IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS/IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS for consistency.
 - 2017/10/20 (1.52) - changed IsWindowHovered() default parameters behavior to return false if an item is active in another window (e.g. click-dragging item from another window to this window). You can use the newly introduced IsWindowHovered() flags to requests this specific behavior if you need it.
 - 2017/10/20 (1.52) - marked IsItemHoveredRect()/IsMouseHoveringWindow() as obsolete, in favor of using the newly introduced flags for IsItemHovered() and IsWindowHovered(). See https://github.com/ocornut/imgui/issues/1382 for details.
                       removed the IsItemRectHovered()/IsWindowRectHovered() names introduced in 1.51 since they were merely more consistent names for the two functions we are now obsoleting.
 - 2017/10/17 (1.52) - marked the old 5-parameters version of Begin() as obsolete (still available). Use SetNextWindowSize()+Begin() instead!
 - 2017/10/11 (1.52) - renamed AlignFirstTextHeightToWidgets() to AlignTextToFramePadding(). Kept inline redirection function (will obsolete).
 - 2017/09/25 (1.52) - removed SetNextWindowPosCenter() because SetNextWindowPos() now has the optional pivot information to do the same and more. Kept redirection function (will obsolete). 
 - 2017/08/25 (1.52) - io.MousePos needs to be set to ImVec2(-FLT_MAX,-FLT_MAX) when mouse is unavailable/missing. Previously ImVec2(-1,-1) was enough but we now accept negative mouse coordinates. In your binding if you need to support unavailable mouse, make sure to replace "io.MousePos = ImVec2(-1,-1)" with "io.MousePos = ImVec2(-FLT_MAX,-FLT_MAX)".
 - 2017/08/22 (1.51) - renamed IsItemHoveredRect() to IsItemRectHovered(). Kept inline redirection function (will obsolete). -> (1.52) use IsItemHovered(ImGuiHoveredFlags_RectOnly)! 
                     - renamed IsMouseHoveringAnyWindow() to IsAnyWindowHovered() for consistency. Kept inline redirection function (will obsolete).
                     - renamed IsMouseHoveringWindow() to IsWindowRectHovered() for consistency. Kept inline redirection function (will obsolete).
 - 2017/08/20 (1.51) - renamed GetStyleColName() to GetStyleColorName() for consistency.
 - 2017/08/20 (1.51) - added PushStyleColor(ImGuiCol idx, ImU32 col) overload, which _might_ cause an "ambiguous call" compilation error if you are using ImColor() with implicit cast. Cast to ImU32 or ImVec4 explicily to fix.
 - 2017/08/15 (1.51) - marked the weird IMGUI_ONCE_UPON_A_FRAME helper macro as obsolete. prefer using the more explicit ImGuiOnceUponAFrame.
 - 2017/08/15 (1.51) - changed parameter order for BeginPopupContextWindow() from (const char*,int buttons,bool also_over_items) to (const char*,int buttons,bool also_over_items). Note that most calls relied on default parameters completely.
 - 2017/08/13 (1.51) - renamed ImGuiCol_Columns*** to ImGuiCol_Separator***. Kept redirection enums (will obsolete).
 - 2017/08/11 (1.51) - renamed ImGuiSetCond_*** types and flags to ImGuiCond_***. Kept redirection enums (will obsolete).
 - 2017/08/09 (1.51) - removed ValueColor() helpers, they are equivalent to calling Text(label) + SameLine() + ColorButton().
 - 2017/08/08 (1.51) - removed ColorEditMode() and ImGuiColorEditMode in favor of ImGuiColorEditFlags and parameters to the various Color*() functions. The SetColorEditOptions() allows to initialize default but the user can still change them with right-click context menu.
                     - changed prototype of 'ColorEdit4(const char* label, float col[4], bool show_alpha = true)' to 'ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags = 0)', where passing flags = 0x01 is a safe no-op (hello dodgy backward compatibility!). - check and run the demo window, under "Color/Picker Widgets", to understand the various new options.
                     - changed prototype of rarely used 'ColorButton(ImVec4 col, bool small_height = false, bool outline_border = true)' to 'ColorButton(const char* desc_id, ImVec4 col, ImGuiColorEditFlags flags = 0, ImVec2 size = ImVec2(0,0))'
 - 2017/07/20 (1.51) - removed IsPosHoveringAnyWindow(ImVec2), which was partly broken and misleading. ASSERT + redirect user to io.WantCaptureMouse
 - 2017/05/26 (1.50) - removed ImFontConfig::MergeGlyphCenterV in favor of a more multipurpose ImFontConfig::GlyphOffset.
 - 2017/05/01 (1.50) - renamed ImDrawList::PathFill() (rarely used directly) to ImDrawList::PathFillConvex() for clarity.
 - 2016/11/06 (1.50) - BeginChild(const char*) now applies the stack id to the provided label, consistently with other functions as it should always have been. It shouldn't affect you unless (extremely unlikely) you were appending multiple times to a same child from different locations of the stack id. If that's the case, generate an id with GetId() and use it instead of passing string to BeginChild().
 - 2016/10/15 (1.50) - avoid 'void* user_data' parameter to io.SetClipboardTextFn/io.GetClipboardTextFn pointers. We pass io.ClipboardUserData to it.
 - 2016/09/25 (1.50) - style.WindowTitleAlign is now a ImVec2 (ImGuiAlign enum was removed). set to (0.5f,0.5f) for horizontal+vertical centering, (0.0f,0.0f) for upper-left, etc.
 - 2016/07/30 (1.50) - SameLine(x) with x>0.0f is now relative to left of column/group if any, and not always to left of window. This was sort of always the intent and hopefully breakage should be minimal.
 - 2016/05/12 (1.49) - title bar (using ImGuiCol_TitleBg/ImGuiCol_TitleBgActive colors) isn't rendered over a window background (ImGuiCol_WindowBg color) anymore. 
                       If your TitleBg/TitleBgActive alpha was 1.0f or you are using the default theme it will not affect you. 
                       However if your TitleBg/TitleBgActive alpha was <1.0f you need to tweak your custom theme to readjust for the fact that we don't draw a WindowBg background behind the title bar.
                       This helper function will convert an old TitleBg/TitleBgActive color into a new one with the same visual output, given the OLD color and the OLD WindowBg color.
                           ImVec4 ConvertTitleBgCol(const ImVec4& win_bg_col, const ImVec4& title_bg_col)
                           {
                               float new_a = 1.0f - ((1.0f - win_bg_col.w) * (1.0f - title_bg_col.w)), k = title_bg_col.w / new_a;
                               return ImVec4((win_bg_col.x * win_bg_col.w + title_bg_col.x) * k, (win_bg_col.y * win_bg_col.w + title_bg_col.y) * k, (win_bg_col.z * win_bg_col.w + title_bg_col.z) * k, new_a);
                           }
                       If this is confusing, pick the RGB value from title bar from an old screenshot and apply this as TitleBg/TitleBgActive. Or you may just create TitleBgActive from a tweaked TitleBg color.
 - 2016/05/07 (1.49) - removed confusing set of GetInternalState(), GetInternalStateSize(), SetInternalState() functions. Now using CreateContext(), DestroyContext(), GetCurrentContext(), SetCurrentContext().
 - 2016/05/02 (1.49) - renamed SetNextTreeNodeOpened() to SetNextTreeNodeOpen(), no redirection.
 - 2016/05/01 (1.49) - obsoleted old signature of CollapsingHeader(const char* label, const char* str_id = NULL, bool display_frame = true, bool default_open = false) as extra parameters were badly designed and rarely used. You can replace the "default_open = true" flag in new API with CollapsingHeader(label, ImGuiTreeNodeFlags_DefaultOpen).
 - 2016/04/26 (1.49) - changed ImDrawList::PushClipRect(ImVec4 rect) to ImDraw::PushClipRect(Imvec2 min,ImVec2 max,bool intersect_with_current_clip_rect=false). Note that higher-level ImGui::PushClipRect() is preferable because it will clip at logic/widget level, whereas ImDrawList::PushClipRect() only affect your renderer.
 - 2016/04/03 (1.48) - removed style.WindowFillAlphaDefault setting which was redundant. Bake default BG alpha inside style.Colors[ImGuiCol_WindowBg] and all other Bg color values. (ref github issue #337).
 - 2016/04/03 (1.48) - renamed ImGuiCol_TooltipBg to ImGuiCol_PopupBg, used by popups/menus and tooltips. popups/menus were previously using ImGuiCol_WindowBg. (ref github issue #337)
 - 2016/03/21 (1.48) - renamed GetWindowFont() to GetFont(), GetWindowFontSize() to GetFontSize(). Kept inline redirection function (will obsolete).
 - 2016/03/02 (1.48) - InputText() completion/history/always callbacks: if you modify the text buffer manually (without using DeleteChars()/InsertChars() helper) you need to maintain the BufTextLen field. added an assert.
 - 2016/01/23 (1.48) - fixed not honoring exact width passed to PushItemWidth(), previously it would add extra FramePadding.x*2 over that width. if you had manual pixel-perfect alignment in place it might affect you.
 - 2015/12/27 (1.48) - fixed ImDrawList::AddRect() which used to render a rectangle 1 px too large on each axis.
 - 2015/12/04 (1.47) - renamed Color() helpers to ValueColor() - dangerously named, rarely used and probably to be made obsolete.
 - 2015/08/29 (1.45) - with the addition of horizontal scrollbar we made various fixes to inconsistencies with dealing with cursor position.
                       GetCursorPos()/SetCursorPos() functions now include the scrolled amount. It shouldn't affect the majority of users, but take note that SetCursorPosX(100.0f) puts you at +100 from the starting x position which may include scrolling, not at +100 from the window left side.
                       GetContentRegionMax()/GetWindowContentRegionMin()/GetWindowContentRegionMax() functions allow include the scrolled amount. Typically those were used in cases where no scrolling would happen so it may not be a problem, but watch out!
 - 2015/08/29 (1.45) - renamed style.ScrollbarWidth to style.ScrollbarSize
 - 2015/08/05 (1.44) - split imgui.cpp into extra files: imgui_demo.cpp imgui_draw.cpp imgui_internal.h that you need to add to your project.
 - 2015/07/18 (1.44) - fixed angles in ImDrawList::PathArcTo(), PathArcToFast() (introduced in 1.43) being off by an extra PI for no justifiable reason
 - 2015/07/14 (1.43) - add new ImFontAtlas::AddFont() API. For the old AddFont***, moved the 'font_no' parameter of ImFontAtlas::AddFont** functions to the ImFontConfig structure.
                       you need to render your textured triangles with bilinear filtering to benefit from sub-pixel positioning of text.
 - 2015/07/08 (1.43) - switched rendering data to use indexed rendering. this is saving a fair amount of CPU/GPU and enables us to get anti-aliasing for a marginal cost.
                       this necessary change will break your rendering function! the fix should be very easy. sorry for that :(
                     - if you are using a vanilla copy of one of the imgui_impl_XXXX.cpp provided in the example, you just need to update your copy and you can ignore the rest.
                     - the signature of the io.RenderDrawListsFn handler has changed!
                       old: ImGui_XXXX_RenderDrawLists(ImDrawList** const cmd_lists, int cmd_lists_count)
                       new: ImGui_XXXX_RenderDrawLists(ImDrawData* draw_data).
                         argument:   'cmd_lists' becomes 'draw_data->CmdLists', 'cmd_lists_count' becomes 'draw_data->CmdListsCount'
                         ImDrawList: 'commands' becomes 'CmdBuffer', 'vtx_buffer' becomes 'VtxBuffer', 'IdxBuffer' is new.
                         ImDrawCmd:  'vtx_count' becomes 'ElemCount', 'clip_rect' becomes 'ClipRect', 'user_callback' becomes 'UserCallback', 'texture_id' becomes 'TextureId'.
                     - each ImDrawList now contains both a vertex buffer and an index buffer. For each command, render ElemCount/3 triangles using indices from the index buffer.
                     - if you REALLY cannot render indexed primitives, you can call the draw_data->DeIndexAllBuffers() method to de-index the buffers. This is slow and a waste of CPU/GPU. Prefer using indexed rendering!
                     - refer to code in the examples/ folder or ask on the GitHub if you are unsure of how to upgrade. please upgrade!
 - 2015/07/10 (1.43) - changed SameLine() parameters from int to float.
 - 2015/07/02 (1.42) - renamed SetScrollPosHere() to SetScrollFromCursorPos(). Kept inline redirection function (will obsolete).
 - 2015/07/02 (1.42) - renamed GetScrollPosY() to GetScrollY(). Necessary to reduce confusion along with other scrolling functions, because positions (e.g. cursor position) are not equivalent to scrolling amount.
 - 2015/06/14 (1.41) - changed ImageButton() default bg_col parameter from (0,0,0,1) (black) to (0,0,0,0) (transparent) - makes a difference when texture have transparence
 - 2015/06/14 (1.41) - changed Selectable() API from (label, selected, size) to (label, selected, flags, size). Size override should have been rarely be used. Sorry!
 - 2015/05/31 (1.40) - renamed GetWindowCollapsed() to IsWindowCollapsed() for consistency. Kept inline redirection function (will obsolete).
 - 2015/05/31 (1.40) - renamed IsRectClipped() to IsRectVisible() for consistency. Note that return value is opposite! Kept inline redirection function (will obsolete).
 - 2015/05/27 (1.40) - removed the third 'repeat_if_held' parameter from Button() - sorry! it was rarely used and inconsistent. Use PushButtonRepeat(true) / PopButtonRepeat() to enable repeat on desired buttons.
 - 2015/05/11 (1.40) - changed BeginPopup() API, takes a string identifier instead of a bool. ImGui needs to manage the open/closed state of popups. Call OpenPopup() to actually set the "open" state of a popup. BeginPopup() returns true if the popup is opened.
 - 2015/05/03 (1.40) - removed style.AutoFitPadding, using style.WindowPadding makes more sense (the default values were already the same).
 - 2015/04/13 (1.38) - renamed IsClipped() to IsRectClipped(). Kept inline redirection function until 1.50.
 - 2015/04/09 (1.38) - renamed ImDrawList::AddArc() to ImDrawList::AddArcFast() for compatibility with future API
 - 2015/04/03 (1.38) - removed ImGuiCol_CheckHovered, ImGuiCol_CheckActive, replaced with the more general ImGuiCol_FrameBgHovered, ImGuiCol_FrameBgActive.
 - 2014/04/03 (1.38) - removed support for passing -FLT_MAX..+FLT_MAX as the range for a SliderFloat(). Use DragFloat() or Inputfloat() instead.
 - 2015/03/17 (1.36) - renamed GetItemBoxMin()/GetItemBoxMax()/IsMouseHoveringBox() to GetItemRectMin()/GetItemRectMax()/IsMouseHoveringRect(). Kept inline redirection function until 1.50.
 - 2015/03/15 (1.36) - renamed style.TreeNodeSpacing to style.IndentSpacing, ImGuiStyleVar_TreeNodeSpacing to ImGuiStyleVar_IndentSpacing
 - 2015/03/13 (1.36) - renamed GetWindowIsFocused() to IsWindowFocused(). Kept inline redirection function until 1.50.
 - 2015/03/08 (1.35) - renamed style.ScrollBarWidth to style.ScrollbarWidth (casing)
 - 2015/02/27 (1.34) - renamed OpenNextNode(bool) to SetNextTreeNodeOpened(bool, ImGuiSetCond). Kept inline redirection function until 1.50.
 - 2015/02/27 (1.34) - renamed ImGuiSetCondition_*** to ImGuiSetCond_***, and _FirstUseThisSession becomes _Once.
 - 2015/02/11 (1.32) - changed text input callback ImGuiTextEditCallback return type from void-->int. reserved for future use, return 0 for now.
 - 2015/02/10 (1.32) - renamed GetItemWidth() to CalcItemWidth() to clarify its evolving behavior
 - 2015/02/08 (1.31) - renamed GetTextLineSpacing() to GetTextLineHeightWithSpacing()
 - 2015/02/01 (1.31) - removed IO.MemReallocFn (unused)
 - 2015/01/19 (1.30) - renamed ImGuiStorage::GetIntPtr()/GetFloatPtr() to GetIntRef()/GetIntRef() because Ptr was conflicting with actual pointer storage functions.
 - 2015/01/11 (1.30) - big font/image API change! now loads TTF file. allow for multiple fonts. no need for a PNG loader.
              (1.30) - removed GetDefaultFontData(). uses io.Fonts->GetTextureData*() API to retrieve uncompressed pixels.
                       font init:  const void* png_data; unsigned int png_size; ImGui::GetDefaultFontData(NULL, NULL, &png_data, &png_size); <..Upload texture to GPU..>
                       became:     unsigned char* pixels; int width, height; io.Fonts->GetTexDataAsRGBA32(&pixels, &width, &height); <..Upload texture to GPU>; io.Fonts->TexId = YourTextureIdentifier;
                       you now more flexibility to load multiple TTF fonts and manage the texture buffer for internal needs.
                       it is now recommended that you sample the font texture with bilinear interpolation.
              (1.30) - added texture identifier in ImDrawCmd passed to your render function (we can now render images). make sure to set io.Fonts->TexID.
              (1.30) - removed IO.PixelCenterOffset (unnecessary, can be handled in user projection matrix)
              (1.30) - removed ImGui::IsItemFocused() in favor of ImGui::IsItemActive() which handles all widgets
 - 2014/12/10 (1.18) - removed SetNewWindowDefaultPos() in favor of new generic API SetNextWindowPos(pos, ImGuiSetCondition_FirstUseEver)
 - 2014/11/28 (1.17) - moved IO.Font*** options to inside the IO.Font-> structure (FontYOffset, FontTexUvForWhite, FontBaseScale, FontFallbackGlyph)
 - 2014/11/26 (1.17) - reworked syntax of IMGUI_ONCE_UPON_A_FRAME helper macro to increase compiler compatibility
 - 2014/11/07 (1.15) - renamed IsHovered() to IsItemHovered()
 - 2014/10/02 (1.14) - renamed IMGUI_INCLUDE_IMGUI_USER_CPP to IMGUI_INCLUDE_IMGUI_USER_INL and imgui_user.cpp to imgui_user.inl (more IDE friendly)
 - 2014/09/25 (1.13) - removed 'text_end' parameter from IO.SetClipboardTextFn (the string is now always zero-terminated for simplicity)
 - 2014/09/24 (1.12) - renamed SetFontScale() to SetWindowFontScale()
 - 2014/09/24 (1.12) - moved IM_MALLOC/IM_REALLOC/IM_FREE preprocessor defines to IO.MemAllocFn/IO.MemReallocFn/IO.MemFreeFn
 - 2014/08/30 (1.09) - removed IO.FontHeight (now computed automatically)
 - 2014/08/30 (1.09) - moved IMGUI_FONT_TEX_UV_FOR_WHITE preprocessor define to IO.FontTexUvForWhite
 - 2014/08/28 (1.09) - changed the behavior of IO.PixelCenterOffset following various rendering fixes


 ISSUES & TODO-LIST
 ==================
 See TODO.txt


 FREQUENTLY ASKED QUESTIONS (FAQ), TIPS
 ======================================

 Q: How can I tell whether to dispatch mouse/keyboard to imgui or to my application?
 A: You can read the 'io.WantCaptureMouse', 'io.WantCaptureKeyboard' and 'io.WantTextInput' flags from the ImGuiIO structure. 
    - When 'io.WantCaptureMouse' is set, imgui wants to use your mouse state, and you may want to discard/hide the inputs from the rest of your application.
    - When 'io.WantCaptureKeyboard' is set, imgui wants to use your keyboard state, and you may want to discard/hide the inputs from the rest of your application.
    - When 'io.WantTextInput' is set to may want to notify your OS to popup an on-screen keyboard, if available (e.g. on a mobile phone, or console OS).
    Note: you should always pass your mouse/keyboard inputs to imgui, even when the io.WantCaptureXXX flag are set false.
     This is because imgui needs to detect that you clicked in the void to unfocus its windows.
    Note: The 'io.WantCaptureMouse' is more accurate that any attempt to "check if the mouse is hovering a window" (don't do that!).
     It handle mouse dragging correctly (both dragging that started over your application or over an imgui window) and handle e.g. modal windows blocking inputs.
     Those flags are updated by ImGui::NewFrame(). Preferably read the flags after calling NewFrame() if you can afford it, but reading them before is also 
     perfectly fine, as the bool toggle fairly rarely. If you have on a touch device, you might find use for an early call to NewFrameUpdateHoveredWindowAndCaptureFlags().
    Note: Text input widget releases focus on "Return KeyDown", so the subsequent "Return KeyUp" event that your application receive will typically 
     have 'io.WantCaptureKeyboard=false'. Depending on your application logic it may or not be inconvenient. You might want to track which key-downs
     were targetted for Dear ImGui, e.g. with an array of bool, and filter out the corresponding key-ups.)

 Q: How can I display an image? What is ImTextureID, how does it works?
 A: ImTextureID is a void* used to pass renderer-agnostic texture references around until it hits your render function.
    Dear ImGui knows nothing about what those bits represent, it just passes them around. It is up to you to decide what you want the void* to carry!
    It could be an identifier to your OpenGL texture (cast GLuint to void*), a pointer to your custom engine material (cast MyMaterial* to void*), etc.
    At the end of the chain, your renderer takes this void* to cast it back into whatever it needs to select a current texture to render.
    Refer to examples applications, where each renderer (in a imgui_impl_xxxx.cpp file) is treating ImTextureID as a different thing.
    (C++ tip: OpenGL uses integers to identify textures. You can safely store an integer into a void*, just cast it to void*, don't take it's address!)
    To display a custom image/texture within an ImGui window, you may use ImGui::Image(), ImGui::ImageButton(), ImDrawList::AddImage() functions.
    Dear ImGui will generate the geometry and draw calls using the ImTextureID that you passed and which your renderer can use.
    You may call ImGui::ShowMetricsWindow() to explore active draw lists and visualize/understand how the draw data is generated.
    It is your responsibility to get textures uploaded to your GPU.

 Q: How can I have multiple widgets with the same label or without a label? 
 A: A primer on labels and the ID Stack...

   - Elements that are typically not clickable, such as Text() items don't need an ID.

   - Interactive widgets require state to be carried over multiple frames (most typically Dear ImGui
     often needs to remember what is the "active" widget). To do so they need a unique ID. Unique ID 
     are typically derived from a string label, an integer index or a pointer.

       Button("OK");          // Label = "OK",     ID = top of id stack + hash of "OK"
       Button("Cancel");      // Label = "Cancel", ID = top of id stack + hash of "Cancel"

   - ID are uniquely scoped within windows, tree nodes, etc. which all pushes to the ID stack. Having
     two buttons labeled "OK" in different windows or different tree locations is fine.

   - If you have a same ID twice in the same location, you'll have a conflict:

       Button("OK");
       Button("OK");          // ID collision! Interacting with either button will trigger the first one.

     Fear not! this is easy to solve and there are many ways to solve it!

   - Solving ID conflict in a simple/local context:
     When passing a label you can optionally specify extra ID information within string itself.
     Use "##" to pass a complement to the ID that won't be visible to the end-user.
     This helps solving the simple collision cases when you know e.g. at compilation time which items
     are going to be created:

       Button("Play");        // Label = "Play",   ID = top of id stack + hash of "Play"
       Button("Play##foo1");  // Label = "Play",   ID = top of id stack + hash of "Play##foo1" (different from above)
       Button("Play##foo2");  // Label = "Play",   ID = top of id stack + hash of "Play##foo2" (different from above)

   - If you want to completely hide the label, but still need an ID:

       Checkbox("##On", &b);  // Label = "",       ID = top of id stack + hash of "##On" (no label!)

   - Occasionally/rarely you might want change a label while preserving a constant ID. This allows
     you to animate labels. For example you may want to include varying information in a window title bar, 
     but windows are uniquely identified by their ID. Use "###" to pass a label that isn't part of ID:

       Button("Hello###ID";   // Label = "Hello",  ID = top of id stack + hash of "ID"
       Button("World###ID";   // Label = "World",  ID = top of id stack + hash of "ID" (same as above)

       sprintf(buf, "My game (%f FPS)###MyGame", fps);
       Begin(buf);            // Variable label,   ID = hash of "MyGame"

   - Solving ID conflict in a more general manner:
     Use PushID() / PopID() to create scopes and manipulate the ID stack, as to avoid ID conflicts 
     within the same window. This is the most convenient way of distinguishing ID when iterating and
     creating many UI elements programmatically. 
     You can push a pointer, a string or an integer value into the ID stack. 
     Remember that ID are formed from the concatenation of _everything_ in the ID stack!

       for (int i = 0; i < 100; i++)
       {
         PushID(i);
         Button("Click");   // Label = "Click",  ID = top of id stack + hash of integer + hash of "Click"
         PopID();
       }

       for (int i = 0; i < 100; i++)
       {
         MyObject* obj = Objects[i];
         PushID(obj);
         Button("Click");   // Label = "Click",  ID = top of id stack + hash of pointer + hash of "Click"
         PopID();
       }

       for (int i = 0; i < 100; i++)
       {
         MyObject* obj = Objects[i];
         PushID(obj->Name);
         Button("Click");   // Label = "Click",  ID = top of id stack + hash of string + hash of "Click"
         PopID();
       }

   - More example showing that you can stack multiple prefixes into the ID stack:

       Button("Click");     // Label = "Click",  ID = top of id stack + hash of "Click"
       PushID("node");
       Button("Click");     // Label = "Click",  ID = top of id stack + hash of "node" + hash of "Click"
         PushID(my_ptr);
           Button("Click"); // Label = "Click",  ID = top of id stack + hash of "node" + hash of ptr + hash of "Click"
         PopID();
       PopID();

   - Tree nodes implicitly creates a scope for you by calling PushID().

       Button("Click");     // Label = "Click",  ID = top of id stack + hash of "Click"
       if (TreeNode("node"))
       {
         Button("Click");   // Label = "Click",  ID = top of id stack + hash of "node" + hash of "Click"
         TreePop();
       }

   - When working with trees, ID are used to preserve the open/close state of each tree node.
     Depending on your use cases you may want to use strings, indices or pointers as ID.
      e.g. when following a single pointer that may change over time, using a static string as ID
       will preserve your node open/closed state when the targeted object change.
      e.g. when displaying a list of objects, using indices or pointers as ID will preserve the 
       node open/closed state differently. See what makes more sense in your situation!

 Q: How can I load a different font than the default?
 A: Use the font atlas to load the TTF/OTF file you want:
      ImGuiIO& io = ImGui::GetIO();
      io.Fonts->AddFontFromFileTTF("myfontfile.ttf", size_in_pixels);
      io.Fonts->GetTexDataAsRGBA32() or GetTexDataAsAlpha8()
    (default is ProggyClean.ttf, rendered at size 13, embedded in dear imgui's source code)

    New programmers: remember that in C/C++ and most programming languages if you want to use a 
    backslash \ within a string literal, you need to write it double backslash "\\":
      io.Fonts->AddFontFromFileTTF("MyDataFolder\MyFontFile.ttf", size_in_pixels);   // WRONG (you are escape the M here!)
      io.Fonts->AddFontFromFileTTF("MyDataFolder\\MyFontFile.ttf", size_in_pixels);  // CORRECT
      io.Fonts->AddFontFromFileTTF("MyDataFolder/MyFontFile.ttf", size_in_pixels);   // ALSO CORRECT

 Q: How can I easily use icons in my application?
 A: The most convenient and practical way is to merge an icon font such as FontAwesome inside you
    main font. Then you can refer to icons within your strings. Read 'How can I load multiple fonts?' 
    and the file 'misc/fonts/README.txt' for instructions and useful header files.

 Q: How can I load multiple fonts?
 A: Use the font atlas to pack them into a single texture:
    (Read misc/fonts/README.txt and the code in ImFontAtlas for more details.)

      ImGuiIO& io = ImGui::GetIO();
      ImFont* font0 = io.Fonts->AddFontDefault();
      ImFont* font1 = io.Fonts->AddFontFromFileTTF("myfontfile.ttf", size_in_pixels);
      ImFont* font2 = io.Fonts->AddFontFromFileTTF("myfontfile2.ttf", size_in_pixels);
      io.Fonts->GetTexDataAsRGBA32() or GetTexDataAsAlpha8()
      // the first loaded font gets used by default
      // use ImGui::PushFont()/ImGui::PopFont() to change the font at runtime

      // Options
      ImFontConfig config;
      config.OversampleH = 3;
      config.OversampleV = 1;
      config.GlyphOffset.y -= 2.0f;      // Move everything by 2 pixels up
      config.GlyphExtraSpacing.x = 1.0f; // Increase spacing between characters
      io.Fonts->LoadFromFileTTF("myfontfile.ttf", size_pixels, &config);

      // Combine multiple fonts into one (e.g. for icon fonts)
      ImWchar ranges[] = { 0xf000, 0xf3ff, 0 };
      ImFontConfig config;
      config.MergeMode = true;
      io.Fonts->AddFontDefault();
      io.Fonts->LoadFromFileTTF("fontawesome-webfont.ttf", 16.0f, &config, ranges); // Merge icon font
      io.Fonts->LoadFromFileTTF("myfontfile.ttf", size_pixels, NULL, &config, io.Fonts->GetGlyphRangesJapanese()); // Merge japanese glyphs

 Q: How can I display and input non-Latin characters such as Chinese, Japanese, Korean, Cyrillic?
 A: When loading a font, pass custom Unicode ranges to specify the glyphs to load. 

      // Add default Japanese ranges
      io.Fonts->AddFontFromFileTTF("myfontfile.ttf", size_in_pixels, NULL, io.Fonts->GetGlyphRangesJapanese());
   
      // Or create your own custom ranges (e.g. for a game you can feed your entire game script and only build the characters the game need)
      ImVector<ImWchar> ranges;
      ImFontAtlas::GlyphRangesBuilder builder;
      builder.AddText("Hello world");                        // Add a string (here "Hello world" contains 7 unique characters)
      builder.AddChar(0x7262);                               // Add a specific character
      builder.AddRanges(io.Fonts->GetGlyphRangesJapanese()); // Add one of the default ranges
      builder.BuildRanges(&ranges);                          // Build the final result (ordered ranges with all the unique characters submitted)
      io.Fonts->AddFontFromFileTTF("myfontfile.ttf", size_in_pixels, NULL, ranges.Data);

    All your strings needs to use UTF-8 encoding. In C++11 you can encode a string literal in UTF-8 
    by using the u8"hello" syntax. Specifying literal in your source code using a local code page 
    (such as CP-923 for Japanese or CP-1251 for Cyrillic) will NOT work!
    Otherwise you can convert yourself to UTF-8 or load text data from file already saved as UTF-8.

    Text input: it is up to your application to pass the right character code by calling 
    io.AddInputCharacter(). The applications in examples/ are doing that. For languages relying 
    on an Input Method Editor (IME), on Windows you can copy the Hwnd of your application in the
    io.ImeWindowHandle field. The default implementation of io.ImeSetInputScreenPosFn() will set
    your Microsoft IME position correctly.

 Q: How can I use the drawing facilities without an ImGui window? (using ImDrawList API)
 A: - You can create a dummy window. Call SetNextWindowBgAlpha(0.0f), call Begin() with NoTitleBar|NoResize|NoMove|NoScrollbar|NoSavedSettings|NoInputs flags. 
      Then you can retrieve the ImDrawList* via GetWindowDrawList() and draw to it in any way you like.
    - You can call ImGui::GetOverlayDrawList() and use this draw list to display contents over every other imgui windows.
    - You can create your own ImDrawList instance. You'll need to initialize them ImGui::GetDrawListSharedData(), or create your own ImDrawListSharedData.

 Q: I integrated Dear ImGui in my engine and the text or lines are blurry..
 A: In your Render function, try translating your projection matrix by (0.5f,0.5f) or (0.375f,0.375f).
    Also make sure your orthographic projection matrix and io.DisplaySize matches your actual framebuffer dimension.

 Q: I integrated Dear ImGui in my engine and some elements are clipping or disappearing when I move windows around..
 A: You are probably mishandling the clipping rectangles in your render function. 
    Rectangles provided by ImGui are defined as (x1=left,y1=top,x2=right,y2=bottom) and NOT as (x1,y1,width,height).

 Q: How can I help?
 A: - If you are experienced with Dear ImGui and C++, look at the github issues, or TODO.txt and see how you want/can help!
    - Convince your company to fund development time! Individual users: you can also become a Patron (patreon.com/imgui) or donate on PayPal! See README.
    - Disclose your usage of dear imgui via a dev blog post, a tweet, a screenshot, a mention somewhere etc. 
      You may post screenshot or links in the gallery threads (github.com/ocornut/imgui/issues/1269). Visuals are ideal as they inspire other programmers.
      But even without visuals, disclosing your use of dear imgui help the library grow credibility, and help other teams and programmers with taking decisions.
    - If you have issues or if you need to hack into the library, even if you don't expect any support it is useful that you share your issues (on github or privately).

 - tip: you can call Begin() multiple times with the same name during the same frame, it will keep appending to the same window. 
        this is also useful to set yourself in the context of another window (to get/set other settings)
 - tip: you can create widgets without a Begin()/End() block, they will go in an implicit window called "Debug".
 - tip: the ImGuiOnceUponAFrame helper will allow run the block of code only once a frame. You can use it to quickly add custom UI in the middle
        of a deep nested inner loop in your code.
 - tip: you can call Render() multiple times (e.g for VR renders).
 - tip: call and read the ShowDemoWindow() code in imgui_demo.cpp for more example of how to use ImGui!

*/

#if defined(_MSC_VER) && !defined(_CRT_SECURE_NO_WARNINGS)
#define _CRT_SECURE_NO_WARNINGS
#endif

#include "imgui.h"
#define IMGUI_DEFINE_MATH_OPERATORS
#include "imgui_internal.h"

#include <ctype.h>      // toupper, isprint
#include <stdlib.h>     // NULL, malloc, free, qsort, atoi
#include <stdio.h>      // vsnprintf, sscanf, printf
#if defined(_MSC_VER) && _MSC_VER <= 1500 // MSVC 2008 or earlier
#include <stddef.h>     // intptr_t
#else
#include <stdint.h>     // intptr_t
#endif

#define IMGUI_DEBUG_NAV_SCORING     0
#define IMGUI_DEBUG_NAV_RECTS       0

// Visual Studio warnings
#ifdef _MSC_VER
#pragma warning (disable: 4127) // condition expression is constant
#pragma warning (disable: 4505) // unreferenced local function has been removed (stb stuff)
#pragma warning (disable: 4996) // 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen
#endif

// Clang warnings with -Weverything
#ifdef __clang__
#pragma clang diagnostic ignored "-Wunknown-pragmas"        // warning : unknown warning group '-Wformat-pedantic *'        // not all warnings are known by all clang versions.. so ignoring warnings triggers new warnings on some configuration. great!
#pragma clang diagnostic ignored "-Wold-style-cast"         // warning : use of old-style cast                              // yes, they are more terse.
#pragma clang diagnostic ignored "-Wfloat-equal"            // warning : comparing floating point with == or != is unsafe   // storing and comparing against same constants (typically 0.0f) is ok.
#pragma clang diagnostic ignored "-Wformat-nonliteral"      // warning : format string is not a string literal              // passing non-literal to vsnformat(). yes, user passing incorrect format strings can crash the code.
#pragma clang diagnostic ignored "-Wexit-time-destructors"  // warning : declaration requires an exit-time destructor       // exit-time destruction order is undefined. if MemFree() leads to users code that has been disabled before exit it might cause problems. ImGui coding style welcomes static/globals.
#pragma clang diagnostic ignored "-Wglobal-constructors"    // warning : declaration requires a global destructor           // similar to above, not sure what the exact difference it.
#pragma clang diagnostic ignored "-Wsign-conversion"        // warning : implicit conversion changes signedness             //
#pragma clang diagnostic ignored "-Wformat-pedantic"        // warning : format specifies type 'void *' but the argument has type 'xxxx *' // unreasonable, would lead to casting every %p arg to void*. probably enabled by -pedantic. 
#pragma clang diagnostic ignored "-Wint-to-void-pointer-cast" // warning : cast to 'void *' from smaller integer type 'int'
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-function"          // warning: 'xxxx' defined but not used
#pragma GCC diagnostic ignored "-Wint-to-pointer-cast"      // warning: cast to pointer from integer of different size
#pragma GCC diagnostic ignored "-Wformat"                   // warning: format '%p' expects argument of type 'void*', but argument 6 has type 'ImGuiWindow*'
#pragma GCC diagnostic ignored "-Wdouble-promotion"         // warning: implicit conversion from 'float' to 'double' when passing argument to function
#pragma GCC diagnostic ignored "-Wconversion"               // warning: conversion to 'xxxx' from 'xxxx' may alter its value
#pragma GCC diagnostic ignored "-Wformat-nonliteral"        // warning: format not a string literal, format string not checked
#pragma GCC diagnostic ignored "-Wstrict-overflow"          // warning: assuming signed overflow does not occur when assuming that (X - c) > X is always false
#endif

// Enforce cdecl calling convention for functions called by the standard library, in case compilation settings changed the default to e.g. __vectorcall
#ifdef _MSC_VER
#define IMGUI_CDECL __cdecl
#else
#define IMGUI_CDECL
#endif

//-------------------------------------------------------------------------
// Forward Declarations
//-------------------------------------------------------------------------

static bool             IsKeyPressedMap(ImGuiKey key, bool repeat = true);

static ImFont*          GetDefaultFont();
static void             SetCurrentWindow(ImGuiWindow* window);
static void             SetWindowScrollX(ImGuiWindow* window, float new_scroll_x);
static void             SetWindowScrollY(ImGuiWindow* window, float new_scroll_y);
static void             SetWindowPos(ImGuiWindow* window, const ImVec2& pos, ImGuiCond cond);
static void             SetWindowSize(ImGuiWindow* window, const ImVec2& size, ImGuiCond cond);
static void             SetWindowCollapsed(ImGuiWindow* window, bool collapsed, ImGuiCond cond);
static ImGuiWindow*     FindHoveredWindow();
static ImGuiWindow*     CreateNewWindow(const char* name, ImVec2 size, ImGuiWindowFlags flags);
static void             CheckStacksSize(ImGuiWindow* window, bool write);
static ImVec2           CalcNextScrollFromScrollTargetAndClamp(ImGuiWindow* window);

static void             AddDrawListToDrawData(ImVector<ImDrawList*>* out_list, ImDrawList* draw_list);
static void             AddWindowToDrawData(ImVector<ImDrawList*>* out_list, ImGuiWindow* window);
static void             AddWindowToSortedBuffer(ImVector<ImGuiWindow*>* out_sorted_windows, ImGuiWindow* window);

static ImGuiWindowSettings* AddWindowSettings(const char* name);

static void             LoadIniSettingsFromDisk(const char* ini_filename);
static void             LoadIniSettingsFromMemory(const char* buf);
static void             SaveIniSettingsToDisk(const char* ini_filename);
static void             SaveIniSettingsToMemory(ImVector<char>& out_buf);
static void             MarkIniSettingsDirty(ImGuiWindow* window);

static ImRect           GetViewportRect();

static void             ClosePopupToLevel(int remaining);
static ImGuiWindow*     GetFrontMostModalRootWindow();

static bool             InputTextFilterCharacter(unsigned int* p_char, ImGuiInputTextFlags flags, ImGuiTextEditCallback callback, void* user_data);
static int              InputTextCalcTextLenAndLineCount(const char* text_begin, const char** out_text_end);
static ImVec2           InputTextCalcTextSizeW(const ImWchar* text_begin, const ImWchar* text_end, const ImWchar** remaining = NULL, ImVec2* out_offset = NULL, bool stop_on_new_line = false);

static inline void      DataTypeFormatString(ImGuiDataType data_type, void* data_ptr, const char* display_format, char* buf, int buf_size);
static inline void      DataTypeFormatString(ImGuiDataType data_type, void* data_ptr, int decimal_precision, char* buf, int buf_size);
static void             DataTypeApplyOp(ImGuiDataType data_type, int op, void* output, void* arg_1, const void* arg_2);
static bool             DataTypeApplyOpFromText(const char* buf, const char* initial_value_buf, ImGuiDataType data_type, void* data_ptr, const char* scalar_format);

namespace ImGui
{
static void             NavUpdate();
static void             NavUpdateWindowing();
static void             NavProcessItem(ImGuiWindow* window, const ImRect& nav_bb, const ImGuiID id);

static void             NewFrameUpdateMovingWindow();
static void             NewFrameUpdateMouseInputs();
static void             UpdateManualResize(ImGuiWindow* window, const ImVec2& size_auto_fit, int* border_held, int resize_grip_count, ImU32 resize_grip_col[4]);
static void             FocusFrontMostActiveWindow(ImGuiWindow* ignore_window);
}

//-----------------------------------------------------------------------------
// Platform dependent default implementations
//-----------------------------------------------------------------------------

static const char*      GetClipboardTextFn_DefaultImpl(void* user_data);
static void             SetClipboardTextFn_DefaultImpl(void* user_data, const char* text);
static void             ImeSetInputScreenPosFn_DefaultImpl(int x, int y);

//-----------------------------------------------------------------------------
// Context
//-----------------------------------------------------------------------------

// Current context pointer. Implicitely used by all ImGui functions. Always assumed to be != NULL. 
// CreateContext() will automatically set this pointer if it is NULL. Change to a different context by calling ImGui::SetCurrentContext(). 
// If you use DLL hotreloading you might need to call SetCurrentContext() after reloading code from this file. 
// ImGui functions are not thread-safe because of this pointer. If you want thread-safety to allow N threads to access N different contexts, you can:
// - Change this variable to use thread local storage. You may #define GImGui in imconfig.h for that purpose. Future development aim to make this context pointer explicit to all calls. Also read https://github.com/ocornut/imgui/issues/586
// - Having multiple instances of the ImGui code compiled inside different namespace (easiest/safest, if you have a finite number of contexts)
#ifndef GImGui
ImGuiContext*   GImGui = NULL;
#endif

// Memory Allocator functions. Use SetAllocatorFunctions() to change them.
// If you use DLL hotreloading you might need to call SetAllocatorFunctions() after reloading code from this file. 
// Otherwise, you probably don't want to modify them mid-program, and if you use global/static e.g. ImVector<> instances you may need to keep them accessible during program destruction.
#ifndef IMGUI_DISABLE_DEFAULT_ALLOCATORS
static void*   MallocWrapper(size_t size, void* user_data)    { (void)user_data; return malloc(size); }
static void    FreeWrapper(void* ptr, void* user_data)        { (void)user_data; free(ptr); }
#else
static void*   MallocWrapper(size_t size, void* user_data)    { (void)user_data; (void)size; IM_ASSERT(0); return NULL; }
static void    FreeWrapper(void* ptr, void* user_data)        { (void)user_data; (void)ptr; IM_ASSERT(0); }
#endif

static void*  (*GImAllocatorAllocFunc)(size_t size, void* user_data) = MallocWrapper;
static void   (*GImAllocatorFreeFunc)(void* ptr, void* user_data) = FreeWrapper;
static void*    GImAllocatorUserData = NULL;
static size_t   GImAllocatorActiveAllocationsCount = 0;

//-----------------------------------------------------------------------------
// User facing structures
//-----------------------------------------------------------------------------

ImGuiStyle::ImGuiStyle()
{
    Alpha                   = 1.0f;             // Global alpha applies to everything in ImGui
    WindowPadding           = ImVec2(8,8);      // Padding within a window
    WindowRounding          = 7.0f;             // Radius of window corners rounding. Set to 0.0f to have rectangular windows
    WindowBorderSize        = 1.0f;             // Thickness of border around windows. Generally set to 0.0f or 1.0f. Other values not well tested.
    WindowMinSize           = ImVec2(32,32);    // Minimum window size
    WindowTitleAlign        = ImVec2(0.0f,0.5f);// Alignment for title bar text
    ChildRounding           = 0.0f;             // Radius of child window corners rounding. Set to 0.0f to have rectangular child windows
    ChildBorderSize         = 1.0f;             // Thickness of border around child windows. Generally set to 0.0f or 1.0f. Other values not well tested.
    PopupRounding           = 0.0f;             // Radius of popup window corners rounding. Set to 0.0f to have rectangular child windows
    PopupBorderSize         = 1.0f;             // Thickness of border around popup or tooltip windows. Generally set to 0.0f or 1.0f. Other values not well tested.
    FramePadding            = ImVec2(4,3);      // Padding within a framed rectangle (used by most widgets)
    FrameRounding           = 0.0f;             // Radius of frame corners rounding. Set to 0.0f to have rectangular frames (used by most widgets).
    FrameBorderSize         = 0.0f;             // Thickness of border around frames. Generally set to 0.0f or 1.0f. Other values not well tested.
    ItemSpacing             = ImVec2(8,4);      // Horizontal and vertical spacing between widgets/lines
    ItemInnerSpacing        = ImVec2(4,4);      // Horizontal and vertical spacing between within elements of a composed widget (e.g. a slider and its label)
    TouchExtraPadding       = ImVec2(0,0);      // Expand reactive bounding box for touch-based system where touch position is not accurate enough. Unfortunately we don't sort widgets so priority on overlap will always be given to the first widget. So don't grow this too much!
    IndentSpacing           = 21.0f;            // Horizontal spacing when e.g. entering a tree node. Generally == (FontSize + FramePadding.x*2).
    ColumnsMinSpacing       = 6.0f;             // Minimum horizontal spacing between two columns
    ScrollbarSize           = 16.0f;            // Width of the vertical scrollbar, Height of the horizontal scrollbar
    ScrollbarRounding       = 9.0f;             // Radius of grab corners rounding for scrollbar
    GrabMinSize             = 10.0f;            // Minimum width/height of a grab box for slider/scrollbar
    GrabRounding            = 0.0f;             // Radius of grabs corners rounding. Set to 0.0f to have rectangular slider grabs.
    ButtonTextAlign         = ImVec2(0.5f,0.5f);// Alignment of button text when button is larger than text.
    DisplayWindowPadding    = ImVec2(22,22);    // Window positions are clamped to be visible within the display area by at least this amount. Only covers regular windows.
    DisplaySafeAreaPadding  = ImVec2(4,4);      // If you cannot see the edge of your screen (e.g. on a TV) increase the safe area padding. Covers popups/tooltips as well regular windows.
    MouseCursorScale        = 1.0f;             // Scale software rendered mouse cursor (when io.MouseDrawCursor is enabled). May be removed later.
    AntiAliasedLines        = true;             // Enable anti-aliasing on lines/borders. Disable if you are really short on CPU/GPU.
    AntiAliasedFill         = true;             // Enable anti-aliasing on filled shapes (rounded rectangles, circles, etc.)
    CurveTessellationTol    = 1.25f;            // Tessellation tolerance when using PathBezierCurveTo() without a specific number of segments. Decrease for highly tessellated curves (higher quality, more polygons), increase to reduce quality.

    // Default theme
    ImGui::StyleColorsDark(this);
}

// To scale your entire UI (e.g. if you want your app to use High DPI or generally be DPI aware) you may use this helper function. Scaling the fonts is done separately and is up to you.
// Important: This operation is lossy because we round all sizes to integer. If you need to change your scale multiples, call this over a freshly initialized ImGuiStyle structure rather than scaling multiple times.
void ImGuiStyle::ScaleAllSizes(float scale_factor)
{
    WindowPadding = ImFloor(WindowPadding * scale_factor);
    WindowRounding = ImFloor(WindowRounding * scale_factor);
    WindowMinSize = ImFloor(WindowMinSize * scale_factor);
    ChildRounding = ImFloor(ChildRounding * scale_factor);
    PopupRounding = ImFloor(PopupRounding * scale_factor);
    FramePadding = ImFloor(FramePadding * scale_factor);
    FrameRounding = ImFloor(FrameRounding * scale_factor);
    ItemSpacing = ImFloor(ItemSpacing * scale_factor);
    ItemInnerSpacing = ImFloor(ItemInnerSpacing * scale_factor);
    TouchExtraPadding = ImFloor(TouchExtraPadding * scale_factor);
    IndentSpacing = ImFloor(IndentSpacing * scale_factor);
    ColumnsMinSpacing = ImFloor(ColumnsMinSpacing * scale_factor);
    ScrollbarSize = ImFloor(ScrollbarSize * scale_factor);
    ScrollbarRounding = ImFloor(ScrollbarRounding * scale_factor);
    GrabMinSize = ImFloor(GrabMinSize * scale_factor);
    GrabRounding = ImFloor(GrabRounding * scale_factor);
    DisplayWindowPadding = ImFloor(DisplayWindowPadding * scale_factor);
    DisplaySafeAreaPadding = ImFloor(DisplaySafeAreaPadding * scale_factor);
    MouseCursorScale = ImFloor(MouseCursorScale * scale_factor);
}

ImGuiIO::ImGuiIO()
{
    // Most fields are initialized with zero
    memset(this, 0, sizeof(*this));

    // Settings
    ConfigFlags = 0x00;
    BackendFlags = 0x00;
    DisplaySize = ImVec2(-1.0f, -1.0f);
    DeltaTime = 1.0f/60.0f;
    IniSavingRate = 5.0f;
    IniFilename = "imgui.ini";
    LogFilename = "imgui_log.txt";
    MouseDoubleClickTime = 0.30f;
    MouseDoubleClickMaxDist = 6.0f;
    for (int i = 0; i < ImGuiKey_COUNT; i++)
        KeyMap[i] = -1;
    KeyRepeatDelay = 0.250f;
    KeyRepeatRate = 0.050f;
    UserData = NULL;

    Fonts = NULL;
    FontGlobalScale = 1.0f;
    FontDefault = NULL;
    FontAllowUserScaling = false;
    DisplayFramebufferScale = ImVec2(1.0f, 1.0f);
    DisplayVisibleMin = DisplayVisibleMax = ImVec2(0.0f, 0.0f);

    // Advanced/subtle behaviors
#ifdef __APPLE__
    OptMacOSXBehaviors = true;  // Set Mac OS X style defaults based on __APPLE__ compile time flag
#else
    OptMacOSXBehaviors = false;
#endif
    OptCursorBlink = true;

    // Settings (User Functions)
    GetClipboardTextFn = GetClipboardTextFn_DefaultImpl;   // Platform dependent default implementations
    SetClipboardTextFn = SetClipboardTextFn_DefaultImpl;
    ClipboardUserData = NULL;
    ImeSetInputScreenPosFn = ImeSetInputScreenPosFn_DefaultImpl;
    ImeWindowHandle = NULL;

#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    RenderDrawListsFn = NULL;
#endif

    // Input (NB: we already have memset zero the entire structure)
    MousePos = ImVec2(-FLT_MAX, -FLT_MAX);
    MousePosPrev = ImVec2(-FLT_MAX, -FLT_MAX);
    MouseDragThreshold = 6.0f;
    for (int i = 0; i < IM_ARRAYSIZE(MouseDownDuration); i++) MouseDownDuration[i] = MouseDownDurationPrev[i] = -1.0f;
    for (int i = 0; i < IM_ARRAYSIZE(KeysDownDuration); i++) KeysDownDuration[i]  = KeysDownDurationPrev[i] = -1.0f;
    for (int i = 0; i < IM_ARRAYSIZE(NavInputsDownDuration); i++) NavInputsDownDuration[i] = -1.0f;
}

// Pass in translated ASCII characters for text input.
// - with glfw you can get those from the callback set in glfwSetCharCallback()
// - on Windows you can get those using ToAscii+keyboard state, or via the WM_CHAR message
void ImGuiIO::AddInputCharacter(ImWchar c)
{
    const int n = ImStrlenW(InputCharacters);
    if (n + 1 < IM_ARRAYSIZE(InputCharacters))
    {
        InputCharacters[n] = c;
        InputCharacters[n+1] = '\0';
    }
}

void ImGuiIO::AddInputCharactersUTF8(const char* utf8_chars)
{
    // We can't pass more wchars than ImGuiIO::InputCharacters[] can hold so don't convert more
    const int wchars_buf_len = sizeof(ImGuiIO::InputCharacters) / sizeof(ImWchar);
    ImWchar wchars[wchars_buf_len];
    ImTextStrFromUtf8(wchars, wchars_buf_len, utf8_chars, NULL);
    for (int i = 0; i < wchars_buf_len && wchars[i] != 0; i++)
        AddInputCharacter(wchars[i]);
}

//-----------------------------------------------------------------------------
// HELPERS
//-----------------------------------------------------------------------------

#define IM_F32_TO_INT8_UNBOUND(_VAL)    ((int)((_VAL) * 255.0f + ((_VAL)>=0 ? 0.5f : -0.5f)))   // Unsaturated, for display purpose 
#define IM_F32_TO_INT8_SAT(_VAL)        ((int)(ImSaturate(_VAL) * 255.0f + 0.5f))               // Saturated, always output 0..255

ImVec2 ImLineClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& p)
{
    ImVec2 ap = p - a;
    ImVec2 ab_dir = b - a;
    float dot = ap.x * ab_dir.x + ap.y * ab_dir.y;
    if (dot < 0.0f)
        return a;
    float ab_len_sqr = ab_dir.x * ab_dir.x + ab_dir.y * ab_dir.y;
    if (dot > ab_len_sqr)
        return b;
    return a + ab_dir * dot / ab_len_sqr;
}

bool ImTriangleContainsPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p)
{
    bool b1 = ((p.x - b.x) * (a.y - b.y) - (p.y - b.y) * (a.x - b.x)) < 0.0f;
    bool b2 = ((p.x - c.x) * (b.y - c.y) - (p.y - c.y) * (b.x - c.x)) < 0.0f;
    bool b3 = ((p.x - a.x) * (c.y - a.y) - (p.y - a.y) * (c.x - a.x)) < 0.0f;
    return ((b1 == b2) && (b2 == b3));
}

void ImTriangleBarycentricCoords(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p, float& out_u, float& out_v, float& out_w)
{
    ImVec2 v0 = b - a;
    ImVec2 v1 = c - a;
    ImVec2 v2 = p - a;
    const float denom = v0.x * v1.y - v1.x * v0.y;
    out_v = (v2.x * v1.y - v1.x * v2.y) / denom;
    out_w = (v0.x * v2.y - v2.x * v0.y) / denom;
    out_u = 1.0f - out_v - out_w;
}

ImVec2 ImTriangleClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p)
{
    ImVec2 proj_ab = ImLineClosestPoint(a, b, p);
    ImVec2 proj_bc = ImLineClosestPoint(b, c, p);
    ImVec2 proj_ca = ImLineClosestPoint(c, a, p);
    float dist2_ab = ImLengthSqr(p - proj_ab);
    float dist2_bc = ImLengthSqr(p - proj_bc);
    float dist2_ca = ImLengthSqr(p - proj_ca);
    float m = ImMin(dist2_ab, ImMin(dist2_bc, dist2_ca));
    if (m == dist2_ab)
        return proj_ab;
    if (m == dist2_bc)
        return proj_bc;
    return proj_ca;
}

int ImStricmp(const char* str1, const char* str2)
{
    int d;
    while ((d = toupper(*str2) - toupper(*str1)) == 0 && *str1) { str1++; str2++; }
    return d;
}

int ImStrnicmp(const char* str1, const char* str2, size_t count)
{
    int d = 0;
    while (count > 0 && (d = toupper(*str2) - toupper(*str1)) == 0 && *str1) { str1++; str2++; count--; }
    return d;
}

void ImStrncpy(char* dst, const char* src, size_t count)
{
    if (count < 1) return;
    strncpy(dst, src, count);
    dst[count-1] = 0;
}

char* ImStrdup(const char *str)
{
    size_t len = strlen(str) + 1;
    void* buf = ImGui::MemAlloc(len);
    return (char*)memcpy(buf, (const void*)str, len);
}

const char* ImStrchrRange(const char* str, const char* str_end, char c)
{
    for ( ; str < str_end; str++)
        if (*str == c) 
            return str; 
    return NULL;
}

int ImStrlenW(const ImWchar* str)
{
    int n = 0;
    while (*str++) n++;
    return n;
}

const ImWchar* ImStrbolW(const ImWchar* buf_mid_line, const ImWchar* buf_begin) // find beginning-of-line
{
    while (buf_mid_line > buf_begin && buf_mid_line[-1] != '\n')
        buf_mid_line--;
    return buf_mid_line;
}

const char* ImStristr(const char* haystack, const char* haystack_end, const char* needle, const char* needle_end)
{
    if (!needle_end)
        needle_end = needle + strlen(needle);

    const char un0 = (char)toupper(*needle);
    while ((!haystack_end && *haystack) || (haystack_end && haystack < haystack_end))
    {
        if (toupper(*haystack) == un0)
        {
            const char* b = needle + 1;
            for (const char* a = haystack + 1; b < needle_end; a++, b++)
                if (toupper(*a) != toupper(*b))
                    break;
            if (b == needle_end)
                return haystack;
        }
        haystack++;
    }
    return NULL;
}

static const char* ImAtoi(const char* src, int* output)
{
    int negative = 0;
    if (*src == '-') { negative = 1; src++; }
    if (*src == '+') { src++; }
    int v = 0;
    while (*src >= '0' && *src <= '9')
        v = (v * 10) + (*src++ - '0');
    *output = negative ? -v : v;
    return src;
}

// A) MSVC version appears to return -1 on overflow, whereas glibc appears to return total count (which may be >= buf_size). 
// Ideally we would test for only one of those limits at runtime depending on the behavior the vsnprintf(), but trying to deduct it at compile time sounds like a pandora can of worm.
// B) When buf==NULL vsnprintf() will return the output size.
#ifndef IMGUI_DISABLE_FORMAT_STRING_FUNCTIONS
int ImFormatString(char* buf, size_t buf_size, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    int w = vsnprintf(buf, buf_size, fmt, args);
    va_end(args);
    if (buf == NULL)
        return w;
    if (w == -1 || w >= (int)buf_size)
        w = (int)buf_size - 1;
    buf[w] = 0;
    return w;
}

int ImFormatStringV(char* buf, size_t buf_size, const char* fmt, va_list args)
{
    int w = vsnprintf(buf, buf_size, fmt, args);
    if (buf == NULL)
        return w;
    if (w == -1 || w >= (int)buf_size)
        w = (int)buf_size - 1;
    buf[w] = 0;
    return w;
}
#endif // #ifdef IMGUI_DISABLE_FORMAT_STRING_FUNCTIONS

// Pass data_size==0 for zero-terminated strings
// FIXME-OPT: Replace with e.g. FNV1a hash? CRC32 pretty much randomly access 1KB. Need to do proper measurements.
ImU32 ImHash(const void* data, int data_size, ImU32 seed)
{
    static ImU32 crc32_lut[256] = { 0 };
    if (!crc32_lut[1])
    {
        const ImU32 polynomial = 0xEDB88320;
        for (ImU32 i = 0; i < 256; i++)
        {
            ImU32 crc = i;
            for (ImU32 j = 0; j < 8; j++)
                crc = (crc >> 1) ^ (ImU32(-int(crc & 1)) & polynomial);
            crc32_lut[i] = crc;
        }
    }

    seed = ~seed;
    ImU32 crc = seed;
    const unsigned char* current = (const unsigned char*)data;

    if (data_size > 0)
    {
        // Known size
        while (data_size--)
            crc = (crc >> 8) ^ crc32_lut[(crc & 0xFF) ^ *current++];
    }
    else
    {
        // Zero-terminated string
        while (unsigned char c = *current++)
        {
            // We support a syntax of "label###id" where only "###id" is included in the hash, and only "label" gets displayed.
            // Because this syntax is rarely used we are optimizing for the common case.
            // - If we reach ### in the string we discard the hash so far and reset to the seed.
            // - We don't do 'current += 2; continue;' after handling ### to keep the code smaller.
            if (c == '#' && current[0] == '#' && current[1] == '#')
                crc = seed;
            crc = (crc >> 8) ^ crc32_lut[(crc & 0xFF) ^ c];
        }
    }
    return ~crc;
}

//-----------------------------------------------------------------------------
// ImText* helpers
//-----------------------------------------------------------------------------

// Convert UTF-8 to 32-bits character, process single character input.
// Based on stb_from_utf8() from github.com/nothings/stb/
// We handle UTF-8 decoding error by skipping forward.
int ImTextCharFromUtf8(unsigned int* out_char, const char* in_text, const char* in_text_end)
{
    unsigned int c = (unsigned int)-1;
    const unsigned char* str = (const unsigned char*)in_text;
    if (!(*str & 0x80))
    {
        c = (unsigned int)(*str++);
        *out_char = c;
        return 1;
    }
    if ((*str & 0xe0) == 0xc0)
    {
        *out_char = 0xFFFD; // will be invalid but not end of string
        if (in_text_end && in_text_end - (const char*)str < 2) return 1;
        if (*str < 0xc2) return 2;
        c = (unsigned int)((*str++ & 0x1f) << 6);
        if ((*str & 0xc0) != 0x80) return 2;
        c += (*str++ & 0x3f);
        *out_char = c;
        return 2;
    }
    if ((*str & 0xf0) == 0xe0)
    {
        *out_char = 0xFFFD; // will be invalid but not end of string
        if (in_text_end && in_text_end - (const char*)str < 3) return 1;
        if (*str == 0xe0 && (str[1] < 0xa0 || str[1] > 0xbf)) return 3;
        if (*str == 0xed && str[1] > 0x9f) return 3; // str[1] < 0x80 is checked below
        c = (unsigned int)((*str++ & 0x0f) << 12);
        if ((*str & 0xc0) != 0x80) return 3;
        c += (unsigned int)((*str++ & 0x3f) << 6);
        if ((*str & 0xc0) != 0x80) return 3;
        c += (*str++ & 0x3f);
        *out_char = c;
        return 3;
    }
    if ((*str & 0xf8) == 0xf0)
    {
        *out_char = 0xFFFD; // will be invalid but not end of string
        if (in_text_end && in_text_end - (const char*)str < 4) return 1;
        if (*str > 0xf4) return 4;
        if (*str == 0xf0 && (str[1] < 0x90 || str[1] > 0xbf)) return 4;
        if (*str == 0xf4 && str[1] > 0x8f) return 4; // str[1] < 0x80 is checked below
        c = (unsigned int)((*str++ & 0x07) << 18);
        if ((*str & 0xc0) != 0x80) return 4;
        c += (unsigned int)((*str++ & 0x3f) << 12);
        if ((*str & 0xc0) != 0x80) return 4;
        c += (unsigned int)((*str++ & 0x3f) << 6);
        if ((*str & 0xc0) != 0x80) return 4;
        c += (*str++ & 0x3f);
        // utf-8 encodings of values used in surrogate pairs are invalid
        if ((c & 0xFFFFF800) == 0xD800) return 4;
        *out_char = c;
        return 4;
    }
    *out_char = 0;
    return 0;
}

int ImTextStrFromUtf8(ImWchar* buf, int buf_size, const char* in_text, const char* in_text_end, const char** in_text_remaining)
{
    ImWchar* buf_out = buf;
    ImWchar* buf_end = buf + buf_size;
    while (buf_out < buf_end-1 && (!in_text_end || in_text < in_text_end) && *in_text)
    {
        unsigned int c;
        in_text += ImTextCharFromUtf8(&c, in_text, in_text_end);
        if (c == 0)
            break;
        if (c < 0x10000)    // FIXME: Losing characters that don't fit in 2 bytes
            *buf_out++ = (ImWchar)c;
    }
    *buf_out = 0;
    if (in_text_remaining)
        *in_text_remaining = in_text;
    return (int)(buf_out - buf);
}

int ImTextCountCharsFromUtf8(const char* in_text, const char* in_text_end)
{
    int char_count = 0;
    while ((!in_text_end || in_text < in_text_end) && *in_text)
    {
        unsigned int c;
        in_text += ImTextCharFromUtf8(&c, in_text, in_text_end);
        if (c == 0)
            break;
        if (c < 0x10000)
            char_count++;
    }
    return char_count;
}

// Based on stb_to_utf8() from github.com/nothings/stb/
static inline int ImTextCharToUtf8(char* buf, int buf_size, unsigned int c)
{
    if (c < 0x80)
    {
        buf[0] = (char)c;
        return 1;
    }
    if (c < 0x800)
    {
        if (buf_size < 2) return 0;
        buf[0] = (char)(0xc0 + (c >> 6));
        buf[1] = (char)(0x80 + (c & 0x3f));
        return 2;
    }
    if (c >= 0xdc00 && c < 0xe000)
    {
        return 0;
    }
    if (c >= 0xd800 && c < 0xdc00)
    {
        if (buf_size < 4) return 0;
        buf[0] = (char)(0xf0 + (c >> 18));
        buf[1] = (char)(0x80 + ((c >> 12) & 0x3f));
        buf[2] = (char)(0x80 + ((c >> 6) & 0x3f));
        buf[3] = (char)(0x80 + ((c ) & 0x3f));
        return 4;
    }
    //else if (c < 0x10000)
    {
        if (buf_size < 3) return 0;
        buf[0] = (char)(0xe0 + (c >> 12));
        buf[1] = (char)(0x80 + ((c>> 6) & 0x3f));
        buf[2] = (char)(0x80 + ((c ) & 0x3f));
        return 3;
    }
}

static inline int ImTextCountUtf8BytesFromChar(unsigned int c)
{
    if (c < 0x80) return 1;
    if (c < 0x800) return 2;
    if (c >= 0xdc00 && c < 0xe000) return 0;
    if (c >= 0xd800 && c < 0xdc00) return 4;
    return 3;
}

int ImTextStrToUtf8(char* buf, int buf_size, const ImWchar* in_text, const ImWchar* in_text_end)
{
    char* buf_out = buf;
    const char* buf_end = buf + buf_size;
    while (buf_out < buf_end-1 && (!in_text_end || in_text < in_text_end) && *in_text)
    {
        unsigned int c = (unsigned int)(*in_text++);
        if (c < 0x80)
            *buf_out++ = (char)c;
        else
            buf_out += ImTextCharToUtf8(buf_out, (int)(buf_end-buf_out-1), c);
    }
    *buf_out = 0;
    return (int)(buf_out - buf);
}

int ImTextCountUtf8BytesFromStr(const ImWchar* in_text, const ImWchar* in_text_end)
{
    int bytes_count = 0;
    while ((!in_text_end || in_text < in_text_end) && *in_text)
    {
        unsigned int c = (unsigned int)(*in_text++);
        if (c < 0x80)
            bytes_count++;
        else
            bytes_count += ImTextCountUtf8BytesFromChar(c);
    }
    return bytes_count;
}

ImVec4 ImGui::ColorConvertU32ToFloat4(ImU32 in)
{
    float s = 1.0f/255.0f;
    return ImVec4(
        ((in >> IM_COL32_R_SHIFT) & 0xFF) * s,
        ((in >> IM_COL32_G_SHIFT) & 0xFF) * s,
        ((in >> IM_COL32_B_SHIFT) & 0xFF) * s,
        ((in >> IM_COL32_A_SHIFT) & 0xFF) * s);
}

ImU32 ImGui::ColorConvertFloat4ToU32(const ImVec4& in)
{
    ImU32 out;
    out  = ((ImU32)IM_F32_TO_INT8_SAT(in.x)) << IM_COL32_R_SHIFT;
    out |= ((ImU32)IM_F32_TO_INT8_SAT(in.y)) << IM_COL32_G_SHIFT;
    out |= ((ImU32)IM_F32_TO_INT8_SAT(in.z)) << IM_COL32_B_SHIFT;
    out |= ((ImU32)IM_F32_TO_INT8_SAT(in.w)) << IM_COL32_A_SHIFT;
    return out;
}

ImU32 ImGui::GetColorU32(ImGuiCol idx, float alpha_mul)  
{ 
    ImGuiStyle& style = GImGui->Style;
    ImVec4 c = style.Colors[idx]; 
    c.w *= style.Alpha * alpha_mul; 
    return ColorConvertFloat4ToU32(c); 
}

ImU32 ImGui::GetColorU32(const ImVec4& col)
{ 
    ImGuiStyle& style = GImGui->Style;
    ImVec4 c = col; 
    c.w *= style.Alpha; 
    return ColorConvertFloat4ToU32(c); 
}

const ImVec4& ImGui::GetStyleColorVec4(ImGuiCol idx)
{ 
    ImGuiStyle& style = GImGui->Style;
    return style.Colors[idx];
}

ImU32 ImGui::GetColorU32(ImU32 col)
{ 
    float style_alpha = GImGui->Style.Alpha;
    if (style_alpha >= 1.0f)
        return col;
    ImU32 a = (col & IM_COL32_A_MASK) >> IM_COL32_A_SHIFT;
    a = (ImU32)(a * style_alpha); // We don't need to clamp 0..255 because Style.Alpha is in 0..1 range.
    return (col & ~IM_COL32_A_MASK) | (a << IM_COL32_A_SHIFT);
}

// Convert rgb floats ([0-1],[0-1],[0-1]) to hsv floats ([0-1],[0-1],[0-1]), from Foley & van Dam p592
// Optimized http://lolengine.net/blog/2013/01/13/fast-rgb-to-hsv
void ImGui::ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& out_v)
{
    float K = 0.f;
    if (g < b)
    {
        ImSwap(g, b);
        K = -1.f;
    }
    if (r < g)
    {
        ImSwap(r, g);
        K = -2.f / 6.f - K;
    }

    const float chroma = r - (g < b ? g : b);
    out_h = fabsf(K + (g - b) / (6.f * chroma + 1e-20f));
    out_s = chroma / (r + 1e-20f);
    out_v = r;
}

// Convert hsv floats ([0-1],[0-1],[0-1]) to rgb floats ([0-1],[0-1],[0-1]), from Foley & van Dam p593
// also http://en.wikipedia.org/wiki/HSL_and_HSV
void ImGui::ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& out_b)
{
    if (s == 0.0f)
    {
        // gray
        out_r = out_g = out_b = v;
        return;
    }

    h = fmodf(h, 1.0f) / (60.0f/360.0f);
    int   i = (int)h;
    float f = h - (float)i;
    float p = v * (1.0f - s);
    float q = v * (1.0f - s * f);
    float t = v * (1.0f - s * (1.0f - f));

    switch (i)
    {
    case 0: out_r = v; out_g = t; out_b = p; break;
    case 1: out_r = q; out_g = v; out_b = p; break;
    case 2: out_r = p; out_g = v; out_b = t; break;
    case 3: out_r = p; out_g = q; out_b = v; break;
    case 4: out_r = t; out_g = p; out_b = v; break;
    case 5: default: out_r = v; out_g = p; out_b = q; break;
    }
}

FILE* ImFileOpen(const char* filename, const char* mode)
{
#if defined(_WIN32) && !defined(__CYGWIN__)
    // We need a fopen() wrapper because MSVC/Windows fopen doesn't handle UTF-8 filenames. Converting both strings from UTF-8 to wchar format (using a single allocation, because we can)
    const int filename_wsize = ImTextCountCharsFromUtf8(filename, NULL) + 1;
    const int mode_wsize = ImTextCountCharsFromUtf8(mode, NULL) + 1;
    ImVector<ImWchar> buf;
    buf.resize(filename_wsize + mode_wsize);
    ImTextStrFromUtf8(&buf[0], filename_wsize, filename, NULL);
    ImTextStrFromUtf8(&buf[filename_wsize], mode_wsize, mode, NULL);
    return _wfopen((wchar_t*)&buf[0], (wchar_t*)&buf[filename_wsize]);
#else
    return fopen(filename, mode);
#endif
}

// Load file content into memory
// Memory allocated with ImGui::MemAlloc(), must be freed by user using ImGui::MemFree()
void* ImFileLoadToMemory(const char* filename, const char* file_open_mode, int* out_file_size, int padding_bytes)
{
    IM_ASSERT(filename && file_open_mode);
    if (out_file_size)
        *out_file_size = 0;

    FILE* f;
    if ((f = ImFileOpen(filename, file_open_mode)) == NULL)
        return NULL;

    long file_size_signed;
    if (fseek(f, 0, SEEK_END) || (file_size_signed = ftell(f)) == -1 || fseek(f, 0, SEEK_SET))
    {
        fclose(f);
        return NULL;
    }

    int file_size = (int)file_size_signed;
    void* file_data = ImGui::MemAlloc((size_t)(file_size + padding_bytes));
    if (file_data == NULL)
    {
        fclose(f);
        return NULL;
    }
    if (fread(file_data, 1, (size_t)file_size, f) != (size_t)file_size)
    {
        fclose(f);
        ImGui::MemFree(file_data);
        return NULL;
    }
    if (padding_bytes > 0)
        memset((void *)(((char*)file_data) + file_size), 0, (size_t)padding_bytes);

    fclose(f);
    if (out_file_size)
        *out_file_size = file_size;

    return file_data;
}

//-----------------------------------------------------------------------------
// ImGuiStorage
// Helper: Key->value storage
//-----------------------------------------------------------------------------

// std::lower_bound but without the bullshit
static ImVector<ImGuiStorage::Pair>::iterator LowerBound(ImVector<ImGuiStorage::Pair>& data, ImGuiID key)
{
    ImVector<ImGuiStorage::Pair>::iterator first = data.begin();
    ImVector<ImGuiStorage::Pair>::iterator last = data.end();
    size_t count = (size_t)(last - first);
    while (count > 0)
    {
        size_t count2 = count >> 1;
        ImVector<ImGuiStorage::Pair>::iterator mid = first + count2;
        if (mid->key < key)
        {
            first = ++mid;
            count -= count2 + 1;
        }
        else
        {
            count = count2;
        }
    }
    return first;
}

// For quicker full rebuild of a storage (instead of an incremental one), you may add all your contents and then sort once.
void ImGuiStorage::BuildSortByKey()
{
    struct StaticFunc 
    { 
        static int IMGUI_CDECL PairCompareByID(const void* lhs, const void* rhs) 
        {
            // We can't just do a subtraction because qsort uses signed integers and subtracting our ID doesn't play well with that.
            if (((const Pair*)lhs)->key > ((const Pair*)rhs)->key) return +1;
            if (((const Pair*)lhs)->key < ((const Pair*)rhs)->key) return -1;
            return 0;
        }
    };
    if (Data.Size > 1)
        qsort(Data.Data, (size_t)Data.Size, sizeof(Pair), StaticFunc::PairCompareByID);
}

int ImGuiStorage::GetInt(ImGuiID key, int default_val) const
{
    ImVector<Pair>::iterator it = LowerBound(const_cast<ImVector<ImGuiStorage::Pair>&>(Data), key);
    if (it == Data.end() || it->key != key)
        return default_val;
    return it->val_i;
}

bool ImGuiStorage::GetBool(ImGuiID key, bool default_val) const
{
    return GetInt(key, default_val ? 1 : 0) != 0;
}

float ImGuiStorage::GetFloat(ImGuiID key, float default_val) const
{
    ImVector<Pair>::iterator it = LowerBound(const_cast<ImVector<ImGuiStorage::Pair>&>(Data), key);
    if (it == Data.end() || it->key != key)
        return default_val;
    return it->val_f;
}

void* ImGuiStorage::GetVoidPtr(ImGuiID key) const
{
    ImVector<Pair>::iterator it = LowerBound(const_cast<ImVector<ImGuiStorage::Pair>&>(Data), key);
    if (it == Data.end() || it->key != key)
        return NULL;
    return it->val_p;
}

// References are only valid until a new value is added to the storage. Calling a Set***() function or a Get***Ref() function invalidates the pointer.
int* ImGuiStorage::GetIntRef(ImGuiID key, int default_val)
{
    ImVector<Pair>::iterator it = LowerBound(Data, key);
    if (it == Data.end() || it->key != key)
        it = Data.insert(it, Pair(key, default_val));
    return &it->val_i;
}

bool* ImGuiStorage::GetBoolRef(ImGuiID key, bool default_val)
{
    return (bool*)GetIntRef(key, default_val ? 1 : 0);
}

float* ImGuiStorage::GetFloatRef(ImGuiID key, float default_val)
{
    ImVector<Pair>::iterator it = LowerBound(Data, key);
    if (it == Data.end() || it->key != key)
        it = Data.insert(it, Pair(key, default_val));
    return &it->val_f;
}

void** ImGuiStorage::GetVoidPtrRef(ImGuiID key, void* default_val)
{
    ImVector<Pair>::iterator it = LowerBound(Data, key);
    if (it == Data.end() || it->key != key)
        it = Data.insert(it, Pair(key, default_val));
    return &it->val_p;
}

// FIXME-OPT: Need a way to reuse the result of lower_bound when doing GetInt()/SetInt() - not too bad because it only happens on explicit interaction (maximum one a frame)
void ImGuiStorage::SetInt(ImGuiID key, int val)
{
    ImVector<Pair>::iterator it = LowerBound(Data, key);
    if (it == Data.end() || it->key != key)
    {
        Data.insert(it, Pair(key, val));
        return;
    }
    it->val_i = val;
}

void ImGuiStorage::SetBool(ImGuiID key, bool val)
{
    SetInt(key, val ? 1 : 0);
}

void ImGuiStorage::SetFloat(ImGuiID key, float val)
{
    ImVector<Pair>::iterator it = LowerBound(Data, key);
    if (it == Data.end() || it->key != key)
    {
        Data.insert(it, Pair(key, val));
        return;
    }
    it->val_f = val;
}

void ImGuiStorage::SetVoidPtr(ImGuiID key, void* val)
{
    ImVector<Pair>::iterator it = LowerBound(Data, key);
    if (it == Data.end() || it->key != key)
    {
        Data.insert(it, Pair(key, val));
        return;
    }
    it->val_p = val;
}

void ImGuiStorage::SetAllInt(int v)
{
    for (int i = 0; i < Data.Size; i++)
        Data[i].val_i = v;
}

//-----------------------------------------------------------------------------
// ImGuiTextFilter
//-----------------------------------------------------------------------------

// Helper: Parse and apply text filters. In format "aaaaa[,bbbb][,ccccc]"
ImGuiTextFilter::ImGuiTextFilter(const char* default_filter)
{
    if (default_filter)
    {
        ImStrncpy(InputBuf, default_filter, IM_ARRAYSIZE(InputBuf));
        Build();
    }
    else
    {
        InputBuf[0] = 0;
        CountGrep = 0;
    }
}

bool ImGuiTextFilter::Draw(const char* label, float width)
{
    if (width != 0.0f)
        ImGui::PushItemWidth(width);
    bool value_changed = ImGui::InputText(label, InputBuf, IM_ARRAYSIZE(InputBuf));
    if (width != 0.0f)
        ImGui::PopItemWidth();
    if (value_changed)
        Build();
    return value_changed;
}

void ImGuiTextFilter::TextRange::split(char separator, ImVector<TextRange>& out)
{
    out.resize(0);
    const char* wb = b;
    const char* we = wb;
    while (we < e)
    {
        if (*we == separator)
        {
            out.push_back(TextRange(wb, we));
            wb = we + 1;
        }
        we++;
    }
    if (wb != we)
        out.push_back(TextRange(wb, we));
}

void ImGuiTextFilter::Build()
{
    Filters.resize(0);
    TextRange input_range(InputBuf, InputBuf+strlen(InputBuf));
    input_range.split(',', Filters);

    CountGrep = 0;
    for (int i = 0; i != Filters.Size; i++)
    {
        Filters[i].trim_blanks();
        if (Filters[i].empty())
            continue;
        if (Filters[i].front() != '-')
            CountGrep += 1;
    }
}

bool ImGuiTextFilter::PassFilter(const char* text, const char* text_end) const
{
    if (Filters.empty())
        return true;

    if (text == NULL)
        text = "";

    for (int i = 0; i != Filters.Size; i++)
    {
        const TextRange& f = Filters[i];
        if (f.empty())
            continue;
        if (f.front() == '-')
        {
            // Subtract
            if (ImStristr(text, text_end, f.begin()+1, f.end()) != NULL)
                return false;
        }
        else
        {
            // Grep
            if (ImStristr(text, text_end, f.begin(), f.end()) != NULL)
                return true;
        }
    }

    // Implicit * grep
    if (CountGrep == 0)
        return true;

    return false;
}

//-----------------------------------------------------------------------------
// ImGuiTextBuffer
//-----------------------------------------------------------------------------

// On some platform vsnprintf() takes va_list by reference and modifies it.
// va_copy is the 'correct' way to copy a va_list but Visual Studio prior to 2013 doesn't have it.
#ifndef va_copy
#define va_copy(dest, src) (dest = src)
#endif

// Helper: Text buffer for logging/accumulating text
void ImGuiTextBuffer::appendfv(const char* fmt, va_list args)
{
    va_list args_copy;
    va_copy(args_copy, args);

    int len = ImFormatStringV(NULL, 0, fmt, args);         // FIXME-OPT: could do a first pass write attempt, likely successful on first pass.
    if (len <= 0)
        return;

    const int write_off = Buf.Size;
    const int needed_sz = write_off + len;
    if (write_off + len >= Buf.Capacity)
    {
        int double_capacity = Buf.Capacity * 2;
        Buf.reserve(needed_sz > double_capacity ? needed_sz : double_capacity);
    }

    Buf.resize(needed_sz);
    ImFormatStringV(&Buf[write_off - 1], (size_t)len + 1, fmt, args_copy);
}

void ImGuiTextBuffer::appendf(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    appendfv(fmt, args);
    va_end(args);
}

//-----------------------------------------------------------------------------
// ImGuiSimpleColumns (internal use only)
//-----------------------------------------------------------------------------

ImGuiMenuColumns::ImGuiMenuColumns()
{
    Count = 0;
    Spacing = Width = NextWidth = 0.0f;
    memset(Pos, 0, sizeof(Pos));
    memset(NextWidths, 0, sizeof(NextWidths));
}

void ImGuiMenuColumns::Update(int count, float spacing, bool clear)
{
    IM_ASSERT(Count <= IM_ARRAYSIZE(Pos));
    Count = count;
    Width = NextWidth = 0.0f;
    Spacing = spacing;
    if (clear) memset(NextWidths, 0, sizeof(NextWidths));
    for (int i = 0; i < Count; i++)
    {
        if (i > 0 && NextWidths[i] > 0.0f)
            Width += Spacing;
        Pos[i] = (float)(int)Width;
        Width += NextWidths[i];
        NextWidths[i] = 0.0f;
    }
}

float ImGuiMenuColumns::DeclColumns(float w0, float w1, float w2) // not using va_arg because they promote float to double
{
    NextWidth = 0.0f;
    NextWidths[0] = ImMax(NextWidths[0], w0);
    NextWidths[1] = ImMax(NextWidths[1], w1);
    NextWidths[2] = ImMax(NextWidths[2], w2);
    for (int i = 0; i < 3; i++)
        NextWidth += NextWidths[i] + ((i > 0 && NextWidths[i] > 0.0f) ? Spacing : 0.0f);
    return ImMax(Width, NextWidth);
}

float ImGuiMenuColumns::CalcExtraSpace(float avail_w)
{
    return ImMax(0.0f, avail_w - Width);
}

//-----------------------------------------------------------------------------
// ImGuiListClipper
//-----------------------------------------------------------------------------

static void SetCursorPosYAndSetupDummyPrevLine(float pos_y, float line_height)
{
    // Set cursor position and a few other things so that SetScrollHere() and Columns() can work when seeking cursor. 
    // FIXME: It is problematic that we have to do that here, because custom/equivalent end-user code would stumble on the same issue. 
    // The clipper should probably have a 4th step to display the last item in a regular manner.
    ImGui::SetCursorPosY(pos_y);
    ImGuiWindow* window = ImGui::GetCurrentWindow();
    window->DC.CursorPosPrevLine.y = window->DC.CursorPos.y - line_height;      // Setting those fields so that SetScrollHere() can properly function after the end of our clipper usage.
    window->DC.PrevLineHeight = (line_height - GImGui->Style.ItemSpacing.y);    // If we end up needing more accurate data (to e.g. use SameLine) we may as well make the clipper have a fourth step to let user process and display the last item in their list.
    if (window->DC.ColumnsSet)
        window->DC.ColumnsSet->LineMinY = window->DC.CursorPos.y;           // Setting this so that cell Y position are set properly
}

// Use case A: Begin() called from constructor with items_height<0, then called again from Sync() in StepNo 1
// Use case B: Begin() called from constructor with items_height>0
// FIXME-LEGACY: Ideally we should remove the Begin/End functions but they are part of the legacy API we still support. This is why some of the code in Step() calling Begin() and reassign some fields, spaghetti style.
void ImGuiListClipper::Begin(int count, float items_height)
{
    StartPosY = ImGui::GetCursorPosY();
    ItemsHeight = items_height;
    ItemsCount = count;
    StepNo = 0;
    DisplayEnd = DisplayStart = -1;
    if (ItemsHeight > 0.0f)
    {
        ImGui::CalcListClipping(ItemsCount, ItemsHeight, &DisplayStart, &DisplayEnd); // calculate how many to clip/display
        if (DisplayStart > 0)
            SetCursorPosYAndSetupDummyPrevLine(StartPosY + DisplayStart * ItemsHeight, ItemsHeight); // advance cursor
        StepNo = 2;
    }
}

void ImGuiListClipper::End()
{
    if (ItemsCount < 0)
        return;
    // In theory here we should assert that ImGui::GetCursorPosY() == StartPosY + DisplayEnd * ItemsHeight, but it feels saner to just seek at the end and not assert/crash the user.
    if (ItemsCount < INT_MAX)
        SetCursorPosYAndSetupDummyPrevLine(StartPosY + ItemsCount * ItemsHeight, ItemsHeight); // advance cursor
    ItemsCount = -1;
    StepNo = 3;
}

bool ImGuiListClipper::Step()
{
    if (ItemsCount == 0 || ImGui::GetCurrentWindowRead()->SkipItems)
    {
        ItemsCount = -1; 
        return false; 
    }
    if (StepNo == 0) // Step 0: the clipper let you process the first element, regardless of it being visible or not, so we can measure the element height.
    {
        DisplayStart = 0;
        DisplayEnd = 1;
        StartPosY = ImGui::GetCursorPosY();
        StepNo = 1;
        return true;
    }
    if (StepNo == 1) // Step 1: the clipper infer height from first element, calculate the actual range of elements to display, and position the cursor before the first element.
    {
        if (ItemsCount == 1) { ItemsCount = -1; return false; }
        float items_height = ImGui::GetCursorPosY() - StartPosY;
        IM_ASSERT(items_height > 0.0f);   // If this triggers, it means Item 0 hasn't moved the cursor vertically
        Begin(ItemsCount-1, items_height);
        DisplayStart++;
        DisplayEnd++;
        StepNo = 3;
        return true;
    }
    if (StepNo == 2) // Step 2: dummy step only required if an explicit items_height was passed to constructor or Begin() and user still call Step(). Does nothing and switch to Step 3.
    {
        IM_ASSERT(DisplayStart >= 0 && DisplayEnd >= 0);
        StepNo = 3;
        return true;
    }
    if (StepNo == 3) // Step 3: the clipper validate that we have reached the expected Y position (corresponding to element DisplayEnd), advance the cursor to the end of the list and then returns 'false' to end the loop.
        End();
    return false;
}

//-----------------------------------------------------------------------------
// ImGuiWindow
//-----------------------------------------------------------------------------

ImGuiWindow::ImGuiWindow(ImGuiContext* context, const char* name)
{
    Name = ImStrdup(name);
    ID = ImHash(name, 0);
    IDStack.push_back(ID);
    Flags = 0;
    PosFloat = Pos = ImVec2(0.0f, 0.0f);
    Size = SizeFull = ImVec2(0.0f, 0.0f);
    SizeContents = SizeContentsExplicit = ImVec2(0.0f, 0.0f);
    WindowPadding = ImVec2(0.0f, 0.0f);
    WindowRounding = 0.0f;
    WindowBorderSize = 0.0f;
    MoveId = GetID("#MOVE");
    ChildId = 0;
    Scroll = ImVec2(0.0f, 0.0f);
    ScrollTarget = ImVec2(FLT_MAX, FLT_MAX);
    ScrollTargetCenterRatio = ImVec2(0.5f, 0.5f);
    ScrollbarX = ScrollbarY = false;
    ScrollbarSizes = ImVec2(0.0f, 0.0f);
    Active = WasActive = false;
    WriteAccessed = false;
    Collapsed = false;
    CollapseToggleWanted = false;
    SkipItems = false;
    Appearing = false;
    CloseButton = false;
    BeginOrderWithinParent = -1;
    BeginOrderWithinContext = -1;
    BeginCount = 0;
    PopupId = 0;
    AutoFitFramesX = AutoFitFramesY = -1;
    AutoFitOnlyGrows = false;
    AutoFitChildAxises = 0x00;
    AutoPosLastDirection = ImGuiDir_None;
    HiddenFrames = 0;
    SetWindowPosAllowFlags = SetWindowSizeAllowFlags = SetWindowCollapsedAllowFlags = ImGuiCond_Always | ImGuiCond_Once | ImGuiCond_FirstUseEver | ImGuiCond_Appearing;
    SetWindowPosVal = SetWindowPosPivot = ImVec2(FLT_MAX, FLT_MAX);

    LastFrameActive = -1;
    ItemWidthDefault = 0.0f;
    FontWindowScale = 1.0f;

    DrawList = IM_NEW(ImDrawList)(&context->DrawListSharedData);
    DrawList->_OwnerName = Name;
    ParentWindow = NULL;
    RootWindow = NULL;
    RootWindowForTitleBarHighlight = NULL;
    RootWindowForTabbing = NULL;
    RootWindowForNav = NULL;

    NavLastIds[0] = NavLastIds[1] = 0;
    NavRectRel[0] = NavRectRel[1] = ImRect();
    NavLastChildNavWindow = NULL;

    FocusIdxAllCounter = FocusIdxTabCounter = -1;
    FocusIdxAllRequestCurrent = FocusIdxTabRequestCurrent = INT_MAX;
    FocusIdxAllRequestNext = FocusIdxTabRequestNext = INT_MAX;
}

ImGuiWindow::~ImGuiWindow()
{
    IM_DELETE(DrawList);
    IM_DELETE(Name);
    for (int i = 0; i != ColumnsStorage.Size; i++)
        ColumnsStorage[i].~ImGuiColumnsSet();
}

ImGuiID ImGuiWindow::GetID(const char* str, const char* str_end)
{
    ImGuiID seed = IDStack.back();
    ImGuiID id = ImHash(str, str_end ? (int)(str_end - str) : 0, seed);
    ImGui::KeepAliveID(id);
    return id;
}

ImGuiID ImGuiWindow::GetID(const void* ptr)
{
    ImGuiID seed = IDStack.back();
    ImGuiID id = ImHash(&ptr, sizeof(void*), seed);
    ImGui::KeepAliveID(id);
    return id;
}

ImGuiID ImGuiWindow::GetIDNoKeepAlive(const char* str, const char* str_end)
{
    ImGuiID seed = IDStack.back();
    return ImHash(str, str_end ? (int)(str_end - str) : 0, seed);
}

// This is only used in rare/specific situations to manufacture an ID out of nowhere.
ImGuiID ImGuiWindow::GetIDFromRectangle(const ImRect& r_abs)
{
    ImGuiID seed = IDStack.back();
    const int r_rel[4] = { (int)(r_abs.Min.x - Pos.x), (int)(r_abs.Min.y - Pos.y), (int)(r_abs.Max.x - Pos.x), (int)(r_abs.Max.y - Pos.y) };
    ImGuiID id = ImHash(&r_rel, sizeof(r_rel), seed);
    ImGui::KeepAliveID(id);
    return id;
}

//-----------------------------------------------------------------------------
// Internal API exposed in imgui_internal.h
//-----------------------------------------------------------------------------

static void SetCurrentWindow(ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;
    g.CurrentWindow = window;
    if (window)
        g.FontSize = g.DrawListSharedData.FontSize = window->CalcFontSize();
}

static void SetNavID(ImGuiID id, int nav_layer)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(g.NavWindow);
    IM_ASSERT(nav_layer == 0 || nav_layer == 1);
    g.NavId = id;
    g.NavWindow->NavLastIds[nav_layer] = id;
}

static void SetNavIDWithRectRel(ImGuiID id, int nav_layer, const ImRect& rect_rel)
{
    ImGuiContext& g = *GImGui;
    SetNavID(id, nav_layer);
    g.NavWindow->NavRectRel[nav_layer] = rect_rel;
    g.NavMousePosDirty = true;
    g.NavDisableHighlight = false;
    g.NavDisableMouseHover = true;
}

void ImGui::SetActiveID(ImGuiID id, ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;
    g.ActiveIdIsJustActivated = (g.ActiveId != id);
    if (g.ActiveIdIsJustActivated)
        g.ActiveIdTimer = 0.0f;
    g.ActiveId = id;
    g.ActiveIdAllowNavDirFlags = 0;
    g.ActiveIdAllowOverlap = false;
    g.ActiveIdWindow = window;
    if (id)
    {
        g.ActiveIdIsAlive = true;
        g.ActiveIdSource = (g.NavActivateId == id || g.NavInputId == id || g.NavJustTabbedId == id || g.NavJustMovedToId == id) ? ImGuiInputSource_Nav : ImGuiInputSource_Mouse;
    }
}

ImGuiID ImGui::GetActiveID()
{
    ImGuiContext& g = *GImGui;
    return g.ActiveId;
}

void ImGui::SetFocusID(ImGuiID id, ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(id != 0);

    // Assume that SetFocusID() is called in the context where its NavLayer is the current layer, which is the case everywhere we call it.
    const int nav_layer = window->DC.NavLayerCurrent;
    if (g.NavWindow != window)
        g.NavInitRequest = false;
    g.NavId = id;
    g.NavWindow = window;
    g.NavLayer = nav_layer;
    window->NavLastIds[nav_layer] = id;
    if (window->DC.LastItemId == id)
        window->NavRectRel[nav_layer] = ImRect(window->DC.LastItemRect.Min - window->Pos, window->DC.LastItemRect.Max - window->Pos);

    if (g.ActiveIdSource == ImGuiInputSource_Nav)
        g.NavDisableMouseHover = true;
    else
        g.NavDisableHighlight = true;
}

void ImGui::ClearActiveID()
{
    SetActiveID(0, NULL);
}

void ImGui::SetHoveredID(ImGuiID id)
{
    ImGuiContext& g = *GImGui;
    g.HoveredId = id;
    g.HoveredIdAllowOverlap = false;
    g.HoveredIdTimer = (id != 0 && g.HoveredIdPreviousFrame == id) ? (g.HoveredIdTimer + g.IO.DeltaTime) : 0.0f;
}

ImGuiID ImGui::GetHoveredID()
{
    ImGuiContext& g = *GImGui;
    return g.HoveredId ? g.HoveredId : g.HoveredIdPreviousFrame;
}

void ImGui::KeepAliveID(ImGuiID id)
{
    ImGuiContext& g = *GImGui;
    if (g.ActiveId == id)
        g.ActiveIdIsAlive = true;
}

static inline bool IsWindowContentHoverable(ImGuiWindow* window, ImGuiHoveredFlags flags)
{
    // An active popup disable hovering on other windows (apart from its own children)
    // FIXME-OPT: This could be cached/stored within the window.
    ImGuiContext& g = *GImGui;
    if (g.NavWindow)
        if (ImGuiWindow* focused_root_window = g.NavWindow->RootWindow)
            if (focused_root_window->WasActive && focused_root_window != window->RootWindow)
            {
                // For the purpose of those flags we differentiate "standard popup" from "modal popup"
                // NB: The order of those two tests is important because Modal windows are also Popups.
                if (focused_root_window->Flags & ImGuiWindowFlags_Modal)
                    return false;
                if ((focused_root_window->Flags & ImGuiWindowFlags_Popup) && !(flags & ImGuiHoveredFlags_AllowWhenBlockedByPopup))
                    return false;
            }

    return true;
}

// Advance cursor given item size for layout.
void ImGui::ItemSize(const ImVec2& size, float text_offset_y)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (window->SkipItems)
        return;

    // Always align ourselves on pixel boundaries
    const float line_height = ImMax(window->DC.CurrentLineHeight, size.y);
    const float text_base_offset = ImMax(window->DC.CurrentLineTextBaseOffset, text_offset_y);
    //if (g.IO.KeyAlt) window->DrawList->AddRect(window->DC.CursorPos, window->DC.CursorPos + ImVec2(size.x, line_height), IM_COL32(255,0,0,200)); // [DEBUG]
    window->DC.CursorPosPrevLine = ImVec2(window->DC.CursorPos.x + size.x, window->DC.CursorPos.y);
    window->DC.CursorPos = ImVec2((float)(int)(window->Pos.x + window->DC.IndentX + window->DC.ColumnsOffsetX), (float)(int)(window->DC.CursorPos.y + line_height + g.Style.ItemSpacing.y));
    window->DC.CursorMaxPos.x = ImMax(window->DC.CursorMaxPos.x, window->DC.CursorPosPrevLine.x);
    window->DC.CursorMaxPos.y = ImMax(window->DC.CursorMaxPos.y, window->DC.CursorPos.y - g.Style.ItemSpacing.y);
    //if (g.IO.KeyAlt) window->DrawList->AddCircle(window->DC.CursorMaxPos, 3.0f, IM_COL32(255,0,0,255), 4); // [DEBUG]

    window->DC.PrevLineHeight = line_height;
    window->DC.PrevLineTextBaseOffset = text_base_offset;
    window->DC.CurrentLineHeight = window->DC.CurrentLineTextBaseOffset = 0.0f;

    // Horizontal layout mode
    if (window->DC.LayoutType == ImGuiLayoutType_Horizontal)
        SameLine();
}

void ImGui::ItemSize(const ImRect& bb, float text_offset_y)
{
    ItemSize(bb.GetSize(), text_offset_y);
}

static ImGuiDir NavScoreItemGetQuadrant(float dx, float dy)
{
    if (fabsf(dx) > fabsf(dy))
        return (dx > 0.0f) ? ImGuiDir_Right : ImGuiDir_Left;
    return (dy > 0.0f) ? ImGuiDir_Down : ImGuiDir_Up;
}

static float NavScoreItemDistInterval(float a0, float a1, float b0, float b1)
{
    if (a1 < b0) 
        return a1 - b0;
    if (b1 < a0) 
        return a0 - b1;
    return 0.0f;
}

// Scoring function for directional navigation. Based on https://gist.github.com/rygorous/6981057
static bool NavScoreItem(ImGuiNavMoveResult* result, ImRect cand)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (g.NavLayer != window->DC.NavLayerCurrent)
        return false;

    const ImRect& curr = g.NavScoringRectScreen; // Current modified source rect (NB: we've applied Max.x = Min.x in NavUpdate() to inhibit the effect of having varied item width)
    g.NavScoringCount++;

    // We perform scoring on items bounding box clipped by their parent window on the other axis (clipping on our movement axis would give us equal scores for all clipped items)
    if (g.NavMoveDir == ImGuiDir_Left || g.NavMoveDir == ImGuiDir_Right)
    {
        cand.Min.y = ImClamp(cand.Min.y, window->ClipRect.Min.y, window->ClipRect.Max.y);
        cand.Max.y = ImClamp(cand.Max.y, window->ClipRect.Min.y, window->ClipRect.Max.y);
    }
    else
    {
        cand.Min.x = ImClamp(cand.Min.x, window->ClipRect.Min.x, window->ClipRect.Max.x);
        cand.Max.x = ImClamp(cand.Max.x, window->ClipRect.Min.x, window->ClipRect.Max.x);
    }

    // Compute distance between boxes
    // FIXME-NAV: Introducing biases for vertical navigation, needs to be removed.
    float dbx = NavScoreItemDistInterval(cand.Min.x, cand.Max.x, curr.Min.x, curr.Max.x);
    float dby = NavScoreItemDistInterval(ImLerp(cand.Min.y, cand.Max.y, 0.2f), ImLerp(cand.Min.y, cand.Max.y, 0.8f), ImLerp(curr.Min.y, curr.Max.y, 0.2f), ImLerp(curr.Min.y, curr.Max.y, 0.8f)); // Scale down on Y to keep using box-distance for vertically touching items
    if (dby != 0.0f && dbx != 0.0f)
       dbx = (dbx/1000.0f) + ((dbx > 0.0f) ? +1.0f : -1.0f);
    float dist_box = fabsf(dbx) + fabsf(dby);

    // Compute distance between centers (this is off by a factor of 2, but we only compare center distances with each other so it doesn't matter)
    float dcx = (cand.Min.x + cand.Max.x) - (curr.Min.x + curr.Max.x);
    float dcy = (cand.Min.y + cand.Max.y) - (curr.Min.y + curr.Max.y);
    float dist_center = fabsf(dcx) + fabsf(dcy); // L1 metric (need this for our connectedness guarantee)

    // Determine which quadrant of 'curr' our candidate item 'cand' lies in based on distance
    ImGuiDir quadrant;
    float dax = 0.0f, day = 0.0f, dist_axial = 0.0f;
    if (dbx != 0.0f || dby != 0.0f) 
    { 
        // For non-overlapping boxes, use distance between boxes
        dax = dbx;
        day = dby;
        dist_axial = dist_box;
        quadrant = NavScoreItemGetQuadrant(dbx, dby);
    } 
    else if (dcx != 0.0f || dcy != 0.0f) 
    { 
        // For overlapping boxes with different centers, use distance between centers
        dax = dcx;
        day = dcy;
        dist_axial = dist_center;
        quadrant = NavScoreItemGetQuadrant(dcx, dcy);
    } 
    else
    {
        // Degenerate case: two overlapping buttons with same center, break ties arbitrarily (note that LastItemId here is really the _previous_ item order, but it doesn't matter)
        quadrant = (window->DC.LastItemId < g.NavId) ? ImGuiDir_Left : ImGuiDir_Right;
    }

#if IMGUI_DEBUG_NAV_SCORING
    char buf[128];
    if (ImGui::IsMouseHoveringRect(cand.Min, cand.Max))
    {
        ImFormatString(buf, IM_ARRAYSIZE(buf), "dbox (%.2f,%.2f->%.4f)\ndcen (%.2f,%.2f->%.4f)\nd (%.2f,%.2f->%.4f)\nnav %c, quadrant %c", dbx, dby, dist_box, dcx, dcy, dist_center, dax, day, dist_axial, "WENS"[g.NavMoveDir], "WENS"[quadrant]);
        g.OverlayDrawList.AddRect(curr.Min, curr.Max, IM_COL32(255, 200, 0, 100));
        g.OverlayDrawList.AddRect(cand.Min, cand.Max, IM_COL32(255,255,0,200));
        g.OverlayDrawList.AddRectFilled(cand.Max-ImVec2(4,4), cand.Max+ImGui::CalcTextSize(buf)+ImVec2(4,4), IM_COL32(40,0,0,150));
        g.OverlayDrawList.AddText(g.IO.FontDefault, 13.0f, cand.Max, ~0U, buf);
    }
    else if (g.IO.KeyCtrl) // Hold to preview score in matching quadrant. Press C to rotate.
    {
        if (IsKeyPressedMap(ImGuiKey_C)) { g.NavMoveDirLast = (ImGuiDir)((g.NavMoveDirLast + 1) & 3); g.IO.KeysDownDuration[g.IO.KeyMap[ImGuiKey_C]] = 0.01f; }
        if (quadrant == g.NavMoveDir)
        {
            ImFormatString(buf, IM_ARRAYSIZE(buf), "%.0f/%.0f", dist_box, dist_center);
            g.OverlayDrawList.AddRectFilled(cand.Min, cand.Max, IM_COL32(255, 0, 0, 200));
            g.OverlayDrawList.AddText(g.IO.FontDefault, 13.0f, cand.Min, IM_COL32(255, 255, 255, 255), buf);
        }
    }
 #endif

    // Is it in the quadrant we're interesting in moving to?
    bool new_best = false;
    if (quadrant == g.NavMoveDir) 
    {
        // Does it beat the current best candidate?
        if (dist_box < result->DistBox) 
        {
            result->DistBox = dist_box;
            result->DistCenter = dist_center;
            return true;
        } 
        if (dist_box == result->DistBox) 
        {
            // Try using distance between center points to break ties
            if (dist_center < result->DistCenter) 
            {
                result->DistCenter = dist_center;
                new_best = true;
            } 
            else if (dist_center == result->DistCenter) 
            {
                // Still tied! we need to be extra-careful to make sure everything gets linked properly. We consistently break ties by symbolically moving "later" items 
                // (with higher index) to the right/downwards by an infinitesimal amount since we the current "best" button already (so it must have a lower index), 
                // this is fairly easy. This rule ensures that all buttons with dx==dy==0 will end up being linked in order of appearance along the x axis.
                if (((g.NavMoveDir == ImGuiDir_Up || g.NavMoveDir == ImGuiDir_Down) ? dby : dbx) < 0.0f) // moving bj to the right/down decreases distance
                    new_best = true;
            }
        }
    }

    // Axial check: if 'curr' has no link at all in some direction and 'cand' lies roughly in that direction, add a tentative link. This will only be kept if no "real" matches
    // are found, so it only augments the graph produced by the above method using extra links. (important, since it doesn't guarantee strong connectedness)
    // This is just to avoid buttons having no links in a particular direction when there's a suitable neighbor. you get good graphs without this too.
    // 2017/09/29: FIXME: This now currently only enabled inside menu bars, ideally we'd disable it everywhere. Menus in particular need to catch failure. For general navigation it feels awkward.
    // Disabling it may however lead to disconnected graphs when nodes are very spaced out on different axis. Perhaps consider offering this as an option?
    if (result->DistBox == FLT_MAX && dist_axial < result->DistAxial)  // Check axial match
        if (g.NavLayer == 1 && !(g.NavWindow->Flags & ImGuiWindowFlags_ChildMenu))
            if ((g.NavMoveDir == ImGuiDir_Left && dax < 0.0f) || (g.NavMoveDir == ImGuiDir_Right && dax > 0.0f) || (g.NavMoveDir == ImGuiDir_Up && day < 0.0f) || (g.NavMoveDir == ImGuiDir_Down && day > 0.0f))
            {
                result->DistAxial = dist_axial;
                new_best = true;
            }

    return new_best;
}

static void NavSaveLastChildNavWindow(ImGuiWindow* child_window)
{
    ImGuiWindow* parent_window = child_window;
    while (parent_window && (parent_window->Flags & ImGuiWindowFlags_ChildWindow) != 0 && (parent_window->Flags & (ImGuiWindowFlags_Popup | ImGuiWindowFlags_ChildMenu)) == 0)
        parent_window = parent_window->ParentWindow;
    if (parent_window && parent_window != child_window)
        parent_window->NavLastChildNavWindow = child_window;
}

// Call when we are expected to land on Layer 0 after FocusWindow()
static ImGuiWindow* NavRestoreLastChildNavWindow(ImGuiWindow* window)
{
    return window->NavLastChildNavWindow ? window->NavLastChildNavWindow : window;
}

static void NavRestoreLayer(int layer)
{
    ImGuiContext& g = *GImGui;
    g.NavLayer = layer;
    if (layer == 0)
        g.NavWindow = NavRestoreLastChildNavWindow(g.NavWindow);
    if (layer == 0 && g.NavWindow->NavLastIds[0] != 0)
        SetNavIDWithRectRel(g.NavWindow->NavLastIds[0], layer, g.NavWindow->NavRectRel[0]);
    else
        ImGui::NavInitWindow(g.NavWindow, true);
}

static inline void NavUpdateAnyRequestFlag()
{
    ImGuiContext& g = *GImGui;
    g.NavAnyRequest = g.NavMoveRequest || g.NavInitRequest || (IMGUI_DEBUG_NAV_SCORING && g.NavWindow != NULL);
    if (g.NavAnyRequest)
        IM_ASSERT(g.NavWindow != NULL);
}

static bool NavMoveRequestButNoResultYet()
{
    ImGuiContext& g = *GImGui;
    return g.NavMoveRequest && g.NavMoveResultLocal.ID == 0 && g.NavMoveResultOther.ID == 0;
}

void ImGui::NavMoveRequestCancel()
{
    ImGuiContext& g = *GImGui;
    g.NavMoveRequest = false;
    NavUpdateAnyRequestFlag();
}

// We get there when either NavId == id, or when g.NavAnyRequest is set (which is updated by NavUpdateAnyRequestFlag above)
static void ImGui::NavProcessItem(ImGuiWindow* window, const ImRect& nav_bb, const ImGuiID id)
{
    ImGuiContext& g = *GImGui;
    //if (!g.IO.NavActive)  // [2017/10/06] Removed this possibly redundant test but I am not sure of all the side-effects yet. Some of the feature here will need to work regardless of using a _NoNavInputs flag.
    //    return;

    const ImGuiItemFlags item_flags = window->DC.ItemFlags;
    const ImRect nav_bb_rel(nav_bb.Min - window->Pos, nav_bb.Max - window->Pos);
    if (g.NavInitRequest && g.NavLayer == window->DC.NavLayerCurrent)
    {
        // Even if 'ImGuiItemFlags_NoNavDefaultFocus' is on (typically collapse/close button) we record the first ResultId so they can be used as a fallback
        if (!(item_flags & ImGuiItemFlags_NoNavDefaultFocus) || g.NavInitResultId == 0)
        {
            g.NavInitResultId = id;
            g.NavInitResultRectRel = nav_bb_rel;
        }
        if (!(item_flags & ImGuiItemFlags_NoNavDefaultFocus))
        {
            g.NavInitRequest = false; // Found a match, clear request
            NavUpdateAnyRequestFlag();
        }
    }

    // Scoring for navigation
    if (g.NavId != id && !(item_flags & ImGuiItemFlags_NoNav))
    {
        ImGuiNavMoveResult* result = (window == g.NavWindow) ? &g.NavMoveResultLocal : &g.NavMoveResultOther;
#if IMGUI_DEBUG_NAV_SCORING
        // [DEBUG] Score all items in NavWindow at all times
        if (!g.NavMoveRequest) 
            g.NavMoveDir = g.NavMoveDirLast;
        bool new_best = NavScoreItem(result, nav_bb) && g.NavMoveRequest;
#else
        bool new_best = g.NavMoveRequest && NavScoreItem(result, nav_bb);
#endif
        if (new_best)
        {
            result->ID = id;
            result->ParentID = window->IDStack.back();
            result->Window = window;
            result->RectRel = nav_bb_rel;
        }
    }

    // Update window-relative bounding box of navigated item
    if (g.NavId == id)
    {
        g.NavWindow = window;                                           // Always refresh g.NavWindow, because some operations such as FocusItem() don't have a window.
        g.NavLayer = window->DC.NavLayerCurrent;
        g.NavIdIsAlive = true;
        g.NavIdTabCounter = window->FocusIdxTabCounter;
        window->NavRectRel[window->DC.NavLayerCurrent] = nav_bb_rel;    // Store item bounding box (relative to window position)
    }
}

// Declare item bounding box for clipping and interaction.
// Note that the size can be different than the one provided to ItemSize(). Typically, widgets that spread over available surface
// declare their minimum size requirement to ItemSize() and then use a larger region for drawing/interaction, which is passed to ItemAdd().
bool ImGui::ItemAdd(const ImRect& bb, ImGuiID id, const ImRect* nav_bb_arg)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    if (id != 0)
    {
        // Navigation processing runs prior to clipping early-out
        //  (a) So that NavInitRequest can be honored, for newly opened windows to select a default widget
        //  (b) So that we can scroll up/down past clipped items. This adds a small O(N) cost to regular navigation requests unfortunately, but it is still limited to one window. 
        //      it may not scale very well for windows with ten of thousands of item, but at least NavMoveRequest is only set on user interaction, aka maximum once a frame.
        //      We could early out with "if (is_clipped && !g.NavInitRequest) return false;" but when we wouldn't be able to reach unclipped widgets. This would work if user had explicit scrolling control (e.g. mapped on a stick)
        window->DC.NavLayerActiveMaskNext |= window->DC.NavLayerCurrentMask;
        if (g.NavId == id || g.NavAnyRequest)
            if (g.NavWindow->RootWindowForNav == window->RootWindowForNav)
                if (window == g.NavWindow || ((window->Flags | g.NavWindow->Flags) & ImGuiWindowFlags_NavFlattened))
                    NavProcessItem(window, nav_bb_arg ? *nav_bb_arg : bb, id);
    }

    window->DC.LastItemId = id;
    window->DC.LastItemRect = bb;
    window->DC.LastItemStatusFlags = 0;

    // Clipping test
    const bool is_clipped = IsClippedEx(bb, id, false);
    if (is_clipped)
        return false;
    //if (g.IO.KeyAlt) window->DrawList->AddRect(bb.Min, bb.Max, IM_COL32(255,255,0,120)); // [DEBUG]

    // We need to calculate this now to take account of the current clipping rectangle (as items like Selectable may change them)
    if (IsMouseHoveringRect(bb.Min, bb.Max))
        window->DC.LastItemStatusFlags |= ImGuiItemStatusFlags_HoveredRect;
    return true;
}

// This is roughly matching the behavior of internal-facing ItemHoverable()
// - we allow hovering to be true when ActiveId==window->MoveID, so that clicking on non-interactive items such as a Text() item still returns true with IsItemHovered()
// - this should work even for non-interactive items that have no ID, so we cannot use LastItemId
bool ImGui::IsItemHovered(ImGuiHoveredFlags flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (g.NavDisableMouseHover && !g.NavDisableHighlight)
        return IsItemFocused();

    // Test for bounding box overlap, as updated as ItemAdd()
    if (!(window->DC.LastItemStatusFlags & ImGuiItemStatusFlags_HoveredRect))
        return false;
    IM_ASSERT((flags & (ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows)) == 0);   // Flags not supported by this function

    // Test if we are hovering the right window (our window could be behind another window)
    // [2017/10/16] Reverted commit 344d48be3 and testing RootWindow instead. I believe it is correct to NOT test for RootWindow but this leaves us unable to use IsItemHovered() after EndChild() itself.
    // Until a solution is found I believe reverting to the test from 2017/09/27 is safe since this was the test that has been running for a long while.
    //if (g.HoveredWindow != window)
    //    return false;
    if (g.HoveredRootWindow != window->RootWindow && !(flags & ImGuiHoveredFlags_AllowWhenOverlapped))
        return false;

    // Test if another item is active (e.g. being dragged)
    if (!(flags & ImGuiHoveredFlags_AllowWhenBlockedByActiveItem))
        if (g.ActiveId != 0 && g.ActiveId != window->DC.LastItemId && !g.ActiveIdAllowOverlap && g.ActiveId != window->MoveId)
            return false;

    // Test if interactions on this window are blocked by an active popup or modal 
    if (!IsWindowContentHoverable(window, flags))
        return false;

    // Test if the item is disabled
    if (window->DC.ItemFlags & ImGuiItemFlags_Disabled)
        return false;
    
    // Special handling for the 1st item after Begin() which represent the title bar. When the window is collapsed (SkipItems==true) that last item will never be overwritten so we need to detect tht case.
    if (window->DC.LastItemId == window->MoveId && window->WriteAccessed)
        return false;
    return true;
}

// Internal facing ItemHoverable() used when submitting widgets. Differs slightly from IsItemHovered().
bool ImGui::ItemHoverable(const ImRect& bb, ImGuiID id)
{
    ImGuiContext& g = *GImGui;
    if (g.HoveredId != 0 && g.HoveredId != id && !g.HoveredIdAllowOverlap)
        return false;

    ImGuiWindow* window = g.CurrentWindow;
    if (g.HoveredWindow != window)
        return false;
    if (g.ActiveId != 0 && g.ActiveId != id && !g.ActiveIdAllowOverlap)
        return false;
    if (!IsMouseHoveringRect(bb.Min, bb.Max))
        return false;
    if (g.NavDisableMouseHover || !IsWindowContentHoverable(window, ImGuiHoveredFlags_Default))
        return false;
    if (window->DC.ItemFlags & ImGuiItemFlags_Disabled)
        return false;

    SetHoveredID(id);
    return true;
}

bool ImGui::IsClippedEx(const ImRect& bb, ImGuiID id, bool clip_even_when_logged)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (!bb.Overlaps(window->ClipRect))
        if (id == 0 || id != g.ActiveId)
            if (clip_even_when_logged || !g.LogEnabled)
                return true;
    return false;
}

bool ImGui::FocusableItemRegister(ImGuiWindow* window, ImGuiID id, bool tab_stop)
{
    ImGuiContext& g = *GImGui;

    const bool allow_keyboard_focus = (window->DC.ItemFlags & (ImGuiItemFlags_AllowKeyboardFocus | ImGuiItemFlags_Disabled)) == ImGuiItemFlags_AllowKeyboardFocus;
    window->FocusIdxAllCounter++;
    if (allow_keyboard_focus)
        window->FocusIdxTabCounter++;

    // Process keyboard input at this point: TAB/Shift-TAB to tab out of the currently focused item.
    // Note that we can always TAB out of a widget that doesn't allow tabbing in.
    if (tab_stop && (g.ActiveId == id) && window->FocusIdxAllRequestNext == INT_MAX && window->FocusIdxTabRequestNext == INT_MAX && !g.IO.KeyCtrl && IsKeyPressedMap(ImGuiKey_Tab))
        window->FocusIdxTabRequestNext = window->FocusIdxTabCounter + (g.IO.KeyShift ? (allow_keyboard_focus ? -1 : 0) : +1); // Modulo on index will be applied at the end of frame once we've got the total counter of items.

    if (window->FocusIdxAllCounter == window->FocusIdxAllRequestCurrent)
        return true;
    if (allow_keyboard_focus && window->FocusIdxTabCounter == window->FocusIdxTabRequestCurrent)
    {
        g.NavJustTabbedId = id;
        return true;
    }

    return false;
}

void ImGui::FocusableItemUnregister(ImGuiWindow* window)
{
    window->FocusIdxAllCounter--;
    window->FocusIdxTabCounter--;
}

ImVec2 ImGui::CalcItemSize(ImVec2 size, float default_x, float default_y)
{
    ImGuiContext& g = *GImGui;
    ImVec2 content_max;
    if (size.x < 0.0f || size.y < 0.0f)
        content_max = g.CurrentWindow->Pos + GetContentRegionMax();
    if (size.x <= 0.0f)
        size.x = (size.x == 0.0f) ? default_x : ImMax(content_max.x - g.CurrentWindow->DC.CursorPos.x, 4.0f) + size.x;
    if (size.y <= 0.0f)
        size.y = (size.y == 0.0f) ? default_y : ImMax(content_max.y - g.CurrentWindow->DC.CursorPos.y, 4.0f) + size.y;
    return size;
}

float ImGui::CalcWrapWidthForPos(const ImVec2& pos, float wrap_pos_x)
{
    if (wrap_pos_x < 0.0f)
        return 0.0f;

    ImGuiWindow* window = GetCurrentWindowRead();
    if (wrap_pos_x == 0.0f)
        wrap_pos_x = GetContentRegionMax().x + window->Pos.x;
    else if (wrap_pos_x > 0.0f)
        wrap_pos_x += window->Pos.x - window->Scroll.x; // wrap_pos_x is provided is window local space

    return ImMax(wrap_pos_x - pos.x, 1.0f);
}

//-----------------------------------------------------------------------------

void* ImGui::MemAlloc(size_t sz)
{
    GImAllocatorActiveAllocationsCount++;
    return GImAllocatorAllocFunc(sz, GImAllocatorUserData);
}

void ImGui::MemFree(void* ptr)
{
    if (ptr) GImAllocatorActiveAllocationsCount--;
    return GImAllocatorFreeFunc(ptr, GImAllocatorUserData);
}

const char* ImGui::GetClipboardText()
{
    return GImGui->IO.GetClipboardTextFn ? GImGui->IO.GetClipboardTextFn(GImGui->IO.ClipboardUserData) : "";
}

void ImGui::SetClipboardText(const char* text)
{
    if (GImGui->IO.SetClipboardTextFn)
        GImGui->IO.SetClipboardTextFn(GImGui->IO.ClipboardUserData, text);
}

const char* ImGui::GetVersion()
{
    return IMGUI_VERSION;
}

// Internal state access - if you want to share ImGui state between modules (e.g. DLL) or allocate it yourself
// Note that we still point to some static data and members (such as GFontAtlas), so the state instance you end up using will point to the static data within its module
ImGuiContext* ImGui::GetCurrentContext()
{
    return GImGui;
}

void ImGui::SetCurrentContext(ImGuiContext* ctx)
{
#ifdef IMGUI_SET_CURRENT_CONTEXT_FUNC
    IMGUI_SET_CURRENT_CONTEXT_FUNC(ctx); // For custom thread-based hackery you may want to have control over this.
#else
    GImGui = ctx;
#endif
}

void ImGui::SetAllocatorFunctions(void* (*alloc_func)(size_t sz, void* user_data), void(*free_func)(void* ptr, void* user_data), void* user_data)
{
    GImAllocatorAllocFunc = alloc_func;
    GImAllocatorFreeFunc = free_func;
    GImAllocatorUserData = user_data;
}

ImGuiContext* ImGui::CreateContext(ImFontAtlas* shared_font_atlas)
{
    ImGuiContext* ctx = IM_NEW(ImGuiContext)(shared_font_atlas);
    if (GImGui == NULL)
        SetCurrentContext(ctx);
    Initialize(ctx);
    return ctx;
}

void ImGui::DestroyContext(ImGuiContext* ctx)
{
    if (ctx == NULL)
        ctx = GImGui;
    Shutdown(ctx);
    if (GImGui == ctx)
        SetCurrentContext(NULL);
    IM_DELETE(ctx);
}

ImGuiIO& ImGui::GetIO()
{
    IM_ASSERT(GImGui != NULL && "No current context. Did you call ImGui::CreateContext() or ImGui::SetCurrentContext()?");
    return GImGui->IO;
}

ImGuiStyle& ImGui::GetStyle()
{
    IM_ASSERT(GImGui != NULL && "No current context. Did you call ImGui::CreateContext() or ImGui::SetCurrentContext()?");
    return GImGui->Style;
}

// Same value as passed to the old io.RenderDrawListsFn function. Valid after Render() and until the next call to NewFrame()
ImDrawData* ImGui::GetDrawData()
{
    ImGuiContext& g = *GImGui;
    return g.DrawData.Valid ? &g.DrawData : NULL;
}

float ImGui::GetTime()
{
    return GImGui->Time;
}

int ImGui::GetFrameCount()
{
    return GImGui->FrameCount;
}

ImDrawList* ImGui::GetOverlayDrawList()
{
    return &GImGui->OverlayDrawList;
}

ImDrawListSharedData* ImGui::GetDrawListSharedData()
{
    return &GImGui->DrawListSharedData;
}

// This needs to be called before we submit any widget (aka in or before Begin)
void ImGui::NavInitWindow(ImGuiWindow* window, bool force_reinit)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(window == g.NavWindow);
    bool init_for_nav = false;
    if (!(window->Flags & ImGuiWindowFlags_NoNavInputs))
        if (!(window->Flags & ImGuiWindowFlags_ChildWindow) || (window->Flags & ImGuiWindowFlags_Popup) || (window->NavLastIds[0] == 0) || force_reinit)
            init_for_nav = true;
    if (init_for_nav)
    {
        SetNavID(0, g.NavLayer);
        g.NavInitRequest = true;
        g.NavInitRequestFromMove = false;
        g.NavInitResultId = 0;
        g.NavInitResultRectRel = ImRect();
        NavUpdateAnyRequestFlag();
    }
    else
    {
        g.NavId = window->NavLastIds[0];
    }
}

static ImVec2 NavCalcPreferredMousePos()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.NavWindow;
    if (!window)
        return g.IO.MousePos;
    const ImRect& rect_rel = window->NavRectRel[g.NavLayer];
    ImVec2 pos = g.NavWindow->Pos + ImVec2(rect_rel.Min.x + ImMin(g.Style.FramePadding.x*4, rect_rel.GetWidth()), rect_rel.Max.y - ImMin(g.Style.FramePadding.y, rect_rel.GetHeight()));
    ImRect visible_rect = GetViewportRect();
    return ImFloor(ImClamp(pos, visible_rect.Min, visible_rect.Max));   // ImFloor() is important because non-integer mouse position application in back-end might be lossy and result in undesirable non-zero delta.
}

static int FindWindowIndex(ImGuiWindow* window) // FIXME-OPT O(N)
{
    ImGuiContext& g = *GImGui;
    for (int i = g.Windows.Size-1; i >= 0; i--)
        if (g.Windows[i] == window)
            return i;
    return -1;
}

static ImGuiWindow* FindWindowNavigable(int i_start, int i_stop, int dir) // FIXME-OPT O(N)
{
    ImGuiContext& g = *GImGui;
    for (int i = i_start; i >= 0 && i < g.Windows.Size && i != i_stop; i += dir)
        if (ImGui::IsWindowNavFocusable(g.Windows[i]))
            return g.Windows[i];
    return NULL;
}

float ImGui::GetNavInputAmount(ImGuiNavInput n, ImGuiInputReadMode mode)
{
    ImGuiContext& g = *GImGui;
    if (mode == ImGuiInputReadMode_Down)
        return g.IO.NavInputs[n];                         // Instant, read analog input (0.0f..1.0f, as provided by user)

    const float t = g.IO.NavInputsDownDuration[n];
    if (t < 0.0f && mode == ImGuiInputReadMode_Released)  // Return 1.0f when just released, no repeat, ignore analog input.
        return (g.IO.NavInputsDownDurationPrev[n] >= 0.0f ? 1.0f : 0.0f);
    if (t < 0.0f)
        return 0.0f;
    if (mode == ImGuiInputReadMode_Pressed)               // Return 1.0f when just pressed, no repeat, ignore analog input.
        return (t == 0.0f) ? 1.0f : 0.0f;
    if (mode == ImGuiInputReadMode_Repeat)
        return (float)CalcTypematicPressedRepeatAmount(t, t - g.IO.DeltaTime, g.IO.KeyRepeatDelay * 0.80f, g.IO.KeyRepeatRate * 0.80f);
    if (mode == ImGuiInputReadMode_RepeatSlow)
        return (float)CalcTypematicPressedRepeatAmount(t, t - g.IO.DeltaTime, g.IO.KeyRepeatDelay * 1.00f, g.IO.KeyRepeatRate * 2.00f);
    if (mode == ImGuiInputReadMode_RepeatFast)
        return (float)CalcTypematicPressedRepeatAmount(t, t - g.IO.DeltaTime, g.IO.KeyRepeatDelay * 0.80f, g.IO.KeyRepeatRate * 0.30f);
    return 0.0f;
}

// Equivalent of IsKeyDown() for NavInputs[]
static bool IsNavInputDown(ImGuiNavInput n)
{
    return GImGui->IO.NavInputs[n] > 0.0f;
}

// Equivalent of IsKeyPressed() for NavInputs[]
static bool IsNavInputPressed(ImGuiNavInput n, ImGuiInputReadMode mode)
{
    return ImGui::GetNavInputAmount(n, mode) > 0.0f;
}

static bool IsNavInputPressedAnyOfTwo(ImGuiNavInput n1, ImGuiNavInput n2, ImGuiInputReadMode mode)
{
    return (ImGui::GetNavInputAmount(n1, mode) + ImGui::GetNavInputAmount(n2, mode)) > 0.0f;
}

ImVec2 ImGui::GetNavInputAmount2d(ImGuiNavDirSourceFlags dir_sources, ImGuiInputReadMode mode, float slow_factor, float fast_factor)
{
    ImVec2 delta(0.0f, 0.0f);
    if (dir_sources & ImGuiNavDirSourceFlags_Keyboard)
        delta += ImVec2(GetNavInputAmount(ImGuiNavInput_KeyRight_, mode)   - GetNavInputAmount(ImGuiNavInput_KeyLeft_,   mode), GetNavInputAmount(ImGuiNavInput_KeyDown_,   mode) - GetNavInputAmount(ImGuiNavInput_KeyUp_,   mode));
    if (dir_sources & ImGuiNavDirSourceFlags_PadDPad)
        delta += ImVec2(GetNavInputAmount(ImGuiNavInput_DpadRight, mode)   - GetNavInputAmount(ImGuiNavInput_DpadLeft,   mode), GetNavInputAmount(ImGuiNavInput_DpadDown,   mode) - GetNavInputAmount(ImGuiNavInput_DpadUp,   mode));
    if (dir_sources & ImGuiNavDirSourceFlags_PadLStick)
        delta += ImVec2(GetNavInputAmount(ImGuiNavInput_LStickRight, mode) - GetNavInputAmount(ImGuiNavInput_LStickLeft, mode), GetNavInputAmount(ImGuiNavInput_LStickDown, mode) - GetNavInputAmount(ImGuiNavInput_LStickUp, mode));
    if (slow_factor != 0.0f && IsNavInputDown(ImGuiNavInput_TweakSlow))
        delta *= slow_factor;
    if (fast_factor != 0.0f && IsNavInputDown(ImGuiNavInput_TweakFast))
        delta *= fast_factor;
    return delta;
}

static void NavUpdateWindowingHighlightWindow(int focus_change_dir)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(g.NavWindowingTarget);
    if (g.NavWindowingTarget->Flags & ImGuiWindowFlags_Modal)
        return;

    const int i_current = FindWindowIndex(g.NavWindowingTarget);
    ImGuiWindow* window_target = FindWindowNavigable(i_current + focus_change_dir, -INT_MAX, focus_change_dir);
    if (!window_target)
        window_target = FindWindowNavigable((focus_change_dir < 0) ? (g.Windows.Size - 1) : 0, i_current, focus_change_dir);
    g.NavWindowingTarget = window_target;
    g.NavWindowingToggleLayer = false;
}

// Window management mode (hold to: change focus/move/resize, tap to: toggle menu layer)
static void ImGui::NavUpdateWindowing()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* apply_focus_window = NULL;
    bool apply_toggle_layer = false;

    bool start_windowing_with_gamepad = !g.NavWindowingTarget && IsNavInputPressed(ImGuiNavInput_Menu, ImGuiInputReadMode_Pressed);
    bool start_windowing_with_keyboard = !g.NavWindowingTarget && g.IO.KeyCtrl && IsKeyPressedMap(ImGuiKey_Tab) && (g.IO.ConfigFlags & ImGuiConfigFlags_NavEnableKeyboard);
    if (start_windowing_with_gamepad || start_windowing_with_keyboard)
        if (ImGuiWindow* window = g.NavWindow ? g.NavWindow : FindWindowNavigable(g.Windows.Size - 1, -INT_MAX, -1))
        {
            g.NavWindowingTarget = window->RootWindowForTabbing;
            g.NavWindowingHighlightTimer = g.NavWindowingHighlightAlpha = 0.0f;
            g.NavWindowingToggleLayer = start_windowing_with_keyboard ? false : true;
            g.NavInputSource = start_windowing_with_keyboard ? ImGuiInputSource_NavKeyboard : ImGuiInputSource_NavGamepad;
        }

    // Gamepad update
    g.NavWindowingHighlightTimer += g.IO.DeltaTime;
    if (g.NavWindowingTarget && g.NavInputSource == ImGuiInputSource_NavGamepad)
    {
        // Highlight only appears after a brief time holding the button, so that a fast tap on PadMenu (to toggle NavLayer) doesn't add visual noise
        g.NavWindowingHighlightAlpha = ImMax(g.NavWindowingHighlightAlpha, ImSaturate((g.NavWindowingHighlightTimer - 0.20f) / 0.05f));

        // Select window to focus
        const int focus_change_dir = (int)IsNavInputPressed(ImGuiNavInput_FocusPrev, ImGuiInputReadMode_RepeatSlow) - (int)IsNavInputPressed(ImGuiNavInput_FocusNext, ImGuiInputReadMode_RepeatSlow);
        if (focus_change_dir != 0)
        {
            NavUpdateWindowingHighlightWindow(focus_change_dir);
            g.NavWindowingHighlightAlpha = 1.0f;
        }

        // Single press toggles NavLayer, long press with L/R apply actual focus on release (until then the window was merely rendered front-most)
        if (!IsNavInputDown(ImGuiNavInput_Menu))
        {
            g.NavWindowingToggleLayer &= (g.NavWindowingHighlightAlpha < 1.0f); // Once button was held long enough we don't consider it a tap-to-toggle-layer press anymore.
            if (g.NavWindowingToggleLayer && g.NavWindow)
                apply_toggle_layer = true;
            else if (!g.NavWindowingToggleLayer)
                apply_focus_window = g.NavWindowingTarget;
            g.NavWindowingTarget = NULL;
        }
    }

    // Keyboard: Focus
    if (g.NavWindowingTarget && g.NavInputSource == ImGuiInputSource_NavKeyboard)
    {
        // Visuals only appears after a brief time after pressing TAB the first time, so that a fast CTRL+TAB doesn't add visual noise
        g.NavWindowingHighlightAlpha = ImMax(g.NavWindowingHighlightAlpha, ImSaturate((g.NavWindowingHighlightTimer - 0.15f) / 0.04f)); // 1.0f
        if (IsKeyPressedMap(ImGuiKey_Tab, true))
            NavUpdateWindowingHighlightWindow(g.IO.KeyShift ? +1 : -1);
        if (!g.IO.KeyCtrl)
            apply_focus_window = g.NavWindowingTarget;
    }

    // Keyboard: Press and Release ALT to toggle menu layer
    // FIXME: We lack an explicit IO variable for "is the imgui window focused", so compare mouse validity to detect the common case of back-end clearing releases all keys on ALT-TAB
    if ((g.ActiveId == 0 || g.ActiveIdAllowOverlap) && IsNavInputPressed(ImGuiNavInput_KeyMenu_, ImGuiInputReadMode_Released))
        if (IsMousePosValid(&g.IO.MousePos) == IsMousePosValid(&g.IO.MousePosPrev))
            apply_toggle_layer = true;

    // Move window
    if (g.NavWindowingTarget && !(g.NavWindowingTarget->Flags & ImGuiWindowFlags_NoMove))
    {
        ImVec2 move_delta;
        if (g.NavInputSource == ImGuiInputSource_NavKeyboard && !g.IO.KeyShift)
            move_delta = GetNavInputAmount2d(ImGuiNavDirSourceFlags_Keyboard, ImGuiInputReadMode_Down);
        if (g.NavInputSource == ImGuiInputSource_NavGamepad)
            move_delta = GetNavInputAmount2d(ImGuiNavDirSourceFlags_PadLStick, ImGuiInputReadMode_Down);
        if (move_delta.x != 0.0f || move_delta.y != 0.0f)
        {
            const float NAV_MOVE_SPEED = 800.0f;
            const float move_speed = ImFloor(NAV_MOVE_SPEED * g.IO.DeltaTime * ImMin(g.IO.DisplayFramebufferScale.x, g.IO.DisplayFramebufferScale.y));
            g.NavWindowingTarget->PosFloat += move_delta * move_speed;
            g.NavDisableMouseHover = true;
            MarkIniSettingsDirty(g.NavWindowingTarget);
        }
    }

    // Apply final focus
    if (apply_focus_window && (g.NavWindow == NULL || apply_focus_window != g.NavWindow->RootWindowForTabbing))
    {
        g.NavDisableHighlight = false;
        g.NavDisableMouseHover = true;
        apply_focus_window = NavRestoreLastChildNavWindow(apply_focus_window);
        ClosePopupsOverWindow(apply_focus_window);
        FocusWindow(apply_focus_window);
        if (apply_focus_window->NavLastIds[0] == 0)
            NavInitWindow(apply_focus_window, false);

        // If the window only has a menu layer, select it directly
        if (apply_focus_window->DC.NavLayerActiveMask == (1 << 1))
            g.NavLayer = 1;
    }
    if (apply_focus_window)
        g.NavWindowingTarget = NULL;

    // Apply menu/layer toggle
    if (apply_toggle_layer && g.NavWindow)
    {
        ImGuiWindow* new_nav_window = g.NavWindow;
        while ((new_nav_window->DC.NavLayerActiveMask & (1 << 1)) == 0 && (new_nav_window->Flags & ImGuiWindowFlags_ChildWindow) != 0 && (new_nav_window->Flags & (ImGuiWindowFlags_Popup | ImGuiWindowFlags_ChildMenu)) == 0)
            new_nav_window = new_nav_window->ParentWindow;
        if (new_nav_window != g.NavWindow)
        {
            ImGuiWindow* old_nav_window = g.NavWindow;
            FocusWindow(new_nav_window);
            new_nav_window->NavLastChildNavWindow = old_nav_window;
        }
        g.NavDisableHighlight = false;
        g.NavDisableMouseHover = true;
        NavRestoreLayer((g.NavWindow->DC.NavLayerActiveMask & (1 << 1)) ? (g.NavLayer ^ 1) : 0);
    }
}

// NB: We modify rect_rel by the amount we scrolled for, so it is immediately updated.
static void NavScrollToBringItemIntoView(ImGuiWindow* window, ImRect& item_rect_rel)
{
    // Scroll to keep newly navigated item fully into view
    ImRect window_rect_rel(window->InnerRect.Min - window->Pos - ImVec2(1, 1), window->InnerRect.Max - window->Pos + ImVec2(1, 1));
    //g.OverlayDrawList.AddRect(window->Pos + window_rect_rel.Min, window->Pos + window_rect_rel.Max, IM_COL32_WHITE); // [DEBUG]
    if (window_rect_rel.Contains(item_rect_rel))
        return;

    ImGuiContext& g = *GImGui;
    if (window->ScrollbarX && item_rect_rel.Min.x < window_rect_rel.Min.x)
    {
        window->ScrollTarget.x = item_rect_rel.Min.x + window->Scroll.x - g.Style.ItemSpacing.x;
        window->ScrollTargetCenterRatio.x = 0.0f;
    }
    else if (window->ScrollbarX && item_rect_rel.Max.x >= window_rect_rel.Max.x)
    {
        window->ScrollTarget.x = item_rect_rel.Max.x + window->Scroll.x + g.Style.ItemSpacing.x;
        window->ScrollTargetCenterRatio.x = 1.0f;
    }
    if (item_rect_rel.Min.y < window_rect_rel.Min.y)
    {
        window->ScrollTarget.y = item_rect_rel.Min.y + window->Scroll.y - g.Style.ItemSpacing.y;
        window->ScrollTargetCenterRatio.y = 0.0f;
    }
    else if (item_rect_rel.Max.y >= window_rect_rel.Max.y)
    {
        window->ScrollTarget.y = item_rect_rel.Max.y + window->Scroll.y + g.Style.ItemSpacing.y;
        window->ScrollTargetCenterRatio.y = 1.0f;
    }

    // Estimate upcoming scroll so we can offset our relative mouse position so mouse position can be applied immediately (under this block)
    ImVec2 next_scroll = CalcNextScrollFromScrollTargetAndClamp(window);
    item_rect_rel.Translate(window->Scroll - next_scroll);
}

static void ImGui::NavUpdate()
{
    ImGuiContext& g = *GImGui;
    g.IO.WantSetMousePos = false;

#if 0
    if (g.NavScoringCount > 0) printf("[%05d] NavScoringCount %d for '%s' layer %d (Init:%d, Move:%d)\n", g.FrameCount, g.NavScoringCount, g.NavWindow ? g.NavWindow->Name : "NULL", g.NavLayer, g.NavInitRequest || g.NavInitResultId != 0, g.NavMoveRequest);
#endif

    if ((g.IO.ConfigFlags & ImGuiConfigFlags_NavEnableGamepad) && (g.IO.BackendFlags & ImGuiBackendFlags_HasGamepad))
        if (g.IO.NavInputs[ImGuiNavInput_Activate] > 0.0f || g.IO.NavInputs[ImGuiNavInput_Input] > 0.0f || g.IO.NavInputs[ImGuiNavInput_Cancel] > 0.0f || g.IO.NavInputs[ImGuiNavInput_Menu] > 0.0f)
            g.NavInputSource = ImGuiInputSource_NavGamepad;

    // Update Keyboard->Nav inputs mapping
    if (g.IO.ConfigFlags & ImGuiConfigFlags_NavEnableKeyboard)
    {
        #define NAV_MAP_KEY(_KEY, _NAV_INPUT) if (IsKeyDown(g.IO.KeyMap[_KEY])) { g.IO.NavInputs[_NAV_INPUT] = 1.0f; g.NavInputSource = ImGuiInputSource_NavKeyboard; }
        NAV_MAP_KEY(ImGuiKey_Space,     ImGuiNavInput_Activate );
        NAV_MAP_KEY(ImGuiKey_Enter,     ImGuiNavInput_Input    );
        NAV_MAP_KEY(ImGuiKey_Escape,    ImGuiNavInput_Cancel   );
        NAV_MAP_KEY(ImGuiKey_LeftArrow, ImGuiNavInput_KeyLeft_ );
        NAV_MAP_KEY(ImGuiKey_RightArrow,ImGuiNavInput_KeyRight_);
        NAV_MAP_KEY(ImGuiKey_UpArrow,   ImGuiNavInput_KeyUp_   );
        NAV_MAP_KEY(ImGuiKey_DownArrow, ImGuiNavInput_KeyDown_ );
        if (g.IO.KeyCtrl)   g.IO.NavInputs[ImGuiNavInput_TweakSlow] = 1.0f;
        if (g.IO.KeyShift)  g.IO.NavInputs[ImGuiNavInput_TweakFast] = 1.0f;
        if (g.IO.KeyAlt)    g.IO.NavInputs[ImGuiNavInput_KeyMenu_]  = 1.0f;
        #undef NAV_MAP_KEY
    }

    memcpy(g.IO.NavInputsDownDurationPrev, g.IO.NavInputsDownDuration, sizeof(g.IO.NavInputsDownDuration));
    for (int i = 0; i < IM_ARRAYSIZE(g.IO.NavInputs); i++)
        g.IO.NavInputsDownDuration[i] = (g.IO.NavInputs[i] > 0.0f) ? (g.IO.NavInputsDownDuration[i] < 0.0f ? 0.0f : g.IO.NavInputsDownDuration[i] + g.IO.DeltaTime) : -1.0f;

    // Process navigation init request (select first/default focus)
    if (g.NavInitResultId != 0 && (!g.NavDisableHighlight || g.NavInitRequestFromMove))
    {
        // Apply result from previous navigation init request (will typically select the first item, unless SetItemDefaultFocus() has been called)
        IM_ASSERT(g.NavWindow);
        if (g.NavInitRequestFromMove)
            SetNavIDWithRectRel(g.NavInitResultId, g.NavLayer, g.NavInitResultRectRel);
        else
            SetNavID(g.NavInitResultId, g.NavLayer);
        g.NavWindow->NavRectRel[g.NavLayer] = g.NavInitResultRectRel;
    }
    g.NavInitRequest = false;
    g.NavInitRequestFromMove = false;
    g.NavInitResultId = 0;
    g.NavJustMovedToId = 0;

    // Process navigation move request
    if (g.NavMoveRequest && (g.NavMoveResultLocal.ID != 0 || g.NavMoveResultOther.ID != 0))
    {
        // Select which result to use
        ImGuiNavMoveResult* result = (g.NavMoveResultLocal.ID != 0) ? &g.NavMoveResultLocal : &g.NavMoveResultOther;
        if (g.NavMoveResultOther.ID != 0 && g.NavMoveResultOther.Window->ParentWindow == g.NavWindow) // Maybe entering a flattened child? In this case solve the tie using the regular scoring rules
            if ((g.NavMoveResultOther.DistBox < g.NavMoveResultLocal.DistBox) || (g.NavMoveResultOther.DistBox == g.NavMoveResultLocal.DistBox && g.NavMoveResultOther.DistCenter < g.NavMoveResultLocal.DistCenter))
                result = &g.NavMoveResultOther;

        IM_ASSERT(g.NavWindow && result->Window);

        // Scroll to keep newly navigated item fully into view
        if (g.NavLayer == 0)
            NavScrollToBringItemIntoView(result->Window, result->RectRel);

        // Apply result from previous frame navigation directional move request
        ClearActiveID();
        g.NavWindow = result->Window;
        SetNavIDWithRectRel(result->ID, g.NavLayer, result->RectRel);
        g.NavJustMovedToId = result->ID;
        g.NavMoveFromClampedRefRect = false;
    }

    // When a forwarded move request failed, we restore the highlight that we disabled during the forward frame
    if (g.NavMoveRequestForward == ImGuiNavForward_ForwardActive)
    {
        IM_ASSERT(g.NavMoveRequest);
        if (g.NavMoveResultLocal.ID == 0 && g.NavMoveResultOther.ID == 0)
            g.NavDisableHighlight = false;
        g.NavMoveRequestForward = ImGuiNavForward_None;
    }

    // Apply application mouse position movement, after we had a chance to process move request result.
    if (g.NavMousePosDirty && g.NavIdIsAlive)
    {
        // Set mouse position given our knowledge of the nav widget position from last frame
        if ((g.IO.ConfigFlags & ImGuiConfigFlags_NavEnableSetMousePos) && (g.IO.BackendFlags & ImGuiBackendFlags_HasSetMousePos))
        {
            g.IO.MousePos = g.IO.MousePosPrev = NavCalcPreferredMousePos();
            g.IO.WantSetMousePos = true;
        }
        g.NavMousePosDirty = false;
    }
    g.NavIdIsAlive = false;
    g.NavJustTabbedId = 0;
    IM_ASSERT(g.NavLayer == 0 || g.NavLayer == 1);

    // Store our return window (for returning from Layer 1 to Layer 0) and clear it as soon as we step back in our own Layer 0
    if (g.NavWindow)
        NavSaveLastChildNavWindow(g.NavWindow);
    if (g.NavWindow && g.NavWindow->NavLastChildNavWindow != NULL && g.NavLayer == 0)
        g.NavWindow->NavLastChildNavWindow = NULL;

    NavUpdateWindowing();

    // Set output flags for user application
    bool nav_keyboard_active = (g.IO.ConfigFlags & ImGuiConfigFlags_NavEnableKeyboard) != 0;
    bool nav_gamepad_active = (g.IO.ConfigFlags & ImGuiConfigFlags_NavEnableGamepad) != 0 && (g.IO.BackendFlags & ImGuiBackendFlags_HasGamepad) != 0;
    g.IO.NavActive = (nav_keyboard_active || nav_gamepad_active) && g.NavWindow && !(g.NavWindow->Flags & ImGuiWindowFlags_NoNavInputs);
    g.IO.NavVisible = (g.IO.NavActive && g.NavId != 0 && !g.NavDisableHighlight) || (g.NavWindowingTarget != NULL) || g.NavInitRequest;

    // Process NavCancel input (to close a popup, get back to parent, clear focus)
    if (IsNavInputPressed(ImGuiNavInput_Cancel, ImGuiInputReadMode_Pressed))
    {
        if (g.ActiveId != 0)
        {
            ClearActiveID();
        }
        else if (g.NavWindow && (g.NavWindow->Flags & ImGuiWindowFlags_ChildWindow) && !(g.NavWindow->Flags & ImGuiWindowFlags_Popup) && g.NavWindow->ParentWindow)
        {
            // Exit child window
            ImGuiWindow* child_window = g.NavWindow;
            ImGuiWindow* parent_window = g.NavWindow->ParentWindow;
            IM_ASSERT(child_window->ChildId != 0);
            FocusWindow(parent_window);
            SetNavID(child_window->ChildId, 0);
            g.NavIdIsAlive = false;
            if (g.NavDisableMouseHover)
                g.NavMousePosDirty = true;
        }
        else if (g.OpenPopupStack.Size > 0)
        {
            // Close open popup/menu
            if (!(g.OpenPopupStack.back().Window->Flags & ImGuiWindowFlags_Modal))
                ClosePopupToLevel(g.OpenPopupStack.Size - 1);
        }
        else if (g.NavLayer != 0)
        {
            // Leave the "menu" layer
            NavRestoreLayer(0);
        }
        else
        {
            // Clear NavLastId for popups but keep it for regular child window so we can leave one and come back where we were
            if (g.NavWindow && ((g.NavWindow->Flags & ImGuiWindowFlags_Popup) || !(g.NavWindow->Flags & ImGuiWindowFlags_ChildWindow)))
                g.NavWindow->NavLastIds[0] = 0;
            g.NavId = 0;
        }
    }

    // Process manual activation request
    g.NavActivateId = g.NavActivateDownId = g.NavActivatePressedId = g.NavInputId = 0;
    if (g.NavId != 0 && !g.NavDisableHighlight && !g.NavWindowingTarget && g.NavWindow && !(g.NavWindow->Flags & ImGuiWindowFlags_NoNavInputs))
    {
        bool activate_down = IsNavInputDown(ImGuiNavInput_Activate);
        bool activate_pressed = activate_down && IsNavInputPressed(ImGuiNavInput_Activate, ImGuiInputReadMode_Pressed);
        if (g.ActiveId == 0 && activate_pressed)
            g.NavActivateId = g.NavId;
        if ((g.ActiveId == 0 || g.ActiveId == g.NavId) && activate_down)
            g.NavActivateDownId = g.NavId;
        if ((g.ActiveId == 0 || g.ActiveId == g.NavId) && activate_pressed)
            g.NavActivatePressedId = g.NavId;
        if ((g.ActiveId == 0 || g.ActiveId == g.NavId) && IsNavInputPressed(ImGuiNavInput_Input, ImGuiInputReadMode_Pressed))
            g.NavInputId = g.NavId;
    }
    if (g.NavWindow && (g.NavWindow->Flags & ImGuiWindowFlags_NoNavInputs))
        g.NavDisableHighlight = true;
    if (g.NavActivateId != 0)
        IM_ASSERT(g.NavActivateDownId == g.NavActivateId);
    g.NavMoveRequest = false;

    // Process programmatic activation request
    if (g.NavNextActivateId != 0)
        g.NavActivateId = g.NavActivateDownId = g.NavActivatePressedId = g.NavInputId = g.NavNextActivateId;
    g.NavNextActivateId = 0;

    // Initiate directional inputs request
    const int allowed_dir_flags = (g.ActiveId == 0) ? ~0 : g.ActiveIdAllowNavDirFlags;
    if (g.NavMoveRequestForward == ImGuiNavForward_None)
    {
        g.NavMoveDir = ImGuiDir_None;
        if (g.NavWindow && !g.NavWindowingTarget && allowed_dir_flags && !(g.NavWindow->Flags & ImGuiWindowFlags_NoNavInputs))
        {
            if ((allowed_dir_flags & (1<<ImGuiDir_Left))  && IsNavInputPressedAnyOfTwo(ImGuiNavInput_DpadLeft, ImGuiNavInput_KeyLeft_, ImGuiInputReadMode_Repeat)) g.NavMoveDir = ImGuiDir_Left;
            if ((allowed_dir_flags & (1<<ImGuiDir_Right)) && IsNavInputPressedAnyOfTwo(ImGuiNavInput_DpadRight,ImGuiNavInput_KeyRight_,ImGuiInputReadMode_Repeat)) g.NavMoveDir = ImGuiDir_Right;
            if ((allowed_dir_flags & (1<<ImGuiDir_Up))    && IsNavInputPressedAnyOfTwo(ImGuiNavInput_DpadUp,   ImGuiNavInput_KeyUp_,   ImGuiInputReadMode_Repeat)) g.NavMoveDir = ImGuiDir_Up;
            if ((allowed_dir_flags & (1<<ImGuiDir_Down))  && IsNavInputPressedAnyOfTwo(ImGuiNavInput_DpadDown, ImGuiNavInput_KeyDown_, ImGuiInputReadMode_Repeat)) g.NavMoveDir = ImGuiDir_Down;
        }
    }
    else
    {
        // Forwarding previous request (which has been modified, e.g. wrap around menus rewrite the requests with a starting rectangle at the other side of the window)
        IM_ASSERT(g.NavMoveDir != ImGuiDir_None);
        IM_ASSERT(g.NavMoveRequestForward == ImGuiNavForward_ForwardQueued);
        g.NavMoveRequestForward = ImGuiNavForward_ForwardActive;
    }

    if (g.NavMoveDir != ImGuiDir_None)
    {
        g.NavMoveRequest = true;
        g.NavMoveDirLast = g.NavMoveDir;
    }

    // If we initiate a movement request and have no current NavId, we initiate a InitDefautRequest that will be used as a fallback if the direction fails to find a match
    if (g.NavMoveRequest && g.NavId == 0)
    {
        g.NavInitRequest = g.NavInitRequestFromMove = true;
        g.NavInitResultId = 0;
        g.NavDisableHighlight = false;
    }

    NavUpdateAnyRequestFlag();

    // Scrolling
    if (g.NavWindow && !(g.NavWindow->Flags & ImGuiWindowFlags_NoNavInputs) && !g.NavWindowingTarget)
    {
        // *Fallback* manual-scroll with NavUp/NavDown when window has no navigable item
        ImGuiWindow* window = g.NavWindow;
        const float scroll_speed = ImFloor(window->CalcFontSize() * 100 * g.IO.DeltaTime + 0.5f); // We need round the scrolling speed because sub-pixel scroll isn't reliably supported.
        if (window->DC.NavLayerActiveMask == 0x00 && window->DC.NavHasScroll && g.NavMoveRequest)
        {
            if (g.NavMoveDir == ImGuiDir_Left || g.NavMoveDir == ImGuiDir_Right)
                SetWindowScrollX(window, ImFloor(window->Scroll.x + ((g.NavMoveDir == ImGuiDir_Left) ? -1.0f : +1.0f) * scroll_speed));
            if (g.NavMoveDir == ImGuiDir_Up || g.NavMoveDir == ImGuiDir_Down)
                SetWindowScrollY(window, ImFloor(window->Scroll.y + ((g.NavMoveDir == ImGuiDir_Up) ? -1.0f : +1.0f) * scroll_speed));
        }

        // *Normal* Manual scroll with NavScrollXXX keys
        // Next movement request will clamp the NavId reference rectangle to the visible area, so navigation will resume within those bounds.
        ImVec2 scroll_dir = GetNavInputAmount2d(ImGuiNavDirSourceFlags_PadLStick, ImGuiInputReadMode_Down, 1.0f/10.0f, 10.0f);
        if (scroll_dir.x != 0.0f && window->ScrollbarX)
        {
            SetWindowScrollX(window, ImFloor(window->Scroll.x + scroll_dir.x * scroll_speed));
            g.NavMoveFromClampedRefRect = true;
        }
        if (scroll_dir.y != 0.0f)
        {
            SetWindowScrollY(window, ImFloor(window->Scroll.y + scroll_dir.y * scroll_speed));
            g.NavMoveFromClampedRefRect = true;
        }
    }

    // Reset search results
    g.NavMoveResultLocal.Clear();
    g.NavMoveResultOther.Clear();

    // When we have manually scrolled (without using navigation) and NavId becomes out of bounds, we project its bounding box to the visible area to restart navigation within visible items
    if (g.NavMoveRequest && g.NavMoveFromClampedRefRect && g.NavLayer == 0)
    {
        ImGuiWindow* window = g.NavWindow;
        ImRect window_rect_rel(window->InnerRect.Min - window->Pos - ImVec2(1,1), window->InnerRect.Max - window->Pos + ImVec2(1,1));
        if (!window_rect_rel.Contains(window->NavRectRel[g.NavLayer]))
        {
            float pad = window->CalcFontSize() * 0.5f;
            window_rect_rel.Expand(ImVec2(-ImMin(window_rect_rel.GetWidth(), pad), -ImMin(window_rect_rel.GetHeight(), pad))); // Terrible approximation for the intent of starting navigation from first fully visible item
            window->NavRectRel[g.NavLayer].ClipWith(window_rect_rel);
            g.NavId = 0;
        }
        g.NavMoveFromClampedRefRect = false;
    }

    // For scoring we use a single segment on the left side our current item bounding box (not touching the edge to avoid box overlap with zero-spaced items)
    ImRect nav_rect_rel = (g.NavWindow && !g.NavWindow->NavRectRel[g.NavLayer].IsInverted()) ? g.NavWindow->NavRectRel[g.NavLayer] : ImRect(0,0,0,0);
    g.NavScoringRectScreen = g.NavWindow ? ImRect(g.NavWindow->Pos + nav_rect_rel.Min, g.NavWindow->Pos + nav_rect_rel.Max) : GetViewportRect();
    g.NavScoringRectScreen.Min.x = ImMin(g.NavScoringRectScreen.Min.x + 1.0f, g.NavScoringRectScreen.Max.x);
    g.NavScoringRectScreen.Max.x = g.NavScoringRectScreen.Min.x;
    IM_ASSERT(!g.NavScoringRectScreen.IsInverted()); // Ensure if we have a finite, non-inverted bounding box here will allows us to remove extraneous fabsf() calls in NavScoreItem().
    //g.OverlayDrawList.AddRect(g.NavScoringRectScreen.Min, g.NavScoringRectScreen.Max, IM_COL32(255,200,0,255)); // [DEBUG]
    g.NavScoringCount = 0;
#if IMGUI_DEBUG_NAV_RECTS
    if (g.NavWindow) { for (int layer = 0; layer < 2; layer++) g.OverlayDrawList.AddRect(g.NavWindow->Pos + g.NavWindow->NavRectRel[layer].Min, g.NavWindow->Pos + g.NavWindow->NavRectRel[layer].Max, IM_COL32(255,200,0,255)); } // [DEBUG] 
    if (g.NavWindow) { ImU32 col = (g.NavWindow->HiddenFrames == 0) ? IM_COL32(255,0,255,255) : IM_COL32(255,0,0,255); ImVec2 p = NavCalcPreferredMousePos(); char buf[32]; ImFormatString(buf, 32, "%d", g.NavLayer); g.OverlayDrawList.AddCircleFilled(p, 3.0f, col); g.OverlayDrawList.AddText(NULL, 13.0f, p + ImVec2(8,-4), col, buf); }
#endif
}

static void ImGui::NewFrameUpdateMovingWindow()
{
    ImGuiContext& g = *GImGui;
    if (g.MovingWindow && g.MovingWindow->MoveId == g.ActiveId && g.ActiveIdSource == ImGuiInputSource_Mouse)
    {
        // We actually want to move the root window. g.MovingWindow == window we clicked on (could be a child window). 
        // We track it to preserve Focus and so that ActiveIdWindow == MovingWindow and ActiveId == MovingWindow->MoveId for consistency.
        KeepAliveID(g.ActiveId);
        IM_ASSERT(g.MovingWindow && g.MovingWindow->RootWindow);
        ImGuiWindow* moving_window = g.MovingWindow->RootWindow;
        if (g.IO.MouseDown[0])
        {
            ImVec2 pos = g.IO.MousePos - g.ActiveIdClickOffset;
            if (moving_window->PosFloat.x != pos.x || moving_window->PosFloat.y != pos.y)
            {
                MarkIniSettingsDirty(moving_window);
                moving_window->PosFloat = pos;
            }
            FocusWindow(g.MovingWindow);
        }
        else
        {
            ClearActiveID();
            g.MovingWindow = NULL;
        }
    }
    else
    {
        // When clicking/dragging from a window that has the _NoMove flag, we still set the ActiveId in order to prevent hovering others.
        if (g.ActiveIdWindow && g.ActiveIdWindow->MoveId == g.ActiveId)
        {
            KeepAliveID(g.ActiveId);
            if (!g.IO.MouseDown[0])
                ClearActiveID();
        }
        g.MovingWindow = NULL;
    }
}

static void ImGui::NewFrameUpdateMouseInputs()
{
    ImGuiContext& g = *GImGui;

    // If mouse just appeared or disappeared (usually denoted by -FLT_MAX component, but in reality we test for -256000.0f) we cancel out movement in MouseDelta
    if (ImGui::IsMousePosValid(&g.IO.MousePos) && ImGui::IsMousePosValid(&g.IO.MousePosPrev))
        g.IO.MouseDelta = g.IO.MousePos - g.IO.MousePosPrev;
    else
        g.IO.MouseDelta = ImVec2(0.0f, 0.0f);
    if (g.IO.MouseDelta.x != 0.0f || g.IO.MouseDelta.y != 0.0f)
        g.NavDisableMouseHover = false;

    g.IO.MousePosPrev = g.IO.MousePos;
    for (int i = 0; i < IM_ARRAYSIZE(g.IO.MouseDown); i++)
    {
        g.IO.MouseClicked[i] = g.IO.MouseDown[i] && g.IO.MouseDownDuration[i] < 0.0f;
        g.IO.MouseReleased[i] = !g.IO.MouseDown[i] && g.IO.MouseDownDuration[i] >= 0.0f;
        g.IO.MouseDownDurationPrev[i] = g.IO.MouseDownDuration[i];
        g.IO.MouseDownDuration[i] = g.IO.MouseDown[i] ? (g.IO.MouseDownDuration[i] < 0.0f ? 0.0f : g.IO.MouseDownDuration[i] + g.IO.DeltaTime) : -1.0f;
        g.IO.MouseDoubleClicked[i] = false;
        if (g.IO.MouseClicked[i])
        {
            if (g.Time - g.IO.MouseClickedTime[i] < g.IO.MouseDoubleClickTime)
            {
                if (ImLengthSqr(g.IO.MousePos - g.IO.MouseClickedPos[i]) < g.IO.MouseDoubleClickMaxDist * g.IO.MouseDoubleClickMaxDist)
                    g.IO.MouseDoubleClicked[i] = true;
                g.IO.MouseClickedTime[i] = -FLT_MAX;    // so the third click isn't turned into a double-click
            }
            else
            {
                g.IO.MouseClickedTime[i] = g.Time;
            }
            g.IO.MouseClickedPos[i] = g.IO.MousePos;
            g.IO.MouseDragMaxDistanceAbs[i] = ImVec2(0.0f, 0.0f);
            g.IO.MouseDragMaxDistanceSqr[i] = 0.0f;
        }
        else if (g.IO.MouseDown[i])
        {
            ImVec2 mouse_delta = g.IO.MousePos - g.IO.MouseClickedPos[i];
            g.IO.MouseDragMaxDistanceAbs[i].x = ImMax(g.IO.MouseDragMaxDistanceAbs[i].x, mouse_delta.x < 0.0f ? -mouse_delta.x : mouse_delta.x);
            g.IO.MouseDragMaxDistanceAbs[i].y = ImMax(g.IO.MouseDragMaxDistanceAbs[i].y, mouse_delta.y < 0.0f ? -mouse_delta.y : mouse_delta.y);
            g.IO.MouseDragMaxDistanceSqr[i] = ImMax(g.IO.MouseDragMaxDistanceSqr[i], ImLengthSqr(mouse_delta));
        }
        if (g.IO.MouseClicked[i]) // Clicking any mouse button reactivate mouse hovering which may have been deactivated by gamepad/keyboard navigation
            g.NavDisableMouseHover = false;
    }
}

// The reason this is exposed in imgui_internal.h is: on touch-based system that don't have hovering, we want to dispatch inputs to the right target (imgui vs imgui+app)
void ImGui::NewFrameUpdateHoveredWindowAndCaptureFlags()
{
    ImGuiContext& g = *GImGui;

    // Find the window hovered by mouse:
    // - Child windows can extend beyond the limit of their parent so we need to derive HoveredRootWindow from HoveredWindow.
    // - When moving a window we can skip the search, which also conveniently bypasses the fact that window->WindowRectClipped is lagging as this point of the frame.
    // - We also support the moved window toggling the NoInputs flag after moving has started in order to be able to detect windows below it, which is useful for e.g. docking mechanisms.
    g.HoveredWindow = (g.MovingWindow && !(g.MovingWindow->Flags & ImGuiWindowFlags_NoInputs)) ? g.MovingWindow : FindHoveredWindow();
    g.HoveredRootWindow = g.HoveredWindow ? g.HoveredWindow->RootWindow : NULL;

    // Modal windows prevents cursor from hovering behind them.
    ImGuiWindow* modal_window = GetFrontMostModalRootWindow();
    if (modal_window)
        if (g.HoveredRootWindow && !IsWindowChildOf(g.HoveredRootWindow, modal_window))
            g.HoveredRootWindow = g.HoveredWindow = NULL;

    // Disabled mouse?
    if (g.IO.ConfigFlags & ImGuiConfigFlags_NoMouse)
        g.HoveredWindow = g.HoveredRootWindow = NULL;

    // We track click ownership. When clicked outside of a window the click is owned by the application and won't report hovering nor request capture even while dragging over our windows afterward.
    int mouse_earliest_button_down = -1;
    bool mouse_any_down = false;
    for (int i = 0; i < IM_ARRAYSIZE(g.IO.MouseDown); i++)
    {
        if (g.IO.MouseClicked[i])
            g.IO.MouseDownOwned[i] = (g.HoveredWindow != NULL) || (!g.OpenPopupStack.empty());
        mouse_any_down |= g.IO.MouseDown[i];
        if (g.IO.MouseDown[i])
            if (mouse_earliest_button_down == -1 || g.IO.MouseClickedTime[i] < g.IO.MouseClickedTime[mouse_earliest_button_down])
                mouse_earliest_button_down = i;
    }
    const bool mouse_avail_to_imgui = (mouse_earliest_button_down == -1) || g.IO.MouseDownOwned[mouse_earliest_button_down];

    // If mouse was first clicked outside of ImGui bounds we also cancel out hovering.
    // FIXME: For patterns of drag and drop across OS windows, we may need to rework/remove this test (first committed 311c0ca9 on 2015/02)
    const bool mouse_dragging_extern_payload = g.DragDropActive && (g.DragDropSourceFlags & ImGuiDragDropFlags_SourceExtern) != 0;
    if (!mouse_avail_to_imgui && !mouse_dragging_extern_payload)
        g.HoveredWindow = g.HoveredRootWindow = NULL;

    // Update io.WantCaptureMouse for the user application (true = dispatch mouse info to imgui, false = dispatch mouse info to imgui + app)
    if (g.WantCaptureMouseNextFrame != -1)
        g.IO.WantCaptureMouse = (g.WantCaptureMouseNextFrame != 0);
    else
        g.IO.WantCaptureMouse = (mouse_avail_to_imgui && (g.HoveredWindow != NULL || mouse_any_down)) || (!g.OpenPopupStack.empty());

    // Update io.WantCaptureKeyboard for the user application (true = dispatch keyboard info to imgui, false = dispatch keyboard info to imgui + app)
    if (g.WantCaptureKeyboardNextFrame != -1)
        g.IO.WantCaptureKeyboard = (g.WantCaptureKeyboardNextFrame != 0);
    else
        g.IO.WantCaptureKeyboard = (g.ActiveId != 0) || (modal_window != NULL);
    if (g.IO.NavActive && (g.IO.ConfigFlags & ImGuiConfigFlags_NavEnableKeyboard) && !(g.IO.ConfigFlags & ImGuiConfigFlags_NavNoCaptureKeyboard))
        g.IO.WantCaptureKeyboard = true;

    // Update io.WantTextInput flag, this is to allow systems without a keyboard (e.g. mobile, hand-held) to show a software keyboard if possible
    g.IO.WantTextInput = (g.WantTextInputNextFrame != -1) ? (g.WantTextInputNextFrame != 0) : 0;
}

void ImGui::NewFrame()
{
    IM_ASSERT(GImGui != NULL && "No current context. Did you call ImGui::CreateContext() or ImGui::SetCurrentContext()?");
    ImGuiContext& g = *GImGui;

    // Check user data
    // (We pass an error message in the assert expression as a trick to get it visible to programmers who are not using a debugger, as most assert handlers display their argument)
    IM_ASSERT(g.Initialized);
    IM_ASSERT(g.IO.DeltaTime >= 0.0f                                    && "Need a positive DeltaTime (zero is tolerated but will cause some timing issues)");
    IM_ASSERT(g.IO.DisplaySize.x >= 0.0f && g.IO.DisplaySize.y >= 0.0f  && "Invalid DisplaySize value");
    IM_ASSERT(g.IO.Fonts->Fonts.Size > 0                                && "Font Atlas not built. Did you call io.Fonts->GetTexDataAsRGBA32() / GetTexDataAsAlpha8() ?");
    IM_ASSERT(g.IO.Fonts->Fonts[0]->IsLoaded()                          && "Font Atlas not built. Did you call io.Fonts->GetTexDataAsRGBA32() / GetTexDataAsAlpha8() ?");
    IM_ASSERT(g.Style.CurveTessellationTol > 0.0f                       && "Invalid style setting");
    IM_ASSERT(g.Style.Alpha >= 0.0f && g.Style.Alpha <= 1.0f            && "Invalid style setting. Alpha cannot be negative (allows us to avoid a few clamps in color computations)");
    IM_ASSERT((g.FrameCount == 0 || g.FrameCountEnded == g.FrameCount)  && "Forgot to call Render() or EndFrame() at the end of the previous frame?");
    for (int n = 0; n < ImGuiKey_COUNT; n++)
        IM_ASSERT(g.IO.KeyMap[n] >= -1 && g.IO.KeyMap[n] < IM_ARRAYSIZE(g.IO.KeysDown) && "io.KeyMap[] contains an out of bound value (need to be 0..512, or -1 for unmapped key)");

    // Do a simple check for required key mapping (we intentionally do NOT check all keys to not pressure user into setting up everything, but Space is required and was super recently added in 1.60 WIP)
    if (g.IO.ConfigFlags & ImGuiConfigFlags_NavEnableKeyboard)
        IM_ASSERT(g.IO.KeyMap[ImGuiKey_Space] != -1 && "ImGuiKey_Space is not mapped, required for keyboard navigation.");

    // Load settings on first frame
    if (!g.SettingsLoaded)
    {
        IM_ASSERT(g.SettingsWindows.empty());
        LoadIniSettingsFromDisk(g.IO.IniFilename);
        g.SettingsLoaded = true;
    }

    // Save settings (with a delay so we don't spam disk too much)
    if (g.SettingsDirtyTimer > 0.0f)
    {
        g.SettingsDirtyTimer -= g.IO.DeltaTime;
        if (g.SettingsDirtyTimer <= 0.0f)
            SaveIniSettingsToDisk(g.IO.IniFilename);
    }

    g.Time += g.IO.DeltaTime;
    g.FrameCount += 1;
    g.TooltipOverrideCount = 0;
    g.WindowsActiveCount = 0;

    SetCurrentFont(GetDefaultFont());
    IM_ASSERT(g.Font->IsLoaded());
    g.DrawListSharedData.ClipRectFullscreen = ImVec4(0.0f, 0.0f, g.IO.DisplaySize.x, g.IO.DisplaySize.y);
    g.DrawListSharedData.CurveTessellationTol = g.Style.CurveTessellationTol;

    g.OverlayDrawList.Clear();
    g.OverlayDrawList.PushTextureID(g.IO.Fonts->TexID);
    g.OverlayDrawList.PushClipRectFullScreen();
    g.OverlayDrawList.Flags = (g.Style.AntiAliasedLines ? ImDrawListFlags_AntiAliasedLines : 0) | (g.Style.AntiAliasedFill ? ImDrawListFlags_AntiAliasedFill : 0);

    // Mark rendering data as invalid to prevent user who may have a handle on it to use it
    g.DrawData.Clear();

    // Clear reference to active widget if the widget isn't alive anymore
    if (!g.HoveredIdPreviousFrame)
        g.HoveredIdTimer = 0.0f;
    g.HoveredIdPreviousFrame = g.HoveredId;
    g.HoveredId = 0;
    g.HoveredIdAllowOverlap = false;
    if (!g.ActiveIdIsAlive && g.ActiveIdPreviousFrame == g.ActiveId && g.ActiveId != 0)
        ClearActiveID();
    if (g.ActiveId)
        g.ActiveIdTimer += g.IO.DeltaTime;
    g.ActiveIdPreviousFrame = g.ActiveId;
    g.ActiveIdIsAlive = false;
    g.ActiveIdIsJustActivated = false;
    if (g.ScalarAsInputTextId && g.ActiveId != g.ScalarAsInputTextId)
        g.ScalarAsInputTextId = 0;

    // Elapse drag & drop payload
    if (g.DragDropActive && g.DragDropPayload.DataFrameCount + 1 < g.FrameCount)
    {
        ClearDragDrop();
        g.DragDropPayloadBufHeap.clear();
        memset(&g.DragDropPayloadBufLocal, 0, sizeof(g.DragDropPayloadBufLocal));
    }
    g.DragDropAcceptIdPrev = g.DragDropAcceptIdCurr;
    g.DragDropAcceptIdCurr = 0;
    g.DragDropAcceptIdCurrRectSurface = FLT_MAX;

    // Update keyboard input state
    memcpy(g.IO.KeysDownDurationPrev, g.IO.KeysDownDuration, sizeof(g.IO.KeysDownDuration));
    for (int i = 0; i < IM_ARRAYSIZE(g.IO.KeysDown); i++)
        g.IO.KeysDownDuration[i] = g.IO.KeysDown[i] ? (g.IO.KeysDownDuration[i] < 0.0f ? 0.0f : g.IO.KeysDownDuration[i] + g.IO.DeltaTime) : -1.0f;

    // Update gamepad/keyboard directional navigation
    NavUpdate();

    // Update mouse input state
    NewFrameUpdateMouseInputs();

    // Calculate frame-rate for the user, as a purely luxurious feature
    g.FramerateSecPerFrameAccum += g.IO.DeltaTime - g.FramerateSecPerFrame[g.FramerateSecPerFrameIdx];
    g.FramerateSecPerFrame[g.FramerateSecPerFrameIdx] = g.IO.DeltaTime;
    g.FramerateSecPerFrameIdx = (g.FramerateSecPerFrameIdx + 1) % IM_ARRAYSIZE(g.FramerateSecPerFrame);
    g.IO.Framerate = 1.0f / (g.FramerateSecPerFrameAccum / (float)IM_ARRAYSIZE(g.FramerateSecPerFrame));

    // Handle user moving window with mouse (at the beginning of the frame to avoid input lag or sheering)
    NewFrameUpdateMovingWindow();
    NewFrameUpdateHoveredWindowAndCaptureFlags();
    
    if (GetFrontMostModalRootWindow() != NULL)
        g.ModalWindowDarkeningRatio = ImMin(g.ModalWindowDarkeningRatio + g.IO.DeltaTime * 6.0f, 1.0f);
    else
        g.ModalWindowDarkeningRatio = 0.0f;

    g.MouseCursor = ImGuiMouseCursor_Arrow;
    g.WantCaptureMouseNextFrame = g.WantCaptureKeyboardNextFrame = g.WantTextInputNextFrame = -1;
    g.OsImePosRequest = ImVec2(1.0f, 1.0f); // OS Input Method Editor showing on top-left of our window by default

    // Mouse wheel scrolling, scale
    if (g.HoveredWindow && !g.HoveredWindow->Collapsed && (g.IO.MouseWheel != 0.0f || g.IO.MouseWheelH != 0.0f))
    {
        // If a child window has the ImGuiWindowFlags_NoScrollWithMouse flag, we give a chance to scroll its parent (unless either ImGuiWindowFlags_NoInputs or ImGuiWindowFlags_NoScrollbar are also set).
        ImGuiWindow* window = g.HoveredWindow;
        ImGuiWindow* scroll_window = window;
        while ((scroll_window->Flags & ImGuiWindowFlags_ChildWindow) && (scroll_window->Flags & ImGuiWindowFlags_NoScrollWithMouse) && !(scroll_window->Flags & ImGuiWindowFlags_NoScrollbar) && !(scroll_window->Flags & ImGuiWindowFlags_NoInputs) && scroll_window->ParentWindow)
            scroll_window = scroll_window->ParentWindow;
        const bool scroll_allowed = !(scroll_window->Flags & ImGuiWindowFlags_NoScrollWithMouse) && !(scroll_window->Flags & ImGuiWindowFlags_NoInputs);

        if (g.IO.MouseWheel != 0.0f)
        {
            if (g.IO.KeyCtrl && g.IO.FontAllowUserScaling)
            {
                // Zoom / Scale window
                const float new_font_scale = ImClamp(window->FontWindowScale + g.IO.MouseWheel * 0.10f, 0.50f, 2.50f);
                const float scale = new_font_scale / window->FontWindowScale;
                window->FontWindowScale = new_font_scale;

                const ImVec2 offset = window->Size * (1.0f - scale) * (g.IO.MousePos - window->Pos) / window->Size;
                window->Pos += offset;
                window->PosFloat += offset;
                window->Size *= scale;
                window->SizeFull *= scale;
            }
            else if (!g.IO.KeyCtrl && scroll_allowed)
            {
                // Mouse wheel vertical scrolling
                float scroll_amount = 5 * scroll_window->CalcFontSize();
                scroll_amount = (float)(int)ImMin(scroll_amount, (scroll_window->ContentsRegionRect.GetHeight() + scroll_window->WindowPadding.y * 2.0f) * 0.67f);
                SetWindowScrollY(scroll_window, scroll_window->Scroll.y - g.IO.MouseWheel * scroll_amount);
            }
        }
        if (g.IO.MouseWheelH != 0.0f && scroll_allowed)
        {
            // Mouse wheel horizontal scrolling (for hardware that supports it)
            float scroll_amount = scroll_window->CalcFontSize();
            if (!g.IO.KeyCtrl && !(window->Flags & ImGuiWindowFlags_NoScrollWithMouse))
                SetWindowScrollX(window, window->Scroll.x - g.IO.MouseWheelH * scroll_amount);
        }
    }

    // Pressing TAB activate widget focus
    if (g.ActiveId == 0 && g.NavWindow != NULL && g.NavWindow->Active && !(g.NavWindow->Flags & ImGuiWindowFlags_NoNavInputs) && !g.IO.KeyCtrl && IsKeyPressedMap(ImGuiKey_Tab, false))
    {
        if (g.NavId != 0 && g.NavIdTabCounter != INT_MAX)
            g.NavWindow->FocusIdxTabRequestNext = g.NavIdTabCounter + 1 + (g.IO.KeyShift ? -1 : 1);
        else
            g.NavWindow->FocusIdxTabRequestNext = g.IO.KeyShift ? -1 : 0;
    }
    g.NavIdTabCounter = INT_MAX;

    // Mark all windows as not visible
    for (int i = 0; i != g.Windows.Size; i++)
    {
        ImGuiWindow* window = g.Windows[i];
        window->WasActive = window->Active;
        window->Active = false;
        window->WriteAccessed = false;
    }

    // Closing the focused window restore focus to the first active root window in descending z-order
    if (g.NavWindow && !g.NavWindow->WasActive)
        FocusFrontMostActiveWindow(NULL);

    // No window should be open at the beginning of the frame.
    // But in order to allow the user to call NewFrame() multiple times without calling Render(), we are doing an explicit clear.
    g.CurrentWindowStack.resize(0);
    g.CurrentPopupStack.resize(0);
    ClosePopupsOverWindow(g.NavWindow);

    // Create implicit window - we will only render it if the user has added something to it.
    // We don't use "Debug" to avoid colliding with user trying to create a "Debug" window with custom flags.
    SetNextWindowSize(ImVec2(400,400), ImGuiCond_FirstUseEver);
    Begin("Debug##Default");
}

static void* SettingsHandlerWindow_ReadOpen(ImGuiContext*, ImGuiSettingsHandler*, const char* name)
{
    ImGuiWindowSettings* settings = ImGui::FindWindowSettings(ImHash(name, 0));
    if (!settings)
        settings = AddWindowSettings(name);
    return (void*)settings;
}

static void SettingsHandlerWindow_ReadLine(ImGuiContext*, ImGuiSettingsHandler*, void* entry, const char* line)
{
    ImGuiWindowSettings* settings = (ImGuiWindowSettings*)entry;
    float x, y; 
    int i;
    if (sscanf(line, "Pos=%f,%f", &x, &y) == 2)         settings->Pos = ImVec2(x, y);
    else if (sscanf(line, "Size=%f,%f", &x, &y) == 2)   settings->Size = ImMax(ImVec2(x, y), GImGui->Style.WindowMinSize);
    else if (sscanf(line, "Collapsed=%d", &i) == 1)     settings->Collapsed = (i != 0);
}

static void SettingsHandlerWindow_WriteAll(ImGuiContext* imgui_ctx, ImGuiSettingsHandler* handler, ImGuiTextBuffer* buf)
{
    // Gather data from windows that were active during this session
    ImGuiContext& g = *imgui_ctx;
    for (int i = 0; i != g.Windows.Size; i++)
    {
        ImGuiWindow* window = g.Windows[i];
        if (window->Flags & ImGuiWindowFlags_NoSavedSettings)
            continue;
        ImGuiWindowSettings* settings = ImGui::FindWindowSettings(window->ID);
        if (!settings)
            settings = AddWindowSettings(window->Name);
        settings->Pos = window->Pos;
        settings->Size = window->SizeFull;
        settings->Collapsed = window->Collapsed;
    }

    // Write a buffer
    // If a window wasn't opened in this session we preserve its settings
    buf->reserve(buf->size() + g.SettingsWindows.Size * 96); // ballpark reserve
    for (int i = 0; i != g.SettingsWindows.Size; i++)
    {
        const ImGuiWindowSettings* settings = &g.SettingsWindows[i];
        if (settings->Pos.x == FLT_MAX)
            continue;
        const char* name = settings->Name;
        if (const char* p = strstr(name, "###"))  // Skip to the "###" marker if any. We don't skip past to match the behavior of GetID()
            name = p;
        buf->appendf("[%s][%s]\n", handler->TypeName, name);
        buf->appendf("Pos=%d,%d\n", (int)settings->Pos.x, (int)settings->Pos.y);
        buf->appendf("Size=%d,%d\n", (int)settings->Size.x, (int)settings->Size.y);
        buf->appendf("Collapsed=%d\n", settings->Collapsed);
        buf->appendf("\n");
    }
}

void ImGui::Initialize(ImGuiContext* context)
{
    ImGuiContext& g = *context;
    IM_ASSERT(!g.Initialized && !g.SettingsLoaded);
    g.LogClipboard = IM_NEW(ImGuiTextBuffer)();

    // Add .ini handle for ImGuiWindow type
    ImGuiSettingsHandler ini_handler;
    ini_handler.TypeName = "Window";
    ini_handler.TypeHash = ImHash("Window", 0, 0);
    ini_handler.ReadOpenFn = SettingsHandlerWindow_ReadOpen;
    ini_handler.ReadLineFn = SettingsHandlerWindow_ReadLine;
    ini_handler.WriteAllFn = SettingsHandlerWindow_WriteAll;
    g.SettingsHandlers.push_front(ini_handler);

    g.Initialized = true;
}

// This function is merely here to free heap allocations.
void ImGui::Shutdown(ImGuiContext* context)
{
    ImGuiContext& g = *context;

    // The fonts atlas can be used prior to calling NewFrame(), so we clear it even if g.Initialized is FALSE (which would happen if we never called NewFrame)
    if (g.IO.Fonts && g.FontAtlasOwnedByContext)
        IM_DELETE(g.IO.Fonts);

    // Cleanup of other data are conditional on actually having initialize ImGui.
    if (!g.Initialized)
        return;

    SaveIniSettingsToDisk(g.IO.IniFilename);

    // Clear everything else
    for (int i = 0; i < g.Windows.Size; i++)
        IM_DELETE(g.Windows[i]);
    g.Windows.clear();
    g.WindowsSortBuffer.clear();
    g.CurrentWindow = NULL;
    g.CurrentWindowStack.clear();
    g.WindowsById.Clear();
    g.NavWindow = NULL;
    g.HoveredWindow = NULL;
    g.HoveredRootWindow = NULL;
    g.ActiveIdWindow = NULL;
    g.MovingWindow = NULL;
    for (int i = 0; i < g.SettingsWindows.Size; i++)
        IM_DELETE(g.SettingsWindows[i].Name);
    g.ColorModifiers.clear();
    g.StyleModifiers.clear();
    g.FontStack.clear();
    g.OpenPopupStack.clear();
    g.CurrentPopupStack.clear();
    g.DrawDataBuilder.ClearFreeMemory();
    g.OverlayDrawList.ClearFreeMemory();
    g.PrivateClipboard.clear();
    g.InputTextState.Text.clear();
    g.InputTextState.InitialText.clear();
    g.InputTextState.TempTextBuffer.clear();

    g.SettingsWindows.clear();
    g.SettingsHandlers.clear();

    if (g.LogFile && g.LogFile != stdout)
    {
        fclose(g.LogFile);
        g.LogFile = NULL;
    }
    if (g.LogClipboard)
        IM_DELETE(g.LogClipboard);

    g.Initialized = false;
}

ImGuiWindowSettings* ImGui::FindWindowSettings(ImGuiID id)
{
    ImGuiContext& g = *GImGui;
    for (int i = 0; i != g.SettingsWindows.Size; i++)
        if (g.SettingsWindows[i].Id == id)
            return &g.SettingsWindows[i];
    return NULL;
}

static ImGuiWindowSettings* AddWindowSettings(const char* name)
{
    ImGuiContext& g = *GImGui;
    g.SettingsWindows.push_back(ImGuiWindowSettings());
    ImGuiWindowSettings* settings = &g.SettingsWindows.back();
    settings->Name = ImStrdup(name);
    settings->Id = ImHash(name, 0);
    return settings;
}

static void LoadIniSettingsFromDisk(const char* ini_filename)
{
    if (!ini_filename)
        return;
    char* file_data = (char*)ImFileLoadToMemory(ini_filename, "rb", NULL, +1);
    if (!file_data)
        return;
    LoadIniSettingsFromMemory(file_data);
    ImGui::MemFree(file_data);
}

ImGuiSettingsHandler* ImGui::FindSettingsHandler(const char* type_name)
{
    ImGuiContext& g = *GImGui;
    const ImGuiID type_hash = ImHash(type_name, 0, 0);
    for (int handler_n = 0; handler_n < g.SettingsHandlers.Size; handler_n++)
        if (g.SettingsHandlers[handler_n].TypeHash == type_hash)
            return &g.SettingsHandlers[handler_n];
    return NULL;
}

// Zero-tolerance, no error reporting, cheap .ini parsing
static void LoadIniSettingsFromMemory(const char* buf_readonly)
{
    // For convenience and to make the code simpler, we'll write zero terminators inside the buffer. So let's create a writable copy.
    char* buf = ImStrdup(buf_readonly);
    char* buf_end = buf + strlen(buf);

    ImGuiContext& g = *GImGui;
    void* entry_data = NULL;
    ImGuiSettingsHandler* entry_handler = NULL;

    char* line_end = NULL;
    for (char* line = buf; line < buf_end; line = line_end + 1)
    {
        // Skip new lines markers, then find end of the line
        while (*line == '\n' || *line == '\r')
            line++;
        line_end = line;
        while (line_end < buf_end && *line_end != '\n' && *line_end != '\r')
            line_end++;
        line_end[0] = 0;

        if (line[0] == '[' && line_end > line && line_end[-1] == ']')
        {
            // Parse "[Type][Name]". Note that 'Name' can itself contains [] characters, which is acceptable with the current format and parsing code.
            line_end[-1] = 0;
            const char* name_end = line_end - 1; 
            const char* type_start = line + 1;
            char* type_end = (char*)(intptr_t)ImStrchrRange(type_start, name_end, ']');
            const char* name_start = type_end ? ImStrchrRange(type_end + 1, name_end, '[') : NULL;
            if (!type_end || !name_start)
            {
                name_start = type_start; // Import legacy entries that have no type
                type_start = "Window";
            }
            else
            {
                *type_end = 0; // Overwrite first ']' 
                name_start++;  // Skip second '['
            }
            entry_handler = ImGui::FindSettingsHandler(type_start);
            entry_data = entry_handler ? entry_handler->ReadOpenFn(&g, entry_handler, name_start) : NULL;
        }
        else if (entry_handler != NULL && entry_data != NULL)
        {
            // Let type handler parse the line
            entry_handler->ReadLineFn(&g, entry_handler, entry_data, line);
        }
    }
    ImGui::MemFree(buf);
    g.SettingsLoaded = true;
}

static void SaveIniSettingsToDisk(const char* ini_filename)
{
    ImGuiContext& g = *GImGui;
    g.SettingsDirtyTimer = 0.0f;
    if (!ini_filename)
        return;

    ImVector<char> buf;
    SaveIniSettingsToMemory(buf);

    FILE* f = ImFileOpen(ini_filename, "wt");
    if (!f)
        return;
    fwrite(buf.Data, sizeof(char), (size_t)buf.Size, f);
    fclose(f);
}

static void SaveIniSettingsToMemory(ImVector<char>& out_buf)
{
    ImGuiContext& g = *GImGui;
    g.SettingsDirtyTimer = 0.0f;

    ImGuiTextBuffer buf;
    for (int handler_n = 0; handler_n < g.SettingsHandlers.Size; handler_n++)
    {
        ImGuiSettingsHandler* handler = &g.SettingsHandlers[handler_n];
        handler->WriteAllFn(&g, handler, &buf);
    }

    buf.Buf.pop_back(); // Remove extra zero-terminator used by ImGuiTextBuffer
    out_buf.swap(buf.Buf);
}

void ImGui::MarkIniSettingsDirty()
{
    ImGuiContext& g = *GImGui;
    if (g.SettingsDirtyTimer <= 0.0f)
        g.SettingsDirtyTimer = g.IO.IniSavingRate;
}

static void MarkIniSettingsDirty(ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;
    if (!(window->Flags & ImGuiWindowFlags_NoSavedSettings))
        if (g.SettingsDirtyTimer <= 0.0f)
            g.SettingsDirtyTimer = g.IO.IniSavingRate;
}

// FIXME: Add a more explicit sort order in the window structure.
static int IMGUI_CDECL ChildWindowComparer(const void* lhs, const void* rhs)
{
    const ImGuiWindow* const a = *(const ImGuiWindow* const *)lhs;
    const ImGuiWindow* const b = *(const ImGuiWindow* const *)rhs;
    if (int d = (a->Flags & ImGuiWindowFlags_Popup) - (b->Flags & ImGuiWindowFlags_Popup))
        return d;
    if (int d = (a->Flags & ImGuiWindowFlags_Tooltip) - (b->Flags & ImGuiWindowFlags_Tooltip))
        return d;
    return (a->BeginOrderWithinParent - b->BeginOrderWithinParent);
}

static void AddWindowToSortedBuffer(ImVector<ImGuiWindow*>* out_sorted_windows, ImGuiWindow* window)
{
    out_sorted_windows->push_back(window);
    if (window->Active)
    {
        int count = window->DC.ChildWindows.Size;
        if (count > 1)
            qsort(window->DC.ChildWindows.begin(), (size_t)count, sizeof(ImGuiWindow*), ChildWindowComparer);
        for (int i = 0; i < count; i++)
        {
            ImGuiWindow* child = window->DC.ChildWindows[i];
            if (child->Active)
                AddWindowToSortedBuffer(out_sorted_windows, child);
        }
    }
}

static void AddDrawListToDrawData(ImVector<ImDrawList*>* out_render_list, ImDrawList* draw_list)
{
    if (draw_list->CmdBuffer.empty())
        return;

    // Remove trailing command if unused
    ImDrawCmd& last_cmd = draw_list->CmdBuffer.back();
    if (last_cmd.ElemCount == 0 && last_cmd.UserCallback == NULL)
    {
        draw_list->CmdBuffer.pop_back();
        if (draw_list->CmdBuffer.empty())
            return;
    }

    // Draw list sanity check. Detect mismatch between PrimReserve() calls and incrementing _VtxCurrentIdx, _VtxWritePtr etc. May trigger for you if you are using PrimXXX functions incorrectly.
    IM_ASSERT(draw_list->VtxBuffer.Size == 0 || draw_list->_VtxWritePtr == draw_list->VtxBuffer.Data + draw_list->VtxBuffer.Size);
    IM_ASSERT(draw_list->IdxBuffer.Size == 0 || draw_list->_IdxWritePtr == draw_list->IdxBuffer.Data + draw_list->IdxBuffer.Size);
    IM_ASSERT((int)draw_list->_VtxCurrentIdx == draw_list->VtxBuffer.Size);

    // Check that draw_list doesn't use more vertices than indexable (default ImDrawIdx = unsigned short = 2 bytes = 64K vertices per ImDrawList = per window)
    // If this assert triggers because you are drawing lots of stuff manually:
    // A) Make sure you are coarse clipping, because ImDrawList let all your vertices pass. You can use the Metrics window to inspect draw list contents.
    // B) If you need/want meshes with more than 64K vertices, uncomment the '#define ImDrawIdx unsigned int' line in imconfig.h to set the index size to 4 bytes. 
    //    You'll need to handle the 4-bytes indices to your renderer. For example, the OpenGL example code detect index size at compile-time by doing:
    //      glDrawElements(GL_TRIANGLES, (GLsizei)pcmd->ElemCount, sizeof(ImDrawIdx) == 2 ? GL_UNSIGNED_SHORT : GL_UNSIGNED_INT, idx_buffer_offset);
    //    Your own engine or render API may use different parameters or function calls to specify index sizes. 2 and 4 bytes indices are generally supported by most API.
    // C) If for some reason you cannot use 4 bytes indices or don't want to, a workaround is to call BeginChild()/EndChild() before reaching the 64K limit to split your draw commands in multiple draw lists.
    if (sizeof(ImDrawIdx) == 2)
        IM_ASSERT(draw_list->_VtxCurrentIdx < (1 << 16) && "Too many vertices in ImDrawList using 16-bit indices. Read comment above");

    out_render_list->push_back(draw_list);
}

static void AddWindowToDrawData(ImVector<ImDrawList*>* out_render_list, ImGuiWindow* window)
{
    AddDrawListToDrawData(out_render_list, window->DrawList);
    for (int i = 0; i < window->DC.ChildWindows.Size; i++)
    {
        ImGuiWindow* child = window->DC.ChildWindows[i];
        if (child->Active && child->HiddenFrames == 0) // clipped children may have been marked not active
            AddWindowToDrawData(out_render_list, child);
    }
}

static void AddWindowToDrawDataSelectLayer(ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;
    g.IO.MetricsActiveWindows++;
    if (window->Flags & ImGuiWindowFlags_Tooltip)
        AddWindowToDrawData(&g.DrawDataBuilder.Layers[1], window);
    else
        AddWindowToDrawData(&g.DrawDataBuilder.Layers[0], window);
}

void ImDrawDataBuilder::FlattenIntoSingleLayer()
{
    int n = Layers[0].Size;
    int size = n;
    for (int i = 1; i < IM_ARRAYSIZE(Layers); i++)
        size += Layers[i].Size;
    Layers[0].resize(size);
    for (int layer_n = 1; layer_n < IM_ARRAYSIZE(Layers); layer_n++)
    {
        ImVector<ImDrawList*>& layer = Layers[layer_n];
        if (layer.empty())
            continue;
        memcpy(&Layers[0][n], &layer[0], layer.Size * sizeof(ImDrawList*));
        n += layer.Size;
        layer.resize(0);
    }
}

static void SetupDrawData(ImVector<ImDrawList*>* draw_lists, ImDrawData* out_draw_data)
{
    out_draw_data->Valid = true;
    out_draw_data->CmdLists = (draw_lists->Size > 0) ? draw_lists->Data : NULL;
    out_draw_data->CmdListsCount = draw_lists->Size;
    out_draw_data->TotalVtxCount = out_draw_data->TotalIdxCount = 0;
    for (int n = 0; n < draw_lists->Size; n++)
    {
        out_draw_data->TotalVtxCount += draw_lists->Data[n]->VtxBuffer.Size;
        out_draw_data->TotalIdxCount += draw_lists->Data[n]->IdxBuffer.Size;
    }
}

// When using this function it is sane to ensure that float are perfectly rounded to integer values, to that e.g. (int)(max.x-min.x) in user's render produce correct result.
void ImGui::PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersect_with_current_clip_rect)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DrawList->PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect);
    window->ClipRect = window->DrawList->_ClipRectStack.back();
}

void ImGui::PopClipRect()
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DrawList->PopClipRect();
    window->ClipRect = window->DrawList->_ClipRectStack.back();
}

// This is normally called by Render(). You may want to call it directly if you want to avoid calling Render() but the gain will be very minimal.
void ImGui::EndFrame()
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(g.Initialized);                       // Forgot to call ImGui::NewFrame()
    if (g.FrameCountEnded == g.FrameCount)          // Don't process EndFrame() multiple times.
        return;

    // Notify OS when our Input Method Editor cursor has moved (e.g. CJK inputs using Microsoft IME)
    if (g.IO.ImeSetInputScreenPosFn && ImLengthSqr(g.OsImePosRequest - g.OsImePosSet) > 0.0001f)
    {
        g.IO.ImeSetInputScreenPosFn((int)g.OsImePosRequest.x, (int)g.OsImePosRequest.y);
        g.OsImePosSet = g.OsImePosRequest;
    }

    // Hide implicit "Debug" window if it hasn't been used
    IM_ASSERT(g.CurrentWindowStack.Size == 1);    // Mismatched Begin()/End() calls
    if (g.CurrentWindow && !g.CurrentWindow->WriteAccessed)
        g.CurrentWindow->Active = false;
    End();

    if (g.ActiveId == 0 && g.HoveredId == 0)
    {
        if (!g.NavWindow || !g.NavWindow->Appearing) // Unless we just made a window/popup appear
        {
            // Click to focus window and start moving (after we're done with all our widgets)
            if (g.IO.MouseClicked[0])
            {
                if (g.HoveredRootWindow != NULL)
                {
                    // Set ActiveId even if the _NoMove flag is set, without it dragging away from a window with _NoMove would activate hover on other windows.
                    FocusWindow(g.HoveredWindow);
                    SetActiveID(g.HoveredWindow->MoveId, g.HoveredWindow);
                    g.NavDisableHighlight = true;
                    g.ActiveIdClickOffset = g.IO.MousePos - g.HoveredRootWindow->Pos;
                    if (!(g.HoveredWindow->Flags & ImGuiWindowFlags_NoMove) && !(g.HoveredRootWindow->Flags & ImGuiWindowFlags_NoMove))
                        g.MovingWindow = g.HoveredWindow;
                }
                else if (g.NavWindow != NULL && GetFrontMostModalRootWindow() == NULL)
                {
                    // Clicking on void disable focus
                    FocusWindow(NULL);
                }
            }

            // With right mouse button we close popups without changing focus
            // (The left mouse button path calls FocusWindow which will lead NewFrame->ClosePopupsOverWindow to trigger)
            if (g.IO.MouseClicked[1])
            {
                // Find the top-most window between HoveredWindow and the front most Modal Window.
                // This is where we can trim the popup stack.
                ImGuiWindow* modal = GetFrontMostModalRootWindow();
                bool hovered_window_above_modal = false;
                if (modal == NULL)
                    hovered_window_above_modal = true;
                for (int i = g.Windows.Size - 1; i >= 0 && hovered_window_above_modal == false; i--)
                {
                    ImGuiWindow* window = g.Windows[i];
                    if (window == modal)
                        break;
                    if (window == g.HoveredWindow)
                        hovered_window_above_modal = true;
                }
                ClosePopupsOverWindow(hovered_window_above_modal ? g.HoveredWindow : modal);
            }
        }
    }

    // Sort the window list so that all child windows are after their parent
    // We cannot do that on FocusWindow() because childs may not exist yet
    g.WindowsSortBuffer.resize(0);
    g.WindowsSortBuffer.reserve(g.Windows.Size);
    for (int i = 0; i != g.Windows.Size; i++)
    {
        ImGuiWindow* window = g.Windows[i];
        if (window->Active && (window->Flags & ImGuiWindowFlags_ChildWindow))       // if a child is active its parent will add it
            continue;
        AddWindowToSortedBuffer(&g.WindowsSortBuffer, window);
    }

    IM_ASSERT(g.Windows.Size == g.WindowsSortBuffer.Size);  // we done something wrong
    g.Windows.swap(g.WindowsSortBuffer);

    // Clear Input data for next frame
    g.IO.MouseWheel = g.IO.MouseWheelH = 0.0f;
    memset(g.IO.InputCharacters, 0, sizeof(g.IO.InputCharacters));
    memset(g.IO.NavInputs, 0, sizeof(g.IO.NavInputs));

    g.FrameCountEnded = g.FrameCount;
}

void ImGui::Render()
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(g.Initialized);   // Forgot to call ImGui::NewFrame()

    if (g.FrameCountEnded != g.FrameCount)
        ImGui::EndFrame();
    g.FrameCountRendered = g.FrameCount;

    // Gather windows to render
    g.IO.MetricsRenderVertices = g.IO.MetricsRenderIndices = g.IO.MetricsActiveWindows = 0;
    g.DrawDataBuilder.Clear();
    ImGuiWindow* window_to_render_front_most = (g.NavWindowingTarget && !(g.NavWindowingTarget->Flags & ImGuiWindowFlags_NoBringToFrontOnFocus)) ? g.NavWindowingTarget : NULL;
    for (int n = 0; n != g.Windows.Size; n++)
    {
        ImGuiWindow* window = g.Windows[n];
        if (window->Active && window->HiddenFrames == 0 && (window->Flags & ImGuiWindowFlags_ChildWindow) == 0 && window != window_to_render_front_most)
            AddWindowToDrawDataSelectLayer(window);
    }
    if (window_to_render_front_most && window_to_render_front_most->Active && window_to_render_front_most->HiddenFrames == 0) // NavWindowingTarget is always temporarily displayed as the front-most window
        AddWindowToDrawDataSelectLayer(window_to_render_front_most);
    g.DrawDataBuilder.FlattenIntoSingleLayer();

    // Draw software mouse cursor if requested
    ImVec2 offset, size, uv[4];
    if (g.IO.MouseDrawCursor && g.IO.Fonts->GetMouseCursorTexData(g.MouseCursor, &offset, &size, &uv[0], &uv[2]))
    {
        const ImVec2 pos = g.IO.MousePos - offset;
        const ImTextureID tex_id = g.IO.Fonts->TexID;
        const float sc = g.Style.MouseCursorScale;
        g.OverlayDrawList.PushTextureID(tex_id);
        g.OverlayDrawList.AddImage(tex_id, pos + ImVec2(1,0)*sc, pos+ImVec2(1,0)*sc + size*sc, uv[2], uv[3], IM_COL32(0,0,0,48));        // Shadow
        g.OverlayDrawList.AddImage(tex_id, pos + ImVec2(2,0)*sc, pos+ImVec2(2,0)*sc + size*sc, uv[2], uv[3], IM_COL32(0,0,0,48));        // Shadow
        g.OverlayDrawList.AddImage(tex_id, pos,                  pos + size*sc,                uv[2], uv[3], IM_COL32(0,0,0,255));       // Black border
        g.OverlayDrawList.AddImage(tex_id, pos,                  pos + size*sc,                uv[0], uv[1], IM_COL32(255,255,255,255)); // White fill
        g.OverlayDrawList.PopTextureID();
    }
    if (!g.OverlayDrawList.VtxBuffer.empty())
        AddDrawListToDrawData(&g.DrawDataBuilder.Layers[0], &g.OverlayDrawList);

    // Setup ImDrawData structure for end-user
    SetupDrawData(&g.DrawDataBuilder.Layers[0], &g.DrawData);
    g.IO.MetricsRenderVertices = g.DrawData.TotalVtxCount;
    g.IO.MetricsRenderIndices = g.DrawData.TotalIdxCount;

    // Render. If user hasn't set a callback then they may retrieve the draw data via GetDrawData()
#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
    if (g.DrawData.CmdListsCount > 0 && g.IO.RenderDrawListsFn != NULL)
        g.IO.RenderDrawListsFn(&g.DrawData);
#endif
}

const char* ImGui::FindRenderedTextEnd(const char* text, const char* text_end)
{
    const char* text_display_end = text;
    if (!text_end)
        text_end = (const char*)-1;

    while (text_display_end < text_end && *text_display_end != '\0' && (text_display_end[0] != '#' || text_display_end[1] != '#'))
        text_display_end++;
    return text_display_end;
}

// Pass text data straight to log (without being displayed)
void ImGui::LogText(const char* fmt, ...)
{
    ImGuiContext& g = *GImGui;
    if (!g.LogEnabled)
        return;

    va_list args;
    va_start(args, fmt);
    if (g.LogFile)
    {
        vfprintf(g.LogFile, fmt, args);
    }
    else
    {
        g.LogClipboard->appendfv(fmt, args);
    }
    va_end(args);
}

// Internal version that takes a position to decide on newline placement and pad items according to their depth.
// We split text into individual lines to add current tree level padding
static void LogRenderedText(const ImVec2* ref_pos, const char* text, const char* text_end = NULL)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    if (!text_end)
        text_end = ImGui::FindRenderedTextEnd(text, text_end);

    const bool log_new_line = ref_pos && (ref_pos->y > window->DC.LogLinePosY + 1);
    if (ref_pos)
        window->DC.LogLinePosY = ref_pos->y;

    const char* text_remaining = text;
    if (g.LogStartDepth > window->DC.TreeDepth)  // Re-adjust padding if we have popped out of our starting depth
        g.LogStartDepth = window->DC.TreeDepth;
    const int tree_depth = (window->DC.TreeDepth - g.LogStartDepth);
    for (;;)
    {
        // Split the string. Each new line (after a '\n') is followed by spacing corresponding to the current depth of our log entry.
        const char* line_end = text_remaining;
        while (line_end < text_end)
            if (*line_end == '\n')
                break;
            else
                line_end++;
        if (line_end >= text_end)
            line_end = NULL;

        const bool is_first_line = (text == text_remaining);
        bool is_last_line = false;
        if (line_end == NULL)
        {
            is_last_line = true;
            line_end = text_end;
        }
        if (line_end != NULL && !(is_last_line && (line_end - text_remaining)==0))
        {
            const int char_count = (int)(line_end - text_remaining);
            if (log_new_line || !is_first_line)
                ImGui::LogText(IM_NEWLINE "%*s%.*s", tree_depth*4, "", char_count, text_remaining);
            else
                ImGui::LogText(" %.*s", char_count, text_remaining);
        }

        if (is_last_line)
            break;
        text_remaining = line_end + 1;
    }
}

// Internal ImGui functions to render text
// RenderText***() functions calls ImDrawList::AddText() calls ImBitmapFont::RenderText()
void ImGui::RenderText(ImVec2 pos, const char* text, const char* text_end, bool hide_text_after_hash)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    // Hide anything after a '##' string
    const char* text_display_end;
    if (hide_text_after_hash)
    {
        text_display_end = FindRenderedTextEnd(text, text_end);
    }
    else
    {
        if (!text_end)
            text_end = text + strlen(text); // FIXME-OPT
        text_display_end = text_end;
    }

    const int text_len = (int)(text_display_end - text);
    if (text_len > 0)
    {
        window->DrawList->AddText(g.Font, g.FontSize, pos, GetColorU32(ImGuiCol_Text), text, text_display_end);
        if (g.LogEnabled)
            LogRenderedText(&pos, text, text_display_end);
    }
}

void ImGui::RenderTextWrapped(ImVec2 pos, const char* text, const char* text_end, float wrap_width)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    if (!text_end)
        text_end = text + strlen(text); // FIXME-OPT

    const int text_len = (int)(text_end - text);
    if (text_len > 0)
    {
        window->DrawList->AddText(g.Font, g.FontSize, pos, GetColorU32(ImGuiCol_Text), text, text_end, wrap_width);
        if (g.LogEnabled)
            LogRenderedText(&pos, text, text_end);
    }
}

// Default clip_rect uses (pos_min,pos_max)
// Handle clipping on CPU immediately (vs typically let the GPU clip the triangles that are overlapping the clipping rectangle edges)
void ImGui::RenderTextClipped(const ImVec2& pos_min, const ImVec2& pos_max, const char* text, const char* text_end, const ImVec2* text_size_if_known, const ImVec2& align, const ImRect* clip_rect)
{
    // Hide anything after a '##' string
    const char* text_display_end = FindRenderedTextEnd(text, text_end);
    const int text_len = (int)(text_display_end - text);
    if (text_len == 0)
        return;

    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    // Perform CPU side clipping for single clipped element to avoid using scissor state
    ImVec2 pos = pos_min;
    const ImVec2 text_size = text_size_if_known ? *text_size_if_known : CalcTextSize(text, text_display_end, false, 0.0f);

    const ImVec2* clip_min = clip_rect ? &clip_rect->Min : &pos_min;
    const ImVec2* clip_max = clip_rect ? &clip_rect->Max : &pos_max;
    bool need_clipping = (pos.x + text_size.x >= clip_max->x) || (pos.y + text_size.y >= clip_max->y);
    if (clip_rect) // If we had no explicit clipping rectangle then pos==clip_min
        need_clipping |= (pos.x < clip_min->x) || (pos.y < clip_min->y);

    // Align whole block. We should defer that to the better rendering function when we'll have support for individual line alignment.
    if (align.x > 0.0f) pos.x = ImMax(pos.x, pos.x + (pos_max.x - pos.x - text_size.x) * align.x);
    if (align.y > 0.0f) pos.y = ImMax(pos.y, pos.y + (pos_max.y - pos.y - text_size.y) * align.y);

    // Render
    if (need_clipping)
    {
        ImVec4 fine_clip_rect(clip_min->x, clip_min->y, clip_max->x, clip_max->y);
        window->DrawList->AddText(g.Font, g.FontSize, pos, GetColorU32(ImGuiCol_Text), text, text_display_end, 0.0f, &fine_clip_rect);
    }
    else
    {
        window->DrawList->AddText(g.Font, g.FontSize, pos, GetColorU32(ImGuiCol_Text), text, text_display_end, 0.0f, NULL);
    }
    if (g.LogEnabled)
        LogRenderedText(&pos, text, text_display_end);
}

// Render a rectangle shaped with optional rounding and borders
void ImGui::RenderFrame(ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, bool border, float rounding)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    window->DrawList->AddRectFilled(p_min, p_max, fill_col, rounding);
    const float border_size = g.Style.FrameBorderSize;
    if (border && border_size > 0.0f)
    {
        window->DrawList->AddRect(p_min+ImVec2(1,1), p_max+ImVec2(1,1), GetColorU32(ImGuiCol_BorderShadow), rounding, ImDrawCornerFlags_All, border_size);
        window->DrawList->AddRect(p_min, p_max, GetColorU32(ImGuiCol_Border), rounding, ImDrawCornerFlags_All, border_size);
    }
}

void ImGui::RenderFrameBorder(ImVec2 p_min, ImVec2 p_max, float rounding)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    const float border_size = g.Style.FrameBorderSize;
    if (border_size > 0.0f)
    {
        window->DrawList->AddRect(p_min+ImVec2(1,1), p_max+ImVec2(1,1), GetColorU32(ImGuiCol_BorderShadow), rounding, ImDrawCornerFlags_All, border_size);
        window->DrawList->AddRect(p_min, p_max, GetColorU32(ImGuiCol_Border), rounding, ImDrawCornerFlags_All, border_size);
    }
}

// Render a triangle to denote expanded/collapsed state
void ImGui::RenderArrow(ImVec2 p_min, ImGuiDir dir, float scale)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    const float h = g.FontSize * 1.00f;
    float r = h * 0.40f * scale;
    ImVec2 center = p_min + ImVec2(h * 0.50f, h * 0.50f * scale);

    ImVec2 a, b, c;
    switch (dir)
    {
    case ImGuiDir_Up:
    case ImGuiDir_Down:
        if (dir == ImGuiDir_Up) r = -r;
        center.y -= r * 0.25f;
        a = ImVec2(0,1) * r;
        b = ImVec2(-0.866f,-0.5f) * r;
        c = ImVec2(+0.866f,-0.5f) * r;
        break;
    case ImGuiDir_Left:
    case ImGuiDir_Right:
        if (dir == ImGuiDir_Left) r = -r;
        center.x -= r * 0.25f;
        a = ImVec2(1,0) * r;
        b = ImVec2(-0.500f,+0.866f) * r;
        c = ImVec2(-0.500f,-0.866f) * r;
        break;
    case ImGuiDir_None: 
    case ImGuiDir_COUNT: 
        IM_ASSERT(0);
        break;
    }

    window->DrawList->AddTriangleFilled(center + a, center + b, center + c, GetColorU32(ImGuiCol_Text));
}

void ImGui::RenderBullet(ImVec2 pos)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    window->DrawList->AddCircleFilled(pos, GImGui->FontSize*0.20f, GetColorU32(ImGuiCol_Text), 8);
}

void ImGui::RenderCheckMark(ImVec2 pos, ImU32 col, float sz)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    float thickness = ImMax(sz / 5.0f, 1.0f);
    sz -= thickness*0.5f;
    pos += ImVec2(thickness*0.25f, thickness*0.25f);

    float third = sz / 3.0f;
    float bx = pos.x + third;
    float by = pos.y + sz - third*0.5f;
    window->DrawList->PathLineTo(ImVec2(bx - third, by - third));
    window->DrawList->PathLineTo(ImVec2(bx, by));
    window->DrawList->PathLineTo(ImVec2(bx + third*2, by - third*2));
    window->DrawList->PathStroke(col, false, thickness);
}

void ImGui::RenderNavHighlight(const ImRect& bb, ImGuiID id, ImGuiNavHighlightFlags flags)
{
    ImGuiContext& g = *GImGui;
    if (id != g.NavId)
        return;
    if (g.NavDisableHighlight && !(flags & ImGuiNavHighlightFlags_AlwaysDraw))
        return;    
    ImGuiWindow* window = ImGui::GetCurrentWindow();
    if (window->DC.NavHideHighlightOneFrame)
        return;

    float rounding = (flags & ImGuiNavHighlightFlags_NoRounding) ? 0.0f : g.Style.FrameRounding;
    ImRect display_rect = bb;
    display_rect.ClipWith(window->ClipRect);
    if (flags & ImGuiNavHighlightFlags_TypeDefault)
    {
        const float THICKNESS = 2.0f;
        const float DISTANCE = 3.0f + THICKNESS * 0.5f;
        display_rect.Expand(ImVec2(DISTANCE,DISTANCE));
        bool fully_visible = window->ClipRect.Contains(display_rect);
        if (!fully_visible)
            window->DrawList->PushClipRect(display_rect.Min, display_rect.Max);
        window->DrawList->AddRect(display_rect.Min + ImVec2(THICKNESS*0.5f,THICKNESS*0.5f), display_rect.Max - ImVec2(THICKNESS*0.5f,THICKNESS*0.5f), GetColorU32(ImGuiCol_NavHighlight), rounding, ImDrawCornerFlags_All, THICKNESS);
        if (!fully_visible)
            window->DrawList->PopClipRect();
    }
    if (flags & ImGuiNavHighlightFlags_TypeThin)
    {
        window->DrawList->AddRect(display_rect.Min, display_rect.Max, GetColorU32(ImGuiCol_NavHighlight), rounding, ~0, 1.0f);
    }
}

// Calculate text size. Text can be multi-line. Optionally ignore text after a ## marker.
// CalcTextSize("") should return ImVec2(0.0f, GImGui->FontSize)
ImVec2 ImGui::CalcTextSize(const char* text, const char* text_end, bool hide_text_after_double_hash, float wrap_width)
{
    ImGuiContext& g = *GImGui;

    const char* text_display_end;
    if (hide_text_after_double_hash)
        text_display_end = FindRenderedTextEnd(text, text_end);      // Hide anything after a '##' string
    else
        text_display_end = text_end;

    ImFont* font = g.Font;
    const float font_size = g.FontSize;
    if (text == text_display_end)
        return ImVec2(0.0f, font_size);
    ImVec2 text_size = font->CalcTextSizeA(font_size, FLT_MAX, wrap_width, text, text_display_end, NULL);

    // Cancel out character spacing for the last character of a line (it is baked into glyph->AdvanceX field)
    const float font_scale = font_size / font->FontSize;
    const float character_spacing_x = 1.0f * font_scale;
    if (text_size.x > 0.0f)
        text_size.x -= character_spacing_x;
    text_size.x = (float)(int)(text_size.x + 0.95f);

    return text_size;
}

// Helper to calculate coarse clipping of large list of evenly sized items.
// NB: Prefer using the ImGuiListClipper higher-level helper if you can! Read comments and instructions there on how those use this sort of pattern.
// NB: 'items_count' is only used to clamp the result, if you don't know your count you can use INT_MAX
void ImGui::CalcListClipping(int items_count, float items_height, int* out_items_display_start, int* out_items_display_end)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (g.LogEnabled)
    {
        // If logging is active, do not perform any clipping
        *out_items_display_start = 0;
        *out_items_display_end = items_count;
        return;
    }
    if (window->SkipItems)
    {
        *out_items_display_start = *out_items_display_end = 0;
        return;
    }

    const ImVec2 pos = window->DC.CursorPos;
    int start = (int)((window->ClipRect.Min.y - pos.y) / items_height);
    int end = (int)((window->ClipRect.Max.y - pos.y) / items_height);
    if (g.NavMoveRequest && g.NavMoveDir == ImGuiDir_Up) // When performing a navigation request, ensure we have one item extra in the direction we are moving to
        start--;
    if (g.NavMoveRequest && g.NavMoveDir == ImGuiDir_Down)
        end++;

    start = ImClamp(start, 0, items_count);
    end = ImClamp(end + 1, start, items_count);
    *out_items_display_start = start;
    *out_items_display_end = end;
}

// Find window given position, search front-to-back
// FIXME: Note that we have a lag here because WindowRectClipped is updated in Begin() so windows moved by user via SetWindowPos() and not SetNextWindowPos() will have that rectangle lagging by a frame at the time FindHoveredWindow() is called, aka before the next Begin(). Moving window thankfully isn't affected.
static ImGuiWindow* FindHoveredWindow()
{
    ImGuiContext& g = *GImGui;
    for (int i = g.Windows.Size - 1; i >= 0; i--)
    {
        ImGuiWindow* window = g.Windows[i];
        if (!window->Active)
            continue;
        if (window->Flags & ImGuiWindowFlags_NoInputs)
            continue;

        // Using the clipped AABB, a child window will typically be clipped by its parent (not always)
        ImRect bb(window->WindowRectClipped.Min - g.Style.TouchExtraPadding, window->WindowRectClipped.Max + g.Style.TouchExtraPadding);
        if (bb.Contains(g.IO.MousePos))
            return window;
    }
    return NULL;
}

// Test if mouse cursor is hovering given rectangle
// NB- Rectangle is clipped by our current clip setting
// NB- Expand the rectangle to be generous on imprecise inputs systems (g.Style.TouchExtraPadding)
bool ImGui::IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    // Clip
    ImRect rect_clipped(r_min, r_max);
    if (clip)
        rect_clipped.ClipWith(window->ClipRect);

    // Expand for touch input
    const ImRect rect_for_touch(rect_clipped.Min - g.Style.TouchExtraPadding, rect_clipped.Max + g.Style.TouchExtraPadding);
    return rect_for_touch.Contains(g.IO.MousePos);
}

static bool IsKeyPressedMap(ImGuiKey key, bool repeat)
{
    const int key_index = GImGui->IO.KeyMap[key];
    return (key_index >= 0) ? ImGui::IsKeyPressed(key_index, repeat) : false;
}

int ImGui::GetKeyIndex(ImGuiKey imgui_key)
{
    IM_ASSERT(imgui_key >= 0 && imgui_key < ImGuiKey_COUNT);
    return GImGui->IO.KeyMap[imgui_key];
}

// Note that imgui doesn't know the semantic of each entry of io.KeyDown[]. Use your own indices/enums according to how your back-end/engine stored them into KeyDown[]!
bool ImGui::IsKeyDown(int user_key_index)
{
    if (user_key_index < 0) return false;
    IM_ASSERT(user_key_index >= 0 && user_key_index < IM_ARRAYSIZE(GImGui->IO.KeysDown));
    return GImGui->IO.KeysDown[user_key_index];
}

int ImGui::CalcTypematicPressedRepeatAmount(float t, float t_prev, float repeat_delay, float repeat_rate)
{
    if (t == 0.0f)
        return 1;
    if (t <= repeat_delay || repeat_rate <= 0.0f)
        return 0;
    const int count = (int)((t - repeat_delay) / repeat_rate) - (int)((t_prev - repeat_delay) / repeat_rate);
    return (count > 0) ? count : 0;
}

int ImGui::GetKeyPressedAmount(int key_index, float repeat_delay, float repeat_rate)
{
    ImGuiContext& g = *GImGui;
    if (key_index < 0) return false;
    IM_ASSERT(key_index >= 0 && key_index < IM_ARRAYSIZE(g.IO.KeysDown));
    const float t = g.IO.KeysDownDuration[key_index];
    return CalcTypematicPressedRepeatAmount(t, t - g.IO.DeltaTime, repeat_delay, repeat_rate);
}

bool ImGui::IsKeyPressed(int user_key_index, bool repeat)
{
    ImGuiContext& g = *GImGui;
    if (user_key_index < 0) return false;
    IM_ASSERT(user_key_index >= 0 && user_key_index < IM_ARRAYSIZE(g.IO.KeysDown));
    const float t = g.IO.KeysDownDuration[user_key_index];
    if (t == 0.0f)
        return true;
    if (repeat && t > g.IO.KeyRepeatDelay)
        return GetKeyPressedAmount(user_key_index, g.IO.KeyRepeatDelay, g.IO.KeyRepeatRate) > 0;
    return false;
}

bool ImGui::IsKeyReleased(int user_key_index)
{
    ImGuiContext& g = *GImGui;
    if (user_key_index < 0) return false;
    IM_ASSERT(user_key_index >= 0 && user_key_index < IM_ARRAYSIZE(g.IO.KeysDown));
    return g.IO.KeysDownDurationPrev[user_key_index] >= 0.0f && !g.IO.KeysDown[user_key_index];
}

bool ImGui::IsMouseDown(int button)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
    return g.IO.MouseDown[button];
}

bool ImGui::IsAnyMouseDown()
{
    ImGuiContext& g = *GImGui;
    for (int n = 0; n < IM_ARRAYSIZE(g.IO.MouseDown); n++)
        if (g.IO.MouseDown[n])
            return true;
    return false;
}

bool ImGui::IsMouseClicked(int button, bool repeat)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
    const float t = g.IO.MouseDownDuration[button];
    if (t == 0.0f)
        return true;

    if (repeat && t > g.IO.KeyRepeatDelay)
    {
        float delay = g.IO.KeyRepeatDelay, rate = g.IO.KeyRepeatRate;
        if ((fmodf(t - delay, rate) > rate*0.5f) != (fmodf(t - delay - g.IO.DeltaTime, rate) > rate*0.5f))
            return true;
    }

    return false;
}

bool ImGui::IsMouseReleased(int button)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
    return g.IO.MouseReleased[button];
}

bool ImGui::IsMouseDoubleClicked(int button)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
    return g.IO.MouseDoubleClicked[button];
}

bool ImGui::IsMouseDragging(int button, float lock_threshold)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
    if (!g.IO.MouseDown[button])
        return false;
    if (lock_threshold < 0.0f)
        lock_threshold = g.IO.MouseDragThreshold;
    return g.IO.MouseDragMaxDistanceSqr[button] >= lock_threshold * lock_threshold;
}

ImVec2 ImGui::GetMousePos()
{
    return GImGui->IO.MousePos;
}

// NB: prefer to call right after BeginPopup(). At the time Selectable/MenuItem is activated, the popup is already closed!
ImVec2 ImGui::GetMousePosOnOpeningCurrentPopup()
{
    ImGuiContext& g = *GImGui;
    if (g.CurrentPopupStack.Size > 0)
        return g.OpenPopupStack[g.CurrentPopupStack.Size-1].OpenMousePos;
    return g.IO.MousePos;
}

// We typically use ImVec2(-FLT_MAX,-FLT_MAX) to denote an invalid mouse position
bool ImGui::IsMousePosValid(const ImVec2* mouse_pos)
{
    if (mouse_pos == NULL)
        mouse_pos = &GImGui->IO.MousePos;
    const float MOUSE_INVALID = -256000.0f;
    return mouse_pos->x >= MOUSE_INVALID && mouse_pos->y >= MOUSE_INVALID;
}

// NB: This is only valid if IsMousePosValid(). Back-ends in theory should always keep mouse position valid when dragging even outside the client window.
ImVec2 ImGui::GetMouseDragDelta(int button, float lock_threshold)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
    if (lock_threshold < 0.0f)
        lock_threshold = g.IO.MouseDragThreshold;
    if (g.IO.MouseDown[button])
        if (g.IO.MouseDragMaxDistanceSqr[button] >= lock_threshold * lock_threshold)
            return g.IO.MousePos - g.IO.MouseClickedPos[button];     // Assume we can only get active with left-mouse button (at the moment).
    return ImVec2(0.0f, 0.0f);
}

void ImGui::ResetMouseDragDelta(int button)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
    // NB: We don't need to reset g.IO.MouseDragMaxDistanceSqr
    g.IO.MouseClickedPos[button] = g.IO.MousePos;
}

ImGuiMouseCursor ImGui::GetMouseCursor()
{
    return GImGui->MouseCursor;
}

void ImGui::SetMouseCursor(ImGuiMouseCursor cursor_type)
{
    GImGui->MouseCursor = cursor_type;
}

void ImGui::CaptureKeyboardFromApp(bool capture)
{
    GImGui->WantCaptureKeyboardNextFrame = capture ? 1 : 0;
}

void ImGui::CaptureMouseFromApp(bool capture)
{
    GImGui->WantCaptureMouseNextFrame = capture ? 1 : 0;
}

bool ImGui::IsItemActive()
{
    ImGuiContext& g = *GImGui;
    if (g.ActiveId)
    {
        ImGuiWindow* window = g.CurrentWindow;
        return g.ActiveId == window->DC.LastItemId;
    }
    return false;
}

bool ImGui::IsItemFocused()
{
    ImGuiContext& g = *GImGui;
    return g.NavId && !g.NavDisableHighlight && g.NavId == g.CurrentWindow->DC.LastItemId;
}

bool ImGui::IsItemClicked(int mouse_button)
{
    return IsMouseClicked(mouse_button) && IsItemHovered(ImGuiHoveredFlags_Default);
}

bool ImGui::IsAnyItemHovered()
{
    ImGuiContext& g = *GImGui;
    return g.HoveredId != 0 || g.HoveredIdPreviousFrame != 0;
}

bool ImGui::IsAnyItemActive()
{
    ImGuiContext& g = *GImGui;
    return g.ActiveId != 0;
}

bool ImGui::IsAnyItemFocused()
{
    ImGuiContext& g = *GImGui;
    return g.NavId != 0 && !g.NavDisableHighlight;
}

bool ImGui::IsItemVisible()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->ClipRect.Overlaps(window->DC.LastItemRect);
}

// Allow last item to be overlapped by a subsequent item. Both may be activated during the same frame before the later one takes priority.
void ImGui::SetItemAllowOverlap()
{
    ImGuiContext& g = *GImGui;
    if (g.HoveredId == g.CurrentWindow->DC.LastItemId)
        g.HoveredIdAllowOverlap = true;
    if (g.ActiveId == g.CurrentWindow->DC.LastItemId)
        g.ActiveIdAllowOverlap = true;
}

ImVec2 ImGui::GetItemRectMin()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.LastItemRect.Min;
}

ImVec2 ImGui::GetItemRectMax()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.LastItemRect.Max;
}

ImVec2 ImGui::GetItemRectSize()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.LastItemRect.GetSize();
}

static ImRect GetViewportRect()
{
    ImGuiContext& g = *GImGui;
    if (g.IO.DisplayVisibleMin.x != g.IO.DisplayVisibleMax.x && g.IO.DisplayVisibleMin.y != g.IO.DisplayVisibleMax.y)
        return ImRect(g.IO.DisplayVisibleMin, g.IO.DisplayVisibleMax);
    return ImRect(0.0f, 0.0f, g.IO.DisplaySize.x, g.IO.DisplaySize.y);
}

// Not exposed publicly as BeginTooltip() because bool parameters are evil. Let's see if other needs arise first.
void ImGui::BeginTooltipEx(ImGuiWindowFlags extra_flags, bool override_previous_tooltip)
{
    ImGuiContext& g = *GImGui;
    char window_name[16];
    ImFormatString(window_name, IM_ARRAYSIZE(window_name), "##Tooltip_%02d", g.TooltipOverrideCount);
    if (override_previous_tooltip)
        if (ImGuiWindow* window = FindWindowByName(window_name))
            if (window->Active)
            {
                // Hide previous tooltip from being displayed. We can't easily "reset" the content of a window so we create a new one.
                window->HiddenFrames = 1;
                ImFormatString(window_name, IM_ARRAYSIZE(window_name), "##Tooltip_%02d", ++g.TooltipOverrideCount);
            }
    ImGuiWindowFlags flags = ImGuiWindowFlags_Tooltip|ImGuiWindowFlags_NoInputs|ImGuiWindowFlags_NoTitleBar|ImGuiWindowFlags_NoMove|ImGuiWindowFlags_NoResize|ImGuiWindowFlags_NoSavedSettings|ImGuiWindowFlags_AlwaysAutoResize|ImGuiWindowFlags_NoNav;
    Begin(window_name, NULL, flags | extra_flags);
}

void ImGui::SetTooltipV(const char* fmt, va_list args)
{
    BeginTooltipEx(0, true);
    TextV(fmt, args);
    EndTooltip();
}

void ImGui::SetTooltip(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    SetTooltipV(fmt, args);
    va_end(args);
}

void ImGui::BeginTooltip()
{
    BeginTooltipEx(0, false);
}

void ImGui::EndTooltip()
{
    IM_ASSERT(GetCurrentWindowRead()->Flags & ImGuiWindowFlags_Tooltip);   // Mismatched BeginTooltip()/EndTooltip() calls
    End();
}

// Mark popup as open (toggle toward open state).
// Popups are closed when user click outside, or activate a pressable item, or CloseCurrentPopup() is called within a BeginPopup()/EndPopup() block.
// Popup identifiers are relative to the current ID-stack (so OpenPopup and BeginPopup needs to be at the same level).
// One open popup per level of the popup hierarchy (NB: when assigning we reset the Window member of ImGuiPopupRef to NULL)
void ImGui::OpenPopupEx(ImGuiID id)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* parent_window = g.CurrentWindow;
    int current_stack_size = g.CurrentPopupStack.Size;
    ImGuiPopupRef popup_ref; // Tagged as new ref as Window will be set back to NULL if we write this into OpenPopupStack.
    popup_ref.PopupId = id;
    popup_ref.Window = NULL;
    popup_ref.ParentWindow = parent_window;
    popup_ref.OpenFrameCount = g.FrameCount;
    popup_ref.OpenParentId = parent_window->IDStack.back();
    popup_ref.OpenMousePos = g.IO.MousePos;
    popup_ref.OpenPopupPos = (!g.NavDisableHighlight && g.NavDisableMouseHover) ? NavCalcPreferredMousePos() : g.IO.MousePos;

    //printf("[%05d] OpenPopupEx(0x%08X)\n", g.FrameCount, id);
    if (g.OpenPopupStack.Size < current_stack_size + 1)
    {
        g.OpenPopupStack.push_back(popup_ref);
    }
    else
    {
        // Close child popups if any
        g.OpenPopupStack.resize(current_stack_size + 1);

        // Gently handle the user mistakenly calling OpenPopup() every frame. It is a programming mistake! However, if we were to run the regular code path, the ui
        // would become completely unusable because the popup will always be in hidden-while-calculating-size state _while_ claiming focus. Which would be a very confusing
        // situation for the programmer. Instead, we silently allow the popup to proceed, it will keep reappearing and the programming error will be more obvious to understand. 
        if (g.OpenPopupStack[current_stack_size].PopupId == id && g.OpenPopupStack[current_stack_size].OpenFrameCount == g.FrameCount - 1)
            g.OpenPopupStack[current_stack_size].OpenFrameCount = popup_ref.OpenFrameCount;
        else
            g.OpenPopupStack[current_stack_size] = popup_ref;

        // When reopening a popup we first refocus its parent, otherwise if its parent is itself a popup it would get closed by ClosePopupsOverWindow().
        // This is equivalent to what ClosePopupToLevel() does.
        //if (g.OpenPopupStack[current_stack_size].PopupId == id)
        //    FocusWindow(parent_window);
    }
}

void ImGui::OpenPopup(const char* str_id)
{
    ImGuiContext& g = *GImGui;
    OpenPopupEx(g.CurrentWindow->GetID(str_id));
}

void ImGui::ClosePopupsOverWindow(ImGuiWindow* ref_window)
{
    ImGuiContext& g = *GImGui;
    if (g.OpenPopupStack.empty())
        return;

    // When popups are stacked, clicking on a lower level popups puts focus back to it and close popups above it.
    // Don't close our own child popup windows.
    int n = 0;
    if (ref_window)
    {
        for (n = 0; n < g.OpenPopupStack.Size; n++)
        {
            ImGuiPopupRef& popup = g.OpenPopupStack[n];
            if (!popup.Window)
                continue;
            IM_ASSERT((popup.Window->Flags & ImGuiWindowFlags_Popup) != 0);
            if (popup.Window->Flags & ImGuiWindowFlags_ChildWindow)
                continue;

            // Trim the stack if popups are not direct descendant of the reference window (which is often the NavWindow)
            bool has_focus = false;
            for (int m = n; m < g.OpenPopupStack.Size && !has_focus; m++)
                has_focus = (g.OpenPopupStack[m].Window && g.OpenPopupStack[m].Window->RootWindow == ref_window->RootWindow);
            if (!has_focus)
                break;
        }
    }
    if (n < g.OpenPopupStack.Size) // This test is not required but it allows to set a convenient breakpoint on the block below
        ClosePopupToLevel(n);
}

static ImGuiWindow* GetFrontMostModalRootWindow()
{
    ImGuiContext& g = *GImGui;
    for (int n = g.OpenPopupStack.Size-1; n >= 0; n--)
        if (ImGuiWindow* popup = g.OpenPopupStack.Data[n].Window)
            if (popup->Flags & ImGuiWindowFlags_Modal)
                return popup;
    return NULL;
}

static void ClosePopupToLevel(int remaining)
{
    IM_ASSERT(remaining >= 0);
    ImGuiContext& g = *GImGui;
    ImGuiWindow* focus_window = (remaining > 0) ? g.OpenPopupStack[remaining-1].Window : g.OpenPopupStack[0].ParentWindow;
    if (g.NavLayer == 0)
        focus_window = NavRestoreLastChildNavWindow(focus_window);
    ImGui::FocusWindow(focus_window);
    focus_window->DC.NavHideHighlightOneFrame = true;
    g.OpenPopupStack.resize(remaining);
}

void ImGui::ClosePopup(ImGuiID id)
{
    if (!IsPopupOpen(id))
        return;
    ImGuiContext& g = *GImGui;
    ClosePopupToLevel(g.OpenPopupStack.Size - 1);
}

// Close the popup we have begin-ed into.
void ImGui::CloseCurrentPopup()
{
    ImGuiContext& g = *GImGui;
    int popup_idx = g.CurrentPopupStack.Size - 1;
    if (popup_idx < 0 || popup_idx >= g.OpenPopupStack.Size || g.CurrentPopupStack[popup_idx].PopupId != g.OpenPopupStack[popup_idx].PopupId)
        return;
    while (popup_idx > 0 && g.OpenPopupStack[popup_idx].Window && (g.OpenPopupStack[popup_idx].Window->Flags & ImGuiWindowFlags_ChildMenu))
        popup_idx--;
    ClosePopupToLevel(popup_idx);
}

bool ImGui::BeginPopupEx(ImGuiID id, ImGuiWindowFlags extra_flags)
{
    ImGuiContext& g = *GImGui;
    if (!IsPopupOpen(id))
    {
        g.NextWindowData.Clear(); // We behave like Begin() and need to consume those values
        return false;
    }

    char name[20];
    if (extra_flags & ImGuiWindowFlags_ChildMenu)
        ImFormatString(name, IM_ARRAYSIZE(name), "##Menu_%02d", g.CurrentPopupStack.Size);    // Recycle windows based on depth
    else
        ImFormatString(name, IM_ARRAYSIZE(name), "##Popup_%08x", id); // Not recycling, so we can close/open during the same frame

    bool is_open = Begin(name, NULL, extra_flags | ImGuiWindowFlags_Popup);
    if (!is_open) // NB: Begin can return false when the popup is completely clipped (e.g. zero size display)
        EndPopup();

    return is_open;
}

bool ImGui::BeginPopup(const char* str_id, ImGuiWindowFlags flags)
{
    ImGuiContext& g = *GImGui;
    if (g.OpenPopupStack.Size <= g.CurrentPopupStack.Size) // Early out for performance
    {
        g.NextWindowData.Clear(); // We behave like Begin() and need to consume those values
        return false;
    }
    return BeginPopupEx(g.CurrentWindow->GetID(str_id), flags|ImGuiWindowFlags_AlwaysAutoResize|ImGuiWindowFlags_NoTitleBar|ImGuiWindowFlags_NoSavedSettings);
}

bool ImGui::IsPopupOpen(ImGuiID id)
{
    ImGuiContext& g = *GImGui;
    return g.OpenPopupStack.Size > g.CurrentPopupStack.Size && g.OpenPopupStack[g.CurrentPopupStack.Size].PopupId == id;
}

bool ImGui::IsPopupOpen(const char* str_id)
{
    ImGuiContext& g = *GImGui;
    return g.OpenPopupStack.Size > g.CurrentPopupStack.Size && g.OpenPopupStack[g.CurrentPopupStack.Size].PopupId == g.CurrentWindow->GetID(str_id);
}

bool ImGui::BeginPopupModal(const char* name, bool* p_open, ImGuiWindowFlags flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    const ImGuiID id = window->GetID(name);
    if (!IsPopupOpen(id))
    {
        g.NextWindowData.Clear(); // We behave like Begin() and need to consume those values
        return false;
    }

    // Center modal windows by default
    // FIXME: Should test for (PosCond & window->SetWindowPosAllowFlags) with the upcoming window.
    if (g.NextWindowData.PosCond == 0)
        SetNextWindowPos(g.IO.DisplaySize * 0.5f, ImGuiCond_Appearing, ImVec2(0.5f, 0.5f));

    bool is_open = Begin(name, p_open, flags | ImGuiWindowFlags_Popup | ImGuiWindowFlags_Modal | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoSavedSettings);
    if (!is_open || (p_open && !*p_open)) // NB: is_open can be 'false' when the popup is completely clipped (e.g. zero size display)
    {
        EndPopup();
        if (is_open)
            ClosePopup(id);
        return false;
    }

    return is_open;
}

static void NavProcessMoveRequestWrapAround(ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;
    if (g.NavWindow == window && NavMoveRequestButNoResultYet())
        if ((g.NavMoveDir == ImGuiDir_Up || g.NavMoveDir == ImGuiDir_Down) && g.NavMoveRequestForward == ImGuiNavForward_None && g.NavLayer == 0)
        {
            g.NavMoveRequestForward = ImGuiNavForward_ForwardQueued;
            ImGui::NavMoveRequestCancel();
            g.NavWindow->NavRectRel[0].Min.y = g.NavWindow->NavRectRel[0].Max.y = ((g.NavMoveDir == ImGuiDir_Up) ? ImMax(window->SizeFull.y, window->SizeContents.y) : 0.0f) - window->Scroll.y;
        }
}

void ImGui::EndPopup()
{
    ImGuiContext& g = *GImGui; (void)g;
    IM_ASSERT(g.CurrentWindow->Flags & ImGuiWindowFlags_Popup);  // Mismatched BeginPopup()/EndPopup() calls
    IM_ASSERT(g.CurrentPopupStack.Size > 0);

    // Make all menus and popups wrap around for now, may need to expose that policy.
    NavProcessMoveRequestWrapAround(g.CurrentWindow);
    
    End();
}

bool ImGui::OpenPopupOnItemClick(const char* str_id, int mouse_button)
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    if (IsMouseReleased(mouse_button) && IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup))
    {
        ImGuiID id = str_id ? window->GetID(str_id) : window->DC.LastItemId; // If user hasn't passed an ID, we can use the LastItemID. Using LastItemID as a Popup ID won't conflict!
        IM_ASSERT(id != 0);                                                  // However, you cannot pass a NULL str_id if the last item has no identifier (e.g. a Text() item)
        OpenPopupEx(id);
        return true;
    }
    return false;
}

// This is a helper to handle the simplest case of associating one named popup to one given widget.
// You may want to handle this on user side if you have specific needs (e.g. tweaking IsItemHovered() parameters).
// You can pass a NULL str_id to use the identifier of the last item.
bool ImGui::BeginPopupContextItem(const char* str_id, int mouse_button)
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    ImGuiID id = str_id ? window->GetID(str_id) : window->DC.LastItemId; // If user hasn't passed an ID, we can use the LastItemID. Using LastItemID as a Popup ID won't conflict!
    IM_ASSERT(id != 0);                                                  // However, you cannot pass a NULL str_id if the last item has no identifier (e.g. a Text() item)
    if (IsMouseReleased(mouse_button) && IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup))
        OpenPopupEx(id);
    return BeginPopupEx(id, ImGuiWindowFlags_AlwaysAutoResize|ImGuiWindowFlags_NoTitleBar|ImGuiWindowFlags_NoSavedSettings);
}

bool ImGui::BeginPopupContextWindow(const char* str_id, int mouse_button, bool also_over_items)
{
    if (!str_id)
        str_id = "window_context";
    ImGuiID id = GImGui->CurrentWindow->GetID(str_id);
    if (IsMouseReleased(mouse_button) && IsWindowHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup))
        if (also_over_items || !IsAnyItemHovered())
            OpenPopupEx(id);
    return BeginPopupEx(id, ImGuiWindowFlags_AlwaysAutoResize|ImGuiWindowFlags_NoTitleBar|ImGuiWindowFlags_NoSavedSettings);
}

bool ImGui::BeginPopupContextVoid(const char* str_id, int mouse_button)
{
    if (!str_id) 
        str_id = "void_context";
    ImGuiID id = GImGui->CurrentWindow->GetID(str_id);
    if (IsMouseReleased(mouse_button) && !IsWindowHovered(ImGuiHoveredFlags_AnyWindow))
        OpenPopupEx(id);
    return BeginPopupEx(id, ImGuiWindowFlags_AlwaysAutoResize|ImGuiWindowFlags_NoTitleBar|ImGuiWindowFlags_NoSavedSettings);
}

static bool BeginChildEx(const char* name, ImGuiID id, const ImVec2& size_arg, bool border, ImGuiWindowFlags extra_flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* parent_window = ImGui::GetCurrentWindow();
    ImGuiWindowFlags flags = ImGuiWindowFlags_NoTitleBar|ImGuiWindowFlags_NoResize|ImGuiWindowFlags_NoSavedSettings|ImGuiWindowFlags_ChildWindow;
    flags |= (parent_window->Flags & ImGuiWindowFlags_NoMove);  // Inherit the NoMove flag

    const ImVec2 content_avail = ImGui::GetContentRegionAvail();
    ImVec2 size = ImFloor(size_arg);
    const int auto_fit_axises = ((size.x == 0.0f) ? (1 << ImGuiAxis_X) : 0x00) | ((size.y == 0.0f) ? (1 << ImGuiAxis_Y) : 0x00);
    if (size.x <= 0.0f)
        size.x = ImMax(content_avail.x + size.x, 4.0f); // Arbitrary minimum child size (0.0f causing too much issues)
    if (size.y <= 0.0f)
        size.y = ImMax(content_avail.y + size.y, 4.0f);

    const float backup_border_size = g.Style.ChildBorderSize;
    if (!border)
        g.Style.ChildBorderSize = 0.0f;
    flags |= extra_flags;

    char title[256];
    if (name)
        ImFormatString(title, IM_ARRAYSIZE(title), "%s/%s", parent_window->Name, name);
    else
        ImFormatString(title, IM_ARRAYSIZE(title), "%s/%08X", parent_window->Name, id);

    ImGui::SetNextWindowSize(size);
    bool ret = ImGui::Begin(title, NULL, flags);
    ImGuiWindow* child_window = ImGui::GetCurrentWindow();
    child_window->ChildId = id;
    child_window->AutoFitChildAxises = auto_fit_axises;
    g.Style.ChildBorderSize = backup_border_size;

    // Process navigation-in immediately so NavInit can run on first frame
    if (!(flags & ImGuiWindowFlags_NavFlattened) && (child_window->DC.NavLayerActiveMask != 0 || child_window->DC.NavHasScroll) && g.NavActivateId == id)
    {
        ImGui::FocusWindow(child_window);
        ImGui::NavInitWindow(child_window, false);
        ImGui::SetActiveID(id+1, child_window); // Steal ActiveId with a dummy id so that key-press won't activate child item
        g.ActiveIdSource = ImGuiInputSource_Nav;
    }

    return ret;
}

bool ImGui::BeginChild(const char* str_id, const ImVec2& size_arg, bool border, ImGuiWindowFlags extra_flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    return BeginChildEx(str_id, window->GetID(str_id), size_arg, border, extra_flags);
}

bool ImGui::BeginChild(ImGuiID id, const ImVec2& size_arg, bool border, ImGuiWindowFlags extra_flags)
{
    IM_ASSERT(id != 0);
    return BeginChildEx(NULL, id, size_arg, border, extra_flags);
}

void ImGui::EndChild()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    IM_ASSERT(window->Flags & ImGuiWindowFlags_ChildWindow);   // Mismatched BeginChild()/EndChild() callss
    if (window->BeginCount > 1)
    {
        End();
    }
    else
    {
        // When using auto-filling child window, we don't provide full width/height to ItemSize so that it doesn't feed back into automatic size-fitting.
        ImVec2 sz = GetWindowSize();
        if (window->AutoFitChildAxises & (1 << ImGuiAxis_X)) // Arbitrary minimum zero-ish child size of 4.0f causes less trouble than a 0.0f
            sz.x = ImMax(4.0f, sz.x);
        if (window->AutoFitChildAxises & (1 << ImGuiAxis_Y))
            sz.y = ImMax(4.0f, sz.y);
        End();

        ImGuiWindow* parent_window = g.CurrentWindow;
        ImRect bb(parent_window->DC.CursorPos, parent_window->DC.CursorPos + sz);
        ItemSize(sz);
        if ((window->DC.NavLayerActiveMask != 0 || window->DC.NavHasScroll) && !(window->Flags & ImGuiWindowFlags_NavFlattened))
        {
            ItemAdd(bb, window->ChildId);
            RenderNavHighlight(bb, window->ChildId);

            // When browsing a window that has no activable items (scroll only) we keep a highlight on the child
            if (window->DC.NavLayerActiveMask == 0 && window == g.NavWindow)
                RenderNavHighlight(ImRect(bb.Min - ImVec2(2,2), bb.Max + ImVec2(2,2)), g.NavId, ImGuiNavHighlightFlags_TypeThin);
        }
        else
        {
            // Not navigable into
            ItemAdd(bb, 0);
        }
    }
}

// Helper to create a child window / scrolling region that looks like a normal widget frame.
bool ImGui::BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags extra_flags)
{
    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    PushStyleColor(ImGuiCol_ChildBg, style.Colors[ImGuiCol_FrameBg]);
    PushStyleVar(ImGuiStyleVar_ChildRounding, style.FrameRounding);
    PushStyleVar(ImGuiStyleVar_ChildBorderSize, style.FrameBorderSize);
    PushStyleVar(ImGuiStyleVar_WindowPadding, style.FramePadding);
    return BeginChild(id, size, true, ImGuiWindowFlags_NoMove | ImGuiWindowFlags_AlwaysUseWindowPadding | extra_flags);
}

void ImGui::EndChildFrame()
{
    EndChild();
    PopStyleVar(3);
    PopStyleColor();
}

// Save and compare stack sizes on Begin()/End() to detect usage errors
static void CheckStacksSize(ImGuiWindow* window, bool write)
{
    // NOT checking: DC.ItemWidth, DC.AllowKeyboardFocus, DC.ButtonRepeat, DC.TextWrapPos (per window) to allow user to conveniently push once and not pop (they are cleared on Begin)
    ImGuiContext& g = *GImGui;
    int* p_backup = &window->DC.StackSizesBackup[0];
    { int current = window->IDStack.Size;       if (write) *p_backup = current; else IM_ASSERT(*p_backup == current && "PushID/PopID or TreeNode/TreePop Mismatch!");   p_backup++; }    // Too few or too many PopID()/TreePop()
    { int current = window->DC.GroupStack.Size; if (write) *p_backup = current; else IM_ASSERT(*p_backup == current && "BeginGroup/EndGroup Mismatch!");                p_backup++; }    // Too few or too many EndGroup()
    { int current = g.CurrentPopupStack.Size;   if (write) *p_backup = current; else IM_ASSERT(*p_backup == current && "BeginMenu/EndMenu or BeginPopup/EndPopup Mismatch"); p_backup++;}// Too few or too many EndMenu()/EndPopup()
    { int current = g.ColorModifiers.Size;      if (write) *p_backup = current; else IM_ASSERT(*p_backup == current && "PushStyleColor/PopStyleColor Mismatch!");       p_backup++; }    // Too few or too many PopStyleColor()
    { int current = g.StyleModifiers.Size;      if (write) *p_backup = current; else IM_ASSERT(*p_backup == current && "PushStyleVar/PopStyleVar Mismatch!");           p_backup++; }    // Too few or too many PopStyleVar()
    { int current = g.FontStack.Size;           if (write) *p_backup = current; else IM_ASSERT(*p_backup == current && "PushFont/PopFont Mismatch!");                   p_backup++; }    // Too few or too many PopFont()
    IM_ASSERT(p_backup == window->DC.StackSizesBackup + IM_ARRAYSIZE(window->DC.StackSizesBackup));
}

enum ImGuiPopupPositionPolicy
{
    ImGuiPopupPositionPolicy_Default,
    ImGuiPopupPositionPolicy_ComboBox
};

static ImVec2 FindBestWindowPosForPopup(const ImVec2& ref_pos, const ImVec2& size, ImGuiDir* last_dir, const ImRect& r_avoid, ImGuiPopupPositionPolicy policy = ImGuiPopupPositionPolicy_Default)
{
    const ImGuiStyle& style = GImGui->Style;

    // r_avoid = the rectangle to avoid (e.g. for tooltip it is a rectangle around the mouse cursor which we want to avoid. for popups it's a small point around the cursor.)
    // r_outer = the visible area rectangle, minus safe area padding. If our popup size won't fit because of safe area padding we ignore it.
    ImVec2 safe_padding = style.DisplaySafeAreaPadding;
    ImRect r_outer(GetViewportRect());
    r_outer.Expand(ImVec2((size.x - r_outer.GetWidth() > safe_padding.x*2) ? -safe_padding.x : 0.0f, (size.y - r_outer.GetHeight() > safe_padding.y*2) ? -safe_padding.y : 0.0f));
    ImVec2 base_pos_clamped = ImClamp(ref_pos, r_outer.Min, r_outer.Max - size);
    //GImGui->OverlayDrawList.AddRect(r_avoid.Min, r_avoid.Max, IM_COL32(255,0,0,255));
    //GImGui->OverlayDrawList.AddRect(r_outer.Min, r_outer.Max, IM_COL32(0,255,0,255));

    // Combo Box policy (we want a connecting edge)
    if (policy == ImGuiPopupPositionPolicy_ComboBox)
    {
        const ImGuiDir dir_prefered_order[ImGuiDir_COUNT] = { ImGuiDir_Down, ImGuiDir_Right, ImGuiDir_Left, ImGuiDir_Up };
        for (int n = (*last_dir != ImGuiDir_None) ? -1 : 0; n < ImGuiDir_COUNT; n++)
        {
            const ImGuiDir dir = (n == -1) ? *last_dir : dir_prefered_order[n];
            if (n != -1 && dir == *last_dir) // Already tried this direction?
                continue;
            ImVec2 pos;
            if (dir == ImGuiDir_Down)  pos = ImVec2(r_avoid.Min.x, r_avoid.Max.y);          // Below, Toward Right (default)
            if (dir == ImGuiDir_Right) pos = ImVec2(r_avoid.Min.x, r_avoid.Min.y - size.y); // Above, Toward Right
            if (dir == ImGuiDir_Left)  pos = ImVec2(r_avoid.Max.x - size.x, r_avoid.Max.y); // Below, Toward Left
            if (dir == ImGuiDir_Up)    pos = ImVec2(r_avoid.Max.x - size.x, r_avoid.Min.y - size.y); // Above, Toward Left
            if (!r_outer.Contains(ImRect(pos, pos + size)))
                continue;
            *last_dir = dir;
            return pos;
        }
    }

    // Default popup policy
    const ImGuiDir dir_prefered_order[ImGuiDir_COUNT] = { ImGuiDir_Right, ImGuiDir_Down, ImGuiDir_Up, ImGuiDir_Left };
    for (int n = (*last_dir != ImGuiDir_None) ? -1 : 0; n < ImGuiDir_COUNT; n++)
    {
        const ImGuiDir dir = (n == -1) ? *last_dir : dir_prefered_order[n];
        if (n != -1 && dir == *last_dir) // Already tried this direction?
            continue;
        float avail_w = (dir == ImGuiDir_Left ? r_avoid.Min.x : r_outer.Max.x) - (dir == ImGuiDir_Right ? r_avoid.Max.x : r_outer.Min.x);
        float avail_h = (dir == ImGuiDir_Up ? r_avoid.Min.y : r_outer.Max.y) - (dir == ImGuiDir_Down ? r_avoid.Max.y : r_outer.Min.y);
        if (avail_w < size.x || avail_h < size.y)
            continue;
        ImVec2 pos;
        pos.x = (dir == ImGuiDir_Left) ? r_avoid.Min.x - size.x : (dir == ImGuiDir_Right) ? r_avoid.Max.x : base_pos_clamped.x;
        pos.y = (dir == ImGuiDir_Up)   ? r_avoid.Min.y - size.y : (dir == ImGuiDir_Down)  ? r_avoid.Max.y : base_pos_clamped.y;
        *last_dir = dir;
        return pos;
    }

    // Fallback, try to keep within display
    *last_dir = ImGuiDir_None;
    ImVec2 pos = ref_pos;
    pos.x = ImMax(ImMin(pos.x + size.x, r_outer.Max.x) - size.x, r_outer.Min.x);
    pos.y = ImMax(ImMin(pos.y + size.y, r_outer.Max.y) - size.y, r_outer.Min.y);
    return pos;
}

static void SetWindowConditionAllowFlags(ImGuiWindow* window, ImGuiCond flags, bool enabled)
{
    window->SetWindowPosAllowFlags       = enabled ? (window->SetWindowPosAllowFlags       | flags) : (window->SetWindowPosAllowFlags       & ~flags);
    window->SetWindowSizeAllowFlags      = enabled ? (window->SetWindowSizeAllowFlags      | flags) : (window->SetWindowSizeAllowFlags      & ~flags);
    window->SetWindowCollapsedAllowFlags = enabled ? (window->SetWindowCollapsedAllowFlags | flags) : (window->SetWindowCollapsedAllowFlags & ~flags);
}

ImGuiWindow* ImGui::FindWindowByName(const char* name)
{
    ImGuiContext& g = *GImGui;
    ImGuiID id = ImHash(name, 0);
    return (ImGuiWindow*)g.WindowsById.GetVoidPtr(id);
}

static ImGuiWindow* CreateNewWindow(const char* name, ImVec2 size, ImGuiWindowFlags flags)
{
    ImGuiContext& g = *GImGui;

    // Create window the first time
    ImGuiWindow* window = IM_NEW(ImGuiWindow)(&g, name);
    window->Flags = flags;
    g.WindowsById.SetVoidPtr(window->ID, window);

    // User can disable loading and saving of settings. Tooltip and child windows also don't store settings.
    if (!(flags & ImGuiWindowFlags_NoSavedSettings))
    {
        // Retrieve settings from .ini file
        // Use SetWindowPos() or SetNextWindowPos() with the appropriate condition flag to change the initial position of a window.
        window->Pos = window->PosFloat = ImVec2(60, 60);

        if (ImGuiWindowSettings* settings = ImGui::FindWindowSettings(window->ID))
        {
            SetWindowConditionAllowFlags(window, ImGuiCond_FirstUseEver, false);
            window->PosFloat = settings->Pos;
            window->Pos = ImFloor(window->PosFloat);
            window->Collapsed = settings->Collapsed;
            if (ImLengthSqr(settings->Size) > 0.00001f)
                size = settings->Size;
        }
    }
    window->Size = window->SizeFull = window->SizeFullAtLastBegin = size;

    if ((flags & ImGuiWindowFlags_AlwaysAutoResize) != 0)
    {
        window->AutoFitFramesX = window->AutoFitFramesY = 2;
        window->AutoFitOnlyGrows = false;
    }
    else
    {
        if (window->Size.x <= 0.0f)
            window->AutoFitFramesX = 2;
        if (window->Size.y <= 0.0f)
            window->AutoFitFramesY = 2;
        window->AutoFitOnlyGrows = (window->AutoFitFramesX > 0) || (window->AutoFitFramesY > 0);
    }

    if (flags & ImGuiWindowFlags_NoBringToFrontOnFocus)
        g.Windows.insert(g.Windows.begin(), window); // Quite slow but rare and only once
    else
        g.Windows.push_back(window);
    return window;
}

static ImVec2 CalcSizeAfterConstraint(ImGuiWindow* window, ImVec2 new_size)
{
    ImGuiContext& g = *GImGui;
    if (g.NextWindowData.SizeConstraintCond != 0)
    {
        // Using -1,-1 on either X/Y axis to preserve the current size.
        ImRect cr = g.NextWindowData.SizeConstraintRect;
        new_size.x = (cr.Min.x >= 0 && cr.Max.x >= 0) ? ImClamp(new_size.x, cr.Min.x, cr.Max.x) : window->SizeFull.x;
        new_size.y = (cr.Min.y >= 0 && cr.Max.y >= 0) ? ImClamp(new_size.y, cr.Min.y, cr.Max.y) : window->SizeFull.y;
        if (g.NextWindowData.SizeCallback)
        {
            ImGuiSizeCallbackData data;
            data.UserData = g.NextWindowData.SizeCallbackUserData;
            data.Pos = window->Pos;
            data.CurrentSize = window->SizeFull;
            data.DesiredSize = new_size;
            g.NextWindowData.SizeCallback(&data);
            new_size = data.DesiredSize;
        }
    }

    // Minimum size
    if (!(window->Flags & (ImGuiWindowFlags_ChildWindow | ImGuiWindowFlags_AlwaysAutoResize)))
    {
        new_size = ImMax(new_size, g.Style.WindowMinSize);
        new_size.y = ImMax(new_size.y, window->TitleBarHeight() + window->MenuBarHeight() + ImMax(0.0f, g.Style.WindowRounding - 1.0f)); // Reduce artifacts with very small windows
    }
    return new_size;
}

static ImVec2 CalcSizeContents(ImGuiWindow* window)
{
    ImVec2 sz;
    sz.x = (float)(int)((window->SizeContentsExplicit.x != 0.0f) ? window->SizeContentsExplicit.x : (window->DC.CursorMaxPos.x - window->Pos.x + window->Scroll.x));
    sz.y = (float)(int)((window->SizeContentsExplicit.y != 0.0f) ? window->SizeContentsExplicit.y : (window->DC.CursorMaxPos.y - window->Pos.y + window->Scroll.y));
    return sz + window->WindowPadding;
}

static ImVec2 CalcSizeAutoFit(ImGuiWindow* window, const ImVec2& size_contents)
{
    ImGuiContext& g = *GImGui;
    ImGuiStyle& style = g.Style;
    ImGuiWindowFlags flags = window->Flags;
    ImVec2 size_auto_fit;
    if ((flags & ImGuiWindowFlags_Tooltip) != 0)
    {
        // Tooltip always resize. We keep the spacing symmetric on both axises for aesthetic purpose.
        size_auto_fit = size_contents;
    }
    else
    {
        // When the window cannot fit all contents (either because of constraints, either because screen is too small): we are growing the size on the other axis to compensate for expected scrollbar. FIXME: Might turn bigger than DisplaySize-WindowPadding.
        size_auto_fit = ImClamp(size_contents, style.WindowMinSize, ImMax(style.WindowMinSize, g.IO.DisplaySize - g.Style.DisplaySafeAreaPadding));
        ImVec2 size_auto_fit_after_constraint = CalcSizeAfterConstraint(window, size_auto_fit);
        if (size_auto_fit_after_constraint.x < size_contents.x && !(flags & ImGuiWindowFlags_NoScrollbar) && (flags & ImGuiWindowFlags_HorizontalScrollbar))
            size_auto_fit.y += style.ScrollbarSize;
        if (size_auto_fit_after_constraint.y < size_contents.y && !(flags & ImGuiWindowFlags_NoScrollbar))
            size_auto_fit.x += style.ScrollbarSize;
    }
    return size_auto_fit;
}

static float GetScrollMaxX(ImGuiWindow* window)
{
    return ImMax(0.0f, window->SizeContents.x - (window->SizeFull.x - window->ScrollbarSizes.x));
}

static float GetScrollMaxY(ImGuiWindow* window)
{
    return ImMax(0.0f, window->SizeContents.y - (window->SizeFull.y - window->ScrollbarSizes.y));
}

static ImVec2 CalcNextScrollFromScrollTargetAndClamp(ImGuiWindow* window)
{
    ImVec2 scroll = window->Scroll;
    float cr_x = window->ScrollTargetCenterRatio.x;
    float cr_y = window->ScrollTargetCenterRatio.y;
    if (window->ScrollTarget.x < FLT_MAX)
        scroll.x = window->ScrollTarget.x - cr_x * (window->SizeFull.x - window->ScrollbarSizes.x);
    if (window->ScrollTarget.y < FLT_MAX)
        scroll.y = window->ScrollTarget.y - (1.0f - cr_y) * (window->TitleBarHeight() + window->MenuBarHeight()) - cr_y * (window->SizeFull.y - window->ScrollbarSizes.y);
    scroll = ImMax(scroll, ImVec2(0.0f, 0.0f));
    if (!window->Collapsed && !window->SkipItems)
    {
        scroll.x = ImMin(scroll.x, GetScrollMaxX(window));
        scroll.y = ImMin(scroll.y, GetScrollMaxY(window));
    }
    return scroll;
}

static ImGuiCol GetWindowBgColorIdxFromFlags(ImGuiWindowFlags flags)
{
    if (flags & (ImGuiWindowFlags_Tooltip | ImGuiWindowFlags_Popup))
        return ImGuiCol_PopupBg;
    if (flags & ImGuiWindowFlags_ChildWindow)
        return ImGuiCol_ChildBg;
    return ImGuiCol_WindowBg;
}

static void CalcResizePosSizeFromAnyCorner(ImGuiWindow* window, const ImVec2& corner_target, const ImVec2& corner_norm, ImVec2* out_pos, ImVec2* out_size)
{
    ImVec2 pos_min = ImLerp(corner_target, window->Pos, corner_norm);                // Expected window upper-left
    ImVec2 pos_max = ImLerp(window->Pos + window->Size, corner_target, corner_norm); // Expected window lower-right
    ImVec2 size_expected = pos_max - pos_min;
    ImVec2 size_constrained = CalcSizeAfterConstraint(window, size_expected);
    *out_pos = pos_min;
    if (corner_norm.x == 0.0f)
        out_pos->x -= (size_constrained.x - size_expected.x);
    if (corner_norm.y == 0.0f)
        out_pos->y -= (size_constrained.y - size_expected.y);
    *out_size = size_constrained;
}

struct ImGuiResizeGripDef
{
    ImVec2           CornerPos;
    ImVec2           InnerDir;
    int              AngleMin12, AngleMax12;
};

const ImGuiResizeGripDef resize_grip_def[4] =
{
    { ImVec2(1,1), ImVec2(-1,-1), 0, 3 }, // Lower right
    { ImVec2(0,1), ImVec2(+1,-1), 3, 6 }, // Lower left
    { ImVec2(0,0), ImVec2(+1,+1), 6, 9 }, // Upper left
    { ImVec2(1,0), ImVec2(-1,+1), 9,12 }, // Upper right
};

static ImRect GetBorderRect(ImGuiWindow* window, int border_n, float perp_padding, float thickness)
{
    ImRect rect = window->Rect();
    if (thickness == 0.0f) rect.Max -= ImVec2(1,1);
    if (border_n == 0) return ImRect(rect.Min.x + perp_padding, rect.Min.y,                rect.Max.x - perp_padding, rect.Min.y + thickness);
    if (border_n == 1) return ImRect(rect.Max.x - thickness,    rect.Min.y + perp_padding, rect.Max.x,                rect.Max.y - perp_padding);
    if (border_n == 2) return ImRect(rect.Min.x + perp_padding, rect.Max.y - thickness,    rect.Max.x - perp_padding, rect.Max.y);
    if (border_n == 3) return ImRect(rect.Min.x,                rect.Min.y + perp_padding, rect.Min.x + thickness,    rect.Max.y - perp_padding);
    IM_ASSERT(0);
    return ImRect();
}

// Handle resize for: Resize Grips, Borders, Gamepad
static void ImGui::UpdateManualResize(ImGuiWindow* window, const ImVec2& size_auto_fit, int* border_held, int resize_grip_count, ImU32 resize_grip_col[4])
{
    ImGuiContext& g = *GImGui;
    ImGuiWindowFlags flags = window->Flags;
    if ((flags & ImGuiWindowFlags_NoResize) || (flags & ImGuiWindowFlags_AlwaysAutoResize) || window->AutoFitFramesX > 0 || window->AutoFitFramesY > 0)
        return;

    const int resize_border_count = (flags & ImGuiWindowFlags_ResizeFromAnySide) ? 4 : 0;
    const float grip_draw_size = (float)(int)ImMax(g.FontSize * 1.35f, window->WindowRounding + 1.0f + g.FontSize * 0.2f);
    const float grip_hover_size = (float)(int)(grip_draw_size * 0.75f);

    ImVec2 pos_target(FLT_MAX, FLT_MAX);
    ImVec2 size_target(FLT_MAX, FLT_MAX);

    // Manual resize grips
    PushID("#RESIZE");
    for (int resize_grip_n = 0; resize_grip_n < resize_grip_count; resize_grip_n++)
    {
        const ImGuiResizeGripDef& grip = resize_grip_def[resize_grip_n];
        const ImVec2 corner = ImLerp(window->Pos, window->Pos + window->Size, grip.CornerPos);

        // Using the FlattenChilds button flag we make the resize button accessible even if we are hovering over a child window
        ImRect resize_rect(corner, corner + grip.InnerDir * grip_hover_size);
        resize_rect.FixInverted();
        bool hovered, held;
        ButtonBehavior(resize_rect, window->GetID((void*)(intptr_t)resize_grip_n), &hovered, &held, ImGuiButtonFlags_FlattenChildren | ImGuiButtonFlags_NoNavFocus);
        if (hovered || held)
            g.MouseCursor = (resize_grip_n & 1) ? ImGuiMouseCursor_ResizeNESW : ImGuiMouseCursor_ResizeNWSE;

        if (g.HoveredWindow == window && held && g.IO.MouseDoubleClicked[0] && resize_grip_n == 0)
        {
            // Manual auto-fit when double-clicking
            size_target = CalcSizeAfterConstraint(window, size_auto_fit);
            ClearActiveID();
        }
        else if (held)
        {
            // Resize from any of the four corners
            // We don't use an incremental MouseDelta but rather compute an absolute target size based on mouse position
            ImVec2 corner_target = g.IO.MousePos - g.ActiveIdClickOffset + resize_rect.GetSize() * grip.CornerPos; // Corner of the window corresponding to our corner grip
            CalcResizePosSizeFromAnyCorner(window, corner_target, grip.CornerPos, &pos_target, &size_target);
        }
        if (resize_grip_n == 0 || held || hovered)
            resize_grip_col[resize_grip_n] = GetColorU32(held ? ImGuiCol_ResizeGripActive : hovered ? ImGuiCol_ResizeGripHovered : ImGuiCol_ResizeGrip);
    }
    for (int border_n = 0; border_n < resize_border_count; border_n++)
    {
        const float BORDER_SIZE = 5.0f;          // FIXME: Only works _inside_ window because of HoveredWindow check.
        const float BORDER_APPEAR_TIMER = 0.05f; // Reduce visual noise
        bool hovered, held;
        ImRect border_rect = GetBorderRect(window, border_n, grip_hover_size, BORDER_SIZE);
        ButtonBehavior(border_rect, window->GetID((void*)(intptr_t)(border_n + 4)), &hovered, &held, ImGuiButtonFlags_FlattenChildren);
        if ((hovered && g.HoveredIdTimer > BORDER_APPEAR_TIMER) || held)
        {
            g.MouseCursor = (border_n & 1) ? ImGuiMouseCursor_ResizeEW : ImGuiMouseCursor_ResizeNS;
            if (held) *border_held = border_n;
        }
        if (held)
        {
            ImVec2 border_target = window->Pos;
            ImVec2 border_posn;
            if (border_n == 0) { border_posn = ImVec2(0, 0); border_target.y = (g.IO.MousePos.y - g.ActiveIdClickOffset.y); }
            if (border_n == 1) { border_posn = ImVec2(1, 0); border_target.x = (g.IO.MousePos.x - g.ActiveIdClickOffset.x + BORDER_SIZE); }
            if (border_n == 2) { border_posn = ImVec2(0, 1); border_target.y = (g.IO.MousePos.y - g.ActiveIdClickOffset.y + BORDER_SIZE); }
            if (border_n == 3) { border_posn = ImVec2(0, 0); border_target.x = (g.IO.MousePos.x - g.ActiveIdClickOffset.x); }
            CalcResizePosSizeFromAnyCorner(window, border_target, border_posn, &pos_target, &size_target);
        }
    }
    PopID();

    // Navigation resize (keyboard/gamepad)
    if (g.NavWindowingTarget == window)
    {
        ImVec2 nav_resize_delta;
        if (g.NavInputSource == ImGuiInputSource_NavKeyboard && g.IO.KeyShift)
            nav_resize_delta = GetNavInputAmount2d(ImGuiNavDirSourceFlags_Keyboard, ImGuiInputReadMode_Down);
        if (g.NavInputSource == ImGuiInputSource_NavGamepad)
            nav_resize_delta = GetNavInputAmount2d(ImGuiNavDirSourceFlags_PadDPad, ImGuiInputReadMode_Down);
        if (nav_resize_delta.x != 0.0f || nav_resize_delta.y != 0.0f)
        {
            const float NAV_RESIZE_SPEED = 600.0f;
            nav_resize_delta *= ImFloor(NAV_RESIZE_SPEED * g.IO.DeltaTime * ImMin(g.IO.DisplayFramebufferScale.x, g.IO.DisplayFramebufferScale.y));
            g.NavWindowingToggleLayer = false;
            g.NavDisableMouseHover = true;
            resize_grip_col[0] = GetColorU32(ImGuiCol_ResizeGripActive);
            // FIXME-NAV: Should store and accumulate into a separate size buffer to handle sizing constraints properly, right now a constraint will make us stuck.
            size_target = CalcSizeAfterConstraint(window, window->SizeFull + nav_resize_delta);
        }
    }

    // Apply back modified position/size to window
    if (size_target.x != FLT_MAX)
    {
        window->SizeFull = size_target;
        MarkIniSettingsDirty(window);
    }
    if (pos_target.x != FLT_MAX)
    {
        window->Pos = window->PosFloat = ImFloor(pos_target);
        MarkIniSettingsDirty(window);
    }

    window->Size = window->SizeFull;
}

// Push a new ImGui window to add widgets to.
// - A default window called "Debug" is automatically stacked at the beginning of every frame so you can use widgets without explicitly calling a Begin/End pair.
// - Begin/End can be called multiple times during the frame with the same window name to append content.
// - The window name is used as a unique identifier to preserve window information across frames (and save rudimentary information to the .ini file).
//   You can use the "##" or "###" markers to use the same label with different id, or same id with different label. See documentation at the top of this file.
// - Return false when window is collapsed, so you can early out in your code. You always need to call ImGui::End() even if false is returned.
// - Passing 'bool* p_open' displays a Close button on the upper-right corner of the window, the pointed value will be set to false when the button is pressed.
bool ImGui::Begin(const char* name, bool* p_open, ImGuiWindowFlags flags)
{
    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    IM_ASSERT(name != NULL);                        // Window name required
    IM_ASSERT(g.Initialized);                       // Forgot to call ImGui::NewFrame()
    IM_ASSERT(g.FrameCountEnded != g.FrameCount);   // Called ImGui::Render() or ImGui::EndFrame() and haven't called ImGui::NewFrame() again yet

    // Find or create
    ImGuiWindow* window = FindWindowByName(name);
    const bool window_just_created = (window == NULL);
    if (window_just_created)
    {
        ImVec2 size_on_first_use = (g.NextWindowData.SizeCond != 0) ? g.NextWindowData.SizeVal : ImVec2(0.0f, 0.0f); // Any condition flag will do since we are creating a new window here.
        window = CreateNewWindow(name, size_on_first_use, flags);
    }

    // Automatically disable manual moving/resizing when NoInputs is set
    if (flags & ImGuiWindowFlags_NoInputs)
        flags |= ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoResize;
    
    if (flags & ImGuiWindowFlags_NavFlattened)
        IM_ASSERT(flags & ImGuiWindowFlags_ChildWindow);

    const int current_frame = g.FrameCount;
    const bool first_begin_of_the_frame = (window->LastFrameActive != current_frame);
    if (first_begin_of_the_frame)
        window->Flags = (ImGuiWindowFlags)flags;
    else
        flags = window->Flags;

    // Update the Appearing flag
    bool window_just_activated_by_user = (window->LastFrameActive < current_frame - 1);   // Not using !WasActive because the implicit "Debug" window would always toggle off->on
    const bool window_just_appearing_after_hidden_for_resize = (window->HiddenFrames > 0);
    if (flags & ImGuiWindowFlags_Popup)
    {
        ImGuiPopupRef& popup_ref = g.OpenPopupStack[g.CurrentPopupStack.Size];
        window_just_activated_by_user |= (window->PopupId != popup_ref.PopupId); // We recycle popups so treat window as activated if popup id changed
        window_just_activated_by_user |= (window != popup_ref.Window);
    }
    window->Appearing = (window_just_activated_by_user || window_just_appearing_after_hidden_for_resize);
    window->CloseButton = (p_open != NULL);
    if (window->Appearing)
        SetWindowConditionAllowFlags(window, ImGuiCond_Appearing, true);

    // Parent window is latched only on the first call to Begin() of the frame, so further append-calls can be done from a different window stack
    ImGuiWindow* parent_window_in_stack = g.CurrentWindowStack.empty() ? NULL : g.CurrentWindowStack.back();
    ImGuiWindow* parent_window = first_begin_of_the_frame ? ((flags & (ImGuiWindowFlags_ChildWindow | ImGuiWindowFlags_Popup)) ? parent_window_in_stack : NULL) : window->ParentWindow;
    IM_ASSERT(parent_window != NULL || !(flags & ImGuiWindowFlags_ChildWindow));

    // Add to stack
    g.CurrentWindowStack.push_back(window);
    SetCurrentWindow(window);
    CheckStacksSize(window, true);
    if (flags & ImGuiWindowFlags_Popup)
    {
        ImGuiPopupRef& popup_ref = g.OpenPopupStack[g.CurrentPopupStack.Size];
        popup_ref.Window = window;
        g.CurrentPopupStack.push_back(popup_ref);
        window->PopupId = popup_ref.PopupId;
    }

    if (window_just_appearing_after_hidden_for_resize && !(flags & ImGuiWindowFlags_ChildWindow))
        window->NavLastIds[0] = 0;

    // Process SetNextWindow***() calls
    bool window_pos_set_by_api = false;
    bool window_size_x_set_by_api = false, window_size_y_set_by_api = false;
    if (g.NextWindowData.PosCond)
    {
        window_pos_set_by_api = (window->SetWindowPosAllowFlags & g.NextWindowData.PosCond) != 0;
        if (window_pos_set_by_api && ImLengthSqr(g.NextWindowData.PosPivotVal) > 0.00001f)
        {
            // May be processed on the next frame if this is our first frame and we are measuring size
            // FIXME: Look into removing the branch so everything can go through this same code path for consistency.
            window->SetWindowPosVal = g.NextWindowData.PosVal;
            window->SetWindowPosPivot = g.NextWindowData.PosPivotVal;
            window->SetWindowPosAllowFlags &= ~(ImGuiCond_Once | ImGuiCond_FirstUseEver | ImGuiCond_Appearing);
        }
        else
        {
            SetWindowPos(window, g.NextWindowData.PosVal, g.NextWindowData.PosCond);
        }
        g.NextWindowData.PosCond = 0;
    }
    if (g.NextWindowData.SizeCond)
    {
        window_size_x_set_by_api = (window->SetWindowSizeAllowFlags & g.NextWindowData.SizeCond) != 0 && (g.NextWindowData.SizeVal.x > 0.0f);
        window_size_y_set_by_api = (window->SetWindowSizeAllowFlags & g.NextWindowData.SizeCond) != 0 && (g.NextWindowData.SizeVal.y > 0.0f);
        SetWindowSize(window, g.NextWindowData.SizeVal, g.NextWindowData.SizeCond);
        g.NextWindowData.SizeCond = 0;
    }
    if (g.NextWindowData.ContentSizeCond)
    {
        // Adjust passed "client size" to become a "window size"
        window->SizeContentsExplicit = g.NextWindowData.ContentSizeVal;
        if (window->SizeContentsExplicit.y != 0.0f)
            window->SizeContentsExplicit.y += window->TitleBarHeight() + window->MenuBarHeight();
        g.NextWindowData.ContentSizeCond = 0;
    }
    else if (first_begin_of_the_frame)
    {
        window->SizeContentsExplicit = ImVec2(0.0f, 0.0f);
    }
    if (g.NextWindowData.CollapsedCond)
    {
        SetWindowCollapsed(window, g.NextWindowData.CollapsedVal, g.NextWindowData.CollapsedCond);
        g.NextWindowData.CollapsedCond = 0;
    }
    if (g.NextWindowData.FocusCond)
    {
        SetWindowFocus();
        g.NextWindowData.FocusCond = 0;
    }
    if (window->Appearing)
        SetWindowConditionAllowFlags(window, ImGuiCond_Appearing, false);

    // When reusing window again multiple times a frame, just append content (don't need to setup again)
    if (first_begin_of_the_frame)
    {
        const bool window_is_child_tooltip = (flags & ImGuiWindowFlags_ChildWindow) && (flags & ImGuiWindowFlags_Tooltip); // FIXME-WIP: Undocumented behavior of Child+Tooltip for pinned tooltip (#1345)

        // Initialize
        window->ParentWindow = parent_window;
        window->RootWindow = window->RootWindowForTitleBarHighlight = window->RootWindowForTabbing = window->RootWindowForNav = window;
        if (parent_window && (flags & ImGuiWindowFlags_ChildWindow) && !window_is_child_tooltip)
            window->RootWindow = parent_window->RootWindow;
        if (parent_window && !(flags & ImGuiWindowFlags_Modal) && (flags & (ImGuiWindowFlags_ChildWindow | ImGuiWindowFlags_Popup)))
            window->RootWindowForTitleBarHighlight = window->RootWindowForTabbing = parent_window->RootWindowForTitleBarHighlight; // Same value in master branch, will differ for docking
        while (window->RootWindowForNav->Flags & ImGuiWindowFlags_NavFlattened)
            window->RootWindowForNav = window->RootWindowForNav->ParentWindow;

        window->Active = true;
        window->BeginOrderWithinParent = 0;
        window->BeginOrderWithinContext = g.WindowsActiveCount++;
        window->BeginCount = 0;
        window->ClipRect = ImVec4(-FLT_MAX,-FLT_MAX,+FLT_MAX,+FLT_MAX);
        window->LastFrameActive = current_frame;
        window->IDStack.resize(1);

        // Lock window rounding, border size and rounding so that altering the border sizes for children doesn't have side-effects.
        window->WindowRounding = (flags & ImGuiWindowFlags_ChildWindow) ? style.ChildRounding : ((flags & ImGuiWindowFlags_Popup) && !(flags & ImGuiWindowFlags_Modal)) ? style.PopupRounding : style.WindowRounding;
        window->WindowBorderSize = (flags & ImGuiWindowFlags_ChildWindow) ? style.ChildBorderSize : ((flags & (ImGuiWindowFlags_Popup | ImGuiWindowFlags_Tooltip)) && !(flags & ImGuiWindowFlags_Modal)) ? style.PopupBorderSize : style.WindowBorderSize;
        window->WindowPadding = style.WindowPadding;
        if ((flags & ImGuiWindowFlags_ChildWindow) && !(flags & (ImGuiWindowFlags_AlwaysUseWindowPadding | ImGuiWindowFlags_Popup)) && window->WindowBorderSize == 0.0f)
            window->WindowPadding = ImVec2(0.0f, (flags & ImGuiWindowFlags_MenuBar) ? style.WindowPadding.y : 0.0f);

        // Collapse window by double-clicking on title bar
        // At this point we don't have a clipping rectangle setup yet, so we can use the title bar area for hit detection and drawing
        if (!(flags & ImGuiWindowFlags_NoTitleBar) && !(flags & ImGuiWindowFlags_NoCollapse))
        {
            ImRect title_bar_rect = window->TitleBarRect();
            if (window->CollapseToggleWanted || (g.HoveredWindow == window && IsMouseHoveringRect(title_bar_rect.Min, title_bar_rect.Max) && g.IO.MouseDoubleClicked[0]))
            {
                window->Collapsed = !window->Collapsed;
                MarkIniSettingsDirty(window);
                FocusWindow(window);
            }
        }
        else
        {
            window->Collapsed = false;
        }
        window->CollapseToggleWanted = false;

        // SIZE

        // Update contents size from last frame for auto-fitting (unless explicitly specified)
        window->SizeContents = CalcSizeContents(window);

        // Hide popup/tooltip window when re-opening while we measure size (because we recycle the windows)
        if (window->HiddenFrames > 0)
            window->HiddenFrames--;
        if (window_just_activated_by_user && (flags & (ImGuiWindowFlags_Popup | ImGuiWindowFlags_Tooltip)) != 0)
        {
            window->HiddenFrames = 1;
            if (flags & ImGuiWindowFlags_AlwaysAutoResize)
            {
                if (!window_size_x_set_by_api)
                    window->Size.x = window->SizeFull.x = 0.f;
                if (!window_size_y_set_by_api)
                    window->Size.y = window->SizeFull.y = 0.f;
                window->SizeContents = ImVec2(0.f, 0.f);
            }
        }

        // Hide new windows for one frame until they calculate their size
        if (window_just_created && (!window_size_x_set_by_api || !window_size_y_set_by_api))
            window->HiddenFrames = 1;

        // Calculate auto-fit size, handle automatic resize
        const ImVec2 size_auto_fit = CalcSizeAutoFit(window, window->SizeContents);
        ImVec2 size_full_modified(FLT_MAX, FLT_MAX);
        if ((flags & ImGuiWindowFlags_AlwaysAutoResize) && !window->Collapsed)
        {
            // Using SetNextWindowSize() overrides ImGuiWindowFlags_AlwaysAutoResize, so it can be used on tooltips/popups, etc.
            if (!window_size_x_set_by_api)
                window->SizeFull.x = size_full_modified.x = size_auto_fit.x;
            if (!window_size_y_set_by_api)
                window->SizeFull.y = size_full_modified.y = size_auto_fit.y;
        }
        else if (window->AutoFitFramesX > 0 || window->AutoFitFramesY > 0)
        {
            // Auto-fit may only grow window during the first few frames
            // We still process initial auto-fit on collapsed windows to get a window width, but otherwise don't honor ImGuiWindowFlags_AlwaysAutoResize when collapsed.
            if (!window_size_x_set_by_api && window->AutoFitFramesX > 0)
                window->SizeFull.x = size_full_modified.x = window->AutoFitOnlyGrows ? ImMax(window->SizeFull.x, size_auto_fit.x) : size_auto_fit.x;
            if (!window_size_y_set_by_api && window->AutoFitFramesY > 0)
                window->SizeFull.y = size_full_modified.y = window->AutoFitOnlyGrows ? ImMax(window->SizeFull.y, size_auto_fit.y) : size_auto_fit.y;
            if (!window->Collapsed)
                MarkIniSettingsDirty(window);
        }

        // Apply minimum/maximum window size constraints and final size
        window->SizeFull = CalcSizeAfterConstraint(window, window->SizeFull);
        window->Size = window->Collapsed && !(flags & ImGuiWindowFlags_ChildWindow) ? window->TitleBarRect().GetSize() : window->SizeFull;

        // SCROLLBAR STATUS

        // Update scrollbar status (based on the Size that was effective during last frame or the auto-resized Size). 
        if (!window->Collapsed)
        {
            // When reading the current size we need to read it after size constraints have been applied
            float size_x_for_scrollbars = size_full_modified.x != FLT_MAX ? window->SizeFull.x : window->SizeFullAtLastBegin.x;
            float size_y_for_scrollbars = size_full_modified.y != FLT_MAX ? window->SizeFull.y : window->SizeFullAtLastBegin.y;
            window->ScrollbarY = (flags & ImGuiWindowFlags_AlwaysVerticalScrollbar) || ((window->SizeContents.y > size_y_for_scrollbars) && !(flags & ImGuiWindowFlags_NoScrollbar));
            window->ScrollbarX = (flags & ImGuiWindowFlags_AlwaysHorizontalScrollbar) || ((window->SizeContents.x > size_x_for_scrollbars - (window->ScrollbarY ? style.ScrollbarSize : 0.0f)) && !(flags & ImGuiWindowFlags_NoScrollbar) && (flags & ImGuiWindowFlags_HorizontalScrollbar));
            if (window->ScrollbarX && !window->ScrollbarY)
                window->ScrollbarY = (window->SizeContents.y > size_y_for_scrollbars - style.ScrollbarSize) && !(flags & ImGuiWindowFlags_NoScrollbar);
            window->ScrollbarSizes = ImVec2(window->ScrollbarY ? style.ScrollbarSize : 0.0f, window->ScrollbarX ? style.ScrollbarSize : 0.0f);
        }

        // POSITION

        // Popup latch its initial position, will position itself when it appears next frame
        if (window_just_activated_by_user)
        {
            window->AutoPosLastDirection = ImGuiDir_None;
            if ((flags & ImGuiWindowFlags_Popup) != 0 && !window_pos_set_by_api)
                window->Pos = window->PosFloat = g.CurrentPopupStack.back().OpenPopupPos;
        }

        // Position child window
        if (flags & ImGuiWindowFlags_ChildWindow)
        {
            window->BeginOrderWithinParent = parent_window->DC.ChildWindows.Size;
            parent_window->DC.ChildWindows.push_back(window);
            if (!(flags & ImGuiWindowFlags_Popup) && !window_pos_set_by_api && !window_is_child_tooltip)
                window->Pos = window->PosFloat = parent_window->DC.CursorPos;
        }

        const bool window_pos_with_pivot = (window->SetWindowPosVal.x != FLT_MAX && window->HiddenFrames == 0);
        if (window_pos_with_pivot)
        {
            // Position given a pivot (e.g. for centering)
            SetWindowPos(window, ImMax(style.DisplaySafeAreaPadding, window->SetWindowPosVal - window->SizeFull * window->SetWindowPosPivot), 0);
        }
        else if (flags & ImGuiWindowFlags_ChildMenu)
        {
            // Child menus typically request _any_ position within the parent menu item, and then our FindBestPopupWindowPos() function will move the new menu outside the parent bounds.
            // This is how we end up with child menus appearing (most-commonly) on the right of the parent menu.
            IM_ASSERT(window_pos_set_by_api);
            float horizontal_overlap = style.ItemSpacing.x; // We want some overlap to convey the relative depth of each popup (currently the amount of overlap it is hard-coded to style.ItemSpacing.x, may need to introduce another style value).
            ImGuiWindow* parent_menu = parent_window_in_stack;
            ImRect rect_to_avoid;
            if (parent_menu->DC.MenuBarAppending)
                rect_to_avoid = ImRect(-FLT_MAX, parent_menu->Pos.y + parent_menu->TitleBarHeight(), FLT_MAX, parent_menu->Pos.y + parent_menu->TitleBarHeight() + parent_menu->MenuBarHeight());
            else
                rect_to_avoid = ImRect(parent_menu->Pos.x + horizontal_overlap, -FLT_MAX, parent_menu->Pos.x + parent_menu->Size.x - horizontal_overlap - parent_menu->ScrollbarSizes.x, FLT_MAX);
            window->PosFloat = FindBestWindowPosForPopup(window->PosFloat, window->Size, &window->AutoPosLastDirection, rect_to_avoid);
        }
        else if ((flags & ImGuiWindowFlags_Popup) != 0 && !window_pos_set_by_api && window_just_appearing_after_hidden_for_resize)
        {
            ImRect rect_to_avoid(window->PosFloat.x - 1, window->PosFloat.y - 1, window->PosFloat.x + 1, window->PosFloat.y + 1);
            window->PosFloat = FindBestWindowPosForPopup(window->PosFloat, window->Size, &window->AutoPosLastDirection, rect_to_avoid);
        }

        // Position tooltip (always follows mouse)
        if ((flags & ImGuiWindowFlags_Tooltip) != 0 && !window_pos_set_by_api && !window_is_child_tooltip)
        {
            float sc = g.Style.MouseCursorScale;
            ImVec2 ref_pos = (!g.NavDisableHighlight && g.NavDisableMouseHover) ? NavCalcPreferredMousePos() : g.IO.MousePos;
            ImRect rect_to_avoid;
            if (!g.NavDisableHighlight && g.NavDisableMouseHover && !(g.IO.ConfigFlags & ImGuiConfigFlags_NavEnableSetMousePos))
                rect_to_avoid = ImRect(ref_pos.x - 16, ref_pos.y - 8, ref_pos.x + 16, ref_pos.y + 8); 
            else
                rect_to_avoid = ImRect(ref_pos.x - 16, ref_pos.y - 8, ref_pos.x + 24 * sc, ref_pos.y + 24 * sc); // FIXME: Hard-coded based on mouse cursor shape expectation. Exact dimension not very important.
            window->PosFloat = FindBestWindowPosForPopup(ref_pos, window->Size, &window->AutoPosLastDirection, rect_to_avoid);
            if (window->AutoPosLastDirection == ImGuiDir_None)
                window->PosFloat = ref_pos + ImVec2(2,2); // If there's not enough room, for tooltip we prefer avoiding the cursor at all cost even if it means that part of the tooltip won't be visible.
        }

        // Clamp position so it stays visible
        if (!(flags & ImGuiWindowFlags_ChildWindow) && !(flags & ImGuiWindowFlags_Tooltip))
        {
            if (!window_pos_set_by_api && window->AutoFitFramesX <= 0 && window->AutoFitFramesY <= 0 && g.IO.DisplaySize.x > 0.0f && g.IO.DisplaySize.y > 0.0f) // Ignore zero-sized display explicitly to avoid losing positions if a window manager reports zero-sized window when initializing or minimizing.
            {
                ImVec2 padding = ImMax(style.DisplayWindowPadding, style.DisplaySafeAreaPadding);
                window->PosFloat = ImMax(window->PosFloat + window->Size, padding) - window->Size;
                window->PosFloat = ImMin(window->PosFloat, g.IO.DisplaySize - padding);
            }
        }
        window->Pos = ImFloor(window->PosFloat);

        // Default item width. Make it proportional to window size if window manually resizes
        if (window->Size.x > 0.0f && !(flags & ImGuiWindowFlags_Tooltip) && !(flags & ImGuiWindowFlags_AlwaysAutoResize))
            window->ItemWidthDefault = (float)(int)(window->Size.x * 0.65f);
        else
            window->ItemWidthDefault = (float)(int)(g.FontSize * 16.0f);

        // Prepare for focus requests
        window->FocusIdxAllRequestCurrent = (window->FocusIdxAllRequestNext == INT_MAX || window->FocusIdxAllCounter == -1) ? INT_MAX : (window->FocusIdxAllRequestNext + (window->FocusIdxAllCounter+1)) % (window->FocusIdxAllCounter+1);
        window->FocusIdxTabRequestCurrent = (window->FocusIdxTabRequestNext == INT_MAX || window->FocusIdxTabCounter == -1) ? INT_MAX : (window->FocusIdxTabRequestNext + (window->FocusIdxTabCounter+1)) % (window->FocusIdxTabCounter+1);
        window->FocusIdxAllCounter = window->FocusIdxTabCounter = -1;
        window->FocusIdxAllRequestNext = window->FocusIdxTabRequestNext = INT_MAX;

        // Apply scrolling
        window->Scroll = CalcNextScrollFromScrollTargetAndClamp(window);
        window->ScrollTarget = ImVec2(FLT_MAX, FLT_MAX);

        // Apply focus, new windows appears in front
        bool want_focus = false;
        if (window_just_activated_by_user && !(flags & ImGuiWindowFlags_NoFocusOnAppearing))
            if (!(flags & (ImGuiWindowFlags_ChildWindow | ImGuiWindowFlags_Tooltip)) || (flags & ImGuiWindowFlags_Popup))
                want_focus = true;

        // Handle manual resize: Resize Grips, Borders, Gamepad
        int border_held = -1;
        ImU32 resize_grip_col[4] = { 0 };
        const int resize_grip_count = (flags & ImGuiWindowFlags_ResizeFromAnySide) ? 2 : 1; // 4
        const float grip_draw_size = (float)(int)ImMax(g.FontSize * 1.35f, window->WindowRounding + 1.0f + g.FontSize * 0.2f);
        if (!window->Collapsed)
            UpdateManualResize(window, size_auto_fit, &border_held, resize_grip_count, &resize_grip_col[0]);

        // DRAWING

        // Setup draw list and outer clipping rectangle
        window->DrawList->Clear();
        window->DrawList->Flags = (g.Style.AntiAliasedLines ? ImDrawListFlags_AntiAliasedLines : 0) | (g.Style.AntiAliasedFill ? ImDrawListFlags_AntiAliasedFill : 0);
        window->DrawList->PushTextureID(g.Font->ContainerAtlas->TexID);
        ImRect viewport_rect(GetViewportRect());
        if ((flags & ImGuiWindowFlags_ChildWindow) && !(flags & ImGuiWindowFlags_Popup) && !window_is_child_tooltip)
            PushClipRect(parent_window->ClipRect.Min, parent_window->ClipRect.Max, true);
        else
            PushClipRect(viewport_rect.Min, viewport_rect.Max, true);

        // Draw modal window background (darkens what is behind them)
        if ((flags & ImGuiWindowFlags_Modal) != 0 && window == GetFrontMostModalRootWindow())
            window->DrawList->AddRectFilled(viewport_rect.Min, viewport_rect.Max, GetColorU32(ImGuiCol_ModalWindowDarkening, g.ModalWindowDarkeningRatio));

        // Draw navigation selection/windowing rectangle background
        if (g.NavWindowingTarget == window)
        {
            ImRect bb = window->Rect();
            bb.Expand(g.FontSize);
            if (!bb.Contains(viewport_rect)) // Avoid drawing if the window covers all the viewport anyway
                window->DrawList->AddRectFilled(bb.Min, bb.Max, GetColorU32(ImGuiCol_NavWindowingHighlight, g.NavWindowingHighlightAlpha * 0.25f), g.Style.WindowRounding);
        }

        // Draw window + handle manual resize
        const float window_rounding = window->WindowRounding;
        const float window_border_size = window->WindowBorderSize;
        const bool title_bar_is_highlight = want_focus || (g.NavWindow && window->RootWindowForTitleBarHighlight == g.NavWindow->RootWindowForTitleBarHighlight);
        const ImRect title_bar_rect = window->TitleBarRect();
        if (window->Collapsed)
        {
            // Title bar only
            float backup_border_size = style.FrameBorderSize;
            g.Style.FrameBorderSize = window->WindowBorderSize;
            ImU32 title_bar_col = GetColorU32((title_bar_is_highlight && !g.NavDisableHighlight) ? ImGuiCol_TitleBgActive : ImGuiCol_TitleBgCollapsed);
            RenderFrame(title_bar_rect.Min, title_bar_rect.Max, title_bar_col, true, window_rounding);
            g.Style.FrameBorderSize = backup_border_size;
        }
        else
        {
            // Window background
            ImU32 bg_col = GetColorU32(GetWindowBgColorIdxFromFlags(flags));
            if (g.NextWindowData.BgAlphaCond != 0)
            {
                bg_col = (bg_col & ~IM_COL32_A_MASK) | (IM_F32_TO_INT8_SAT(g.NextWindowData.BgAlphaVal) << IM_COL32_A_SHIFT);
                g.NextWindowData.BgAlphaCond = 0;
            }
            window->DrawList->AddRectFilled(window->Pos+ImVec2(0,window->TitleBarHeight()), window->Pos+window->Size, bg_col, window_rounding, (flags & ImGuiWindowFlags_NoTitleBar) ? ImDrawCornerFlags_All : ImDrawCornerFlags_Bot);

            // Title bar
            ImU32 title_bar_col = GetColorU32(window->Collapsed ? ImGuiCol_TitleBgCollapsed : title_bar_is_highlight ? ImGuiCol_TitleBgActive : ImGuiCol_TitleBg);
            if (!(flags & ImGuiWindowFlags_NoTitleBar))
                window->DrawList->AddRectFilled(title_bar_rect.Min, title_bar_rect.Max, title_bar_col, window_rounding, ImDrawCornerFlags_Top);

            // Menu bar
            if (flags & ImGuiWindowFlags_MenuBar)
            {
                ImRect menu_bar_rect = window->MenuBarRect();
                menu_bar_rect.ClipWith(window->Rect());  // Soft clipping, in particular child window don't have minimum size covering the menu bar so this is useful for them.
                window->DrawList->AddRectFilled(menu_bar_rect.Min, menu_bar_rect.Max, GetColorU32(ImGuiCol_MenuBarBg), (flags & ImGuiWindowFlags_NoTitleBar) ? window_rounding : 0.0f, ImDrawCornerFlags_Top);
                if (style.FrameBorderSize > 0.0f && menu_bar_rect.Max.y < window->Pos.y + window->Size.y)
                    window->DrawList->AddLine(menu_bar_rect.GetBL(), menu_bar_rect.GetBR(), GetColorU32(ImGuiCol_Border), style.FrameBorderSize);
            }

            // Scrollbars
            if (window->ScrollbarX)
                Scrollbar(ImGuiLayoutType_Horizontal);
            if (window->ScrollbarY)
                Scrollbar(ImGuiLayoutType_Vertical);

            // Render resize grips (after their input handling so we don't have a frame of latency)
            if (!(flags & ImGuiWindowFlags_NoResize))
            {
                for (int resize_grip_n = 0; resize_grip_n < resize_grip_count; resize_grip_n++)
                {
                    const ImGuiResizeGripDef& grip = resize_grip_def[resize_grip_n];
                    const ImVec2 corner = ImLerp(window->Pos, window->Pos + window->Size, grip.CornerPos);
                    window->DrawList->PathLineTo(corner + grip.InnerDir * ((resize_grip_n & 1) ? ImVec2(window_border_size, grip_draw_size) : ImVec2(grip_draw_size, window_border_size)));
                    window->DrawList->PathLineTo(corner + grip.InnerDir * ((resize_grip_n & 1) ? ImVec2(grip_draw_size, window_border_size) : ImVec2(window_border_size, grip_draw_size)));
                    window->DrawList->PathArcToFast(ImVec2(corner.x + grip.InnerDir.x * (window_rounding + window_border_size), corner.y + grip.InnerDir.y * (window_rounding + window_border_size)), window_rounding, grip.AngleMin12, grip.AngleMax12);
                    window->DrawList->PathFillConvex(resize_grip_col[resize_grip_n]);
                }
            }

            // Borders
            if (window_border_size > 0.0f)
                window->DrawList->AddRect(window->Pos, window->Pos+window->Size, GetColorU32(ImGuiCol_Border), window_rounding, ImDrawCornerFlags_All, window_border_size);
            if (border_held != -1)
            {
                ImRect border = GetBorderRect(window, border_held, grip_draw_size, 0.0f);
                window->DrawList->AddLine(border.Min, border.Max, GetColorU32(ImGuiCol_SeparatorActive), ImMax(1.0f, window_border_size));
            }
            if (style.FrameBorderSize > 0 && !(flags & ImGuiWindowFlags_NoTitleBar))
                window->DrawList->AddLine(title_bar_rect.GetBL() + ImVec2(style.WindowBorderSize, -1), title_bar_rect.GetBR() + ImVec2(-style.WindowBorderSize,-1), GetColorU32(ImGuiCol_Border), style.FrameBorderSize);
        }

        // Draw navigation selection/windowing rectangle border
        if (g.NavWindowingTarget == window)
        {
            float rounding = ImMax(window->WindowRounding, g.Style.WindowRounding);
            ImRect bb = window->Rect();
            bb.Expand(g.FontSize);
            if (bb.Contains(viewport_rect)) // If a window fits the entire viewport, adjust its highlight inward
            {
                bb.Expand(-g.FontSize - 1.0f);
                rounding = window->WindowRounding;
            }
            window->DrawList->AddRect(bb.Min, bb.Max, GetColorU32(ImGuiCol_NavWindowingHighlight, g.NavWindowingHighlightAlpha), rounding, ~0, 3.0f);
        }

        // Store a backup of SizeFull which we will use next frame to decide if we need scrollbars. 
        window->SizeFullAtLastBegin = window->SizeFull;

        // Update ContentsRegionMax. All the variable it depends on are set above in this function.
        window->ContentsRegionRect.Min.x = -window->Scroll.x + window->WindowPadding.x;
        window->ContentsRegionRect.Min.y = -window->Scroll.y + window->WindowPadding.y + window->TitleBarHeight() + window->MenuBarHeight();
        window->ContentsRegionRect.Max.x = -window->Scroll.x - window->WindowPadding.x + (window->SizeContentsExplicit.x != 0.0f ? window->SizeContentsExplicit.x : (window->Size.x - window->ScrollbarSizes.x)); 
        window->ContentsRegionRect.Max.y = -window->Scroll.y - window->WindowPadding.y + (window->SizeContentsExplicit.y != 0.0f ? window->SizeContentsExplicit.y : (window->Size.y - window->ScrollbarSizes.y)); 

        // Setup drawing context
        // (NB: That term "drawing context / DC" lost its meaning a long time ago. Initially was meant to hold transient data only. Nowadays difference between window-> and window->DC-> is dubious.)
        window->DC.IndentX = 0.0f + window->WindowPadding.x - window->Scroll.x;
        window->DC.GroupOffsetX = 0.0f;
        window->DC.ColumnsOffsetX = 0.0f;
        window->DC.CursorStartPos = window->Pos + ImVec2(window->DC.IndentX + window->DC.ColumnsOffsetX, window->TitleBarHeight() + window->MenuBarHeight() + window->WindowPadding.y - window->Scroll.y);
        window->DC.CursorPos = window->DC.CursorStartPos;
        window->DC.CursorPosPrevLine = window->DC.CursorPos;
        window->DC.CursorMaxPos = window->DC.CursorStartPos;
        window->DC.CurrentLineHeight = window->DC.PrevLineHeight = 0.0f;
        window->DC.CurrentLineTextBaseOffset = window->DC.PrevLineTextBaseOffset = 0.0f;
        window->DC.NavHideHighlightOneFrame = false;
        window->DC.NavHasScroll = (GetScrollMaxY() > 0.0f);
        window->DC.NavLayerActiveMask = window->DC.NavLayerActiveMaskNext;
        window->DC.NavLayerActiveMaskNext = 0x00;
        window->DC.MenuBarAppending = false;
        window->DC.MenuBarOffsetX = ImMax(window->WindowPadding.x, style.ItemSpacing.x);
        window->DC.LogLinePosY = window->DC.CursorPos.y - 9999.0f;
        window->DC.ChildWindows.resize(0);
        window->DC.LayoutType = ImGuiLayoutType_Vertical;
        window->DC.ParentLayoutType = parent_window ? parent_window->DC.LayoutType : ImGuiLayoutType_Vertical;
        window->DC.ItemFlags = ImGuiItemFlags_Default_;
        window->DC.ItemWidth = window->ItemWidthDefault;
        window->DC.TextWrapPos = -1.0f; // disabled
        window->DC.ItemFlagsStack.resize(0);
        window->DC.ItemWidthStack.resize(0);
        window->DC.TextWrapPosStack.resize(0);
        window->DC.ColumnsSet = NULL;
        window->DC.TreeDepth = 0;
        window->DC.TreeDepthMayJumpToParentOnPop = 0x00;
        window->DC.StateStorage = &window->StateStorage;
        window->DC.GroupStack.resize(0);
        window->MenuColumns.Update(3, style.ItemSpacing.x, window_just_activated_by_user);

        if ((flags & ImGuiWindowFlags_ChildWindow) && (window->DC.ItemFlags != parent_window->DC.ItemFlags))
        {
            window->DC.ItemFlags = parent_window->DC.ItemFlags;
            window->DC.ItemFlagsStack.push_back(window->DC.ItemFlags);
        }

        if (window->AutoFitFramesX > 0)
            window->AutoFitFramesX--;
        if (window->AutoFitFramesY > 0)
            window->AutoFitFramesY--;

        // Apply focus (we need to call FocusWindow() AFTER setting DC.CursorStartPos so our initial navigation reference rectangle can start around there)
        if (want_focus)
        {
            FocusWindow(window);
            NavInitWindow(window, false);
        }

        // Title bar
        if (!(flags & ImGuiWindowFlags_NoTitleBar))
        {
            // Close & collapse button are on layer 1 (same as menus) and don't default focus
            const ImGuiItemFlags item_flags_backup = window->DC.ItemFlags;
            window->DC.ItemFlags |= ImGuiItemFlags_NoNavDefaultFocus;
            window->DC.NavLayerCurrent++;
            window->DC.NavLayerCurrentMask <<= 1;

            // Collapse button
            if (!(flags & ImGuiWindowFlags_NoCollapse))
            {
                ImGuiID id = window->GetID("#COLLAPSE");
                ImRect bb(window->Pos + style.FramePadding + ImVec2(1,1), window->Pos + style.FramePadding + ImVec2(g.FontSize,g.FontSize) - ImVec2(1,1));
                ItemAdd(bb, id); // To allow navigation
                if (ButtonBehavior(bb, id, NULL, NULL))
                    window->CollapseToggleWanted = true; // Defer collapsing to next frame as we are too far in the Begin() function
                RenderNavHighlight(bb, id);
                RenderArrow(window->Pos + style.FramePadding, window->Collapsed ? ImGuiDir_Right : ImGuiDir_Down, 1.0f);
            }

            // Close button
            if (p_open != NULL)
            {
                const float pad = style.FramePadding.y;
                const float rad = g.FontSize * 0.5f;
                if (CloseButton(window->GetID("#CLOSE"), window->Rect().GetTR() + ImVec2(-pad - rad, pad + rad), rad + 1))
                    *p_open = false;
            }

            window->DC.NavLayerCurrent--;
            window->DC.NavLayerCurrentMask >>= 1;
            window->DC.ItemFlags = item_flags_backup;

            // Title text (FIXME: refactor text alignment facilities along with RenderText helpers)
            ImVec2 text_size = CalcTextSize(name, NULL, true);
            ImRect text_r = title_bar_rect;
            float pad_left = (flags & ImGuiWindowFlags_NoCollapse) == 0 ? (style.FramePadding.x + g.FontSize + style.ItemInnerSpacing.x) : style.FramePadding.x;
            float pad_right = (p_open != NULL) ? (style.FramePadding.x + g.FontSize + style.ItemInnerSpacing.x) : style.FramePadding.x;
            if (style.WindowTitleAlign.x > 0.0f) pad_right = ImLerp(pad_right, pad_left, style.WindowTitleAlign.x);
            text_r.Min.x += pad_left;
            text_r.Max.x -= pad_right;
            ImRect clip_rect = text_r;
            clip_rect.Max.x = window->Pos.x + window->Size.x - (p_open ? title_bar_rect.GetHeight() - 3 : style.FramePadding.x); // Match the size of CloseButton()
            RenderTextClipped(text_r.Min, text_r.Max, name, NULL, &text_size, style.WindowTitleAlign, &clip_rect);
        }

        // Save clipped aabb so we can access it in constant-time in FindHoveredWindow()
        window->WindowRectClipped = window->Rect();
        window->WindowRectClipped.ClipWith(window->ClipRect);

        // Pressing CTRL+C while holding on a window copy its content to the clipboard
        // This works but 1. doesn't handle multiple Begin/End pairs, 2. recursing into another Begin/End pair - so we need to work that out and add better logging scope.
        // Maybe we can support CTRL+C on every element?
        /*
        if (g.ActiveId == move_id)
            if (g.IO.KeyCtrl && IsKeyPressedMap(ImGuiKey_C))
                ImGui::LogToClipboard();
        */

        // Inner rectangle
        // We set this up after processing the resize grip so that our clip rectangle doesn't lag by a frame
        // Note that if our window is collapsed we will end up with a null clipping rectangle which is the correct behavior.
        window->InnerRect.Min.x = title_bar_rect.Min.x + window->WindowBorderSize;
        window->InnerRect.Min.y = title_bar_rect.Max.y + window->MenuBarHeight() + (((flags & ImGuiWindowFlags_MenuBar) || !(flags & ImGuiWindowFlags_NoTitleBar)) ? style.FrameBorderSize : window->WindowBorderSize);
        window->InnerRect.Max.x = window->Pos.x + window->Size.x - window->ScrollbarSizes.x - window->WindowBorderSize;
        window->InnerRect.Max.y = window->Pos.y + window->Size.y - window->ScrollbarSizes.y - window->WindowBorderSize;
        //window->DrawList->AddRect(window->InnerRect.Min, window->InnerRect.Max, IM_COL32_WHITE);

        // Inner clipping rectangle
        // Force round operator last to ensure that e.g. (int)(max.x-min.x) in user's render code produce correct result.
        window->InnerClipRect.Min.x = ImFloor(0.5f + window->InnerRect.Min.x + ImMax(0.0f, ImFloor(window->WindowPadding.x*0.5f - window->WindowBorderSize)));
        window->InnerClipRect.Min.y = ImFloor(0.5f + window->InnerRect.Min.y);
        window->InnerClipRect.Max.x = ImFloor(0.5f + window->InnerRect.Max.x - ImMax(0.0f, ImFloor(window->WindowPadding.x*0.5f - window->WindowBorderSize)));
        window->InnerClipRect.Max.y = ImFloor(0.5f + window->InnerRect.Max.y);

        // After Begin() we fill the last item / hovered data using the title bar data. Make that a standard behavior (to allow usage of context menus on title bar only, etc.).
        window->DC.LastItemId = window->MoveId;
        window->DC.LastItemStatusFlags = IsMouseHoveringRect(title_bar_rect.Min, title_bar_rect.Max, false) ? ImGuiItemStatusFlags_HoveredRect : 0;
        window->DC.LastItemRect = title_bar_rect;
    }

    PushClipRect(window->InnerClipRect.Min, window->InnerClipRect.Max, true);

    // Clear 'accessed' flag last thing (After PushClipRect which will set the flag. We want the flag to stay false when the default "Debug" window is unused)
    if (first_begin_of_the_frame)
        window->WriteAccessed = false;

    window->BeginCount++;
    g.NextWindowData.SizeConstraintCond = 0;

    // Child window can be out of sight and have "negative" clip windows.
    // Mark them as collapsed so commands are skipped earlier (we can't manually collapse because they have no title bar).
    if (flags & ImGuiWindowFlags_ChildWindow)
    {
        IM_ASSERT((flags & ImGuiWindowFlags_NoTitleBar) != 0);
        window->Collapsed = parent_window && parent_window->Collapsed;

        if (!(flags & ImGuiWindowFlags_AlwaysAutoResize) && window->AutoFitFramesX <= 0 && window->AutoFitFramesY <= 0)
            window->Collapsed |= (window->WindowRectClipped.Min.x >= window->WindowRectClipped.Max.x || window->WindowRectClipped.Min.y >= window->WindowRectClipped.Max.y);

        // We also hide the window from rendering because we've already added its border to the command list.
        // (we could perform the check earlier in the function but it is simpler at this point)
        if (window->Collapsed)
            window->Active = false;
    }
    if (style.Alpha <= 0.0f)
        window->Active = false;

    // Return false if we don't intend to display anything to allow user to perform an early out optimization
    window->SkipItems = (window->Collapsed || !window->Active) && window->AutoFitFramesX <= 0 && window->AutoFitFramesY <= 0;
    return !window->SkipItems;
}

// Old Begin() API with 5 parameters, avoid calling this version directly! Use SetNextWindowSize()/SetNextWindowBgAlpha() + Begin() instead.
#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
bool ImGui::Begin(const char* name, bool* p_open, const ImVec2& size_first_use, float bg_alpha_override, ImGuiWindowFlags flags)
{
    // Old API feature: we could pass the initial window size as a parameter. This was misleading because it only had an effect if the window didn't have data in the .ini file.
    if (size_first_use.x != 0.0f || size_first_use.y != 0.0f)
        ImGui::SetNextWindowSize(size_first_use, ImGuiCond_FirstUseEver);

    // Old API feature: override the window background alpha with a parameter.
    if (bg_alpha_override >= 0.0f)
        ImGui::SetNextWindowBgAlpha(bg_alpha_override);

    return ImGui::Begin(name, p_open, flags);
}
#endif // IMGUI_DISABLE_OBSOLETE_FUNCTIONS

void ImGui::End()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    if (window->DC.ColumnsSet != NULL)
        EndColumns();
    PopClipRect();   // Inner window clip rectangle

    // Stop logging
    if (!(window->Flags & ImGuiWindowFlags_ChildWindow))    // FIXME: add more options for scope of logging
        LogFinish();

    // Pop from window stack
    g.CurrentWindowStack.pop_back();
    if (window->Flags & ImGuiWindowFlags_Popup)
        g.CurrentPopupStack.pop_back();
    CheckStacksSize(window, false);
    SetCurrentWindow(g.CurrentWindowStack.empty() ? NULL : g.CurrentWindowStack.back());
}

// Vertical scrollbar
// The entire piece of code below is rather confusing because:
// - We handle absolute seeking (when first clicking outside the grab) and relative manipulation (afterward or when clicking inside the grab)
// - We store values as normalized ratio and in a form that allows the window content to change while we are holding on a scrollbar
// - We handle both horizontal and vertical scrollbars, which makes the terminology not ideal.
void ImGui::Scrollbar(ImGuiLayoutType direction)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    const bool horizontal = (direction == ImGuiLayoutType_Horizontal);
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(horizontal ? "#SCROLLX" : "#SCROLLY");

    // Render background
    bool other_scrollbar = (horizontal ? window->ScrollbarY : window->ScrollbarX);
    float other_scrollbar_size_w = other_scrollbar ? style.ScrollbarSize : 0.0f;
    const ImRect window_rect = window->Rect();
    const float border_size = window->WindowBorderSize;
    ImRect bb = horizontal
        ? ImRect(window->Pos.x + border_size, window_rect.Max.y - style.ScrollbarSize, window_rect.Max.x - other_scrollbar_size_w - border_size, window_rect.Max.y - border_size)
        : ImRect(window_rect.Max.x - style.ScrollbarSize, window->Pos.y + border_size, window_rect.Max.x - border_size, window_rect.Max.y - other_scrollbar_size_w - border_size);
    if (!horizontal)
        bb.Min.y += window->TitleBarHeight() + ((window->Flags & ImGuiWindowFlags_MenuBar) ? window->MenuBarHeight() : 0.0f);
    if (bb.GetWidth() <= 0.0f || bb.GetHeight() <= 0.0f)
        return;

    int window_rounding_corners;
    if (horizontal)
        window_rounding_corners = ImDrawCornerFlags_BotLeft | (other_scrollbar ? 0 : ImDrawCornerFlags_BotRight);
    else
        window_rounding_corners = (((window->Flags & ImGuiWindowFlags_NoTitleBar) && !(window->Flags & ImGuiWindowFlags_MenuBar)) ? ImDrawCornerFlags_TopRight : 0) | (other_scrollbar ? 0 : ImDrawCornerFlags_BotRight);
    window->DrawList->AddRectFilled(bb.Min, bb.Max, GetColorU32(ImGuiCol_ScrollbarBg), window->WindowRounding, window_rounding_corners);
    bb.Expand(ImVec2(-ImClamp((float)(int)((bb.Max.x - bb.Min.x - 2.0f) * 0.5f), 0.0f, 3.0f), -ImClamp((float)(int)((bb.Max.y - bb.Min.y - 2.0f) * 0.5f), 0.0f, 3.0f)));

    // V denote the main, longer axis of the scrollbar (= height for a vertical scrollbar)
    float scrollbar_size_v = horizontal ? bb.GetWidth() : bb.GetHeight();
    float scroll_v = horizontal ? window->Scroll.x : window->Scroll.y;
    float win_size_avail_v = (horizontal ? window->SizeFull.x : window->SizeFull.y) - other_scrollbar_size_w;
    float win_size_contents_v = horizontal ? window->SizeContents.x : window->SizeContents.y;

    // Calculate the height of our grabbable box. It generally represent the amount visible (vs the total scrollable amount)
    // But we maintain a minimum size in pixel to allow for the user to still aim inside.
    IM_ASSERT(ImMax(win_size_contents_v, win_size_avail_v) > 0.0f); // Adding this assert to check if the ImMax(XXX,1.0f) is still needed. PLEASE CONTACT ME if this triggers.
    const float win_size_v = ImMax(ImMax(win_size_contents_v, win_size_avail_v), 1.0f);
    const float grab_h_pixels = ImClamp(scrollbar_size_v * (win_size_avail_v / win_size_v), style.GrabMinSize, scrollbar_size_v);
    const float grab_h_norm = grab_h_pixels / scrollbar_size_v;

    // Handle input right away. None of the code of Begin() is relying on scrolling position before calling Scrollbar().
    bool held = false;
    bool hovered = false;
    const bool previously_held = (g.ActiveId == id);
    ButtonBehavior(bb, id, &hovered, &held, ImGuiButtonFlags_NoNavFocus);

    float scroll_max = ImMax(1.0f, win_size_contents_v - win_size_avail_v);
    float scroll_ratio = ImSaturate(scroll_v / scroll_max);
    float grab_v_norm = scroll_ratio * (scrollbar_size_v - grab_h_pixels) / scrollbar_size_v;
    if (held && grab_h_norm < 1.0f)
    {
        float scrollbar_pos_v = horizontal ? bb.Min.x : bb.Min.y;
        float mouse_pos_v = horizontal ? g.IO.MousePos.x : g.IO.MousePos.y;
        float* click_delta_to_grab_center_v = horizontal ? &g.ScrollbarClickDeltaToGrabCenter.x : &g.ScrollbarClickDeltaToGrabCenter.y;

        // Click position in scrollbar normalized space (0.0f->1.0f)
        const float clicked_v_norm = ImSaturate((mouse_pos_v - scrollbar_pos_v) / scrollbar_size_v);
        SetHoveredID(id);

        bool seek_absolute = false;
        if (!previously_held)
        {
            // On initial click calculate the distance between mouse and the center of the grab
            if (clicked_v_norm >= grab_v_norm && clicked_v_norm <= grab_v_norm + grab_h_norm)
            {
                *click_delta_to_grab_center_v = clicked_v_norm - grab_v_norm - grab_h_norm*0.5f;
            }
            else
            {
                seek_absolute = true;
                *click_delta_to_grab_center_v = 0.0f;
            }
        }

        // Apply scroll
        // It is ok to modify Scroll here because we are being called in Begin() after the calculation of SizeContents and before setting up our starting position
        const float scroll_v_norm = ImSaturate((clicked_v_norm - *click_delta_to_grab_center_v - grab_h_norm*0.5f) / (1.0f - grab_h_norm));
        scroll_v = (float)(int)(0.5f + scroll_v_norm * scroll_max);//(win_size_contents_v - win_size_v));
        if (horizontal)
            window->Scroll.x = scroll_v;
        else
            window->Scroll.y = scroll_v;

        // Update values for rendering
        scroll_ratio = ImSaturate(scroll_v / scroll_max);
        grab_v_norm = scroll_ratio * (scrollbar_size_v - grab_h_pixels) / scrollbar_size_v;

        // Update distance to grab now that we have seeked and saturated
        if (seek_absolute)
            *click_delta_to_grab_center_v = clicked_v_norm - grab_v_norm - grab_h_norm*0.5f;
    }

    // Render
    const ImU32 grab_col = GetColorU32(held ? ImGuiCol_ScrollbarGrabActive : hovered ? ImGuiCol_ScrollbarGrabHovered : ImGuiCol_ScrollbarGrab);
    ImRect grab_rect;
    if (horizontal)
        grab_rect = ImRect(ImLerp(bb.Min.x, bb.Max.x, grab_v_norm), bb.Min.y, ImMin(ImLerp(bb.Min.x, bb.Max.x, grab_v_norm) + grab_h_pixels, window_rect.Max.x), bb.Max.y);
    else
        grab_rect = ImRect(bb.Min.x, ImLerp(bb.Min.y, bb.Max.y, grab_v_norm), bb.Max.x, ImMin(ImLerp(bb.Min.y, bb.Max.y, grab_v_norm) + grab_h_pixels, window_rect.Max.y));
    window->DrawList->AddRectFilled(grab_rect.Min, grab_rect.Max, grab_col, style.ScrollbarRounding);
}

void ImGui::BringWindowToFront(ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* current_front_window = g.Windows.back();
    if (current_front_window == window || current_front_window->RootWindow == window)
        return;
    for (int i = g.Windows.Size - 2; i >= 0; i--) // We can ignore the front most window
        if (g.Windows[i] == window)
        {
            g.Windows.erase(g.Windows.Data + i);
            g.Windows.push_back(window);
            break;
        }
}

void ImGui::BringWindowToBack(ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;
    if (g.Windows[0] == window)
        return;
    for (int i = 0; i < g.Windows.Size; i++)
        if (g.Windows[i] == window)
        {
            memmove(&g.Windows[1], &g.Windows[0], (size_t)i * sizeof(ImGuiWindow*));
            g.Windows[0] = window;
            break;
        }
}

// Moving window to front of display and set focus (which happens to be back of our sorted list)
void ImGui::FocusWindow(ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;

    if (g.NavWindow != window)
    {
        g.NavWindow = window;
        if (window && g.NavDisableMouseHover)
            g.NavMousePosDirty = true;
        g.NavInitRequest = false;
        g.NavId = window ? window->NavLastIds[0] : 0; // Restore NavId
        g.NavIdIsAlive = false;
        g.NavLayer = 0;
        //printf("[%05d] FocusWindow(\"%s\")\n", g.FrameCount, window ? window->Name : NULL);
    }

    // Passing NULL allow to disable keyboard focus
    if (!window)
        return;

    // Move the root window to the top of the pile
    if (window->RootWindow)
        window = window->RootWindow;

    // Steal focus on active widgets
    if (window->Flags & ImGuiWindowFlags_Popup) // FIXME: This statement should be unnecessary. Need further testing before removing it..
        if (g.ActiveId != 0 && g.ActiveIdWindow && g.ActiveIdWindow->RootWindow != window)
            ClearActiveID();

    // Bring to front
    if (!(window->Flags & ImGuiWindowFlags_NoBringToFrontOnFocus))
        BringWindowToFront(window);
}

void ImGui::FocusFrontMostActiveWindow(ImGuiWindow* ignore_window)
{
    ImGuiContext& g = *GImGui;
    for (int i = g.Windows.Size - 1; i >= 0; i--)
        if (g.Windows[i] != ignore_window && g.Windows[i]->WasActive && !(g.Windows[i]->Flags & ImGuiWindowFlags_ChildWindow))
        {
            ImGuiWindow* focus_window = NavRestoreLastChildNavWindow(g.Windows[i]); 
            FocusWindow(focus_window);
            return;
        }
}

void ImGui::PushItemWidth(float item_width)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.ItemWidth = (item_width == 0.0f ? window->ItemWidthDefault : item_width);
    window->DC.ItemWidthStack.push_back(window->DC.ItemWidth);
}

void ImGui::PushMultiItemsWidths(int components, float w_full)
{
    ImGuiWindow* window = GetCurrentWindow();
    const ImGuiStyle& style = GImGui->Style;
    if (w_full <= 0.0f)
        w_full = CalcItemWidth();
    const float w_item_one  = ImMax(1.0f, (float)(int)((w_full - (style.ItemInnerSpacing.x) * (components-1)) / (float)components));
    const float w_item_last = ImMax(1.0f, (float)(int)(w_full - (w_item_one + style.ItemInnerSpacing.x) * (components-1)));
    window->DC.ItemWidthStack.push_back(w_item_last);
    for (int i = 0; i < components-1; i++)
        window->DC.ItemWidthStack.push_back(w_item_one);
    window->DC.ItemWidth = window->DC.ItemWidthStack.back();
}

void ImGui::PopItemWidth()
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.ItemWidthStack.pop_back();
    window->DC.ItemWidth = window->DC.ItemWidthStack.empty() ? window->ItemWidthDefault : window->DC.ItemWidthStack.back();
}

float ImGui::CalcItemWidth()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    float w = window->DC.ItemWidth;
    if (w < 0.0f)
    {
        // Align to a right-side limit. We include 1 frame padding in the calculation because this is how the width is always used (we add 2 frame padding to it), but we could move that responsibility to the widget as well.
        float width_to_right_edge = GetContentRegionAvail().x;
        w = ImMax(1.0f, width_to_right_edge + w);
    }
    w = (float)(int)w;
    return w;
}

static ImFont* GetDefaultFont()
{
    ImGuiContext& g = *GImGui;
    return g.IO.FontDefault ? g.IO.FontDefault : g.IO.Fonts->Fonts[0];
}

void ImGui::SetCurrentFont(ImFont* font)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(font && font->IsLoaded());    // Font Atlas not created. Did you call io.Fonts->GetTexDataAsRGBA32 / GetTexDataAsAlpha8 ?
    IM_ASSERT(font->Scale > 0.0f);
    g.Font = font;
    g.FontBaseSize = g.IO.FontGlobalScale * g.Font->FontSize * g.Font->Scale;
    g.FontSize = g.CurrentWindow ? g.CurrentWindow->CalcFontSize() : 0.0f;

    ImFontAtlas* atlas = g.Font->ContainerAtlas;
    g.DrawListSharedData.TexUvWhitePixel = atlas->TexUvWhitePixel;
    g.DrawListSharedData.Font = g.Font;
    g.DrawListSharedData.FontSize = g.FontSize;
}

void ImGui::PushFont(ImFont* font)
{
    ImGuiContext& g = *GImGui;
    if (!font)
        font = GetDefaultFont();
    SetCurrentFont(font);
    g.FontStack.push_back(font);
    g.CurrentWindow->DrawList->PushTextureID(font->ContainerAtlas->TexID);
}

void  ImGui::PopFont()
{
    ImGuiContext& g = *GImGui;
    g.CurrentWindow->DrawList->PopTextureID();
    g.FontStack.pop_back();
    SetCurrentFont(g.FontStack.empty() ? GetDefaultFont() : g.FontStack.back());
}

void ImGui::PushItemFlag(ImGuiItemFlags option, bool enabled)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (enabled)
        window->DC.ItemFlags |= option;
    else
        window->DC.ItemFlags &= ~option;
    window->DC.ItemFlagsStack.push_back(window->DC.ItemFlags);
}

void ImGui::PopItemFlag()
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.ItemFlagsStack.pop_back();
    window->DC.ItemFlags = window->DC.ItemFlagsStack.empty() ? ImGuiItemFlags_Default_ : window->DC.ItemFlagsStack.back();
}

void ImGui::PushAllowKeyboardFocus(bool allow_keyboard_focus)
{
    PushItemFlag(ImGuiItemFlags_AllowKeyboardFocus, allow_keyboard_focus);
}

void ImGui::PopAllowKeyboardFocus()
{
    PopItemFlag();
}

void ImGui::PushButtonRepeat(bool repeat)
{
    PushItemFlag(ImGuiItemFlags_ButtonRepeat, repeat);
}

void ImGui::PopButtonRepeat()
{
    PopItemFlag();
}

void ImGui::PushTextWrapPos(float wrap_pos_x)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.TextWrapPos = wrap_pos_x;
    window->DC.TextWrapPosStack.push_back(wrap_pos_x);
}

void ImGui::PopTextWrapPos()
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.TextWrapPosStack.pop_back();
    window->DC.TextWrapPos = window->DC.TextWrapPosStack.empty() ? -1.0f : window->DC.TextWrapPosStack.back();
}

// FIXME: This may incur a round-trip (if the end user got their data from a float4) but eventually we aim to store the in-flight colors as ImU32
void ImGui::PushStyleColor(ImGuiCol idx, ImU32 col)
{
    ImGuiContext& g = *GImGui;
    ImGuiColMod backup;
    backup.Col = idx;
    backup.BackupValue = g.Style.Colors[idx];
    g.ColorModifiers.push_back(backup);
    g.Style.Colors[idx] = ColorConvertU32ToFloat4(col);
}

void ImGui::PushStyleColor(ImGuiCol idx, const ImVec4& col)
{
    ImGuiContext& g = *GImGui;
    ImGuiColMod backup;
    backup.Col = idx;
    backup.BackupValue = g.Style.Colors[idx];
    g.ColorModifiers.push_back(backup);
    g.Style.Colors[idx] = col;
}

void ImGui::PopStyleColor(int count)
{
    ImGuiContext& g = *GImGui;
    while (count > 0)
    {
        ImGuiColMod& backup = g.ColorModifiers.back();
        g.Style.Colors[backup.Col] = backup.BackupValue;
        g.ColorModifiers.pop_back();
        count--;
    }
}

struct ImGuiStyleVarInfo
{
    ImGuiDataType   Type;
    ImU32           Count;
    ImU32           Offset;
    void*           GetVarPtr(ImGuiStyle* style) const { return (void*)((unsigned char*)style + Offset); }
};

static const ImGuiStyleVarInfo GStyleVarInfo[] =
{
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, Alpha) },              // ImGuiStyleVar_Alpha
    { ImGuiDataType_Float, 2, (ImU32)IM_OFFSETOF(ImGuiStyle, WindowPadding) },      // ImGuiStyleVar_WindowPadding
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, WindowRounding) },     // ImGuiStyleVar_WindowRounding
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, WindowBorderSize) },   // ImGuiStyleVar_WindowBorderSize
    { ImGuiDataType_Float, 2, (ImU32)IM_OFFSETOF(ImGuiStyle, WindowMinSize) },      // ImGuiStyleVar_WindowMinSize
    { ImGuiDataType_Float, 2, (ImU32)IM_OFFSETOF(ImGuiStyle, WindowTitleAlign) },   // ImGuiStyleVar_WindowTitleAlign
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, ChildRounding) },      // ImGuiStyleVar_ChildRounding
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, ChildBorderSize) },    // ImGuiStyleVar_ChildBorderSize
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, PopupRounding) },      // ImGuiStyleVar_PopupRounding
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, PopupBorderSize) },    // ImGuiStyleVar_PopupBorderSize
    { ImGuiDataType_Float, 2, (ImU32)IM_OFFSETOF(ImGuiStyle, FramePadding) },       // ImGuiStyleVar_FramePadding
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, FrameRounding) },      // ImGuiStyleVar_FrameRounding
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, FrameBorderSize) },    // ImGuiStyleVar_FrameBorderSize
    { ImGuiDataType_Float, 2, (ImU32)IM_OFFSETOF(ImGuiStyle, ItemSpacing) },        // ImGuiStyleVar_ItemSpacing
    { ImGuiDataType_Float, 2, (ImU32)IM_OFFSETOF(ImGuiStyle, ItemInnerSpacing) },   // ImGuiStyleVar_ItemInnerSpacing
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, IndentSpacing) },      // ImGuiStyleVar_IndentSpacing
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, ScrollbarSize) },      // ImGuiStyleVar_ScrollbarSize
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, ScrollbarRounding) },  // ImGuiStyleVar_ScrollbarRounding
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, GrabMinSize) },        // ImGuiStyleVar_GrabMinSize
    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, GrabRounding) },       // ImGuiStyleVar_GrabRounding
    { ImGuiDataType_Float, 2, (ImU32)IM_OFFSETOF(ImGuiStyle, ButtonTextAlign) },    // ImGuiStyleVar_ButtonTextAlign
};

static const ImGuiStyleVarInfo* GetStyleVarInfo(ImGuiStyleVar idx)
{
    IM_ASSERT(idx >= 0 && idx < ImGuiStyleVar_COUNT);
    IM_ASSERT(IM_ARRAYSIZE(GStyleVarInfo) == ImGuiStyleVar_COUNT);
    return &GStyleVarInfo[idx];
}

void ImGui::PushStyleVar(ImGuiStyleVar idx, float val)
{
    const ImGuiStyleVarInfo* var_info = GetStyleVarInfo(idx);
    if (var_info->Type == ImGuiDataType_Float && var_info->Count == 1)
    {
        ImGuiContext& g = *GImGui;
        float* pvar = (float*)var_info->GetVarPtr(&g.Style);
        g.StyleModifiers.push_back(ImGuiStyleMod(idx, *pvar));
        *pvar = val;
        return;
    }
    IM_ASSERT(0); // Called function with wrong-type? Variable is not a float.
}

void ImGui::PushStyleVar(ImGuiStyleVar idx, const ImVec2& val)
{
    const ImGuiStyleVarInfo* var_info = GetStyleVarInfo(idx);
    if (var_info->Type == ImGuiDataType_Float && var_info->Count == 2)
    {
        ImGuiContext& g = *GImGui;
        ImVec2* pvar = (ImVec2*)var_info->GetVarPtr(&g.Style);
        g.StyleModifiers.push_back(ImGuiStyleMod(idx, *pvar));
        *pvar = val;
        return;
    }
    IM_ASSERT(0); // Called function with wrong-type? Variable is not a ImVec2.
}

void ImGui::PopStyleVar(int count)
{
    ImGuiContext& g = *GImGui;
    while (count > 0)
    {
        // We avoid a generic memcpy(data, &backup.Backup.., GDataTypeSize[info->Type] * info->Count), the overhead in Debug is not worth it.
        ImGuiStyleMod& backup = g.StyleModifiers.back();
        const ImGuiStyleVarInfo* info = GetStyleVarInfo(backup.VarIdx);
        void* data = info->GetVarPtr(&g.Style);
        if (info->Type == ImGuiDataType_Float && info->Count == 1)      { ((float*)data)[0] = backup.BackupFloat[0]; }
        else if (info->Type == ImGuiDataType_Float && info->Count == 2) { ((float*)data)[0] = backup.BackupFloat[0]; ((float*)data)[1] = backup.BackupFloat[1]; }
        g.StyleModifiers.pop_back();
        count--;
    }
}

const char* ImGui::GetStyleColorName(ImGuiCol idx)
{
    // Create switch-case from enum with regexp: ImGuiCol_{.*}, --> case ImGuiCol_\1: return "\1";
    switch (idx)
    {
    case ImGuiCol_Text: return "Text";
    case ImGuiCol_TextDisabled: return "TextDisabled";
    case ImGuiCol_WindowBg: return "WindowBg";
    case ImGuiCol_ChildBg: return "ChildBg";
    case ImGuiCol_PopupBg: return "PopupBg";
    case ImGuiCol_Border: return "Border";
    case ImGuiCol_BorderShadow: return "BorderShadow";
    case ImGuiCol_FrameBg: return "FrameBg";
    case ImGuiCol_FrameBgHovered: return "FrameBgHovered";
    case ImGuiCol_FrameBgActive: return "FrameBgActive";
    case ImGuiCol_TitleBg: return "TitleBg";
    case ImGuiCol_TitleBgActive: return "TitleBgActive";
    case ImGuiCol_TitleBgCollapsed: return "TitleBgCollapsed";
    case ImGuiCol_MenuBarBg: return "MenuBarBg";
    case ImGuiCol_ScrollbarBg: return "ScrollbarBg";
    case ImGuiCol_ScrollbarGrab: return "ScrollbarGrab";
    case ImGuiCol_ScrollbarGrabHovered: return "ScrollbarGrabHovered";
    case ImGuiCol_ScrollbarGrabActive: return "ScrollbarGrabActive";
    case ImGuiCol_CheckMark: return "CheckMark";
    case ImGuiCol_SliderGrab: return "SliderGrab";
    case ImGuiCol_SliderGrabActive: return "SliderGrabActive";
    case ImGuiCol_Button: return "Button";
    case ImGuiCol_ButtonHovered: return "ButtonHovered";
    case ImGuiCol_ButtonActive: return "ButtonActive";
    case ImGuiCol_Header: return "Header";
    case ImGuiCol_HeaderHovered: return "HeaderHovered";
    case ImGuiCol_HeaderActive: return "HeaderActive";
    case ImGuiCol_Separator: return "Separator";
    case ImGuiCol_SeparatorHovered: return "SeparatorHovered";
    case ImGuiCol_SeparatorActive: return "SeparatorActive";
    case ImGuiCol_ResizeGrip: return "ResizeGrip";
    case ImGuiCol_ResizeGripHovered: return "ResizeGripHovered";
    case ImGuiCol_ResizeGripActive: return "ResizeGripActive";
    case ImGuiCol_PlotLines: return "PlotLines";
    case ImGuiCol_PlotLinesHovered: return "PlotLinesHovered";
    case ImGuiCol_PlotHistogram: return "PlotHistogram";
    case ImGuiCol_PlotHistogramHovered: return "PlotHistogramHovered";
    case ImGuiCol_TextSelectedBg: return "TextSelectedBg";
    case ImGuiCol_ModalWindowDarkening: return "ModalWindowDarkening";
    case ImGuiCol_DragDropTarget: return "DragDropTarget";
    case ImGuiCol_NavHighlight: return "NavHighlight";
    case ImGuiCol_NavWindowingHighlight: return "NavWindowingHighlight"; 
    }
    IM_ASSERT(0);
    return "Unknown";
}

bool ImGui::IsWindowChildOf(ImGuiWindow* window, ImGuiWindow* potential_parent)
{
    if (window->RootWindow == potential_parent)
        return true;
    while (window != NULL)
    {
        if (window == potential_parent)
            return true;
        window = window->ParentWindow;
    }
    return false;
}

bool ImGui::IsWindowHovered(ImGuiHoveredFlags flags)
{
    IM_ASSERT((flags & ImGuiHoveredFlags_AllowWhenOverlapped) == 0);   // Flags not supported by this function
    ImGuiContext& g = *GImGui;

    if (flags & ImGuiHoveredFlags_AnyWindow)
    {
        if (g.HoveredWindow == NULL)
            return false;
    }
    else
    {
        switch (flags & (ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows))
        {
        case ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows:
            if (g.HoveredRootWindow != g.CurrentWindow->RootWindow)
                return false;
            break;
        case ImGuiHoveredFlags_RootWindow:
            if (g.HoveredWindow != g.CurrentWindow->RootWindow)
                return false;
            break;
        case ImGuiHoveredFlags_ChildWindows:
            if (g.HoveredWindow == NULL || !IsWindowChildOf(g.HoveredWindow, g.CurrentWindow))
                return false;
            break;
        default:
            if (g.HoveredWindow != g.CurrentWindow)
                return false;
            break;
        }
    }

    if (!IsWindowContentHoverable(g.HoveredRootWindow, flags))
        return false;
    if (!(flags & ImGuiHoveredFlags_AllowWhenBlockedByActiveItem))
        if (g.ActiveId != 0 && !g.ActiveIdAllowOverlap && g.ActiveId != g.HoveredWindow->MoveId)
            return false;
    return true;
}

bool ImGui::IsWindowFocused(ImGuiFocusedFlags flags)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(g.CurrentWindow);     // Not inside a Begin()/End()

    if (flags & ImGuiFocusedFlags_AnyWindow)
        return g.NavWindow != NULL;

    switch (flags & (ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_ChildWindows))
    {
    case ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_ChildWindows:
        return g.NavWindow && g.NavWindow->RootWindow == g.CurrentWindow->RootWindow;
    case ImGuiFocusedFlags_RootWindow:
        return g.NavWindow == g.CurrentWindow->RootWindow;
    case ImGuiFocusedFlags_ChildWindows:
        return g.NavWindow && IsWindowChildOf(g.NavWindow, g.CurrentWindow);
    default:
        return g.NavWindow == g.CurrentWindow;
    }
}

// Can we focus this window with CTRL+TAB (or PadMenu + PadFocusPrev/PadFocusNext)
bool ImGui::IsWindowNavFocusable(ImGuiWindow* window)
{
    ImGuiContext& g = *GImGui;
    return window->Active && window == window->RootWindowForTabbing && (!(window->Flags & ImGuiWindowFlags_NoNavFocus) || window == g.NavWindow);
}

float ImGui::GetWindowWidth()
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    return window->Size.x;
}

float ImGui::GetWindowHeight()
{
    ImGuiWindow* window = GImGui->CurrentWindow;
    return window->Size.y;
}

ImVec2 ImGui::GetWindowPos()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    return window->Pos;
}

static void SetWindowScrollX(ImGuiWindow* window, float new_scroll_x)
{
    window->DC.CursorMaxPos.x += window->Scroll.x; // SizeContents is generally computed based on CursorMaxPos which is affected by scroll position, so we need to apply our change to it.
    window->Scroll.x = new_scroll_x;
    window->DC.CursorMaxPos.x -= window->Scroll.x;
}

static void SetWindowScrollY(ImGuiWindow* window, float new_scroll_y)
{
    window->DC.CursorMaxPos.y += window->Scroll.y; // SizeContents is generally computed based on CursorMaxPos which is affected by scroll position, so we need to apply our change to it.
    window->Scroll.y = new_scroll_y;
    window->DC.CursorMaxPos.y -= window->Scroll.y;
}

static void SetWindowPos(ImGuiWindow* window, const ImVec2& pos, ImGuiCond cond)
{
    // Test condition (NB: bit 0 is always true) and clear flags for next time
    if (cond && (window->SetWindowPosAllowFlags & cond) == 0)
        return;

    IM_ASSERT(cond == 0 || ImIsPowerOfTwo(cond)); // Make sure the user doesn't attempt to combine multiple condition flags.
    window->SetWindowPosAllowFlags &= ~(ImGuiCond_Once | ImGuiCond_FirstUseEver | ImGuiCond_Appearing);
    window->SetWindowPosVal = ImVec2(FLT_MAX, FLT_MAX);

    // Set
    const ImVec2 old_pos = window->Pos;
    window->PosFloat = pos;
    window->Pos = ImFloor(pos);
    window->DC.CursorPos += (window->Pos - old_pos);    // As we happen to move the window while it is being appended to (which is a bad idea - will smear) let's at least offset the cursor
    window->DC.CursorMaxPos += (window->Pos - old_pos); // And more importantly we need to adjust this so size calculation doesn't get affected.
}

void ImGui::SetWindowPos(const ImVec2& pos, ImGuiCond cond)
{
    ImGuiWindow* window = GetCurrentWindowRead();
    SetWindowPos(window, pos, cond);
}

void ImGui::SetWindowPos(const char* name, const ImVec2& pos, ImGuiCond cond)
{
    if (ImGuiWindow* window = FindWindowByName(name))
        SetWindowPos(window, pos, cond);
}

ImVec2 ImGui::GetWindowSize()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->Size;
}

static void SetWindowSize(ImGuiWindow* window, const ImVec2& size, ImGuiCond cond)
{
    // Test condition (NB: bit 0 is always true) and clear flags for next time
    if (cond && (window->SetWindowSizeAllowFlags & cond) == 0)
        return;

    IM_ASSERT(cond == 0 || ImIsPowerOfTwo(cond)); // Make sure the user doesn't attempt to combine multiple condition flags.
    window->SetWindowSizeAllowFlags &= ~(ImGuiCond_Once | ImGuiCond_FirstUseEver | ImGuiCond_Appearing);

    // Set
    if (size.x > 0.0f)
    {
        window->AutoFitFramesX = 0;
        window->SizeFull.x = size.x;
    }
    else
    {
        window->AutoFitFramesX = 2;
        window->AutoFitOnlyGrows = false;
    }
    if (size.y > 0.0f)
    {
        window->AutoFitFramesY = 0;
        window->SizeFull.y = size.y;
    }
    else
    {
        window->AutoFitFramesY = 2;
        window->AutoFitOnlyGrows = false;
    }
}

void ImGui::SetWindowSize(const ImVec2& size, ImGuiCond cond)
{
    SetWindowSize(GImGui->CurrentWindow, size, cond);
}

void ImGui::SetWindowSize(const char* name, const ImVec2& size, ImGuiCond cond)
{
    if (ImGuiWindow* window = FindWindowByName(name))
        SetWindowSize(window, size, cond);
}

static void SetWindowCollapsed(ImGuiWindow* window, bool collapsed, ImGuiCond cond)
{
    // Test condition (NB: bit 0 is always true) and clear flags for next time
    if (cond && (window->SetWindowCollapsedAllowFlags & cond) == 0)
        return;
    window->SetWindowCollapsedAllowFlags &= ~(ImGuiCond_Once | ImGuiCond_FirstUseEver | ImGuiCond_Appearing);

    // Set
    window->Collapsed = collapsed;
}

void ImGui::SetWindowCollapsed(bool collapsed, ImGuiCond cond)
{
    SetWindowCollapsed(GImGui->CurrentWindow, collapsed, cond);
}

bool ImGui::IsWindowCollapsed()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->Collapsed;
}

bool ImGui::IsWindowAppearing()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->Appearing;
}

void ImGui::SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond)
{
    if (ImGuiWindow* window = FindWindowByName(name))
        SetWindowCollapsed(window, collapsed, cond);
}

void ImGui::SetWindowFocus()
{
    FocusWindow(GImGui->CurrentWindow);
}

void ImGui::SetWindowFocus(const char* name)
{
    if (name)
    {
        if (ImGuiWindow* window = FindWindowByName(name))
            FocusWindow(window);
    }
    else
    {
        FocusWindow(NULL);
    }
}

void ImGui::SetNextWindowPos(const ImVec2& pos, ImGuiCond cond, const ImVec2& pivot)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(cond == 0 || ImIsPowerOfTwo(cond)); // Make sure the user doesn't attempt to combine multiple condition flags.
    g.NextWindowData.PosVal = pos;
    g.NextWindowData.PosPivotVal = pivot;
    g.NextWindowData.PosCond = cond ? cond : ImGuiCond_Always;
}

void ImGui::SetNextWindowSize(const ImVec2& size, ImGuiCond cond)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(cond == 0 || ImIsPowerOfTwo(cond)); // Make sure the user doesn't attempt to combine multiple condition flags.
    g.NextWindowData.SizeVal = size;
    g.NextWindowData.SizeCond = cond ? cond : ImGuiCond_Always;
}

void ImGui::SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSizeCallback custom_callback, void* custom_callback_user_data)
{
    ImGuiContext& g = *GImGui;
    g.NextWindowData.SizeConstraintCond = ImGuiCond_Always;
    g.NextWindowData.SizeConstraintRect = ImRect(size_min, size_max);
    g.NextWindowData.SizeCallback = custom_callback;
    g.NextWindowData.SizeCallbackUserData = custom_callback_user_data;
}

void ImGui::SetNextWindowContentSize(const ImVec2& size)
{
    ImGuiContext& g = *GImGui;
    g.NextWindowData.ContentSizeVal = size;  // In Begin() we will add the size of window decorations (title bar, menu etc.) to that to form a SizeContents value.
    g.NextWindowData.ContentSizeCond = ImGuiCond_Always;
}

void ImGui::SetNextWindowCollapsed(bool collapsed, ImGuiCond cond)
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(cond == 0 || ImIsPowerOfTwo(cond)); // Make sure the user doesn't attempt to combine multiple condition flags.
    g.NextWindowData.CollapsedVal = collapsed;
    g.NextWindowData.CollapsedCond = cond ? cond : ImGuiCond_Always;
}

void ImGui::SetNextWindowFocus()
{
    ImGuiContext& g = *GImGui;
    g.NextWindowData.FocusCond = ImGuiCond_Always;   // Using a Cond member for consistency (may transition all of them to single flag set for fast Clear() op)
}

void ImGui::SetNextWindowBgAlpha(float alpha)
{
    ImGuiContext& g = *GImGui;
    g.NextWindowData.BgAlphaVal = alpha;
    g.NextWindowData.BgAlphaCond = ImGuiCond_Always; // Using a Cond member for consistency (may transition all of them to single flag set for fast Clear() op)
}

// In window space (not screen space!)
ImVec2 ImGui::GetContentRegionMax()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    ImVec2 mx = window->ContentsRegionRect.Max;
    if (window->DC.ColumnsSet)
        mx.x = GetColumnOffset(window->DC.ColumnsSet->Current + 1) - window->WindowPadding.x;
    return mx;
}

ImVec2 ImGui::GetContentRegionAvail()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return GetContentRegionMax() - (window->DC.CursorPos - window->Pos);
}

float ImGui::GetContentRegionAvailWidth()
{
    return GetContentRegionAvail().x;
}

// In window space (not screen space!)
ImVec2 ImGui::GetWindowContentRegionMin()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->ContentsRegionRect.Min;
}

ImVec2 ImGui::GetWindowContentRegionMax()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->ContentsRegionRect.Max;
}

float ImGui::GetWindowContentRegionWidth()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->ContentsRegionRect.Max.x - window->ContentsRegionRect.Min.x;
}

float ImGui::GetTextLineHeight()
{
    ImGuiContext& g = *GImGui;
    return g.FontSize;
}

float ImGui::GetTextLineHeightWithSpacing()
{
    ImGuiContext& g = *GImGui;
    return g.FontSize + g.Style.ItemSpacing.y;
}

float ImGui::GetFrameHeight()
{
    ImGuiContext& g = *GImGui;
    return g.FontSize + g.Style.FramePadding.y * 2.0f;
}

float ImGui::GetFrameHeightWithSpacing()
{
    ImGuiContext& g = *GImGui;
    return g.FontSize + g.Style.FramePadding.y * 2.0f + g.Style.ItemSpacing.y;
}

ImDrawList* ImGui::GetWindowDrawList()
{
    ImGuiWindow* window = GetCurrentWindow();
    return window->DrawList;
}

ImFont* ImGui::GetFont()
{
    return GImGui->Font;
}

float ImGui::GetFontSize()
{
    return GImGui->FontSize;
}

ImVec2 ImGui::GetFontTexUvWhitePixel()
{
    return GImGui->DrawListSharedData.TexUvWhitePixel;
}

void ImGui::SetWindowFontScale(float scale)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();
    window->FontWindowScale = scale;
    g.FontSize = g.DrawListSharedData.FontSize = window->CalcFontSize();
}

// User generally sees positions in window coordinates. Internally we store CursorPos in absolute screen coordinates because it is more convenient.
// Conversion happens as we pass the value to user, but it makes our naming convention confusing because GetCursorPos() == (DC.CursorPos - window.Pos). May want to rename 'DC.CursorPos'.
ImVec2 ImGui::GetCursorPos()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.CursorPos - window->Pos + window->Scroll;
}

float ImGui::GetCursorPosX()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.CursorPos.x - window->Pos.x + window->Scroll.x;
}

float ImGui::GetCursorPosY()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.CursorPos.y - window->Pos.y + window->Scroll.y;
}

void ImGui::SetCursorPos(const ImVec2& local_pos)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.CursorPos = window->Pos - window->Scroll + local_pos;
    window->DC.CursorMaxPos = ImMax(window->DC.CursorMaxPos, window->DC.CursorPos);
}

void ImGui::SetCursorPosX(float x)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.CursorPos.x = window->Pos.x - window->Scroll.x + x;
    window->DC.CursorMaxPos.x = ImMax(window->DC.CursorMaxPos.x, window->DC.CursorPos.x);
}

void ImGui::SetCursorPosY(float y)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.CursorPos.y = window->Pos.y - window->Scroll.y + y;
    window->DC.CursorMaxPos.y = ImMax(window->DC.CursorMaxPos.y, window->DC.CursorPos.y);
}

ImVec2 ImGui::GetCursorStartPos()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.CursorStartPos - window->Pos;
}

ImVec2 ImGui::GetCursorScreenPos()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.CursorPos;
}

void ImGui::SetCursorScreenPos(const ImVec2& screen_pos)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.CursorPos = screen_pos;
    window->DC.CursorMaxPos = ImMax(window->DC.CursorMaxPos, window->DC.CursorPos);
}

float ImGui::GetScrollX()
{
    return GImGui->CurrentWindow->Scroll.x;
}

float ImGui::GetScrollY()
{
    return GImGui->CurrentWindow->Scroll.y;
}

float ImGui::GetScrollMaxX()
{
    return GetScrollMaxX(GImGui->CurrentWindow);
}

float ImGui::GetScrollMaxY()
{
    return GetScrollMaxY(GImGui->CurrentWindow);
}

void ImGui::SetScrollX(float scroll_x)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->ScrollTarget.x = scroll_x;
    window->ScrollTargetCenterRatio.x = 0.0f;
}

void ImGui::SetScrollY(float scroll_y)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->ScrollTarget.y = scroll_y + window->TitleBarHeight() + window->MenuBarHeight(); // title bar height canceled out when using ScrollTargetRelY
    window->ScrollTargetCenterRatio.y = 0.0f;
}

void ImGui::SetScrollFromPosY(float pos_y, float center_y_ratio)
{
    // We store a target position so centering can occur on the next frame when we are guaranteed to have a known window size
    ImGuiWindow* window = GetCurrentWindow();
    IM_ASSERT(center_y_ratio >= 0.0f && center_y_ratio <= 1.0f);
    window->ScrollTarget.y = (float)(int)(pos_y + window->Scroll.y);
    window->ScrollTargetCenterRatio.y = center_y_ratio;

    // Minor hack to to make scrolling to top/bottom of window take account of WindowPadding, it looks more right to the user this way
    if (center_y_ratio <= 0.0f && window->ScrollTarget.y <= window->WindowPadding.y)
        window->ScrollTarget.y = 0.0f;
    else if (center_y_ratio >= 1.0f && window->ScrollTarget.y >= window->SizeContents.y - window->WindowPadding.y + GImGui->Style.ItemSpacing.y)
        window->ScrollTarget.y = window->SizeContents.y;
}

// center_y_ratio: 0.0f top of last item, 0.5f vertical center of last item, 1.0f bottom of last item.
void ImGui::SetScrollHere(float center_y_ratio)
{
    ImGuiWindow* window = GetCurrentWindow();
    float target_y = window->DC.CursorPosPrevLine.y - window->Pos.y; // Top of last item, in window space
    target_y += (window->DC.PrevLineHeight * center_y_ratio) + (GImGui->Style.ItemSpacing.y * (center_y_ratio - 0.5f) * 2.0f); // Precisely aim above, in the middle or below the last line.
    SetScrollFromPosY(target_y, center_y_ratio);
}

void ImGui::ActivateItem(ImGuiID id)
{
    ImGuiContext& g = *GImGui;
    g.NavNextActivateId = id;
}

void ImGui::SetKeyboardFocusHere(int offset)
{
    IM_ASSERT(offset >= -1);    // -1 is allowed but not below
    ImGuiWindow* window = GetCurrentWindow();
    window->FocusIdxAllRequestNext = window->FocusIdxAllCounter + 1 + offset;
    window->FocusIdxTabRequestNext = INT_MAX;
}

void ImGui::SetItemDefaultFocus()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (!window->Appearing)
        return;
    if (g.NavWindow == window->RootWindowForNav && (g.NavInitRequest || g.NavInitResultId != 0) && g.NavLayer == g.NavWindow->DC.NavLayerCurrent)
    {
        g.NavInitRequest = false;
        g.NavInitResultId = g.NavWindow->DC.LastItemId;
        g.NavInitResultRectRel = ImRect(g.NavWindow->DC.LastItemRect.Min - g.NavWindow->Pos, g.NavWindow->DC.LastItemRect.Max - g.NavWindow->Pos);
        NavUpdateAnyRequestFlag();
        if (!IsItemVisible())
            SetScrollHere();
    }
}

void ImGui::SetStateStorage(ImGuiStorage* tree)
{
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.StateStorage = tree ? tree : &window->StateStorage;
}

ImGuiStorage* ImGui::GetStateStorage()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.StateStorage;
}

void ImGui::TextV(const char* fmt, va_list args)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const char* text_end = g.TempBuffer + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);
    TextUnformatted(g.TempBuffer, text_end);
}

void ImGui::Text(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    TextV(fmt, args);
    va_end(args);
}

void ImGui::TextColoredV(const ImVec4& col, const char* fmt, va_list args)
{
    PushStyleColor(ImGuiCol_Text, col);
    TextV(fmt, args);
    PopStyleColor();
}

void ImGui::TextColored(const ImVec4& col, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    TextColoredV(col, fmt, args);
    va_end(args);
}

void ImGui::TextDisabledV(const char* fmt, va_list args)
{
    PushStyleColor(ImGuiCol_Text, GImGui->Style.Colors[ImGuiCol_TextDisabled]);
    TextV(fmt, args);
    PopStyleColor();
}

void ImGui::TextDisabled(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    TextDisabledV(fmt, args);
    va_end(args);
}

void ImGui::TextWrappedV(const char* fmt, va_list args)
{
    bool need_wrap = (GImGui->CurrentWindow->DC.TextWrapPos < 0.0f);    // Keep existing wrap position is one ia already set
    if (need_wrap) PushTextWrapPos(0.0f);
    TextV(fmt, args);
    if (need_wrap) PopTextWrapPos();
}

void ImGui::TextWrapped(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    TextWrappedV(fmt, args);
    va_end(args);
}

void ImGui::TextUnformatted(const char* text, const char* text_end)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    IM_ASSERT(text != NULL);
    const char* text_begin = text;
    if (text_end == NULL)
        text_end = text + strlen(text); // FIXME-OPT

    const ImVec2 text_pos(window->DC.CursorPos.x, window->DC.CursorPos.y + window->DC.CurrentLineTextBaseOffset);
    const float wrap_pos_x = window->DC.TextWrapPos;
    const bool wrap_enabled = wrap_pos_x >= 0.0f;
    if (text_end - text > 2000 && !wrap_enabled)
    {
        // Long text!
        // Perform manual coarse clipping to optimize for long multi-line text
        // From this point we will only compute the width of lines that are visible. Optimization only available when word-wrapping is disabled.
        // We also don't vertically center the text within the line full height, which is unlikely to matter because we are likely the biggest and only item on the line.
        const char* line = text;
        const float line_height = GetTextLineHeight();
        const ImRect clip_rect = window->ClipRect;
        ImVec2 text_size(0,0);

        if (text_pos.y <= clip_rect.Max.y)
        {
            ImVec2 pos = text_pos;

            // Lines to skip (can't skip when logging text)
            if (!g.LogEnabled)
            {
                int lines_skippable = (int)((clip_rect.Min.y - text_pos.y) / line_height);
                if (lines_skippable > 0)
                {
                    int lines_skipped = 0;
                    while (line < text_end && lines_skipped < lines_skippable)
                    {
                        const char* line_end = strchr(line, '\n');
                        if (!line_end)
                            line_end = text_end;
                        line = line_end + 1;
                        lines_skipped++;
                    }
                    pos.y += lines_skipped * line_height;
                }
            }

            // Lines to render
            if (line < text_end)
            {
                ImRect line_rect(pos, pos + ImVec2(FLT_MAX, line_height));
                while (line < text_end)
                {
                    const char* line_end = strchr(line, '\n');
                    if (IsClippedEx(line_rect, 0, false))
                        break;

                    const ImVec2 line_size = CalcTextSize(line, line_end, false);
                    text_size.x = ImMax(text_size.x, line_size.x);
                    RenderText(pos, line, line_end, false);
                    if (!line_end)
                        line_end = text_end;
                    line = line_end + 1;
                    line_rect.Min.y += line_height;
                    line_rect.Max.y += line_height;
                    pos.y += line_height;
                }

                // Count remaining lines
                int lines_skipped = 0;
                while (line < text_end)
                {
                    const char* line_end = strchr(line, '\n');
                    if (!line_end)
                        line_end = text_end;
                    line = line_end + 1;
                    lines_skipped++;
                }
                pos.y += lines_skipped * line_height;
            }

            text_size.y += (pos - text_pos).y;
        }

        ImRect bb(text_pos, text_pos + text_size);
        ItemSize(bb);
        ItemAdd(bb, 0);
    }
    else
    {
        const float wrap_width = wrap_enabled ? CalcWrapWidthForPos(window->DC.CursorPos, wrap_pos_x) : 0.0f;
        const ImVec2 text_size = CalcTextSize(text_begin, text_end, false, wrap_width);

        // Account of baseline offset
        ImRect bb(text_pos, text_pos + text_size);
        ItemSize(text_size);
        if (!ItemAdd(bb, 0))
            return;

        // Render (we don't hide text after ## in this end-user function)
        RenderTextWrapped(bb.Min, text_begin, text_end, wrap_width);
    }
}

void ImGui::AlignTextToFramePadding()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    window->DC.CurrentLineHeight = ImMax(window->DC.CurrentLineHeight, g.FontSize + g.Style.FramePadding.y * 2);
    window->DC.CurrentLineTextBaseOffset = ImMax(window->DC.CurrentLineTextBaseOffset, g.Style.FramePadding.y);
}

// Add a label+text combo aligned to other label+value widgets
void ImGui::LabelTextV(const char* label, const char* fmt, va_list args)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const float w = CalcItemWidth();

    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    const ImRect value_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(w, label_size.y + style.FramePadding.y*2));
    const ImRect total_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(w + (label_size.x > 0.0f ? style.ItemInnerSpacing.x : 0.0f), style.FramePadding.y*2) + label_size);
    ItemSize(total_bb, style.FramePadding.y);
    if (!ItemAdd(total_bb, 0))
        return;

    // Render
    const char* value_text_begin = &g.TempBuffer[0];
    const char* value_text_end = value_text_begin + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);
    RenderTextClipped(value_bb.Min, value_bb.Max, value_text_begin, value_text_end, NULL, ImVec2(0.0f,0.5f));
    if (label_size.x > 0.0f)
        RenderText(ImVec2(value_bb.Max.x + style.ItemInnerSpacing.x, value_bb.Min.y + style.FramePadding.y), label);
}

void ImGui::LabelText(const char* label, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    LabelTextV(label, fmt, args);
    va_end(args);
}

bool ImGui::ButtonBehavior(const ImRect& bb, ImGuiID id, bool* out_hovered, bool* out_held, ImGuiButtonFlags flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();

    if (flags & ImGuiButtonFlags_Disabled)
    {
        if (out_hovered) *out_hovered = false;
        if (out_held) *out_held = false;
        if (g.ActiveId == id) ClearActiveID();
        return false;
    }

    // Default behavior requires click+release on same spot
    if ((flags & (ImGuiButtonFlags_PressedOnClickRelease | ImGuiButtonFlags_PressedOnClick | ImGuiButtonFlags_PressedOnRelease | ImGuiButtonFlags_PressedOnDoubleClick)) == 0)
        flags |= ImGuiButtonFlags_PressedOnClickRelease;

    ImGuiWindow* backup_hovered_window = g.HoveredWindow;
    if ((flags & ImGuiButtonFlags_FlattenChildren) && g.HoveredRootWindow == window)
        g.HoveredWindow = window;

    bool pressed = false;
    bool hovered = ItemHoverable(bb, id);

    // Special mode for Drag and Drop where holding button pressed for a long time while dragging another item triggers the button
    if ((flags & ImGuiButtonFlags_PressedOnDragDropHold) && g.DragDropActive && !(g.DragDropSourceFlags & ImGuiDragDropFlags_SourceNoHoldToOpenOthers))
        if (IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem))
        {
            hovered = true;
            SetHoveredID(id);
            if (CalcTypematicPressedRepeatAmount(g.HoveredIdTimer + 0.0001f, g.HoveredIdTimer + 0.0001f - g.IO.DeltaTime, 0.01f, 0.70f)) // FIXME: Our formula for CalcTypematicPressedRepeatAmount() is fishy
            {
                pressed = true;
                FocusWindow(window);
            }
        }

    if ((flags & ImGuiButtonFlags_FlattenChildren) && g.HoveredRootWindow == window)
        g.HoveredWindow = backup_hovered_window;

    // AllowOverlap mode (rarely used) requires previous frame HoveredId to be null or to match. This allows using patterns where a later submitted widget overlaps a previous one.
    if (hovered && (flags & ImGuiButtonFlags_AllowItemOverlap) && (g.HoveredIdPreviousFrame != id && g.HoveredIdPreviousFrame != 0))
        hovered = false;

    // Mouse
    if (hovered)
    {
        if (!(flags & ImGuiButtonFlags_NoKeyModifiers) || (!g.IO.KeyCtrl && !g.IO.KeyShift && !g.IO.KeyAlt))
        {
            //                        | CLICKING        | HOLDING with ImGuiButtonFlags_Repeat
            // PressedOnClickRelease  |  <on release>*  |  <on repeat> <on repeat> .. (NOT on release)  <-- MOST COMMON! (*) only if both click/release were over bounds
            // PressedOnClick         |  <on click>     |  <on click> <on repeat> <on repeat> ..
            // PressedOnRelease       |  <on release>   |  <on repeat> <on repeat> .. (NOT on release)
            // PressedOnDoubleClick   |  <on dclick>    |  <on dclick> <on repeat> <on repeat> ..
            // FIXME-NAV: We don't honor those different behaviors.
            if ((flags & ImGuiButtonFlags_PressedOnClickRelease) && g.IO.MouseClicked[0])
            {
                SetActiveID(id, window);
                if (!(flags & ImGuiButtonFlags_NoNavFocus))
                    SetFocusID(id, window);
                FocusWindow(window);
            }
            if (((flags & ImGuiButtonFlags_PressedOnClick) && g.IO.MouseClicked[0]) || ((flags & ImGuiButtonFlags_PressedOnDoubleClick) && g.IO.MouseDoubleClicked[0]))
            {
                pressed = true;
                if (flags & ImGuiButtonFlags_NoHoldingActiveID)
                    ClearActiveID();
                else
                    SetActiveID(id, window); // Hold on ID
                FocusWindow(window);
            }
            if ((flags & ImGuiButtonFlags_PressedOnRelease) && g.IO.MouseReleased[0])
            {
                if (!((flags & ImGuiButtonFlags_Repeat) && g.IO.MouseDownDurationPrev[0] >= g.IO.KeyRepeatDelay))  // Repeat mode trumps <on release>
                    pressed = true;
                ClearActiveID();
            }

            // 'Repeat' mode acts when held regardless of _PressedOn flags (see table above). 
            // Relies on repeat logic of IsMouseClicked() but we may as well do it ourselves if we end up exposing finer RepeatDelay/RepeatRate settings.
            if ((flags & ImGuiButtonFlags_Repeat) && g.ActiveId == id && g.IO.MouseDownDuration[0] > 0.0f && IsMouseClicked(0, true))
                pressed = true;
        }

        if (pressed)
            g.NavDisableHighlight = true;
    }

    // Gamepad/Keyboard navigation
    // We report navigated item as hovered but we don't set g.HoveredId to not interfere with mouse.
    if (g.NavId == id && !g.NavDisableHighlight && g.NavDisableMouseHover && (g.ActiveId == 0 || g.ActiveId == id || g.ActiveId == window->MoveId))
        hovered = true;

    if (g.NavActivateDownId == id)
    {
        bool nav_activated_by_code = (g.NavActivateId == id);
        bool nav_activated_by_inputs = IsNavInputPressed(ImGuiNavInput_Activate, (flags & ImGuiButtonFlags_Repeat) ? ImGuiInputReadMode_Repeat : ImGuiInputReadMode_Pressed);
        if (nav_activated_by_code || nav_activated_by_inputs)
            pressed = true;
        if (nav_activated_by_code || nav_activated_by_inputs || g.ActiveId == id)
        {
            // Set active id so it can be queried by user via IsItemActive(), equivalent of holding the mouse button.
            g.NavActivateId = id; // This is so SetActiveId assign a Nav source
            SetActiveID(id, window);
            if (!(flags & ImGuiButtonFlags_NoNavFocus))
                SetFocusID(id, window);
            g.ActiveIdAllowNavDirFlags = (1 << ImGuiDir_Left) | (1 << ImGuiDir_Right) | (1 << ImGuiDir_Up) | (1 << ImGuiDir_Down);
        }
    }

    bool held = false;
    if (g.ActiveId == id)
    {
        if (g.ActiveIdSource == ImGuiInputSource_Mouse)
        {
            if (g.ActiveIdIsJustActivated)
                g.ActiveIdClickOffset = g.IO.MousePos - bb.Min;
            if (g.IO.MouseDown[0])
            {
                held = true;
            }
            else
            {
                if (hovered && (flags & ImGuiButtonFlags_PressedOnClickRelease))
                    if (!((flags & ImGuiButtonFlags_Repeat) && g.IO.MouseDownDurationPrev[0] >= g.IO.KeyRepeatDelay))  // Repeat mode trumps <on release>
                        if (!g.DragDropActive)
                            pressed = true;
                ClearActiveID();
            }
            if (!(flags & ImGuiButtonFlags_NoNavFocus))
                g.NavDisableHighlight = true;
        }
        else if (g.ActiveIdSource == ImGuiInputSource_Nav)
        {
            if (g.NavActivateDownId != id)
                ClearActiveID();
        }
    }

    if (out_hovered) *out_hovered = hovered;
    if (out_held) *out_held = held;

    return pressed;
}

bool ImGui::ButtonEx(const char* label, const ImVec2& size_arg, ImGuiButtonFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);
    const ImVec2 label_size = CalcTextSize(label, NULL, true);

    ImVec2 pos = window->DC.CursorPos;
    if ((flags & ImGuiButtonFlags_AlignTextBaseLine) && style.FramePadding.y < window->DC.CurrentLineTextBaseOffset) // Try to vertically align buttons that are smaller/have no padding so that text baseline matches (bit hacky, since it shouldn't be a flag)
        pos.y += window->DC.CurrentLineTextBaseOffset - style.FramePadding.y;
    ImVec2 size = CalcItemSize(size_arg, label_size.x + style.FramePadding.x * 2.0f, label_size.y + style.FramePadding.y * 2.0f);

    const ImRect bb(pos, pos + size);
    ItemSize(bb, style.FramePadding.y);
    if (!ItemAdd(bb, id))
        return false;

    if (window->DC.ItemFlags & ImGuiItemFlags_ButtonRepeat)
        flags |= ImGuiButtonFlags_Repeat;
    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held, flags);

    // Render
    const ImU32 col = GetColorU32((hovered && held) ? ImGuiCol_ButtonActive : hovered ? ImGuiCol_ButtonHovered : ImGuiCol_Button);
    RenderNavHighlight(bb, id);
    RenderFrame(bb.Min, bb.Max, col, true, style.FrameRounding);
    RenderTextClipped(bb.Min + style.FramePadding, bb.Max - style.FramePadding, label, NULL, &label_size, style.ButtonTextAlign, &bb);

    // Automatically close popups
    //if (pressed && !(flags & ImGuiButtonFlags_DontClosePopups) && (window->Flags & ImGuiWindowFlags_Popup))
    //    CloseCurrentPopup();

    return pressed;
}

bool ImGui::Button(const char* label, const ImVec2& size_arg)
{
    return ButtonEx(label, size_arg, 0);
}

// Small buttons fits within text without additional vertical spacing.
bool ImGui::SmallButton(const char* label)
{
    ImGuiContext& g = *GImGui;
    float backup_padding_y = g.Style.FramePadding.y;
    g.Style.FramePadding.y = 0.0f;
    bool pressed = ButtonEx(label, ImVec2(0,0), ImGuiButtonFlags_AlignTextBaseLine);
    g.Style.FramePadding.y = backup_padding_y;
    return pressed;
}

bool ImGui::ArrowButton(const char* str_id, ImGuiDir dir)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiID id = window->GetID(str_id);
    float sz = ImGui::GetFrameHeight();
    const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(sz, sz));
    ItemSize(bb);
    if (!ItemAdd(bb, id))
        return false;

    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held);

    // Render
    const ImU32 col = GetColorU32((hovered && held) ? ImGuiCol_ButtonActive : hovered ? ImGuiCol_ButtonHovered : ImGuiCol_Button);
    RenderNavHighlight(bb, id);
    RenderFrame(bb.Min, bb.Max, col, true, g.Style.FrameRounding);
    RenderArrow(bb.Min + g.Style.FramePadding, dir);

    return pressed;
}

// Tip: use ImGui::PushID()/PopID() to push indices or pointers in the ID stack.
// Then you can keep 'str_id' empty or the same for all your buttons (instead of creating a string based on a non-string id)
bool ImGui::InvisibleButton(const char* str_id, const ImVec2& size_arg)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    const ImGuiID id = window->GetID(str_id);
    ImVec2 size = CalcItemSize(size_arg, 0.0f, 0.0f);
    const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size);
    ItemSize(bb);
    if (!ItemAdd(bb, id))
        return false;

    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held);

    return pressed;
}

// Button to close a window
bool ImGui::CloseButton(ImGuiID id, const ImVec2& pos, float radius)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    // We intentionally allow interaction when clipped so that a mechanical Alt,Right,Validate sequence close a window.
    // (this isn't the regular behavior of buttons, but it doesn't affect the user much because navigation tends to keep items visible).
    const ImRect bb(pos - ImVec2(radius,radius), pos + ImVec2(radius,radius));
    bool is_clipped = !ItemAdd(bb, id);

    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held);
    if (is_clipped)
        return pressed;

    // Render
    ImVec2 center = bb.GetCenter();
    if (hovered)
        window->DrawList->AddCircleFilled(center, ImMax(2.0f, radius), GetColorU32((held && hovered) ? ImGuiCol_ButtonActive : ImGuiCol_ButtonHovered), 9);

    float cross_extent = (radius * 0.7071f) - 1.0f;
    ImU32 cross_col = GetColorU32(ImGuiCol_Text);
    center -= ImVec2(0.5f, 0.5f);
    window->DrawList->AddLine(center + ImVec2(+cross_extent,+cross_extent), center + ImVec2(-cross_extent,-cross_extent), cross_col, 1.0f);
    window->DrawList->AddLine(center + ImVec2(+cross_extent,-cross_extent), center + ImVec2(-cross_extent,+cross_extent), cross_col, 1.0f);

    return pressed;
}

void ImGui::Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, const ImVec2& uv1, const ImVec4& tint_col, const ImVec4& border_col)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size);
    if (border_col.w > 0.0f)
        bb.Max += ImVec2(2,2);
    ItemSize(bb);
    if (!ItemAdd(bb, 0))
        return;

    if (border_col.w > 0.0f)
    {
        window->DrawList->AddRect(bb.Min, bb.Max, GetColorU32(border_col), 0.0f);
        window->DrawList->AddImage(user_texture_id, bb.Min+ImVec2(1,1), bb.Max-ImVec2(1,1), uv0, uv1, GetColorU32(tint_col));
    }
    else
    {
        window->DrawList->AddImage(user_texture_id, bb.Min, bb.Max, uv0, uv1, GetColorU32(tint_col));
    }
}

// frame_padding < 0: uses FramePadding from style (default)
// frame_padding = 0: no framing
// frame_padding > 0: set framing size
// The color used are the button colors.
bool ImGui::ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, const ImVec2& uv1, int frame_padding, const ImVec4& bg_col, const ImVec4& tint_col)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;

    // Default to using texture ID as ID. User can still push string/integer prefixes.
    // We could hash the size/uv to create a unique ID but that would prevent the user from animating UV.
    PushID((void *)user_texture_id);
    const ImGuiID id = window->GetID("#image");
    PopID();

    const ImVec2 padding = (frame_padding >= 0) ? ImVec2((float)frame_padding, (float)frame_padding) : style.FramePadding;
    const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size + padding*2);
    const ImRect image_bb(window->DC.CursorPos + padding, window->DC.CursorPos + padding + size);
    ItemSize(bb);
    if (!ItemAdd(bb, id))
        return false;

    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held);

    // Render
    const ImU32 col = GetColorU32((hovered && held) ? ImGuiCol_ButtonActive : hovered ? ImGuiCol_ButtonHovered : ImGuiCol_Button);
    RenderNavHighlight(bb, id);
    RenderFrame(bb.Min, bb.Max, col, true, ImClamp((float)ImMin(padding.x, padding.y), 0.0f, style.FrameRounding));
    if (bg_col.w > 0.0f)
        window->DrawList->AddRectFilled(image_bb.Min, image_bb.Max, GetColorU32(bg_col));
    window->DrawList->AddImage(user_texture_id, image_bb.Min, image_bb.Max, uv0, uv1, GetColorU32(tint_col));

    return pressed;
}

// Start logging ImGui output to TTY
void ImGui::LogToTTY(int max_depth)
{
    ImGuiContext& g = *GImGui;
    if (g.LogEnabled)
        return;
    ImGuiWindow* window = g.CurrentWindow;

    IM_ASSERT(g.LogFile == NULL);
    g.LogFile = stdout;
    g.LogEnabled = true;
    g.LogStartDepth = window->DC.TreeDepth;
    if (max_depth >= 0)
        g.LogAutoExpandMaxDepth = max_depth;
}

// Start logging ImGui output to given file
void ImGui::LogToFile(int max_depth, const char* filename)
{
    ImGuiContext& g = *GImGui;
    if (g.LogEnabled)
        return;
    ImGuiWindow* window = g.CurrentWindow;

    if (!filename)
    {
        filename = g.IO.LogFilename;
        if (!filename)
            return;
    }

    IM_ASSERT(g.LogFile == NULL);
    g.LogFile = ImFileOpen(filename, "ab");
    if (!g.LogFile)
    {
        IM_ASSERT(g.LogFile != NULL); // Consider this an error
        return;
    }
    g.LogEnabled = true;
    g.LogStartDepth = window->DC.TreeDepth;
    if (max_depth >= 0)
        g.LogAutoExpandMaxDepth = max_depth;
}

// Start logging ImGui output to clipboard
void ImGui::LogToClipboard(int max_depth)
{
    ImGuiContext& g = *GImGui;
    if (g.LogEnabled)
        return;
    ImGuiWindow* window = g.CurrentWindow;

    IM_ASSERT(g.LogFile == NULL);
    g.LogFile = NULL;
    g.LogEnabled = true;
    g.LogStartDepth = window->DC.TreeDepth;
    if (max_depth >= 0)
        g.LogAutoExpandMaxDepth = max_depth;
}

void ImGui::LogFinish()
{
    ImGuiContext& g = *GImGui;
    if (!g.LogEnabled)
        return;

    LogText(IM_NEWLINE);
    if (g.LogFile != NULL)
    {
        if (g.LogFile == stdout)
            fflush(g.LogFile);
        else
            fclose(g.LogFile);
        g.LogFile = NULL;
    }
    if (g.LogClipboard->size() > 1)
    {
        SetClipboardText(g.LogClipboard->begin());
        g.LogClipboard->clear();
    }
    g.LogEnabled = false;
}

// Helper to display logging buttons
void ImGui::LogButtons()
{
    ImGuiContext& g = *GImGui;

    PushID("LogButtons");
    const bool log_to_tty = Button("Log To TTY"); SameLine();
    const bool log_to_file = Button("Log To File"); SameLine();
    const bool log_to_clipboard = Button("Log To Clipboard"); SameLine();
    PushItemWidth(80.0f);
    PushAllowKeyboardFocus(false);
    SliderInt("Depth", &g.LogAutoExpandMaxDepth, 0, 9, NULL);
    PopAllowKeyboardFocus();
    PopItemWidth();
    PopID();

    // Start logging at the end of the function so that the buttons don't appear in the log
    if (log_to_tty)
        LogToTTY(g.LogAutoExpandMaxDepth);
    if (log_to_file)
        LogToFile(g.LogAutoExpandMaxDepth, g.IO.LogFilename);
    if (log_to_clipboard)
        LogToClipboard(g.LogAutoExpandMaxDepth);
}

bool ImGui::TreeNodeBehaviorIsOpen(ImGuiID id, ImGuiTreeNodeFlags flags)
{
    if (flags & ImGuiTreeNodeFlags_Leaf)
        return true;

    // We only write to the tree storage if the user clicks (or explicitely use SetNextTreeNode*** functions)
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    ImGuiStorage* storage = window->DC.StateStorage;

    bool is_open;
    if (g.NextTreeNodeOpenCond != 0)
    {
        if (g.NextTreeNodeOpenCond & ImGuiCond_Always)
        {
            is_open = g.NextTreeNodeOpenVal;
            storage->SetInt(id, is_open);
        }
        else
        {
            // We treat ImGuiCond_Once and ImGuiCond_FirstUseEver the same because tree node state are not saved persistently.
            const int stored_value = storage->GetInt(id, -1);
            if (stored_value == -1)
            {
                is_open = g.NextTreeNodeOpenVal;
                storage->SetInt(id, is_open);
            }
            else
            {
                is_open = stored_value != 0;
            }
        }
        g.NextTreeNodeOpenCond = 0;
    }
    else
    {
        is_open = storage->GetInt(id, (flags & ImGuiTreeNodeFlags_DefaultOpen) ? 1 : 0) != 0;
    }

    // When logging is enabled, we automatically expand tree nodes (but *NOT* collapsing headers.. seems like sensible behavior).
    // NB- If we are above max depth we still allow manually opened nodes to be logged.
    if (g.LogEnabled && !(flags & ImGuiTreeNodeFlags_NoAutoOpenOnLog) && window->DC.TreeDepth < g.LogAutoExpandMaxDepth)
        is_open = true;

    return is_open;
}

bool ImGui::TreeNodeBehavior(ImGuiID id, ImGuiTreeNodeFlags flags, const char* label, const char* label_end)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const bool display_frame = (flags & ImGuiTreeNodeFlags_Framed) != 0;
    const ImVec2 padding = (display_frame || (flags & ImGuiTreeNodeFlags_FramePadding)) ? style.FramePadding : ImVec2(style.FramePadding.x, 0.0f);

    if (!label_end)
        label_end = FindRenderedTextEnd(label);
    const ImVec2 label_size = CalcTextSize(label, label_end, false);

    // We vertically grow up to current line height up the typical widget height.
    const float text_base_offset_y = ImMax(padding.y, window->DC.CurrentLineTextBaseOffset); // Latch before ItemSize changes it
    const float frame_height = ImMax(ImMin(window->DC.CurrentLineHeight, g.FontSize + style.FramePadding.y*2), label_size.y + padding.y*2);
    ImRect frame_bb = ImRect(window->DC.CursorPos, ImVec2(window->Pos.x + GetContentRegionMax().x, window->DC.CursorPos.y + frame_height));
    if (display_frame)
    {
        // Framed header expand a little outside the default padding
        frame_bb.Min.x -= (float)(int)(window->WindowPadding.x*0.5f) - 1;
        frame_bb.Max.x += (float)(int)(window->WindowPadding.x*0.5f) - 1;
    }

    const float text_offset_x = (g.FontSize + (display_frame ? padding.x*3 : padding.x*2));   // Collapser arrow width + Spacing
    const float text_width = g.FontSize + (label_size.x > 0.0f ? label_size.x + padding.x*2 : 0.0f);   // Include collapser
    ItemSize(ImVec2(text_width, frame_height), text_base_offset_y);

    // For regular tree nodes, we arbitrary allow to click past 2 worth of ItemSpacing
    // (Ideally we'd want to add a flag for the user to specify if we want the hit test to be done up to the right side of the content or not)
    const ImRect interact_bb = display_frame ? frame_bb : ImRect(frame_bb.Min.x, frame_bb.Min.y, frame_bb.Min.x + text_width + style.ItemSpacing.x*2, frame_bb.Max.y);
    bool is_open = TreeNodeBehaviorIsOpen(id, flags);

    // Store a flag for the current depth to tell if we will allow closing this node when navigating one of its child. 
    // For this purpose we essentially compare if g.NavIdIsAlive went from 0 to 1 between TreeNode() and TreePop().
    // This is currently only support 32 level deep and we are fine with (1 << Depth) overflowing into a zero.
    if (is_open && !g.NavIdIsAlive && (flags & ImGuiTreeNodeFlags_NavLeftJumpsBackHere) && !(flags & ImGuiTreeNodeFlags_NoTreePushOnOpen))
        window->DC.TreeDepthMayJumpToParentOnPop |= (1 << window->DC.TreeDepth);

    bool item_add = ItemAdd(interact_bb, id);
    window->DC.LastItemStatusFlags |= ImGuiItemStatusFlags_HasDisplayRect;
    window->DC.LastItemDisplayRect = frame_bb;

    if (!item_add)
    {
        if (is_open && !(flags & ImGuiTreeNodeFlags_NoTreePushOnOpen))
            TreePushRawID(id);
        return is_open;
    }

    // Flags that affects opening behavior:
    // - 0(default) ..................... single-click anywhere to open
    // - OpenOnDoubleClick .............. double-click anywhere to open
    // - OpenOnArrow .................... single-click on arrow to open
    // - OpenOnDoubleClick|OpenOnArrow .. single-click on arrow or double-click anywhere to open
    ImGuiButtonFlags button_flags = ImGuiButtonFlags_NoKeyModifiers | ((flags & ImGuiTreeNodeFlags_AllowItemOverlap) ? ImGuiButtonFlags_AllowItemOverlap : 0);
    if (!(flags & ImGuiTreeNodeFlags_Leaf))
        button_flags |= ImGuiButtonFlags_PressedOnDragDropHold;
    if (flags & ImGuiTreeNodeFlags_OpenOnDoubleClick)
        button_flags |= ImGuiButtonFlags_PressedOnDoubleClick | ((flags & ImGuiTreeNodeFlags_OpenOnArrow) ? ImGuiButtonFlags_PressedOnClickRelease : 0);

    bool hovered, held, pressed = ButtonBehavior(interact_bb, id, &hovered, &held, button_flags);
    if (!(flags & ImGuiTreeNodeFlags_Leaf))
    {
        bool toggled = false;
        if (pressed)
        {
            toggled = !(flags & (ImGuiTreeNodeFlags_OpenOnArrow | ImGuiTreeNodeFlags_OpenOnDoubleClick)) || (g.NavActivateId == id);
            if (flags & ImGuiTreeNodeFlags_OpenOnArrow)
                toggled |= IsMouseHoveringRect(interact_bb.Min, ImVec2(interact_bb.Min.x + text_offset_x, interact_bb.Max.y)) && (!g.NavDisableMouseHover);
            if (flags & ImGuiTreeNodeFlags_OpenOnDoubleClick)
                toggled |= g.IO.MouseDoubleClicked[0];
            if (g.DragDropActive && is_open) // When using Drag and Drop "hold to open" we keep the node highlighted after opening, but never close it again.
                toggled = false;
        }

        if (g.NavId == id && g.NavMoveRequest && g.NavMoveDir == ImGuiDir_Left && is_open)
        {
            toggled = true;
            NavMoveRequestCancel();
        }
        if (g.NavId == id && g.NavMoveRequest && g.NavMoveDir == ImGuiDir_Right && !is_open) // If there's something upcoming on the line we may want to give it the priority?
        {
            toggled = true;
            NavMoveRequestCancel();
        }

        if (toggled)
        {
            is_open = !is_open;
            window->DC.StateStorage->SetInt(id, is_open);
        }
    }
    if (flags & ImGuiTreeNodeFlags_AllowItemOverlap)
        SetItemAllowOverlap();

    // Render
    const ImU32 col = GetColorU32((held && hovered) ? ImGuiCol_HeaderActive : hovered ? ImGuiCol_HeaderHovered : ImGuiCol_Header);
    const ImVec2 text_pos = frame_bb.Min + ImVec2(text_offset_x, text_base_offset_y);
    if (display_frame)
    {
        // Framed type
        RenderFrame(frame_bb.Min, frame_bb.Max, col, true, style.FrameRounding);
        RenderNavHighlight(frame_bb, id, ImGuiNavHighlightFlags_TypeThin);
        RenderArrow(frame_bb.Min + ImVec2(padding.x, text_base_offset_y), is_open ? ImGuiDir_Down : ImGuiDir_Right, 1.0f);
        if (g.LogEnabled)
        {
            // NB: '##' is normally used to hide text (as a library-wide feature), so we need to specify the text range to make sure the ## aren't stripped out here.
            const char log_prefix[] = "\n##";
            const char log_suffix[] = "##";
            LogRenderedText(&text_pos, log_prefix, log_prefix+3);
            RenderTextClipped(text_pos, frame_bb.Max, label, label_end, &label_size);
            LogRenderedText(&text_pos, log_suffix+1, log_suffix+3);
        }
        else
        {
            RenderTextClipped(text_pos, frame_bb.Max, label, label_end, &label_size);
        }
    }
    else
    {
        // Unframed typed for tree nodes
        if (hovered || (flags & ImGuiTreeNodeFlags_Selected))
        {
            RenderFrame(frame_bb.Min, frame_bb.Max, col, false);
            RenderNavHighlight(frame_bb, id, ImGuiNavHighlightFlags_TypeThin);
        }

        if (flags & ImGuiTreeNodeFlags_Bullet)
            RenderBullet(frame_bb.Min + ImVec2(text_offset_x * 0.5f, g.FontSize*0.50f + text_base_offset_y));
        else if (!(flags & ImGuiTreeNodeFlags_Leaf))
            RenderArrow(frame_bb.Min + ImVec2(padding.x, g.FontSize*0.15f + text_base_offset_y), is_open ? ImGuiDir_Down : ImGuiDir_Right, 0.70f);
        if (g.LogEnabled)
            LogRenderedText(&text_pos, ">");
        RenderText(text_pos, label, label_end, false);
    }

    if (is_open && !(flags & ImGuiTreeNodeFlags_NoTreePushOnOpen))
        TreePushRawID(id);
    return is_open;
}

// CollapsingHeader returns true when opened but do not indent nor push into the ID stack (because of the ImGuiTreeNodeFlags_NoTreePushOnOpen flag).
// This is basically the same as calling TreeNodeEx(label, ImGuiTreeNodeFlags_CollapsingHeader | ImGuiTreeNodeFlags_NoTreePushOnOpen). You can remove the _NoTreePushOnOpen flag if you want behavior closer to normal TreeNode().
bool ImGui::CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    return TreeNodeBehavior(window->GetID(label), flags | ImGuiTreeNodeFlags_CollapsingHeader | ImGuiTreeNodeFlags_NoTreePushOnOpen, label);
}

bool ImGui::CollapsingHeader(const char* label, bool* p_open, ImGuiTreeNodeFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    if (p_open && !*p_open)
        return false;

    ImGuiID id = window->GetID(label);
    bool is_open = TreeNodeBehavior(id, flags | ImGuiTreeNodeFlags_CollapsingHeader | ImGuiTreeNodeFlags_NoTreePushOnOpen | (p_open ? ImGuiTreeNodeFlags_AllowItemOverlap : 0), label);
    if (p_open)
    {
        // Create a small overlapping close button // FIXME: We can evolve this into user accessible helpers to add extra buttons on title bars, headers, etc.
        ImGuiContext& g = *GImGui;
        float button_sz = g.FontSize * 0.5f;
        ImGuiItemHoveredDataBackup last_item_backup;
        if (CloseButton(window->GetID((void*)(intptr_t)(id+1)), ImVec2(ImMin(window->DC.LastItemRect.Max.x, window->ClipRect.Max.x) - g.Style.FramePadding.x - button_sz, window->DC.LastItemRect.Min.y + g.Style.FramePadding.y + button_sz), button_sz))
            *p_open = false;
        last_item_backup.Restore();
    }

    return is_open;
}

bool ImGui::TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    return TreeNodeBehavior(window->GetID(label), flags, label, NULL);
}

bool ImGui::TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const char* label_end = g.TempBuffer + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);
    return TreeNodeBehavior(window->GetID(str_id), flags, g.TempBuffer, label_end);
}

bool ImGui::TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const char* label_end = g.TempBuffer + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);
    return TreeNodeBehavior(window->GetID(ptr_id), flags, g.TempBuffer, label_end);
}

bool ImGui::TreeNodeV(const char* str_id, const char* fmt, va_list args)
{
    return TreeNodeExV(str_id, 0, fmt, args);
}

bool ImGui::TreeNodeV(const void* ptr_id, const char* fmt, va_list args)
{
    return TreeNodeExV(ptr_id, 0, fmt, args);
}

bool ImGui::TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    bool is_open = TreeNodeExV(str_id, flags, fmt, args);
    va_end(args);
    return is_open;
}

bool ImGui::TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    bool is_open = TreeNodeExV(ptr_id, flags, fmt, args);
    va_end(args);
    return is_open;
}

bool ImGui::TreeNode(const char* str_id, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    bool is_open = TreeNodeExV(str_id, 0, fmt, args);
    va_end(args);
    return is_open;
}

bool ImGui::TreeNode(const void* ptr_id, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    bool is_open = TreeNodeExV(ptr_id, 0, fmt, args);
    va_end(args);
    return is_open;
}

bool ImGui::TreeNode(const char* label)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;
    return TreeNodeBehavior(window->GetID(label), 0, label, NULL);
}

void ImGui::TreeAdvanceToLabelPos()
{
    ImGuiContext& g = *GImGui;
    g.CurrentWindow->DC.CursorPos.x += GetTreeNodeToLabelSpacing();
}

// Horizontal distance preceding label when using TreeNode() or Bullet()
float ImGui::GetTreeNodeToLabelSpacing()
{
    ImGuiContext& g = *GImGui;
    return g.FontSize + (g.Style.FramePadding.x * 2.0f);
}

void ImGui::SetNextTreeNodeOpen(bool is_open, ImGuiCond cond)
{
    ImGuiContext& g = *GImGui;
    if (g.CurrentWindow->SkipItems)
        return;
    g.NextTreeNodeOpenVal = is_open;
    g.NextTreeNodeOpenCond = cond ? cond : ImGuiCond_Always;
}

void ImGui::PushID(const char* str_id)
{
    ImGuiWindow* window = GetCurrentWindowRead();
    window->IDStack.push_back(window->GetID(str_id));
}

void ImGui::PushID(const char* str_id_begin, const char* str_id_end)
{
    ImGuiWindow* window = GetCurrentWindowRead();
    window->IDStack.push_back(window->GetID(str_id_begin, str_id_end));
}

void ImGui::PushID(const void* ptr_id)
{
    ImGuiWindow* window = GetCurrentWindowRead();
    window->IDStack.push_back(window->GetID(ptr_id));
}

void ImGui::PushID(int int_id)
{
    const void* ptr_id = (void*)(intptr_t)int_id;
    ImGuiWindow* window = GetCurrentWindowRead();
    window->IDStack.push_back(window->GetID(ptr_id));
}

void ImGui::PopID()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    window->IDStack.pop_back();
}

ImGuiID ImGui::GetID(const char* str_id)
{
    return GImGui->CurrentWindow->GetID(str_id);
}

ImGuiID ImGui::GetID(const char* str_id_begin, const char* str_id_end)
{
    return GImGui->CurrentWindow->GetID(str_id_begin, str_id_end);
}

ImGuiID ImGui::GetID(const void* ptr_id)
{
    return GImGui->CurrentWindow->GetID(ptr_id);
}

void ImGui::Bullet()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const float line_height = ImMax(ImMin(window->DC.CurrentLineHeight, g.FontSize + g.Style.FramePadding.y*2), g.FontSize);
    const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(g.FontSize, line_height));
    ItemSize(bb);
    if (!ItemAdd(bb, 0))
    {
        SameLine(0, style.FramePadding.x*2);
        return;
    }

    // Render and stay on same line
    RenderBullet(bb.Min + ImVec2(style.FramePadding.x + g.FontSize*0.5f, line_height*0.5f));
    SameLine(0, style.FramePadding.x*2);
}

// Text with a little bullet aligned to the typical tree node.
void ImGui::BulletTextV(const char* fmt, va_list args)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;

    const char* text_begin = g.TempBuffer;
    const char* text_end = text_begin + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);
    const ImVec2 label_size = CalcTextSize(text_begin, text_end, false);
    const float text_base_offset_y = ImMax(0.0f, window->DC.CurrentLineTextBaseOffset); // Latch before ItemSize changes it
    const float line_height = ImMax(ImMin(window->DC.CurrentLineHeight, g.FontSize + g.Style.FramePadding.y*2), g.FontSize);
    const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(g.FontSize + (label_size.x > 0.0f ? (label_size.x + style.FramePadding.x*2) : 0.0f), ImMax(line_height, label_size.y)));  // Empty text doesn't add padding
    ItemSize(bb);
    if (!ItemAdd(bb, 0))
        return;

    // Render
    RenderBullet(bb.Min + ImVec2(style.FramePadding.x + g.FontSize*0.5f, line_height*0.5f));
    RenderText(bb.Min+ImVec2(g.FontSize + style.FramePadding.x*2, text_base_offset_y), text_begin, text_end, false);
}

void ImGui::BulletText(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    BulletTextV(fmt, args);
    va_end(args);
}

static inline void DataTypeFormatString(ImGuiDataType data_type, void* data_ptr, const char* display_format, char* buf, int buf_size)
{
    if (data_type == ImGuiDataType_Int)
        ImFormatString(buf, buf_size, display_format, *(int*)data_ptr);
    else if (data_type == ImGuiDataType_Float)
        ImFormatString(buf, buf_size, display_format, *(float*)data_ptr);
    else if (data_type == ImGuiDataType_Double)
        ImFormatString(buf, buf_size, display_format, *(double*)data_ptr);
}

static inline void DataTypeFormatString(ImGuiDataType data_type, void* data_ptr, int decimal_precision, char* buf, int buf_size)
{
    if (data_type == ImGuiDataType_Int)
    {
        if (decimal_precision < 0)
            ImFormatString(buf, buf_size, "%d", *(int*)data_ptr);
        else
            ImFormatString(buf, buf_size, "%.*d", decimal_precision, *(int*)data_ptr);
    }
    else if (data_type == ImGuiDataType_Float)
    {
        if (decimal_precision < 0)
            ImFormatString(buf, buf_size, "%f", *(float*)data_ptr);     // Ideally we'd have a minimum decimal precision of 1 to visually denote that it is a float, while hiding non-significant digits?
        else
            ImFormatString(buf, buf_size, "%.*f", decimal_precision, *(float*)data_ptr);
    }
    else if (data_type == ImGuiDataType_Double)
    {
        if (decimal_precision < 0)
            ImFormatString(buf, buf_size, "%f", *(double*)data_ptr);
        else
            ImFormatString(buf, buf_size, "%.*f", decimal_precision, *(double*)data_ptr);
    }
}

static void DataTypeApplyOp(ImGuiDataType data_type, int op, void* output, void* arg1, const void* arg2)
{
    IM_ASSERT(op == '+' || op == '-');
    if (data_type == ImGuiDataType_Int)
    {
        if (op == '+')      *(int*)output = *(int*)arg1 + *(const int*)arg2;
        else if (op == '-') *(int*)output = *(int*)arg1 - *(const int*)arg2;
    }
    else if (data_type == ImGuiDataType_Float)
    {
        if (op == '+')      *(float*)output = *(float*)arg1 + *(const float*)arg2;
        else if (op == '-') *(float*)output = *(float*)arg1 - *(const float*)arg2;
    }
    else if (data_type == ImGuiDataType_Double)
    {
        if (op == '+')      *(double*)output = *(double*)arg1 + *(const double*)arg2;
        else if (op == '-') *(double*)output = *(double*)arg1 - *(const double*)arg2;
    }
}

static size_t GDataTypeSize[ImGuiDataType_COUNT] =
{
    sizeof(int),
    sizeof(float),
    sizeof(double)
};

// User can input math operators (e.g. +100) to edit a numerical values.
// NB: This is _not_ a full expression evaluator. We should probably add one though..
static bool DataTypeApplyOpFromText(const char* buf, const char* initial_value_buf, ImGuiDataType data_type, void* data_ptr, const char* scalar_format)
{
    while (ImCharIsSpace((unsigned int)*buf))
        buf++;

    // We don't support '-' op because it would conflict with inputing negative value.
    // Instead you can use +-100 to subtract from an existing value
    char op = buf[0];
    if (op == '+' || op == '*' || op == '/')
    {
        buf++;
        while (ImCharIsSpace((unsigned int)*buf))
            buf++;
    }
    else
    {
        op = 0;
    }
    if (!buf[0])
        return false;

    IM_ASSERT(data_type < ImGuiDataType_COUNT);
    int data_backup[2];
    IM_ASSERT(GDataTypeSize[data_type] <= sizeof(data_backup));
    memcpy(data_backup, data_ptr, GDataTypeSize[data_type]);

    if (data_type == ImGuiDataType_Int)
    {
        if (!scalar_format)
            scalar_format = "%d";
        int* v = (int*)data_ptr;
        int arg0i = *v;
        if (op && sscanf(initial_value_buf, scalar_format, &arg0i) < 1)
            return false;
        // Store operand in a float so we can use fractional value for multipliers (*1.1), but constant always parsed as integer so we can fit big integers (e.g. 2000000003) past float precision
        float arg1f = 0.0f;
        if (op == '+')      { if (sscanf(buf, "%f", &arg1f) == 1) *v = (int)(arg0i + arg1f); }                 // Add (use "+-" to subtract)
        else if (op == '*') { if (sscanf(buf, "%f", &arg1f) == 1) *v = (int)(arg0i * arg1f); }                 // Multiply
        else if (op == '/') { if (sscanf(buf, "%f", &arg1f) == 1 && arg1f != 0.0f) *v = (int)(arg0i / arg1f); }// Divide
        else                { if (sscanf(buf, scalar_format, &arg0i) == 1) *v = arg0i; }                       // Assign integer constant
    }
    else if (data_type == ImGuiDataType_Float)
    {
        // For floats we have to ignore format with precision (e.g. "%.2f") because sscanf doesn't take them in
        scalar_format = "%f";
        float* v = (float*)data_ptr;
        float arg0f = *v, arg1f = 0.0f;
        if (op && sscanf(initial_value_buf, scalar_format, &arg0f) < 1)
            return false;
        if (sscanf(buf, scalar_format, &arg1f) < 1)
            return false;
        if (op == '+')      { *v = arg0f + arg1f; }                    // Add (use "+-" to subtract)
        else if (op == '*') { *v = arg0f * arg1f; }                    // Multiply
        else if (op == '/') { if (arg1f != 0.0f) *v = arg0f / arg1f; } // Divide
        else                { *v = arg1f; }                            // Assign constant
    }
    else if (data_type == ImGuiDataType_Double)
    {
        scalar_format = "%lf";
        double* v = (double*)data_ptr;
        double arg0f = *v, arg1f = 0.0f;
        if (op && sscanf(initial_value_buf, scalar_format, &arg0f) < 1)
            return false;
        if (sscanf(buf, scalar_format, &arg1f) < 1)
            return false;
        if (op == '+')      { *v = arg0f + arg1f; }                    // Add (use "+-" to subtract)
        else if (op == '*') { *v = arg0f * arg1f; }                    // Multiply
        else if (op == '/') { if (arg1f != 0.0f) *v = arg0f / arg1f; } // Divide
        else                { *v = arg1f; }                            // Assign constant
    }
    return memcmp(data_backup, data_ptr, GDataTypeSize[data_type]) != 0;
}

// Create text input in place of a slider (when CTRL+Clicking on slider)
// FIXME: Logic is messy and confusing.
bool ImGui::InputScalarAsWidgetReplacement(const ImRect& aabb, const char* label, ImGuiDataType data_type, void* data_ptr, ImGuiID id, int decimal_precision)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();

    // Our replacement widget will override the focus ID (registered previously to allow for a TAB focus to happen)
    // On the first frame, g.ScalarAsInputTextId == 0, then on subsequent frames it becomes == id
    SetActiveID(g.ScalarAsInputTextId, window);
    g.ActiveIdAllowNavDirFlags = (1 << ImGuiDir_Up) | (1 << ImGuiDir_Down);
    SetHoveredID(0);
    FocusableItemUnregister(window);

    char buf[32];
    DataTypeFormatString(data_type, data_ptr, decimal_precision, buf, IM_ARRAYSIZE(buf));
    bool text_value_changed = InputTextEx(label, buf, IM_ARRAYSIZE(buf), aabb.GetSize(), ImGuiInputTextFlags_CharsDecimal | ImGuiInputTextFlags_AutoSelectAll);
    if (g.ScalarAsInputTextId == 0)     // First frame we started displaying the InputText widget
    {
        IM_ASSERT(g.ActiveId == id);    // InputText ID expected to match the Slider ID (else we'd need to store them both, which is also possible)
        g.ScalarAsInputTextId = g.ActiveId;
        SetHoveredID(id);
    }
    if (text_value_changed)
        return DataTypeApplyOpFromText(buf, GImGui->InputTextState.InitialText.begin(), data_type, data_ptr, NULL);
    return false;
}

// Parse display precision back from the display format string
int ImGui::ParseFormatPrecision(const char* fmt, int default_precision)
{
    int precision = default_precision;
    while ((fmt = strchr(fmt, '%')) != NULL)
    {
        fmt++;
        if (fmt[0] == '%') { fmt++; continue; } // Ignore "%%"
        while (*fmt >= '0' && *fmt <= '9')
            fmt++;
        if (*fmt == '.')
        {
            fmt = ImAtoi(fmt + 1, &precision);
            if (precision < 0 || precision > 10)
                precision = default_precision;
        }
        if (*fmt == 'e' || *fmt == 'E') // Maximum precision with scientific notation
            precision = -1;
        break;
    }
    return precision;
}

static float GetMinimumStepAtDecimalPrecision(int decimal_precision)
{
    static const float min_steps[10] = { 1.0f, 0.1f, 0.01f, 0.001f, 0.0001f, 0.00001f, 0.000001f, 0.0000001f, 0.00000001f, 0.000000001f };
    return (decimal_precision >= 0 && decimal_precision < 10) ? min_steps[decimal_precision] : powf(10.0f, (float)-decimal_precision);
}

float ImGui::RoundScalar(float value, int decimal_precision)
{
    // Round past decimal precision
    // So when our value is 1.99999 with a precision of 0.001 we'll end up rounding to 2.0
    // FIXME: Investigate better rounding methods
    if (decimal_precision < 0)
        return value;
    const float min_step = GetMinimumStepAtDecimalPrecision(decimal_precision);
    bool negative = value < 0.0f;
    value = fabsf(value);
    float remainder = fmodf(value, min_step);
    if (remainder <= min_step*0.5f)
        value -= remainder;
    else
        value += (min_step - remainder);
    return negative ? -value : value;
}

static inline float SliderBehaviorCalcRatioFromValue(float v, float v_min, float v_max, float power, float linear_zero_pos)
{
    if (v_min == v_max)
        return 0.0f;

    const bool is_non_linear = (power < 1.0f-0.00001f) || (power > 1.0f+0.00001f);
    const float v_clamped = (v_min < v_max) ? ImClamp(v, v_min, v_max) : ImClamp(v, v_max, v_min);
    if (is_non_linear)
    {
        if (v_clamped < 0.0f)
        {
            const float f = 1.0f - (v_clamped - v_min) / (ImMin(0.0f,v_max) - v_min);
            return (1.0f - powf(f, 1.0f/power)) * linear_zero_pos;
        }
        else
        {
            const float f = (v_clamped - ImMax(0.0f,v_min)) / (v_max - ImMax(0.0f,v_min));
            return linear_zero_pos + powf(f, 1.0f/power) * (1.0f - linear_zero_pos);
        }
    }

    // Linear slider
    return (v_clamped - v_min) / (v_max - v_min);
}

bool ImGui::SliderBehavior(const ImRect& frame_bb, ImGuiID id, float* v, float v_min, float v_max, float power, int decimal_precision, ImGuiSliderFlags flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();
    const ImGuiStyle& style = g.Style;

    // Draw frame
    const ImU32 frame_col = GetColorU32(g.ActiveId == id ? ImGuiCol_FrameBgActive : g.HoveredId == id ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg);
    RenderNavHighlight(frame_bb, id);
    RenderFrame(frame_bb.Min, frame_bb.Max, frame_col, true, style.FrameRounding);

    const bool is_non_linear = (power < 1.0f-0.00001f) || (power > 1.0f+0.00001f);
    const bool is_horizontal = (flags & ImGuiSliderFlags_Vertical) == 0;

    const float grab_padding = 2.0f;
    const float slider_sz = is_horizontal ? (frame_bb.GetWidth() - grab_padding * 2.0f) : (frame_bb.GetHeight() - grab_padding * 2.0f);
    float grab_sz;
    if (decimal_precision != 0)
        grab_sz = ImMin(style.GrabMinSize, slider_sz);
    else
        grab_sz = ImMin(ImMax(1.0f * (slider_sz / ((v_min < v_max ? v_max - v_min : v_min - v_max) + 1.0f)), style.GrabMinSize), slider_sz);  // Integer sliders, if possible have the grab size represent 1 unit
    const float slider_usable_sz = slider_sz - grab_sz;
    const float slider_usable_pos_min = (is_horizontal ? frame_bb.Min.x : frame_bb.Min.y) + grab_padding + grab_sz*0.5f;
    const float slider_usable_pos_max = (is_horizontal ? frame_bb.Max.x : frame_bb.Max.y) - grab_padding - grab_sz*0.5f;

    // For logarithmic sliders that cross over sign boundary we want the exponential increase to be symmetric around 0.0f
    float linear_zero_pos = 0.0f;   // 0.0->1.0f
    if (v_min * v_max < 0.0f)
    {
        // Different sign
        const float linear_dist_min_to_0 = powf(fabsf(0.0f - v_min), 1.0f/power);
        const float linear_dist_max_to_0 = powf(fabsf(v_max - 0.0f), 1.0f/power);
        linear_zero_pos = linear_dist_min_to_0 / (linear_dist_min_to_0+linear_dist_max_to_0);
    }
    else
    {
        // Same sign
        linear_zero_pos = v_min < 0.0f ? 1.0f : 0.0f;
    }

    // Process interacting with the slider
    bool value_changed = false;
    if (g.ActiveId == id)
    {
        bool set_new_value = false;
        float clicked_t = 0.0f;
        if (g.ActiveIdSource == ImGuiInputSource_Mouse)
        {
            if (!g.IO.MouseDown[0])
            {
                ClearActiveID();
            }
            else
            {
                const float mouse_abs_pos = is_horizontal ? g.IO.MousePos.x : g.IO.MousePos.y;
                clicked_t = (slider_usable_sz > 0.0f) ? ImClamp((mouse_abs_pos - slider_usable_pos_min) / slider_usable_sz, 0.0f, 1.0f) : 0.0f;
                if (!is_horizontal)
                    clicked_t = 1.0f - clicked_t;
                set_new_value = true;
            }
        }
        else if (g.ActiveIdSource == ImGuiInputSource_Nav)
        {
            const ImVec2 delta2 = GetNavInputAmount2d(ImGuiNavDirSourceFlags_Keyboard | ImGuiNavDirSourceFlags_PadDPad, ImGuiInputReadMode_RepeatFast, 0.0f, 0.0f);
            float delta = is_horizontal ? delta2.x : -delta2.y;
            if (g.NavActivatePressedId == id && !g.ActiveIdIsJustActivated)
            {
                ClearActiveID();
            }
            else if (delta != 0.0f)
            {
                clicked_t = SliderBehaviorCalcRatioFromValue(*v, v_min, v_max, power, linear_zero_pos);
                if (decimal_precision == 0 && !is_non_linear)
                {
                    if (fabsf(v_max - v_min) <= 100.0f || IsNavInputDown(ImGuiNavInput_TweakSlow))
                        delta = ((delta < 0.0f) ? -1.0f : +1.0f) / (v_max - v_min); // Gamepad/keyboard tweak speeds in integer steps
                    else
                        delta /= 100.0f;
                }
                else
                {
                    delta /= 100.0f;    // Gamepad/keyboard tweak speeds in % of slider bounds
                    if (IsNavInputDown(ImGuiNavInput_TweakSlow))
                        delta /= 10.0f;
                }
                if (IsNavInputDown(ImGuiNavInput_TweakFast))
                    delta *= 10.0f;
                set_new_value = true;
                if ((clicked_t >= 1.0f && delta > 0.0f) || (clicked_t <= 0.0f && delta < 0.0f)) // This is to avoid applying the saturation when already past the limits
                    set_new_value = false;
                else
                    clicked_t = ImSaturate(clicked_t + delta);
            }
        }

        if (set_new_value)
        {
            float new_value;
            if (is_non_linear)
            {
                // Account for logarithmic scale on both sides of the zero
                if (clicked_t < linear_zero_pos)
                {
                    // Negative: rescale to the negative range before powering
                    float a = 1.0f - (clicked_t / linear_zero_pos);
                    a = powf(a, power);
                    new_value = ImLerp(ImMin(v_max,0.0f), v_min, a);
                }
                else
                {
                    // Positive: rescale to the positive range before powering
                    float a;
                    if (fabsf(linear_zero_pos - 1.0f) > 1.e-6f)
                        a = (clicked_t - linear_zero_pos) / (1.0f - linear_zero_pos);
                    else
                        a = clicked_t;
                    a = powf(a, power);
                    new_value = ImLerp(ImMax(v_min,0.0f), v_max, a);
                }
            }
            else
            {
                // Linear slider
                new_value = ImLerp(v_min, v_max, clicked_t);
            }

            // Round past decimal precision
            new_value = RoundScalar(new_value, decimal_precision);
            if (*v != new_value)
            {
                *v = new_value;
                value_changed = true;
            }
        }
    }

    // Draw
    float grab_t = SliderBehaviorCalcRatioFromValue(*v, v_min, v_max, power, linear_zero_pos);
    if (!is_horizontal)
        grab_t = 1.0f - grab_t;
    const float grab_pos = ImLerp(slider_usable_pos_min, slider_usable_pos_max, grab_t);
    ImRect grab_bb;
    if (is_horizontal)
        grab_bb = ImRect(ImVec2(grab_pos - grab_sz*0.5f, frame_bb.Min.y + grab_padding), ImVec2(grab_pos + grab_sz*0.5f, frame_bb.Max.y - grab_padding));
    else
        grab_bb = ImRect(ImVec2(frame_bb.Min.x + grab_padding, grab_pos - grab_sz*0.5f), ImVec2(frame_bb.Max.x - grab_padding, grab_pos + grab_sz*0.5f));
    window->DrawList->AddRectFilled(grab_bb.Min, grab_bb.Max, GetColorU32(g.ActiveId == id ? ImGuiCol_SliderGrabActive : ImGuiCol_SliderGrab), style.GrabRounding);

    return value_changed;
}

// Use power!=1.0 for logarithmic sliders.
// Adjust display_format to decorate the value with a prefix or a suffix.
//   "%.3f"         1.234
//   "%5.2f secs"   01.23 secs
//   "Gold: %.0f"   Gold: 1
bool ImGui::SliderFloat(const char* label, float* v, float v_min, float v_max, const char* display_format, float power)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);
    const float w = CalcItemWidth();

    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(w, label_size.y + style.FramePadding.y*2.0f));
    const ImRect total_bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));

    // NB- we don't call ItemSize() yet because we may turn into a text edit box below
    if (!ItemAdd(total_bb, id, &frame_bb))
    {
        ItemSize(total_bb, style.FramePadding.y);
        return false;
    }
    const bool hovered = ItemHoverable(frame_bb, id);

    if (!display_format)
        display_format = "%.3f";
    int decimal_precision = ParseFormatPrecision(display_format, 3);

    // Tabbing or CTRL-clicking on Slider turns it into an input box
    bool start_text_input = false;
    const bool tab_focus_requested = FocusableItemRegister(window, id);
    if (tab_focus_requested || (hovered && g.IO.MouseClicked[0]) || g.NavActivateId == id || (g.NavInputId == id && g.ScalarAsInputTextId != id))
    {
        SetActiveID(id, window);
        SetFocusID(id, window);
        FocusWindow(window);
        g.ActiveIdAllowNavDirFlags = (1 << ImGuiDir_Up) | (1 << ImGuiDir_Down);
        if (tab_focus_requested || g.IO.KeyCtrl || g.NavInputId == id)
        {
            start_text_input = true;
            g.ScalarAsInputTextId = 0;
        }
    }
    if (start_text_input || (g.ActiveId == id && g.ScalarAsInputTextId == id))
        return InputScalarAsWidgetReplacement(frame_bb, label, ImGuiDataType_Float, v, id, decimal_precision);

    // Actual slider behavior + render grab
    ItemSize(total_bb, style.FramePadding.y);
    const bool value_changed = SliderBehavior(frame_bb, id, v, v_min, v_max, power, decimal_precision);

    // Display value using user-provided display format so user can add prefix/suffix/decorations to the value.
    char value_buf[64];
    const char* value_buf_end = value_buf + ImFormatString(value_buf, IM_ARRAYSIZE(value_buf), display_format, *v);
    RenderTextClipped(frame_bb.Min, frame_bb.Max, value_buf, value_buf_end, NULL, ImVec2(0.5f,0.5f));

    if (label_size.x > 0.0f)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

    return value_changed;
}

bool ImGui::VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_max, const char* display_format, float power)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);

    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + size);
    const ImRect bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));

    ItemSize(bb, style.FramePadding.y);
    if (!ItemAdd(frame_bb, id))
        return false;
    const bool hovered = ItemHoverable(frame_bb, id);

    if (!display_format)
        display_format = "%.3f";
    int decimal_precision = ParseFormatPrecision(display_format, 3);

    if ((hovered && g.IO.MouseClicked[0]) || g.NavActivateId == id || g.NavInputId == id)
    {
        SetActiveID(id, window);
        SetFocusID(id, window);
        FocusWindow(window);
        g.ActiveIdAllowNavDirFlags = (1 << ImGuiDir_Left) | (1 << ImGuiDir_Right);
    }

    // Actual slider behavior + render grab
    bool value_changed = SliderBehavior(frame_bb, id, v, v_min, v_max, power, decimal_precision, ImGuiSliderFlags_Vertical);

    // Display value using user-provided display format so user can add prefix/suffix/decorations to the value.
    // For the vertical slider we allow centered text to overlap the frame padding
    char value_buf[64];
    char* value_buf_end = value_buf + ImFormatString(value_buf, IM_ARRAYSIZE(value_buf), display_format, *v);
    RenderTextClipped(ImVec2(frame_bb.Min.x, frame_bb.Min.y + style.FramePadding.y), frame_bb.Max, value_buf, value_buf_end, NULL, ImVec2(0.5f,0.0f));
    if (label_size.x > 0.0f)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

    return value_changed;
}

bool ImGui::SliderAngle(const char* label, float* v_rad, float v_degrees_min, float v_degrees_max)
{
    float v_deg = (*v_rad) * 360.0f / (2*IM_PI);
    bool value_changed = SliderFloat(label, &v_deg, v_degrees_min, v_degrees_max, "%.0f deg", 1.0f);
    *v_rad = v_deg * (2*IM_PI) / 360.0f;
    return value_changed;
}

bool ImGui::SliderInt(const char* label, int* v, int v_min, int v_max, const char* display_format)
{
    if (!display_format)
        display_format = "%.0f";
    float v_f = (float)*v;
    bool value_changed = SliderFloat(label, &v_f, (float)v_min, (float)v_max, display_format, 1.0f);
    *v = (int)v_f;
    return value_changed;
}

bool ImGui::VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, const char* display_format)
{
    if (!display_format)
        display_format = "%.0f";
    float v_f = (float)*v;
    bool value_changed = VSliderFloat(label, size, &v_f, (float)v_min, (float)v_max, display_format, 1.0f);
    *v = (int)v_f;
    return value_changed;
}

// Add multiple sliders on 1 line for compact edition of multiple components
bool ImGui::SliderFloatN(const char* label, float* v, int components, float v_min, float v_max, const char* display_format, float power)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    bool value_changed = false;
    BeginGroup();
    PushID(label);
    PushMultiItemsWidths(components);
    for (int i = 0; i < components; i++)
    {
        PushID(i);
        value_changed |= SliderFloat("##v", &v[i], v_min, v_max, display_format, power);
        SameLine(0, g.Style.ItemInnerSpacing.x);
        PopID();
        PopItemWidth();
    }
    PopID();

    TextUnformatted(label, FindRenderedTextEnd(label));
    EndGroup();

    return value_changed;
}

bool ImGui::SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* display_format, float power)
{
    return SliderFloatN(label, v, 2, v_min, v_max, display_format, power);
}

bool ImGui::SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* display_format, float power)
{
    return SliderFloatN(label, v, 3, v_min, v_max, display_format, power);
}

bool ImGui::SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* display_format, float power)
{
    return SliderFloatN(label, v, 4, v_min, v_max, display_format, power);
}

bool ImGui::SliderIntN(const char* label, int* v, int components, int v_min, int v_max, const char* display_format)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    bool value_changed = false;
    BeginGroup();
    PushID(label);
    PushMultiItemsWidths(components);
    for (int i = 0; i < components; i++)
    {
        PushID(i);
        value_changed |= SliderInt("##v", &v[i], v_min, v_max, display_format);
        SameLine(0, g.Style.ItemInnerSpacing.x);
        PopID();
        PopItemWidth();
    }
    PopID();

    TextUnformatted(label, FindRenderedTextEnd(label));
    EndGroup();

    return value_changed;
}

bool ImGui::SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* display_format)
{
    return SliderIntN(label, v, 2, v_min, v_max, display_format);
}

bool ImGui::SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* display_format)
{
    return SliderIntN(label, v, 3, v_min, v_max, display_format);
}

bool ImGui::SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* display_format)
{
    return SliderIntN(label, v, 4, v_min, v_max, display_format);
}

bool ImGui::DragBehavior(const ImRect& frame_bb, ImGuiID id, float* v, float v_speed, float v_min, float v_max, int decimal_precision, float power)
{
    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;

    // Draw frame
    const ImU32 frame_col = GetColorU32(g.ActiveId == id ? ImGuiCol_FrameBgActive : g.HoveredId == id ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg);
    RenderNavHighlight(frame_bb, id);
    RenderFrame(frame_bb.Min, frame_bb.Max, frame_col, true, style.FrameRounding);

    bool value_changed = false;

    // Process interacting with the drag
    if (g.ActiveId == id)
    {
        if (g.ActiveIdSource == ImGuiInputSource_Mouse && !g.IO.MouseDown[0])
            ClearActiveID();
        else if (g.ActiveIdSource == ImGuiInputSource_Nav && g.NavActivatePressedId == id && !g.ActiveIdIsJustActivated)
            ClearActiveID();
    }
    if (g.ActiveId == id)
    {
        if (g.ActiveIdIsJustActivated)
        {
            // Lock current value on click
            g.DragCurrentValue = *v;
            g.DragLastMouseDelta = ImVec2(0.f, 0.f);
        }

        if (v_speed == 0.0f && (v_max - v_min) != 0.0f && (v_max - v_min) < FLT_MAX)
            v_speed = (v_max - v_min) * g.DragSpeedDefaultRatio;

        float v_cur = g.DragCurrentValue;
        const ImVec2 mouse_drag_delta = GetMouseDragDelta(0, 1.0f);
        float adjust_delta = 0.0f;
        if (g.ActiveIdSource == ImGuiInputSource_Mouse && IsMousePosValid())
        {
            adjust_delta = mouse_drag_delta.x - g.DragLastMouseDelta.x;
            if (g.IO.KeyShift && g.DragSpeedScaleFast >= 0.0f)
                adjust_delta *= g.DragSpeedScaleFast;
            if (g.IO.KeyAlt && g.DragSpeedScaleSlow >= 0.0f)
                adjust_delta *= g.DragSpeedScaleSlow;
            g.DragLastMouseDelta.x = mouse_drag_delta.x;
        }
        if (g.ActiveIdSource == ImGuiInputSource_Nav)
        {
            adjust_delta = GetNavInputAmount2d(ImGuiNavDirSourceFlags_Keyboard|ImGuiNavDirSourceFlags_PadDPad, ImGuiInputReadMode_RepeatFast, 1.0f/10.0f, 10.0f).x;
            if (v_min < v_max && ((v_cur >= v_max && adjust_delta > 0.0f) || (v_cur <= v_min && adjust_delta < 0.0f))) // This is to avoid applying the saturation when already past the limits
                adjust_delta = 0.0f;
            v_speed = ImMax(v_speed, GetMinimumStepAtDecimalPrecision(decimal_precision));
        }
        adjust_delta *= v_speed;

        if (fabsf(adjust_delta) > 0.0f)
        {
            if (fabsf(power - 1.0f) > 0.001f)
            {
                // Logarithmic curve on both side of 0.0
                float v0_abs = v_cur >= 0.0f ? v_cur : -v_cur;
                float v0_sign = v_cur >= 0.0f ? 1.0f : -1.0f;
                float v1 = powf(v0_abs, 1.0f / power) + (adjust_delta * v0_sign);
                float v1_abs = v1 >= 0.0f ? v1 : -v1;
                float v1_sign = v1 >= 0.0f ? 1.0f : -1.0f;          // Crossed sign line
                v_cur = powf(v1_abs, power) * v0_sign * v1_sign;    // Reapply sign
            }
            else
            {
                v_cur += adjust_delta;
            }

            // Clamp
            if (v_min < v_max)
                v_cur = ImClamp(v_cur, v_min, v_max);
            g.DragCurrentValue = v_cur;
        }

        // Round to user desired precision, then apply
        v_cur = RoundScalar(v_cur, decimal_precision);
        if (*v != v_cur)
        {
            *v = v_cur;
            value_changed = true;
        }
    }

    return value_changed;
}

bool ImGui::DragFloat(const char* label, float* v, float v_speed, float v_min, float v_max, const char* display_format, float power)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);
    const float w = CalcItemWidth();

    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(w, label_size.y + style.FramePadding.y*2.0f));
    const ImRect inner_bb(frame_bb.Min + style.FramePadding, frame_bb.Max - style.FramePadding);
    const ImRect total_bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));

    // NB- we don't call ItemSize() yet because we may turn into a text edit box below
    if (!ItemAdd(total_bb, id, &frame_bb))
    {
        ItemSize(total_bb, style.FramePadding.y);
        return false;
    }
    const bool hovered = ItemHoverable(frame_bb, id);

    if (!display_format)
        display_format = "%.3f";
    int decimal_precision = ParseFormatPrecision(display_format, 3);

    // Tabbing or CTRL-clicking on Drag turns it into an input box
    bool start_text_input = false;
    const bool tab_focus_requested = FocusableItemRegister(window, id);
    if (tab_focus_requested || (hovered && (g.IO.MouseClicked[0] || g.IO.MouseDoubleClicked[0])) || g.NavActivateId == id || (g.NavInputId == id && g.ScalarAsInputTextId != id))
    {
        SetActiveID(id, window);
        SetFocusID(id, window);
        FocusWindow(window);
        g.ActiveIdAllowNavDirFlags = (1 << ImGuiDir_Up) | (1 << ImGuiDir_Down);
        if (tab_focus_requested || g.IO.KeyCtrl || g.IO.MouseDoubleClicked[0] || g.NavInputId == id)
        {
            start_text_input = true;
            g.ScalarAsInputTextId = 0;
        }
    }
    if (start_text_input || (g.ActiveId == id && g.ScalarAsInputTextId == id))
        return InputScalarAsWidgetReplacement(frame_bb, label, ImGuiDataType_Float, v, id, decimal_precision);

    // Actual drag behavior
    ItemSize(total_bb, style.FramePadding.y);
    const bool value_changed = DragBehavior(frame_bb, id, v, v_speed, v_min, v_max, decimal_precision, power);

    // Display value using user-provided display format so user can add prefix/suffix/decorations to the value.
    char value_buf[64];
    const char* value_buf_end = value_buf + ImFormatString(value_buf, IM_ARRAYSIZE(value_buf), display_format, *v);
    RenderTextClipped(frame_bb.Min, frame_bb.Max, value_buf, value_buf_end, NULL, ImVec2(0.5f,0.5f));

    if (label_size.x > 0.0f)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, inner_bb.Min.y), label);

    return value_changed;
}

bool ImGui::DragFloatN(const char* label, float* v, int components, float v_speed, float v_min, float v_max, const char* display_format, float power)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    bool value_changed = false;
    BeginGroup();
    PushID(label);
    PushMultiItemsWidths(components);
    for (int i = 0; i < components; i++)
    {
        PushID(i);
        value_changed |= DragFloat("##v", &v[i], v_speed, v_min, v_max, display_format, power);
        SameLine(0, g.Style.ItemInnerSpacing.x);
        PopID();
        PopItemWidth();
    }
    PopID();

    TextUnformatted(label, FindRenderedTextEnd(label));
    EndGroup();

    return value_changed;
}

bool ImGui::DragFloat2(const char* label, float v[2], float v_speed, float v_min, float v_max, const char* display_format, float power)
{
    return DragFloatN(label, v, 2, v_speed, v_min, v_max, display_format, power);
}

bool ImGui::DragFloat3(const char* label, float v[3], float v_speed, float v_min, float v_max, const char* display_format, float power)
{
    return DragFloatN(label, v, 3, v_speed, v_min, v_max, display_format, power);
}

bool ImGui::DragFloat4(const char* label, float v[4], float v_speed, float v_min, float v_max, const char* display_format, float power)
{
    return DragFloatN(label, v, 4, v_speed, v_min, v_max, display_format, power);
}

bool ImGui::DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float v_speed, float v_min, float v_max, const char* display_format, const char* display_format_max, float power)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    PushID(label);
    BeginGroup();
    PushMultiItemsWidths(2);

    bool value_changed = DragFloat("##min", v_current_min, v_speed, (v_min >= v_max) ? -FLT_MAX : v_min, (v_min >= v_max) ? *v_current_max : ImMin(v_max, *v_current_max), display_format, power);
    PopItemWidth();
    SameLine(0, g.Style.ItemInnerSpacing.x);
    value_changed |= DragFloat("##max", v_current_max, v_speed, (v_min >= v_max) ? *v_current_min : ImMax(v_min, *v_current_min), (v_min >= v_max) ? FLT_MAX : v_max, display_format_max ? display_format_max : display_format, power);
    PopItemWidth();
    SameLine(0, g.Style.ItemInnerSpacing.x);

    TextUnformatted(label, FindRenderedTextEnd(label));
    EndGroup();
    PopID();

    return value_changed;
}

// NB: v_speed is float to allow adjusting the drag speed with more precision
bool ImGui::DragInt(const char* label, int* v, float v_speed, int v_min, int v_max, const char* display_format)
{
    if (!display_format)
        display_format = "%.0f";
    float v_f = (float)*v;
    bool value_changed = DragFloat(label, &v_f, v_speed, (float)v_min, (float)v_max, display_format);
    *v = (int)v_f;
    return value_changed;
}

bool ImGui::DragIntN(const char* label, int* v, int components, float v_speed, int v_min, int v_max, const char* display_format)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    bool value_changed = false;
    BeginGroup();
    PushID(label);
    PushMultiItemsWidths(components);
    for (int i = 0; i < components; i++)
    {
        PushID(i);
        value_changed |= DragInt("##v", &v[i], v_speed, v_min, v_max, display_format);
        SameLine(0, g.Style.ItemInnerSpacing.x);
        PopID();
        PopItemWidth();
    }
    PopID();

    TextUnformatted(label, FindRenderedTextEnd(label));
    EndGroup();

    return value_changed;
}

bool ImGui::DragInt2(const char* label, int v[2], float v_speed, int v_min, int v_max, const char* display_format)
{
    return DragIntN(label, v, 2, v_speed, v_min, v_max, display_format);
}

bool ImGui::DragInt3(const char* label, int v[3], float v_speed, int v_min, int v_max, const char* display_format)
{
    return DragIntN(label, v, 3, v_speed, v_min, v_max, display_format);
}

bool ImGui::DragInt4(const char* label, int v[4], float v_speed, int v_min, int v_max, const char* display_format)
{
    return DragIntN(label, v, 4, v_speed, v_min, v_max, display_format);
}

bool ImGui::DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_speed, int v_min, int v_max, const char* display_format, const char* display_format_max)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    PushID(label);
    BeginGroup();
    PushMultiItemsWidths(2);

    bool value_changed = DragInt("##min", v_current_min, v_speed, (v_min >= v_max) ? INT_MIN : v_min, (v_min >= v_max) ? *v_current_max : ImMin(v_max, *v_current_max), display_format);
    PopItemWidth();
    SameLine(0, g.Style.ItemInnerSpacing.x);
    value_changed |= DragInt("##max", v_current_max, v_speed, (v_min >= v_max) ? *v_current_min : ImMax(v_min, *v_current_min), (v_min >= v_max) ? INT_MAX : v_max, display_format_max ? display_format_max : display_format);
    PopItemWidth();
    SameLine(0, g.Style.ItemInnerSpacing.x);

    TextUnformatted(label, FindRenderedTextEnd(label));
    EndGroup();
    PopID();

    return value_changed;
}

void ImGui::PlotEx(ImGuiPlotType plot_type, const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;

    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    if (graph_size.x == 0.0f)
        graph_size.x = CalcItemWidth();
    if (graph_size.y == 0.0f)
        graph_size.y = label_size.y + (style.FramePadding.y * 2);

    const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(graph_size.x, graph_size.y));
    const ImRect inner_bb(frame_bb.Min + style.FramePadding, frame_bb.Max - style.FramePadding);
    const ImRect total_bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0));
    ItemSize(total_bb, style.FramePadding.y);
    if (!ItemAdd(total_bb, 0, &frame_bb))
        return;
    const bool hovered = ItemHoverable(inner_bb, 0);

    // Determine scale from values if not specified
    if (scale_min == FLT_MAX || scale_max == FLT_MAX)
    {
        float v_min = FLT_MAX;
        float v_max = -FLT_MAX;
        for (int i = 0; i < values_count; i++)
        {
            const float v = values_getter(data, i);
            v_min = ImMin(v_min, v);
            v_max = ImMax(v_max, v);
        }
        if (scale_min == FLT_MAX)
            scale_min = v_min;
        if (scale_max == FLT_MAX)
            scale_max = v_max;
    }

    RenderFrame(frame_bb.Min, frame_bb.Max, GetColorU32(ImGuiCol_FrameBg), true, style.FrameRounding);

    if (values_count > 0)
    {
        int res_w = ImMin((int)graph_size.x, values_count) + ((plot_type == ImGuiPlotType_Lines) ? -1 : 0);
        int item_count = values_count + ((plot_type == ImGuiPlotType_Lines) ? -1 : 0);

        // Tooltip on hover
        int v_hovered = -1;
        if (hovered)
        {
            const float t = ImClamp((g.IO.MousePos.x - inner_bb.Min.x) / (inner_bb.Max.x - inner_bb.Min.x), 0.0f, 0.9999f);
            const int v_idx = (int)(t * item_count);
            IM_ASSERT(v_idx >= 0 && v_idx < values_count);

            const float v0 = values_getter(data, (v_idx + values_offset) % values_count);
            const float v1 = values_getter(data, (v_idx + 1 + values_offset) % values_count);
            if (plot_type == ImGuiPlotType_Lines)
                SetTooltip("%d: %8.4g\n%d: %8.4g", v_idx, v0, v_idx+1, v1);
            else if (plot_type == ImGuiPlotType_Histogram)
                SetTooltip("%d: %8.4g", v_idx, v0);
            v_hovered = v_idx;
        }

        const float t_step = 1.0f / (float)res_w;
        const float inv_scale = (scale_min == scale_max) ? 0.0f : (1.0f / (scale_max - scale_min));

        float v0 = values_getter(data, (0 + values_offset) % values_count);
        float t0 = 0.0f;
        ImVec2 tp0 = ImVec2( t0, 1.0f - ImSaturate((v0 - scale_min) * inv_scale) );                       // Point in the normalized space of our target rectangle
        float histogram_zero_line_t = (scale_min * scale_max < 0.0f) ? (-scale_min * inv_scale) : (scale_min < 0.0f ? 0.0f : 1.0f);   // Where does the zero line stands

        const ImU32 col_base = GetColorU32((plot_type == ImGuiPlotType_Lines) ? ImGuiCol_PlotLines : ImGuiCol_PlotHistogram);
        const ImU32 col_hovered = GetColorU32((plot_type == ImGuiPlotType_Lines) ? ImGuiCol_PlotLinesHovered : ImGuiCol_PlotHistogramHovered);

        for (int n = 0; n < res_w; n++)
        {
            const float t1 = t0 + t_step;
            const int v1_idx = (int)(t0 * item_count + 0.5f);
            IM_ASSERT(v1_idx >= 0 && v1_idx < values_count);
            const float v1 = values_getter(data, (v1_idx + values_offset + 1) % values_count);
            const ImVec2 tp1 = ImVec2( t1, 1.0f - ImSaturate((v1 - scale_min) * inv_scale) );

            // NB: Draw calls are merged together by the DrawList system. Still, we should render our batch are lower level to save a bit of CPU.
            ImVec2 pos0 = ImLerp(inner_bb.Min, inner_bb.Max, tp0);
            ImVec2 pos1 = ImLerp(inner_bb.Min, inner_bb.Max, (plot_type == ImGuiPlotType_Lines) ? tp1 : ImVec2(tp1.x, histogram_zero_line_t));
            if (plot_type == ImGuiPlotType_Lines)
            {
                window->DrawList->AddLine(pos0, pos1, v_hovered == v1_idx ? col_hovered : col_base);
            }
            else if (plot_type == ImGuiPlotType_Histogram)
            {
                if (pos1.x >= pos0.x + 2.0f)
                    pos1.x -= 1.0f;
                window->DrawList->AddRectFilled(pos0, pos1, v_hovered == v1_idx ? col_hovered : col_base);
            }

            t0 = t1;
            tp0 = tp1;
        }
    }

    // Text overlay
    if (overlay_text)
        RenderTextClipped(ImVec2(frame_bb.Min.x, frame_bb.Min.y + style.FramePadding.y), frame_bb.Max, overlay_text, NULL, NULL, ImVec2(0.5f,0.0f));

    if (label_size.x > 0.0f)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, inner_bb.Min.y), label);
}

struct ImGuiPlotArrayGetterData
{
    const float* Values;
    int Stride;

    ImGuiPlotArrayGetterData(const float* values, int stride) { Values = values; Stride = stride; }
};

static float Plot_ArrayGetter(void* data, int idx)
{
    ImGuiPlotArrayGetterData* plot_data = (ImGuiPlotArrayGetterData*)data;
    const float v = *(const float*)(const void*)((const unsigned char*)plot_data->Values + (size_t)idx * plot_data->Stride);
    return v;
}

void ImGui::PlotLines(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride)
{
    ImGuiPlotArrayGetterData data(values, stride);
    PlotEx(ImGuiPlotType_Lines, label, &Plot_ArrayGetter, (void*)&data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
}

void ImGui::PlotLines(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size)
{
    PlotEx(ImGuiPlotType_Lines, label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
}

void ImGui::PlotHistogram(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride)
{
    ImGuiPlotArrayGetterData data(values, stride);
    PlotEx(ImGuiPlotType_Histogram, label, &Plot_ArrayGetter, (void*)&data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
}

void ImGui::PlotHistogram(const char* label, float (*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size)
{
    PlotEx(ImGuiPlotType_Histogram, label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
}

// size_arg (for each axis) < 0.0f: align to end, 0.0f: auto, > 0.0f: specified size
void ImGui::ProgressBar(float fraction, const ImVec2& size_arg, const char* overlay)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;

    ImVec2 pos = window->DC.CursorPos;
    ImRect bb(pos, pos + CalcItemSize(size_arg, CalcItemWidth(), g.FontSize + style.FramePadding.y*2.0f));
    ItemSize(bb, style.FramePadding.y);
    if (!ItemAdd(bb, 0))
        return;

    // Render
    fraction = ImSaturate(fraction);
    RenderFrame(bb.Min, bb.Max, GetColorU32(ImGuiCol_FrameBg), true, style.FrameRounding);
    bb.Expand(ImVec2(-style.FrameBorderSize, -style.FrameBorderSize));
    const ImVec2 fill_br = ImVec2(ImLerp(bb.Min.x, bb.Max.x, fraction), bb.Max.y);
    RenderRectFilledRangeH(window->DrawList, bb, GetColorU32(ImGuiCol_PlotHistogram), 0.0f, fraction, style.FrameRounding);

    // Default displaying the fraction as percentage string, but user can override it
    char overlay_buf[32];
    if (!overlay)
    {
        ImFormatString(overlay_buf, IM_ARRAYSIZE(overlay_buf), "%.0f%%", fraction*100+0.01f);
        overlay = overlay_buf;
    }

    ImVec2 overlay_size = CalcTextSize(overlay, NULL);
    if (overlay_size.x > 0.0f)
        RenderTextClipped(ImVec2(ImClamp(fill_br.x + style.ItemSpacing.x, bb.Min.x, bb.Max.x - overlay_size.x - style.ItemInnerSpacing.x), bb.Min.y), bb.Max, overlay, NULL, &overlay_size, ImVec2(0.0f,0.5f), &bb);
}

bool ImGui::Checkbox(const char* label, bool* v)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);
    const ImVec2 label_size = CalcTextSize(label, NULL, true);

    const ImRect check_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(label_size.y + style.FramePadding.y*2, label_size.y + style.FramePadding.y*2)); // We want a square shape to we use Y twice
    ItemSize(check_bb, style.FramePadding.y);

    ImRect total_bb = check_bb;
    if (label_size.x > 0)
        SameLine(0, style.ItemInnerSpacing.x);
    const ImRect text_bb(window->DC.CursorPos + ImVec2(0,style.FramePadding.y), window->DC.CursorPos + ImVec2(0,style.FramePadding.y) + label_size);
    if (label_size.x > 0)
    {
        ItemSize(ImVec2(text_bb.GetWidth(), check_bb.GetHeight()), style.FramePadding.y);
        total_bb = ImRect(ImMin(check_bb.Min, text_bb.Min), ImMax(check_bb.Max, text_bb.Max));
    }

    if (!ItemAdd(total_bb, id))
        return false;

    bool hovered, held;
    bool pressed = ButtonBehavior(total_bb, id, &hovered, &held);
    if (pressed)
        *v = !(*v);

    RenderNavHighlight(total_bb, id);
    RenderFrame(check_bb.Min, check_bb.Max, GetColorU32((held && hovered) ? ImGuiCol_FrameBgActive : hovered ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg), true, style.FrameRounding);
    if (*v)
    {
        const float check_sz = ImMin(check_bb.GetWidth(), check_bb.GetHeight());
        const float pad = ImMax(1.0f, (float)(int)(check_sz / 6.0f));
        RenderCheckMark(check_bb.Min + ImVec2(pad,pad), GetColorU32(ImGuiCol_CheckMark), check_bb.GetWidth() - pad*2.0f);
    }

    if (g.LogEnabled)
        LogRenderedText(&text_bb.Min, *v ? "[x]" : "[ ]");
    if (label_size.x > 0.0f)
        RenderText(text_bb.Min, label);

    return pressed;
}

bool ImGui::CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value)
{
    bool v = ((*flags & flags_value) == flags_value);
    bool pressed = Checkbox(label, &v);
    if (pressed)
    {
        if (v)
            *flags |= flags_value;
        else
            *flags &= ~flags_value;
    }

    return pressed;
}

bool ImGui::RadioButton(const char* label, bool active)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);
    const ImVec2 label_size = CalcTextSize(label, NULL, true);

    const ImRect check_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(label_size.y + style.FramePadding.y*2-1, label_size.y + style.FramePadding.y*2-1));
    ItemSize(check_bb, style.FramePadding.y);

    ImRect total_bb = check_bb;
    if (label_size.x > 0)
        SameLine(0, style.ItemInnerSpacing.x);
    const ImRect text_bb(window->DC.CursorPos + ImVec2(0, style.FramePadding.y), window->DC.CursorPos + ImVec2(0, style.FramePadding.y) + label_size);
    if (label_size.x > 0)
    {
        ItemSize(ImVec2(text_bb.GetWidth(), check_bb.GetHeight()), style.FramePadding.y);
        total_bb.Add(text_bb);
    }

    if (!ItemAdd(total_bb, id))
        return false;

    ImVec2 center = check_bb.GetCenter();
    center.x = (float)(int)center.x + 0.5f;
    center.y = (float)(int)center.y + 0.5f;
    const float radius = check_bb.GetHeight() * 0.5f;

    bool hovered, held;
    bool pressed = ButtonBehavior(total_bb, id, &hovered, &held);

    RenderNavHighlight(total_bb, id);
    window->DrawList->AddCircleFilled(center, radius, GetColorU32((held && hovered) ? ImGuiCol_FrameBgActive : hovered ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg), 16);
    if (active)
    {
        const float check_sz = ImMin(check_bb.GetWidth(), check_bb.GetHeight());
        const float pad = ImMax(1.0f, (float)(int)(check_sz / 6.0f));
        window->DrawList->AddCircleFilled(center, radius-pad, GetColorU32(ImGuiCol_CheckMark), 16);
    }

    if (style.FrameBorderSize > 0.0f)
    {
        window->DrawList->AddCircle(center+ImVec2(1,1), radius, GetColorU32(ImGuiCol_BorderShadow), 16, style.FrameBorderSize);
        window->DrawList->AddCircle(center, radius, GetColorU32(ImGuiCol_Border), 16, style.FrameBorderSize);
    }

    if (g.LogEnabled)
        LogRenderedText(&text_bb.Min, active ? "(x)" : "( )");
    if (label_size.x > 0.0f)
        RenderText(text_bb.Min, label);

    return pressed;
}

bool ImGui::RadioButton(const char* label, int* v, int v_button)
{
    const bool pressed = RadioButton(label, *v == v_button);
    if (pressed)
    {
        *v = v_button;
    }
    return pressed;
}

static int InputTextCalcTextLenAndLineCount(const char* text_begin, const char** out_text_end)
{
    int line_count = 0;
    const char* s = text_begin;
    while (char c = *s++) // We are only matching for \n so we can ignore UTF-8 decoding
        if (c == '\n')
            line_count++;
    s--;
    if (s[0] != '\n' && s[0] != '\r')
        line_count++;
    *out_text_end = s;
    return line_count;
}

static ImVec2 InputTextCalcTextSizeW(const ImWchar* text_begin, const ImWchar* text_end, const ImWchar** remaining, ImVec2* out_offset, bool stop_on_new_line)
{
    ImFont* font = GImGui->Font;
    const float line_height = GImGui->FontSize;
    const float scale = line_height / font->FontSize;

    ImVec2 text_size = ImVec2(0,0);
    float line_width = 0.0f;

    const ImWchar* s = text_begin;
    while (s < text_end)
    {
        unsigned int c = (unsigned int)(*s++);
        if (c == '\n')
        {
            text_size.x = ImMax(text_size.x, line_width);
            text_size.y += line_height;
            line_width = 0.0f;
            if (stop_on_new_line)
                break;
            continue;
        }
        if (c == '\r')
            continue;

        const float char_width = font->GetCharAdvance((unsigned short)c) * scale;
        line_width += char_width;
    }

    if (text_size.x < line_width)
        text_size.x = line_width;

    if (out_offset)
        *out_offset = ImVec2(line_width, text_size.y + line_height);  // offset allow for the possibility of sitting after a trailing \n

    if (line_width > 0 || text_size.y == 0.0f)                        // whereas size.y will ignore the trailing \n
        text_size.y += line_height;

    if (remaining)
        *remaining = s;

    return text_size;
}

// Wrapper for stb_textedit.h to edit text (our wrapper is for: statically sized buffer, single-line, wchar characters. InputText converts between UTF-8 and wchar)
namespace ImGuiStb
{

static int     STB_TEXTEDIT_STRINGLEN(const STB_TEXTEDIT_STRING* obj)                             { return obj->CurLenW; }
static ImWchar STB_TEXTEDIT_GETCHAR(const STB_TEXTEDIT_STRING* obj, int idx)                      { return obj->Text[idx]; }
static float   STB_TEXTEDIT_GETWIDTH(STB_TEXTEDIT_STRING* obj, int line_start_idx, int char_idx)  { ImWchar c = obj->Text[line_start_idx+char_idx]; if (c == '\n') return STB_TEXTEDIT_GETWIDTH_NEWLINE; return GImGui->Font->GetCharAdvance(c) * (GImGui->FontSize / GImGui->Font->FontSize); }
static int     STB_TEXTEDIT_KEYTOTEXT(int key)                                                    { return key >= 0x10000 ? 0 : key; }
static ImWchar STB_TEXTEDIT_NEWLINE = '\n';
static void    STB_TEXTEDIT_LAYOUTROW(StbTexteditRow* r, STB_TEXTEDIT_STRING* obj, int line_start_idx)
{
    const ImWchar* text = obj->Text.Data;
    const ImWchar* text_remaining = NULL;
    const ImVec2 size = InputTextCalcTextSizeW(text + line_start_idx, text + obj->CurLenW, &text_remaining, NULL, true);
    r->x0 = 0.0f;
    r->x1 = size.x;
    r->baseline_y_delta = size.y;
    r->ymin = 0.0f;
    r->ymax = size.y;
    r->num_chars = (int)(text_remaining - (text + line_start_idx));
}

static bool is_separator(unsigned int c)                                        { return ImCharIsSpace(c) || c==',' || c==';' || c=='(' || c==')' || c=='{' || c=='}' || c=='[' || c==']' || c=='|'; }
static int  is_word_boundary_from_right(STB_TEXTEDIT_STRING* obj, int idx)      { return idx > 0 ? (is_separator( obj->Text[idx-1] ) && !is_separator( obj->Text[idx] ) ) : 1; }
static int  STB_TEXTEDIT_MOVEWORDLEFT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)   { idx--; while (idx >= 0 && !is_word_boundary_from_right(obj, idx)) idx--; return idx < 0 ? 0 : idx; }
#ifdef __APPLE__    // FIXME: Move setting to IO structure
static int  is_word_boundary_from_left(STB_TEXTEDIT_STRING* obj, int idx)       { return idx > 0 ? (!is_separator( obj->Text[idx-1] ) && is_separator( obj->Text[idx] ) ) : 1; }
static int  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)  { idx++; int len = obj->CurLenW; while (idx < len && !is_word_boundary_from_left(obj, idx)) idx++; return idx > len ? len : idx; }
#else
static int  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)  { idx++; int len = obj->CurLenW; while (idx < len && !is_word_boundary_from_right(obj, idx)) idx++; return idx > len ? len : idx; }
#endif
#define STB_TEXTEDIT_MOVEWORDLEFT   STB_TEXTEDIT_MOVEWORDLEFT_IMPL    // They need to be #define for stb_textedit.h
#define STB_TEXTEDIT_MOVEWORDRIGHT  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL

static void STB_TEXTEDIT_DELETECHARS(STB_TEXTEDIT_STRING* obj, int pos, int n)
{
    ImWchar* dst = obj->Text.Data + pos;

    // We maintain our buffer length in both UTF-8 and wchar formats
    obj->CurLenA -= ImTextCountUtf8BytesFromStr(dst, dst + n);
    obj->CurLenW -= n;

    // Offset remaining text
    const ImWchar* src = obj->Text.Data + pos + n;
    while (ImWchar c = *src++)
        *dst++ = c;
    *dst = '\0';
}

static bool STB_TEXTEDIT_INSERTCHARS(STB_TEXTEDIT_STRING* obj, int pos, const ImWchar* new_text, int new_text_len)
{
    const int text_len = obj->CurLenW;
    IM_ASSERT(pos <= text_len);
    if (new_text_len + text_len + 1 > obj->Text.Size)
        return false;

    const int new_text_len_utf8 = ImTextCountUtf8BytesFromStr(new_text, new_text + new_text_len);
    if (new_text_len_utf8 + obj->CurLenA + 1 > obj->BufSizeA)
        return false;

    ImWchar* text = obj->Text.Data;
    if (pos != text_len)
        memmove(text + pos + new_text_len, text + pos, (size_t)(text_len - pos) * sizeof(ImWchar));
    memcpy(text + pos, new_text, (size_t)new_text_len * sizeof(ImWchar));

    obj->CurLenW += new_text_len;
    obj->CurLenA += new_text_len_utf8;
    obj->Text[obj->CurLenW] = '\0';

    return true;
}

// We don't use an enum so we can build even with conflicting symbols (if another user of stb_textedit.h leak their STB_TEXTEDIT_K_* symbols)
#define STB_TEXTEDIT_K_LEFT         0x10000 // keyboard input to move cursor left
#define STB_TEXTEDIT_K_RIGHT        0x10001 // keyboard input to move cursor right
#define STB_TEXTEDIT_K_UP           0x10002 // keyboard input to move cursor up
#define STB_TEXTEDIT_K_DOWN         0x10003 // keyboard input to move cursor down
#define STB_TEXTEDIT_K_LINESTART    0x10004 // keyboard input to move cursor to start of line
#define STB_TEXTEDIT_K_LINEEND      0x10005 // keyboard input to move cursor to end of line
#define STB_TEXTEDIT_K_TEXTSTART    0x10006 // keyboard input to move cursor to start of text
#define STB_TEXTEDIT_K_TEXTEND      0x10007 // keyboard input to move cursor to end of text
#define STB_TEXTEDIT_K_DELETE       0x10008 // keyboard input to delete selection or character under cursor
#define STB_TEXTEDIT_K_BACKSPACE    0x10009 // keyboard input to delete selection or character left of cursor
#define STB_TEXTEDIT_K_UNDO         0x1000A // keyboard input to perform undo
#define STB_TEXTEDIT_K_REDO         0x1000B // keyboard input to perform redo
#define STB_TEXTEDIT_K_WORDLEFT     0x1000C // keyboard input to move cursor left one word
#define STB_TEXTEDIT_K_WORDRIGHT    0x1000D // keyboard input to move cursor right one word
#define STB_TEXTEDIT_K_SHIFT        0x20000

#define STB_TEXTEDIT_IMPLEMENTATION
#include "stb_textedit.h"

}

void ImGuiTextEditState::OnKeyPressed(int key)
{
    stb_textedit_key(this, &StbState, key);
    CursorFollow = true;
    CursorAnimReset();
}

// Public API to manipulate UTF-8 text
// We expose UTF-8 to the user (unlike the STB_TEXTEDIT_* functions which are manipulating wchar)
// FIXME: The existence of this rarely exercised code path is a bit of a nuisance.
void ImGuiTextEditCallbackData::DeleteChars(int pos, int bytes_count)
{
    IM_ASSERT(pos + bytes_count <= BufTextLen);
    char* dst = Buf + pos;
    const char* src = Buf + pos + bytes_count;
    while (char c = *src++)
        *dst++ = c;
    *dst = '\0';

    if (CursorPos + bytes_count >= pos)
        CursorPos -= bytes_count;
    else if (CursorPos >= pos)
        CursorPos = pos;
    SelectionStart = SelectionEnd = CursorPos;
    BufDirty = true;
    BufTextLen -= bytes_count;
}

void ImGuiTextEditCallbackData::InsertChars(int pos, const char* new_text, const char* new_text_end)
{
    const int new_text_len = new_text_end ? (int)(new_text_end - new_text) : (int)strlen(new_text);
    if (new_text_len + BufTextLen + 1 >= BufSize)
        return;

    if (BufTextLen != pos)
        memmove(Buf + pos + new_text_len, Buf + pos, (size_t)(BufTextLen - pos));
    memcpy(Buf + pos, new_text, (size_t)new_text_len * sizeof(char));
    Buf[BufTextLen + new_text_len] = '\0';

    if (CursorPos >= pos)
        CursorPos += new_text_len;
    SelectionStart = SelectionEnd = CursorPos;
    BufDirty = true;
    BufTextLen += new_text_len;
}

// Return false to discard a character.
static bool InputTextFilterCharacter(unsigned int* p_char, ImGuiInputTextFlags flags, ImGuiTextEditCallback callback, void* user_data)
{
    unsigned int c = *p_char;

    if (c < 128 && c != ' ' && !isprint((int)(c & 0xFF)))
    {
        bool pass = false;
        pass |= (c == '\n' && (flags & ImGuiInputTextFlags_Multiline));
        pass |= (c == '\t' && (flags & ImGuiInputTextFlags_AllowTabInput));
        if (!pass)
            return false;
    }

    if (c >= 0xE000 && c <= 0xF8FF) // Filter private Unicode range. I don't imagine anybody would want to input them. GLFW on OSX seems to send private characters for special keys like arrow keys.
        return false;

    if (flags & (ImGuiInputTextFlags_CharsDecimal | ImGuiInputTextFlags_CharsHexadecimal | ImGuiInputTextFlags_CharsUppercase | ImGuiInputTextFlags_CharsNoBlank | ImGuiInputTextFlags_CharsScientific))
    {
        if (flags & ImGuiInputTextFlags_CharsDecimal)
            if (!(c >= '0' && c <= '9') && (c != '.') && (c != '-') && (c != '+') && (c != '*') && (c != '/'))
                return false;

        if (flags & ImGuiInputTextFlags_CharsScientific)
            if (!(c >= '0' && c <= '9') && (c != '.') && (c != '-') && (c != '+') && (c != '*') && (c != '/') && (c != 'e') && (c != 'E'))
                return false;

        if (flags & ImGuiInputTextFlags_CharsHexadecimal)
            if (!(c >= '0' && c <= '9') && !(c >= 'a' && c <= 'f') && !(c >= 'A' && c <= 'F'))
                return false;

        if (flags & ImGuiInputTextFlags_CharsUppercase)
            if (c >= 'a' && c <= 'z')
                *p_char = (c += (unsigned int)('A'-'a'));

        if (flags & ImGuiInputTextFlags_CharsNoBlank)
            if (ImCharIsSpace(c))
                return false;
    }

    if (flags & ImGuiInputTextFlags_CallbackCharFilter)
    {
        ImGuiTextEditCallbackData callback_data;
        memset(&callback_data, 0, sizeof(ImGuiTextEditCallbackData));
        callback_data.EventFlag = ImGuiInputTextFlags_CallbackCharFilter;
        callback_data.EventChar = (ImWchar)c;
        callback_data.Flags = flags;
        callback_data.UserData = user_data;
        if (callback(&callback_data) != 0)
            return false;
        *p_char = callback_data.EventChar;
        if (!callback_data.EventChar)
            return false;
    }

    return true;
}

// Edit a string of text
// NB: when active, hold on a privately held copy of the text (and apply back to 'buf'). So changing 'buf' while active has no effect.
// FIXME: Rather messy function partly because we are doing UTF8 > u16 > UTF8 conversions on the go to more easily handle stb_textedit calls. Ideally we should stay in UTF-8 all the time. See https://github.com/nothings/stb/issues/188
bool ImGui::InputTextEx(const char* label, char* buf, int buf_size, const ImVec2& size_arg, ImGuiInputTextFlags flags, ImGuiTextEditCallback callback, void* user_data)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    IM_ASSERT(!((flags & ImGuiInputTextFlags_CallbackHistory) && (flags & ImGuiInputTextFlags_Multiline))); // Can't use both together (they both use up/down keys)
    IM_ASSERT(!((flags & ImGuiInputTextFlags_CallbackCompletion) && (flags & ImGuiInputTextFlags_AllowTabInput))); // Can't use both together (they both use tab key)

    ImGuiContext& g = *GImGui;
    const ImGuiIO& io = g.IO;
    const ImGuiStyle& style = g.Style;

    const bool is_multiline = (flags & ImGuiInputTextFlags_Multiline) != 0;
    const bool is_editable = (flags & ImGuiInputTextFlags_ReadOnly) == 0;
    const bool is_password = (flags & ImGuiInputTextFlags_Password) != 0;
    const bool is_undoable = (flags & ImGuiInputTextFlags_NoUndoRedo) == 0;

    if (is_multiline) // Open group before calling GetID() because groups tracks id created during their spawn
        BeginGroup();
    const ImGuiID id = window->GetID(label);
    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    ImVec2 size = CalcItemSize(size_arg, CalcItemWidth(), (is_multiline ? GetTextLineHeight() * 8.0f : label_size.y) + style.FramePadding.y*2.0f); // Arbitrary default of 8 lines high for multi-line
    const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + size);
    const ImRect total_bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? (style.ItemInnerSpacing.x + label_size.x) : 0.0f, 0.0f));

    ImGuiWindow* draw_window = window;
    if (is_multiline)
    {
        ItemAdd(total_bb, id, &frame_bb);
        if (!BeginChildFrame(id, frame_bb.GetSize()))
        {
            EndChildFrame();
            EndGroup();
            return false;
        }
        draw_window = GetCurrentWindow();
        size.x -= draw_window->ScrollbarSizes.x;
    }
    else
    {
        ItemSize(total_bb, style.FramePadding.y);
        if (!ItemAdd(total_bb, id, &frame_bb))
            return false;
    }
    const bool hovered = ItemHoverable(frame_bb, id);
    if (hovered)
        g.MouseCursor = ImGuiMouseCursor_TextInput;

    // Password pushes a temporary font with only a fallback glyph
    if (is_password)
    {
        const ImFontGlyph* glyph = g.Font->FindGlyph('*');
        ImFont* password_font = &g.InputTextPasswordFont;
        password_font->FontSize = g.Font->FontSize;
        password_font->Scale = g.Font->Scale;
        password_font->DisplayOffset = g.Font->DisplayOffset;
        password_font->Ascent = g.Font->Ascent;
        password_font->Descent = g.Font->Descent;
        password_font->ContainerAtlas = g.Font->ContainerAtlas;
        password_font->FallbackGlyph = glyph;
        password_font->FallbackAdvanceX = glyph->AdvanceX;
        IM_ASSERT(password_font->Glyphs.empty() && password_font->IndexAdvanceX.empty() && password_font->IndexLookup.empty());
        PushFont(password_font);
    }

    // NB: we are only allowed to access 'edit_state' if we are the active widget.
    ImGuiTextEditState& edit_state = g.InputTextState;

    const bool focus_requested = FocusableItemRegister(window, id, (flags & (ImGuiInputTextFlags_CallbackCompletion|ImGuiInputTextFlags_AllowTabInput)) == 0);    // Using completion callback disable keyboard tabbing
    const bool focus_requested_by_code = focus_requested && (window->FocusIdxAllCounter == window->FocusIdxAllRequestCurrent);
    const bool focus_requested_by_tab = focus_requested && !focus_requested_by_code;

    const bool user_clicked = hovered && io.MouseClicked[0];
    const bool user_scrolled = is_multiline && g.ActiveId == 0 && edit_state.Id == id && g.ActiveIdPreviousFrame == draw_window->GetIDNoKeepAlive("#SCROLLY");
    const bool user_nav_input_start = (g.ActiveId != id) && ((g.NavInputId == id) || (g.NavActivateId == id && g.NavInputSource == ImGuiInputSource_NavKeyboard));

    bool clear_active_id = false;

    bool select_all = (g.ActiveId != id) && ((flags & ImGuiInputTextFlags_AutoSelectAll) != 0 || user_nav_input_start) && (!is_multiline);
    if (focus_requested || user_clicked || user_scrolled || user_nav_input_start)
    {
        if (g.ActiveId != id)
        {
            // Start edition
            // Take a copy of the initial buffer value (both in original UTF-8 format and converted to wchar)
            // From the moment we focused we are ignoring the content of 'buf' (unless we are in read-only mode)
            const int prev_len_w = edit_state.CurLenW;
            edit_state.Text.resize(buf_size+1);        // wchar count <= UTF-8 count. we use +1 to make sure that .Data isn't NULL so it doesn't crash.
            edit_state.InitialText.resize(buf_size+1); // UTF-8. we use +1 to make sure that .Data isn't NULL so it doesn't crash.
            ImStrncpy(edit_state.InitialText.Data, buf, edit_state.InitialText.Size);
            const char* buf_end = NULL;
            edit_state.CurLenW = ImTextStrFromUtf8(edit_state.Text.Data, edit_state.Text.Size, buf, NULL, &buf_end);
            edit_state.CurLenA = (int)(buf_end - buf); // We can't get the result from ImFormatString() above because it is not UTF-8 aware. Here we'll cut off malformed UTF-8.
            edit_state.CursorAnimReset();

            // Preserve cursor position and undo/redo stack if we come back to same widget
            // FIXME: We should probably compare the whole buffer to be on the safety side. Comparing buf (utf8) and edit_state.Text (wchar).
            const bool recycle_state = (edit_state.Id == id) && (prev_len_w == edit_state.CurLenW);
            if (recycle_state)
            {
                // Recycle existing cursor/selection/undo stack but clamp position
                // Note a single mouse click will override the cursor/position immediately by calling stb_textedit_click handler.
                edit_state.CursorClamp();
            }
            else
            {
                edit_state.Id = id;
                edit_state.ScrollX = 0.0f;
                stb_textedit_initialize_state(&edit_state.StbState, !is_multiline);
                if (!is_multiline && focus_requested_by_code)
                    select_all = true;
            }
            if (flags & ImGuiInputTextFlags_AlwaysInsertMode)
                edit_state.StbState.insert_mode = true;
            if (!is_multiline && (focus_requested_by_tab || (user_clicked && io.KeyCtrl)))
                select_all = true;
        }
        SetActiveID(id, window);
        SetFocusID(id, window);
        FocusWindow(window);
        if (!is_multiline && !(flags & ImGuiInputTextFlags_CallbackHistory))
            g.ActiveIdAllowNavDirFlags |= ((1 << ImGuiDir_Up) | (1 << ImGuiDir_Down));
    }
    else if (io.MouseClicked[0])
    {
        // Release focus when we click outside
        clear_active_id = true;
    }

    bool value_changed = false;
    bool enter_pressed = false;

    if (g.ActiveId == id)
    {
        if (!is_editable && !g.ActiveIdIsJustActivated)
        {
            // When read-only we always use the live data passed to the function
            edit_state.Text.resize(buf_size+1);
            const char* buf_end = NULL;
            edit_state.CurLenW = ImTextStrFromUtf8(edit_state.Text.Data, edit_state.Text.Size, buf, NULL, &buf_end);
            edit_state.CurLenA = (int)(buf_end - buf);
            edit_state.CursorClamp();
        }

        edit_state.BufSizeA = buf_size;

        // Although we are active we don't prevent mouse from hovering other elements unless we are interacting right now with the widget.
        // Down the line we should have a cleaner library-wide concept of Selected vs Active.
        g.ActiveIdAllowOverlap = !io.MouseDown[0];
        g.WantTextInputNextFrame = 1;

        // Edit in progress
        const float mouse_x = (io.MousePos.x - frame_bb.Min.x - style.FramePadding.x) + edit_state.ScrollX;
        const float mouse_y = (is_multiline ? (io.MousePos.y - draw_window->DC.CursorPos.y - style.FramePadding.y) : (g.FontSize*0.5f));

        const bool osx_double_click_selects_words = io.OptMacOSXBehaviors;      // OS X style: Double click selects by word instead of selecting whole text
        if (select_all || (hovered && !osx_double_click_selects_words && io.MouseDoubleClicked[0]))
        {
            edit_state.SelectAll();
            edit_state.SelectedAllMouseLock = true;
        }
        else if (hovered && osx_double_click_selects_words && io.MouseDoubleClicked[0])
        {
            // Select a word only, OS X style (by simulating keystrokes)
            edit_state.OnKeyPressed(STB_TEXTEDIT_K_WORDLEFT);
            edit_state.OnKeyPressed(STB_TEXTEDIT_K_WORDRIGHT | STB_TEXTEDIT_K_SHIFT);
        }
        else if (io.MouseClicked[0] && !edit_state.SelectedAllMouseLock)
        {
            if (hovered)
            {
                stb_textedit_click(&edit_state, &edit_state.StbState, mouse_x, mouse_y);
                edit_state.CursorAnimReset();
            }
        }
        else if (io.MouseDown[0] && !edit_state.SelectedAllMouseLock && (io.MouseDelta.x != 0.0f || io.MouseDelta.y != 0.0f))
        {
            stb_textedit_drag(&edit_state, &edit_state.StbState, mouse_x, mouse_y);
            edit_state.CursorAnimReset();
            edit_state.CursorFollow = true;
        }
        if (edit_state.SelectedAllMouseLock && !io.MouseDown[0])
            edit_state.SelectedAllMouseLock = false;

        if (io.InputCharacters[0])
        {
            // Process text input (before we check for Return because using some IME will effectively send a Return?)
            // We ignore CTRL inputs, but need to allow ALT+CTRL as some keyboards (e.g. German) use AltGR (which _is_ Alt+Ctrl) to input certain characters.
            if (!(io.KeyCtrl && !io.KeyAlt) && is_editable && !user_nav_input_start)
                for (int n = 0; n < IM_ARRAYSIZE(io.InputCharacters) && io.InputCharacters[n]; n++)
                {
                    // Insert character if they pass filtering
                    unsigned int c = (unsigned int)io.InputCharacters[n];
                    if (InputTextFilterCharacter(&c, flags, callback, user_data))
                        edit_state.OnKeyPressed((int)c);
                }

            // Consume characters
            memset(g.IO.InputCharacters, 0, sizeof(g.IO.InputCharacters));
        }
    }

    bool cancel_edit = false;
    if (g.ActiveId == id && !g.ActiveIdIsJustActivated && !clear_active_id)
    {
        // Handle key-presses
        const int k_mask = (io.KeyShift ? STB_TEXTEDIT_K_SHIFT : 0);
        const bool is_shortcut_key_only = (io.OptMacOSXBehaviors ? (io.KeySuper && !io.KeyCtrl) : (io.KeyCtrl && !io.KeySuper)) && !io.KeyAlt && !io.KeyShift; // OS X style: Shortcuts using Cmd/Super instead of Ctrl
        const bool is_wordmove_key_down = io.OptMacOSXBehaviors ? io.KeyAlt : io.KeyCtrl;                     // OS X style: Text editing cursor movement using Alt instead of Ctrl
        const bool is_startend_key_down = io.OptMacOSXBehaviors && io.KeySuper && !io.KeyCtrl && !io.KeyAlt;  // OS X style: Line/Text Start and End using Cmd+Arrows instead of Home/End
        const bool is_ctrl_key_only = io.KeyCtrl && !io.KeyShift && !io.KeyAlt && !io.KeySuper;
        const bool is_shift_key_only = io.KeyShift && !io.KeyCtrl && !io.KeyAlt && !io.KeySuper;

        const bool is_cut   = ((is_shortcut_key_only && IsKeyPressedMap(ImGuiKey_X)) || (is_shift_key_only && IsKeyPressedMap(ImGuiKey_Delete))) && is_editable && !is_password && (!is_multiline || edit_state.HasSelection());
        const bool is_copy  = ((is_shortcut_key_only && IsKeyPressedMap(ImGuiKey_C)) || (is_ctrl_key_only  && IsKeyPressedMap(ImGuiKey_Insert))) && !is_password && (!is_multiline || edit_state.HasSelection());
        const bool is_paste = ((is_shortcut_key_only && IsKeyPressedMap(ImGuiKey_V)) || (is_shift_key_only && IsKeyPressedMap(ImGuiKey_Insert))) && is_editable;

        if (IsKeyPressedMap(ImGuiKey_LeftArrow))                        { edit_state.OnKeyPressed((is_startend_key_down ? STB_TEXTEDIT_K_LINESTART : is_wordmove_key_down ? STB_TEXTEDIT_K_WORDLEFT : STB_TEXTEDIT_K_LEFT) | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_RightArrow))                  { edit_state.OnKeyPressed((is_startend_key_down ? STB_TEXTEDIT_K_LINEEND : is_wordmove_key_down ? STB_TEXTEDIT_K_WORDRIGHT : STB_TEXTEDIT_K_RIGHT) | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_UpArrow) && is_multiline)     { if (io.KeyCtrl) SetWindowScrollY(draw_window, ImMax(draw_window->Scroll.y - g.FontSize, 0.0f)); else edit_state.OnKeyPressed((is_startend_key_down ? STB_TEXTEDIT_K_TEXTSTART : STB_TEXTEDIT_K_UP) | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_DownArrow) && is_multiline)   { if (io.KeyCtrl) SetWindowScrollY(draw_window, ImMin(draw_window->Scroll.y + g.FontSize, GetScrollMaxY())); else edit_state.OnKeyPressed((is_startend_key_down ? STB_TEXTEDIT_K_TEXTEND : STB_TEXTEDIT_K_DOWN) | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_Home))                        { edit_state.OnKeyPressed(io.KeyCtrl ? STB_TEXTEDIT_K_TEXTSTART | k_mask : STB_TEXTEDIT_K_LINESTART | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_End))                         { edit_state.OnKeyPressed(io.KeyCtrl ? STB_TEXTEDIT_K_TEXTEND | k_mask : STB_TEXTEDIT_K_LINEEND | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_Delete) && is_editable)       { edit_state.OnKeyPressed(STB_TEXTEDIT_K_DELETE | k_mask); }
        else if (IsKeyPressedMap(ImGuiKey_Backspace) && is_editable)
        {
            if (!edit_state.HasSelection())
            {
                if (is_wordmove_key_down) edit_state.OnKeyPressed(STB_TEXTEDIT_K_WORDLEFT|STB_TEXTEDIT_K_SHIFT);
                else if (io.OptMacOSXBehaviors && io.KeySuper && !io.KeyAlt && !io.KeyCtrl) edit_state.OnKeyPressed(STB_TEXTEDIT_K_LINESTART|STB_TEXTEDIT_K_SHIFT);
            }
            edit_state.OnKeyPressed(STB_TEXTEDIT_K_BACKSPACE | k_mask);
        }
        else if (IsKeyPressedMap(ImGuiKey_Enter))
        {
            bool ctrl_enter_for_new_line = (flags & ImGuiInputTextFlags_CtrlEnterForNewLine) != 0;
            if (!is_multiline || (ctrl_enter_for_new_line && !io.KeyCtrl) || (!ctrl_enter_for_new_line && io.KeyCtrl))
            {
                enter_pressed = clear_active_id = true;
            }
            else if (is_editable)
            {
                unsigned int c = '\n'; // Insert new line
                if (InputTextFilterCharacter(&c, flags, callback, user_data))
                    edit_state.OnKeyPressed((int)c);
            }
        }
        else if ((flags & ImGuiInputTextFlags_AllowTabInput) && IsKeyPressedMap(ImGuiKey_Tab) && !io.KeyCtrl && !io.KeyShift && !io.KeyAlt && is_editable)
        {
            unsigned int c = '\t'; // Insert TAB
            if (InputTextFilterCharacter(&c, flags, callback, user_data))
                edit_state.OnKeyPressed((int)c);
        }
        else if (IsKeyPressedMap(ImGuiKey_Escape))                                                       { clear_active_id = cancel_edit = true; }
        else if (is_shortcut_key_only && IsKeyPressedMap(ImGuiKey_Z) && is_editable && is_undoable)      { edit_state.OnKeyPressed(STB_TEXTEDIT_K_UNDO); edit_state.ClearSelection(); }
        else if (is_shortcut_key_only && IsKeyPressedMap(ImGuiKey_Y) && is_editable && is_undoable)      { edit_state.OnKeyPressed(STB_TEXTEDIT_K_REDO); edit_state.ClearSelection(); }
        else if (is_shortcut_key_only && IsKeyPressedMap(ImGuiKey_A))                                    { edit_state.SelectAll(); edit_state.CursorFollow = true; }
        else if (is_cut || is_copy)
        {
            // Cut, Copy
            if (io.SetClipboardTextFn)
            {
                const int ib = edit_state.HasSelection() ? ImMin(edit_state.StbState.select_start, edit_state.StbState.select_end) : 0;
                const int ie = edit_state.HasSelection() ? ImMax(edit_state.StbState.select_start, edit_state.StbState.select_end) : edit_state.CurLenW;
                edit_state.TempTextBuffer.resize((ie-ib) * 4 + 1);
                ImTextStrToUtf8(edit_state.TempTextBuffer.Data, edit_state.TempTextBuffer.Size, edit_state.Text.Data+ib, edit_state.Text.Data+ie);
                SetClipboardText(edit_state.TempTextBuffer.Data);
            }

            if (is_cut)
            {
                if (!edit_state.HasSelection())
                    edit_state.SelectAll();
                edit_state.CursorFollow = true;
                stb_textedit_cut(&edit_state, &edit_state.StbState);
            }
        }
        else if (is_paste)
        {
            // Paste
            if (const char* clipboard = GetClipboardText())
            {
                // Filter pasted buffer
                const int clipboard_len = (int)strlen(clipboard);
                ImWchar* clipboard_filtered = (ImWchar*)ImGui::MemAlloc((clipboard_len+1) * sizeof(ImWchar));
                int clipboard_filtered_len = 0;
                for (const char* s = clipboard; *s; )
                {
                    unsigned int c;
                    s += ImTextCharFromUtf8(&c, s, NULL);
                    if (c == 0)
                        break;
                    if (c >= 0x10000 || !InputTextFilterCharacter(&c, flags, callback, user_data))
                        continue;
                    clipboard_filtered[clipboard_filtered_len++] = (ImWchar)c;
                }
                clipboard_filtered[clipboard_filtered_len] = 0;
                if (clipboard_filtered_len > 0) // If everything was filtered, ignore the pasting operation
                {
                    stb_textedit_paste(&edit_state, &edit_state.StbState, clipboard_filtered, clipboard_filtered_len);
                    edit_state.CursorFollow = true;
                }
                ImGui::MemFree(clipboard_filtered);
            }
        }
    }

    if (g.ActiveId == id)
    {
        if (cancel_edit)
        {
            // Restore initial value
            if (is_editable)
            {
                ImStrncpy(buf, edit_state.InitialText.Data, buf_size);
                value_changed = true;
            }
        }

        // When using 'ImGuiInputTextFlags_EnterReturnsTrue' as a special case we reapply the live buffer back to the input buffer before clearing ActiveId, even though strictly speaking it wasn't modified on this frame.
        // If we didn't do that, code like InputInt() with ImGuiInputTextFlags_EnterReturnsTrue would fail. Also this allows the user to use InputText() with ImGuiInputTextFlags_EnterReturnsTrue without maintaining any user-side storage.
        bool apply_edit_back_to_user_buffer = !cancel_edit || (enter_pressed && (flags & ImGuiInputTextFlags_EnterReturnsTrue) != 0);
        if (apply_edit_back_to_user_buffer)
        {
            // Apply new value immediately - copy modified buffer back
            // Note that as soon as the input box is active, the in-widget value gets priority over any underlying modification of the input buffer
            // FIXME: We actually always render 'buf' when calling DrawList->AddText, making the comment above incorrect.
            // FIXME-OPT: CPU waste to do this every time the widget is active, should mark dirty state from the stb_textedit callbacks.
            if (is_editable)
            {
                edit_state.TempTextBuffer.resize(edit_state.Text.Size * 4);
                ImTextStrToUtf8(edit_state.TempTextBuffer.Data, edit_state.TempTextBuffer.Size, edit_state.Text.Data, NULL);
            }

            // User callback
            if ((flags & (ImGuiInputTextFlags_CallbackCompletion | ImGuiInputTextFlags_CallbackHistory | ImGuiInputTextFlags_CallbackAlways)) != 0)
            {
                IM_ASSERT(callback != NULL);

                // The reason we specify the usage semantic (Completion/History) is that Completion needs to disable keyboard TABBING at the moment.
                ImGuiInputTextFlags event_flag = 0;
                ImGuiKey event_key = ImGuiKey_COUNT;
                if ((flags & ImGuiInputTextFlags_CallbackCompletion) != 0 && IsKeyPressedMap(ImGuiKey_Tab))
                {
                    event_flag = ImGuiInputTextFlags_CallbackCompletion;
                    event_key = ImGuiKey_Tab;
                }
                else if ((flags & ImGuiInputTextFlags_CallbackHistory) != 0 && IsKeyPressedMap(ImGuiKey_UpArrow))
                {
                    event_flag = ImGuiInputTextFlags_CallbackHistory;
                    event_key = ImGuiKey_UpArrow;
                }
                else if ((flags & ImGuiInputTextFlags_CallbackHistory) != 0 && IsKeyPressedMap(ImGuiKey_DownArrow))
                {
                    event_flag = ImGuiInputTextFlags_CallbackHistory;
                    event_key = ImGuiKey_DownArrow;
                }
                else if (flags & ImGuiInputTextFlags_CallbackAlways)
                    event_flag = ImGuiInputTextFlags_CallbackAlways;

                if (event_flag)
                {
                    ImGuiTextEditCallbackData callback_data;
                    memset(&callback_data, 0, sizeof(ImGuiTextEditCallbackData));
                    callback_data.EventFlag = event_flag;
                    callback_data.Flags = flags;
                    callback_data.UserData = user_data;
                    callback_data.ReadOnly = !is_editable;

                    callback_data.EventKey = event_key;
                    callback_data.Buf = edit_state.TempTextBuffer.Data;
                    callback_data.BufTextLen = edit_state.CurLenA;
                    callback_data.BufSize = edit_state.BufSizeA;
                    callback_data.BufDirty = false;

                    // We have to convert from wchar-positions to UTF-8-positions, which can be pretty slow (an incentive to ditch the ImWchar buffer, see https://github.com/nothings/stb/issues/188)
                    ImWchar* text = edit_state.Text.Data;
                    const int utf8_cursor_pos = callback_data.CursorPos = ImTextCountUtf8BytesFromStr(text, text + edit_state.StbState.cursor);
                    const int utf8_selection_start = callback_data.SelectionStart = ImTextCountUtf8BytesFromStr(text, text + edit_state.StbState.select_start);
                    const int utf8_selection_end = callback_data.SelectionEnd = ImTextCountUtf8BytesFromStr(text, text + edit_state.StbState.select_end);

                    // Call user code
                    callback(&callback_data);

                    // Read back what user may have modified
                    IM_ASSERT(callback_data.Buf == edit_state.TempTextBuffer.Data);  // Invalid to modify those fields
                    IM_ASSERT(callback_data.BufSize == edit_state.BufSizeA);
                    IM_ASSERT(callback_data.Flags == flags);
                    if (callback_data.CursorPos != utf8_cursor_pos)            edit_state.StbState.cursor = ImTextCountCharsFromUtf8(callback_data.Buf, callback_data.Buf + callback_data.CursorPos);
                    if (callback_data.SelectionStart != utf8_selection_start)  edit_state.StbState.select_start = ImTextCountCharsFromUtf8(callback_data.Buf, callback_data.Buf + callback_data.SelectionStart);
                    if (callback_data.SelectionEnd != utf8_selection_end)      edit_state.StbState.select_end = ImTextCountCharsFromUtf8(callback_data.Buf, callback_data.Buf + callback_data.SelectionEnd);
                    if (callback_data.BufDirty)
                    {
                        IM_ASSERT(callback_data.BufTextLen == (int)strlen(callback_data.Buf)); // You need to maintain BufTextLen if you change the text!
                        edit_state.CurLenW = ImTextStrFromUtf8(edit_state.Text.Data, edit_state.Text.Size, callback_data.Buf, NULL);
                        edit_state.CurLenA = callback_data.BufTextLen;  // Assume correct length and valid UTF-8 from user, saves us an extra strlen()
                        edit_state.CursorAnimReset();
                    }
                }
            }

            // Copy back to user buffer
            if (is_editable && strcmp(edit_state.TempTextBuffer.Data, buf) != 0)
            {
                ImStrncpy(buf, edit_state.TempTextBuffer.Data, buf_size);
                value_changed = true;
            }
        }
    }

    // Release active ID at the end of the function (so e.g. pressing Return still does a final application of the value)
    if (clear_active_id && g.ActiveId == id)
        ClearActiveID();

    // Render
    // Select which buffer we are going to display. When ImGuiInputTextFlags_NoLiveEdit is set 'buf' might still be the old value. We set buf to NULL to prevent accidental usage from now on.
    const char* buf_display = (g.ActiveId == id && is_editable) ? edit_state.TempTextBuffer.Data : buf; buf = NULL; 

    RenderNavHighlight(frame_bb, id);
    if (!is_multiline)
        RenderFrame(frame_bb.Min, frame_bb.Max, GetColorU32(ImGuiCol_FrameBg), true, style.FrameRounding);

    const ImVec4 clip_rect(frame_bb.Min.x, frame_bb.Min.y, frame_bb.Min.x + size.x, frame_bb.Min.y + size.y); // Not using frame_bb.Max because we have adjusted size
    ImVec2 render_pos = is_multiline ? draw_window->DC.CursorPos : frame_bb.Min + style.FramePadding;
    ImVec2 text_size(0.f, 0.f);
    const bool is_currently_scrolling = (edit_state.Id == id && is_multiline && g.ActiveId == draw_window->GetIDNoKeepAlive("#SCROLLY"));
    if (g.ActiveId == id || is_currently_scrolling)
    {
        edit_state.CursorAnim += io.DeltaTime;

        // This is going to be messy. We need to:
        // - Display the text (this alone can be more easily clipped)
        // - Handle scrolling, highlight selection, display cursor (those all requires some form of 1d->2d cursor position calculation)
        // - Measure text height (for scrollbar)
        // We are attempting to do most of that in **one main pass** to minimize the computation cost (non-negligible for large amount of text) + 2nd pass for selection rendering (we could merge them by an extra refactoring effort)
        // FIXME: This should occur on buf_display but we'd need to maintain cursor/select_start/select_end for UTF-8.
        const ImWchar* text_begin = edit_state.Text.Data;
        ImVec2 cursor_offset, select_start_offset;

        {
            // Count lines + find lines numbers straddling 'cursor' and 'select_start' position.
            const ImWchar* searches_input_ptr[2];
            searches_input_ptr[0] = text_begin + edit_state.StbState.cursor;
            searches_input_ptr[1] = NULL;
            int searches_remaining = 1;
            int searches_result_line_number[2] = { -1, -999 };
            if (edit_state.StbState.select_start != edit_state.StbState.select_end)
            {
                searches_input_ptr[1] = text_begin + ImMin(edit_state.StbState.select_start, edit_state.StbState.select_end);
                searches_result_line_number[1] = -1;
                searches_remaining++;
            }

            // Iterate all lines to find our line numbers
            // In multi-line mode, we never exit the loop until all lines are counted, so add one extra to the searches_remaining counter.
            searches_remaining += is_multiline ? 1 : 0;
            int line_count = 0;
            for (const ImWchar* s = text_begin; *s != 0; s++)
                if (*s == '\n')
                {
                    line_count++;
                    if (searches_result_line_number[0] == -1 && s >= searches_input_ptr[0]) { searches_result_line_number[0] = line_count; if (--searches_remaining <= 0) break; }
                    if (searches_result_line_number[1] == -1 && s >= searches_input_ptr[1]) { searches_result_line_number[1] = line_count; if (--searches_remaining <= 0) break; }
                }
            line_count++;
            if (searches_result_line_number[0] == -1) searches_result_line_number[0] = line_count;
            if (searches_result_line_number[1] == -1) searches_result_line_number[1] = line_count;

            // Calculate 2d position by finding the beginning of the line and measuring distance
            cursor_offset.x = InputTextCalcTextSizeW(ImStrbolW(searches_input_ptr[0], text_begin), searches_input_ptr[0]).x;
            cursor_offset.y = searches_result_line_number[0] * g.FontSize;
            if (searches_result_line_number[1] >= 0)
            {
                select_start_offset.x = InputTextCalcTextSizeW(ImStrbolW(searches_input_ptr[1], text_begin), searches_input_ptr[1]).x;
                select_start_offset.y = searches_result_line_number[1] * g.FontSize;
            }

            // Store text height (note that we haven't calculated text width at all, see GitHub issues #383, #1224)
            if (is_multiline)
                text_size = ImVec2(size.x, line_count * g.FontSize);
        }

        // Scroll
        if (edit_state.CursorFollow)
        {
            // Horizontal scroll in chunks of quarter width
            if (!(flags & ImGuiInputTextFlags_NoHorizontalScroll))
            {
                const float scroll_increment_x = size.x * 0.25f;
                if (cursor_offset.x < edit_state.ScrollX)
                    edit_state.ScrollX = (float)(int)ImMax(0.0f, cursor_offset.x - scroll_increment_x);
                else if (cursor_offset.x - size.x >= edit_state.ScrollX)
                    edit_state.ScrollX = (float)(int)(cursor_offset.x - size.x + scroll_increment_x);
            }
            else
            {
                edit_state.ScrollX = 0.0f;
            }

            // Vertical scroll
            if (is_multiline)
            {
                float scroll_y = draw_window->Scroll.y;
                if (cursor_offset.y - g.FontSize < scroll_y)
                    scroll_y = ImMax(0.0f, cursor_offset.y - g.FontSize);
                else if (cursor_offset.y - size.y >= scroll_y)
                    scroll_y = cursor_offset.y - size.y;
                draw_window->DC.CursorPos.y += (draw_window->Scroll.y - scroll_y);   // To avoid a frame of lag
                draw_window->Scroll.y = scroll_y;
                render_pos.y = draw_window->DC.CursorPos.y;
            }
        }
        edit_state.CursorFollow = false;
        const ImVec2 render_scroll = ImVec2(edit_state.ScrollX, 0.0f);

        // Draw selection
        if (edit_state.StbState.select_start != edit_state.StbState.select_end)
        {
            const ImWchar* text_selected_begin = text_begin + ImMin(edit_state.StbState.select_start, edit_state.StbState.select_end);
            const ImWchar* text_selected_end = text_begin + ImMax(edit_state.StbState.select_start, edit_state.StbState.select_end);

            float bg_offy_up = is_multiline ? 0.0f : -1.0f;    // FIXME: those offsets should be part of the style? they don't play so well with multi-line selection.
            float bg_offy_dn = is_multiline ? 0.0f : 2.0f;
            ImU32 bg_color = GetColorU32(ImGuiCol_TextSelectedBg);
            ImVec2 rect_pos = render_pos + select_start_offset - render_scroll;
            for (const ImWchar* p = text_selected_begin; p < text_selected_end; )
            {
                if (rect_pos.y > clip_rect.w + g.FontSize)
                    break;
                if (rect_pos.y < clip_rect.y)
                {
                    while (p < text_selected_end)
                        if (*p++ == '\n')
                            break;
                }
                else
                {
                    ImVec2 rect_size = InputTextCalcTextSizeW(p, text_selected_end, &p, NULL, true);
                    if (rect_size.x <= 0.0f) rect_size.x = (float)(int)(g.Font->GetCharAdvance((unsigned short)' ') * 0.50f); // So we can see selected empty lines
                    ImRect rect(rect_pos + ImVec2(0.0f, bg_offy_up - g.FontSize), rect_pos +ImVec2(rect_size.x, bg_offy_dn));
                    rect.ClipWith(clip_rect);
                    if (rect.Overlaps(clip_rect))
                        draw_window->DrawList->AddRectFilled(rect.Min, rect.Max, bg_color);
                }
                rect_pos.x = render_pos.x - render_scroll.x;
                rect_pos.y += g.FontSize;
            }
        }

        draw_window->DrawList->AddText(g.Font, g.FontSize, render_pos - render_scroll, GetColorU32(ImGuiCol_Text), buf_display, buf_display + edit_state.CurLenA, 0.0f, is_multiline ? NULL : &clip_rect);

        // Draw blinking cursor
        bool cursor_is_visible = (!g.IO.OptCursorBlink) || (g.InputTextState.CursorAnim <= 0.0f) || fmodf(g.InputTextState.CursorAnim, 1.20f) <= 0.80f;
        ImVec2 cursor_screen_pos = render_pos + cursor_offset - render_scroll;
        ImRect cursor_screen_rect(cursor_screen_pos.x, cursor_screen_pos.y-g.FontSize+0.5f, cursor_screen_pos.x+1.0f, cursor_screen_pos.y-1.5f);
        if (cursor_is_visible && cursor_screen_rect.Overlaps(clip_rect))
            draw_window->DrawList->AddLine(cursor_screen_rect.Min, cursor_screen_rect.GetBL(), GetColorU32(ImGuiCol_Text));

        // Notify OS of text input position for advanced IME (-1 x offset so that Windows IME can cover our cursor. Bit of an extra nicety.)
        if (is_editable)
            g.OsImePosRequest = ImVec2(cursor_screen_pos.x - 1, cursor_screen_pos.y - g.FontSize);
    }
    else
    {
        // Render text only
        const char* buf_end = NULL;
        if (is_multiline)
            text_size = ImVec2(size.x, InputTextCalcTextLenAndLineCount(buf_display, &buf_end) * g.FontSize); // We don't need width
        draw_window->DrawList->AddText(g.Font, g.FontSize, render_pos, GetColorU32(ImGuiCol_Text), buf_display, buf_end, 0.0f, is_multiline ? NULL : &clip_rect);
    }

    if (is_multiline)
    {
        Dummy(text_size + ImVec2(0.0f, g.FontSize)); // Always add room to scroll an extra line
        EndChildFrame();
        EndGroup();
    }

    if (is_password)
        PopFont();

    // Log as text
    if (g.LogEnabled && !is_password)
        LogRenderedText(&render_pos, buf_display, NULL);

    if (label_size.x > 0)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

    if ((flags & ImGuiInputTextFlags_EnterReturnsTrue) != 0)
        return enter_pressed;
    else
        return value_changed;
}

bool ImGui::InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiTextEditCallback callback, void* user_data)
{
    IM_ASSERT(!(flags & ImGuiInputTextFlags_Multiline)); // call InputTextMultiline()
    return InputTextEx(label, buf, (int)buf_size, ImVec2(0,0), flags, callback, user_data);
}

bool ImGui::InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size, ImGuiInputTextFlags flags, ImGuiTextEditCallback callback, void* user_data)
{
    return InputTextEx(label, buf, (int)buf_size, size, flags | ImGuiInputTextFlags_Multiline, callback, user_data);
}

// NB: scalar_format here must be a simple "%xx" format string with no prefix/suffix (unlike the Drag/Slider functions "display_format" argument)
bool ImGui::InputScalarEx(const char* label, ImGuiDataType data_type, void* data_ptr, void* step_ptr, void* step_fast_ptr, const char* scalar_format, ImGuiInputTextFlags extra_flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImVec2 label_size = CalcTextSize(label, NULL, true);

    BeginGroup();
    PushID(label);
    const ImVec2 button_sz = ImVec2(GetFrameHeight(), GetFrameHeight());
    if (step_ptr)
        PushItemWidth(ImMax(1.0f, CalcItemWidth() - (button_sz.x + style.ItemInnerSpacing.x)*2));

    char buf[64];
    DataTypeFormatString(data_type, data_ptr, scalar_format, buf, IM_ARRAYSIZE(buf));

    bool value_changed = false;
    if ((extra_flags & (ImGuiInputTextFlags_CharsHexadecimal | ImGuiInputTextFlags_CharsScientific)) == 0)
        extra_flags |= ImGuiInputTextFlags_CharsDecimal;
    extra_flags |= ImGuiInputTextFlags_AutoSelectAll;
    if (InputText("", buf, IM_ARRAYSIZE(buf), extra_flags)) // PushId(label) + "" gives us the expected ID from outside point of view
        value_changed = DataTypeApplyOpFromText(buf, GImGui->InputTextState.InitialText.begin(), data_type, data_ptr, scalar_format);

    // Step buttons
    if (step_ptr)
    {
        PopItemWidth();
        SameLine(0, style.ItemInnerSpacing.x);
        if (ButtonEx("-", button_sz, ImGuiButtonFlags_Repeat | ImGuiButtonFlags_DontClosePopups))
        {
            DataTypeApplyOp(data_type, '-', data_ptr, data_ptr, g.IO.KeyCtrl && step_fast_ptr ? step_fast_ptr : step_ptr);
            value_changed = true;
        }
        SameLine(0, style.ItemInnerSpacing.x);
        if (ButtonEx("+", button_sz, ImGuiButtonFlags_Repeat | ImGuiButtonFlags_DontClosePopups))
        {
            DataTypeApplyOp(data_type, '+', data_ptr, data_ptr, g.IO.KeyCtrl && step_fast_ptr ? step_fast_ptr : step_ptr);
            value_changed = true;
        }
    }
    PopID();

    if (label_size.x > 0)
    {
        SameLine(0, style.ItemInnerSpacing.x);
        RenderText(ImVec2(window->DC.CursorPos.x, window->DC.CursorPos.y + style.FramePadding.y), label);
        ItemSize(label_size, style.FramePadding.y);
    }
    EndGroup();

    return value_changed;
}

bool ImGui::InputFloat(const char* label, float* v, float step, float step_fast, int decimal_precision, ImGuiInputTextFlags extra_flags)
{
    extra_flags |= ImGuiInputTextFlags_CharsScientific;
    if (decimal_precision < 0)
    {
        // Ideally we'd have a minimum decimal precision of 1 to visually denote that this is a float, while hiding non-significant digits? %f doesn't have a minimum of 1
        return InputScalarEx(label, ImGuiDataType_Float, (void*)v, (void*)(step>0.0f ? &step : NULL), (void*)(step_fast>0.0f ? &step_fast : NULL), "%f", extra_flags);
    }
    else
    {
        char display_format[16];
        ImFormatString(display_format, IM_ARRAYSIZE(display_format), "%%.%df", decimal_precision);
        return InputScalarEx(label, ImGuiDataType_Float, (void*)v, (void*)(step>0.0f ? &step : NULL), (void*)(step_fast>0.0f ? &step_fast : NULL), display_format, extra_flags);
    }
}

bool ImGui::InputDouble(const char* label, double* v, double step, double step_fast, const char* display_format, ImGuiInputTextFlags extra_flags)
{
    extra_flags |= ImGuiInputTextFlags_CharsScientific;
    return InputScalarEx(label, ImGuiDataType_Double, (void*)v, (void*)(step>0.0 ? &step : NULL), (void*)(step_fast>0.0 ? &step_fast : NULL), display_format, extra_flags);
}

bool ImGui::InputInt(const char* label, int* v, int step, int step_fast, ImGuiInputTextFlags extra_flags)
{
    // Hexadecimal input provided as a convenience but the flag name is awkward. Typically you'd use InputText() to parse your own data, if you want to handle prefixes.
    const char* scalar_format = (extra_flags & ImGuiInputTextFlags_CharsHexadecimal) ? "%08X" : "%d";
    return InputScalarEx(label, ImGuiDataType_Int, (void*)v, (void*)(step>0 ? &step : NULL), (void*)(step_fast>0 ? &step_fast : NULL), scalar_format, extra_flags);
}

bool ImGui::InputFloatN(const char* label, float* v, int components, int decimal_precision, ImGuiInputTextFlags extra_flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    bool value_changed = false;
    BeginGroup();
    PushID(label);
    PushMultiItemsWidths(components);
    for (int i = 0; i < components; i++)
    {
        PushID(i);
        value_changed |= InputFloat("##v", &v[i], 0, 0, decimal_precision, extra_flags);
        SameLine(0, g.Style.ItemInnerSpacing.x);
        PopID();
        PopItemWidth();
    }
    PopID();

    TextUnformatted(label, FindRenderedTextEnd(label));
    EndGroup();

    return value_changed;
}

bool ImGui::InputFloat2(const char* label, float v[2], int decimal_precision, ImGuiInputTextFlags extra_flags)
{
    return InputFloatN(label, v, 2, decimal_precision, extra_flags);
}

bool ImGui::InputFloat3(const char* label, float v[3], int decimal_precision, ImGuiInputTextFlags extra_flags)
{
    return InputFloatN(label, v, 3, decimal_precision, extra_flags);
}

bool ImGui::InputFloat4(const char* label, float v[4], int decimal_precision, ImGuiInputTextFlags extra_flags)
{
    return InputFloatN(label, v, 4, decimal_precision, extra_flags);
}

bool ImGui::InputIntN(const char* label, int* v, int components, ImGuiInputTextFlags extra_flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    bool value_changed = false;
    BeginGroup();
    PushID(label);
    PushMultiItemsWidths(components);
    for (int i = 0; i < components; i++)
    {
        PushID(i);
        value_changed |= InputInt("##v", &v[i], 0, 0, extra_flags);
        SameLine(0, g.Style.ItemInnerSpacing.x);
        PopID();
        PopItemWidth();
    }
    PopID();

    TextUnformatted(label, FindRenderedTextEnd(label));
    EndGroup();

    return value_changed;
}

bool ImGui::InputInt2(const char* label, int v[2], ImGuiInputTextFlags extra_flags)
{
    return InputIntN(label, v, 2, extra_flags);
}

bool ImGui::InputInt3(const char* label, int v[3], ImGuiInputTextFlags extra_flags)
{
    return InputIntN(label, v, 3, extra_flags);
}

bool ImGui::InputInt4(const char* label, int v[4], ImGuiInputTextFlags extra_flags)
{
    return InputIntN(label, v, 4, extra_flags);
}

static float CalcMaxPopupHeightFromItemCount(int items_count)
{
    ImGuiContext& g = *GImGui;
    if (items_count <= 0)
        return FLT_MAX;
    return (g.FontSize + g.Style.ItemSpacing.y) * items_count - g.Style.ItemSpacing.y + (g.Style.WindowPadding.y * 2);
}

bool ImGui::BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags)
{
    // Always consume the SetNextWindowSizeConstraint() call in our early return paths
    ImGuiContext& g = *GImGui;
    ImGuiCond backup_next_window_size_constraint = g.NextWindowData.SizeConstraintCond;
    g.NextWindowData.SizeConstraintCond = 0;

    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    IM_ASSERT((flags & (ImGuiComboFlags_NoArrowButton | ImGuiComboFlags_NoPreview)) != (ImGuiComboFlags_NoArrowButton | ImGuiComboFlags_NoPreview)); // Can't use both flags together

    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);

    const float arrow_size = (flags & ImGuiComboFlags_NoArrowButton) ? 0.0f : GetFrameHeight();
    const ImVec2 label_size = CalcTextSize(label, NULL, true);
    const float w = (flags & ImGuiComboFlags_NoPreview) ? arrow_size : CalcItemWidth();
    const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(w, label_size.y + style.FramePadding.y*2.0f));
    const ImRect total_bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));
    ItemSize(total_bb, style.FramePadding.y);
    if (!ItemAdd(total_bb, id, &frame_bb))
        return false;

    bool hovered, held;
    bool pressed = ButtonBehavior(frame_bb, id, &hovered, &held);
    bool popup_open = IsPopupOpen(id);

    const ImRect value_bb(frame_bb.Min, frame_bb.Max - ImVec2(arrow_size, 0.0f));
    const ImU32 frame_col = GetColorU32(hovered ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg);
    RenderNavHighlight(frame_bb, id);
    if (!(flags & ImGuiComboFlags_NoPreview))
        window->DrawList->AddRectFilled(frame_bb.Min, ImVec2(frame_bb.Max.x - arrow_size, frame_bb.Max.y), frame_col, style.FrameRounding, ImDrawCornerFlags_Left);
    if (!(flags & ImGuiComboFlags_NoArrowButton))
    {
        window->DrawList->AddRectFilled(ImVec2(frame_bb.Max.x - arrow_size, frame_bb.Min.y), frame_bb.Max, GetColorU32((popup_open || hovered) ? ImGuiCol_ButtonHovered : ImGuiCol_Button), style.FrameRounding, (w <= arrow_size) ? ImDrawCornerFlags_All : ImDrawCornerFlags_Right);
        RenderArrow(ImVec2(frame_bb.Max.x - arrow_size + style.FramePadding.y, frame_bb.Min.y + style.FramePadding.y), ImGuiDir_Down);
    }
    RenderFrameBorder(frame_bb.Min, frame_bb.Max, style.FrameRounding);
    if (preview_value != NULL && !(flags & ImGuiComboFlags_NoPreview))
        RenderTextClipped(frame_bb.Min + style.FramePadding, value_bb.Max, preview_value, NULL, NULL, ImVec2(0.0f,0.0f));
    if (label_size.x > 0)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

    if ((pressed || g.NavActivateId == id) && !popup_open)
    {
        if (window->DC.NavLayerCurrent == 0) 
            window->NavLastIds[0] = id;
        OpenPopupEx(id);
        popup_open = true;
    }

    if (!popup_open)
        return false;

    if (backup_next_window_size_constraint)
    {
        g.NextWindowData.SizeConstraintCond = backup_next_window_size_constraint;
        g.NextWindowData.SizeConstraintRect.Min.x = ImMax(g.NextWindowData.SizeConstraintRect.Min.x, w);
    }
    else
    {
        if ((flags & ImGuiComboFlags_HeightMask_) == 0)
            flags |= ImGuiComboFlags_HeightRegular;
        IM_ASSERT(ImIsPowerOfTwo(flags & ImGuiComboFlags_HeightMask_));    // Only one
        int popup_max_height_in_items = -1;
        if (flags & ImGuiComboFlags_HeightRegular)     popup_max_height_in_items = 8;
        else if (flags & ImGuiComboFlags_HeightSmall)  popup_max_height_in_items = 4;
        else if (flags & ImGuiComboFlags_HeightLarge)  popup_max_height_in_items = 20;
        SetNextWindowSizeConstraints(ImVec2(w, 0.0f), ImVec2(FLT_MAX, CalcMaxPopupHeightFromItemCount(popup_max_height_in_items)));
    }

    char name[16];
    ImFormatString(name, IM_ARRAYSIZE(name), "##Combo_%02d", g.CurrentPopupStack.Size); // Recycle windows based on depth

    // Peak into expected window size so we can position it
    if (ImGuiWindow* popup_window = FindWindowByName(name))
        if (popup_window->WasActive)
        {
            ImVec2 size_contents = CalcSizeContents(popup_window);
            ImVec2 size_expected = CalcSizeAfterConstraint(popup_window, CalcSizeAutoFit(popup_window, size_contents));
            if (flags & ImGuiComboFlags_PopupAlignLeft)
                popup_window->AutoPosLastDirection = ImGuiDir_Left;
            ImVec2 pos = FindBestWindowPosForPopup(frame_bb.GetBL(), size_expected, &popup_window->AutoPosLastDirection, frame_bb, ImGuiPopupPositionPolicy_ComboBox);
            SetNextWindowPos(pos);
        }

    ImGuiWindowFlags window_flags = ImGuiWindowFlags_AlwaysAutoResize | ImGuiWindowFlags_Popup | ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoSavedSettings;
    if (!Begin(name, NULL, window_flags))
    {
        EndPopup();
        IM_ASSERT(0);   // This should never happen as we tested for IsPopupOpen() above
        return false;
    }

    // Horizontally align ourselves with the framed text
    if (style.FramePadding.x != style.WindowPadding.x)
        Indent(style.FramePadding.x - style.WindowPadding.x);

    return true;
}

void ImGui::EndCombo()
{
    const ImGuiStyle& style = GImGui->Style;
    if (style.FramePadding.x != style.WindowPadding.x)
        Unindent(style.FramePadding.x - style.WindowPadding.x);
    EndPopup();
}

// Old API, prefer using BeginCombo() nowadays if you can.
bool ImGui::Combo(const char* label, int* current_item, bool (*items_getter)(void*, int, const char**), void* data, int items_count, int popup_max_height_in_items)
{
    ImGuiContext& g = *GImGui;

    const char* preview_text = NULL;
    if (*current_item >= 0 && *current_item < items_count)
        items_getter(data, *current_item, &preview_text);

    // The old Combo() API exposed "popup_max_height_in_items", however the new more general BeginCombo() API doesn't, so we emulate it here.
    if (popup_max_height_in_items != -1 && !g.NextWindowData.SizeConstraintCond)
    {
        float popup_max_height = CalcMaxPopupHeightFromItemCount(popup_max_height_in_items);
        SetNextWindowSizeConstraints(ImVec2(0,0), ImVec2(FLT_MAX, popup_max_height));
    }

    if (!BeginCombo(label, preview_text, 0))
        return false;

    // Display items
    // FIXME-OPT: Use clipper (but we need to disable it on the appearing frame to make sure our call to SetItemDefaultFocus() is processed)
    bool value_changed = false;
    for (int i = 0; i < items_count; i++)
    {
        PushID((void*)(intptr_t)i);
        const bool item_selected = (i == *current_item);
        const char* item_text;
        if (!items_getter(data, i, &item_text))
            item_text = "*Unknown item*";
        if (Selectable(item_text, item_selected))
        {
            value_changed = true;
            *current_item = i;
        }
        if (item_selected)
            SetItemDefaultFocus();
        PopID();
    }

    EndCombo();
    return value_changed;
}

static bool Items_ArrayGetter(void* data, int idx, const char** out_text)
{
    const char* const* items = (const char* const*)data;
    if (out_text)
        *out_text = items[idx];
    return true;
}

static bool Items_SingleStringGetter(void* data, int idx, const char** out_text)
{
    // FIXME-OPT: we could pre-compute the indices to fasten this. But only 1 active combo means the waste is limited.
    const char* items_separated_by_zeros = (const char*)data;
    int items_count = 0;
    const char* p = items_separated_by_zeros;
    while (*p)
    {
        if (idx == items_count)
            break;
        p += strlen(p) + 1;
        items_count++;
    }
    if (!*p)
        return false;
    if (out_text)
        *out_text = p;
    return true;
}

// Combo box helper allowing to pass an array of strings.
bool ImGui::Combo(const char* label, int* current_item, const char* const items[], int items_count, int height_in_items)
{
    const bool value_changed = Combo(label, current_item, Items_ArrayGetter, (void*)items, items_count, height_in_items);
    return value_changed;
}

// Combo box helper allowing to pass all items in a single string.
bool ImGui::Combo(const char* label, int* current_item, const char* items_separated_by_zeros, int height_in_items)
{
    int items_count = 0;
    const char* p = items_separated_by_zeros;       // FIXME-OPT: Avoid computing this, or at least only when combo is open
    while (*p)
    {
        p += strlen(p) + 1;
        items_count++;
    }
    bool value_changed = Combo(label, current_item, Items_SingleStringGetter, (void*)items_separated_by_zeros, items_count, height_in_items);
    return value_changed;
}

// Tip: pass an empty label (e.g. "##dummy") then you can use the space to draw other text or image.
// But you need to make sure the ID is unique, e.g. enclose calls in PushID/PopID.
bool ImGui::Selectable(const char* label, bool selected, ImGuiSelectableFlags flags, const ImVec2& size_arg)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;

    if ((flags & ImGuiSelectableFlags_SpanAllColumns) && window->DC.ColumnsSet) // FIXME-OPT: Avoid if vertically clipped.
        PopClipRect();

    ImGuiID id = window->GetID(label);
    ImVec2 label_size = CalcTextSize(label, NULL, true);
    ImVec2 size(size_arg.x != 0.0f ? size_arg.x : label_size.x, size_arg.y != 0.0f ? size_arg.y : label_size.y);
    ImVec2 pos = window->DC.CursorPos;
    pos.y += window->DC.CurrentLineTextBaseOffset;
    ImRect bb(pos, pos + size);
    ItemSize(bb);

    // Fill horizontal space.
    ImVec2 window_padding = window->WindowPadding;
    float max_x = (flags & ImGuiSelectableFlags_SpanAllColumns) ? GetWindowContentRegionMax().x : GetContentRegionMax().x;
    float w_draw = ImMax(label_size.x, window->Pos.x + max_x - window_padding.x - window->DC.CursorPos.x);
    ImVec2 size_draw((size_arg.x != 0 && !(flags & ImGuiSelectableFlags_DrawFillAvailWidth)) ? size_arg.x : w_draw, size_arg.y != 0.0f ? size_arg.y : size.y);
    ImRect bb_with_spacing(pos, pos + size_draw);
    if (size_arg.x == 0.0f || (flags & ImGuiSelectableFlags_DrawFillAvailWidth))
        bb_with_spacing.Max.x += window_padding.x;

    // Selectables are tightly packed together, we extend the box to cover spacing between selectable.
    float spacing_L = (float)(int)(style.ItemSpacing.x * 0.5f);
    float spacing_U = (float)(int)(style.ItemSpacing.y * 0.5f);
    float spacing_R = style.ItemSpacing.x - spacing_L;
    float spacing_D = style.ItemSpacing.y - spacing_U;
    bb_with_spacing.Min.x -= spacing_L;
    bb_with_spacing.Min.y -= spacing_U;
    bb_with_spacing.Max.x += spacing_R;
    bb_with_spacing.Max.y += spacing_D;
    if (!ItemAdd(bb_with_spacing, (flags & ImGuiSelectableFlags_Disabled) ? 0 : id))
    {
        if ((flags & ImGuiSelectableFlags_SpanAllColumns) && window->DC.ColumnsSet)
            PushColumnClipRect();
        return false;
    }

    ImGuiButtonFlags button_flags = 0;
    if (flags & ImGuiSelectableFlags_Menu) button_flags |= ImGuiButtonFlags_PressedOnClick | ImGuiButtonFlags_NoHoldingActiveID;
    if (flags & ImGuiSelectableFlags_MenuItem) button_flags |= ImGuiButtonFlags_PressedOnRelease;
    if (flags & ImGuiSelectableFlags_Disabled) button_flags |= ImGuiButtonFlags_Disabled;
    if (flags & ImGuiSelectableFlags_AllowDoubleClick) button_flags |= ImGuiButtonFlags_PressedOnClickRelease | ImGuiButtonFlags_PressedOnDoubleClick;
    bool hovered, held;
    bool pressed = ButtonBehavior(bb_with_spacing, id, &hovered, &held, button_flags);
    if (flags & ImGuiSelectableFlags_Disabled)
        selected = false;

    // Hovering selectable with mouse updates NavId accordingly so navigation can be resumed with gamepad/keyboard (this doesn't happen on most widgets)
    if (pressed || hovered)// && (g.IO.MouseDelta.x != 0.0f || g.IO.MouseDelta.y != 0.0f))
        if (!g.NavDisableMouseHover && g.NavWindow == window && g.NavLayer == window->DC.NavLayerActiveMask)
        {
            g.NavDisableHighlight = true;
            SetNavID(id, window->DC.NavLayerCurrent);
        }

    // Render
    if (hovered || selected)
    {
        const ImU32 col = GetColorU32((held && hovered) ? ImGuiCol_HeaderActive : hovered ? ImGuiCol_HeaderHovered : ImGuiCol_Header);
        RenderFrame(bb_with_spacing.Min, bb_with_spacing.Max, col, false, 0.0f);
        RenderNavHighlight(bb_with_spacing, id, ImGuiNavHighlightFlags_TypeThin | ImGuiNavHighlightFlags_NoRounding);
    }

    if ((flags & ImGuiSelectableFlags_SpanAllColumns) && window->DC.ColumnsSet)
    {
        PushColumnClipRect();
        bb_with_spacing.Max.x -= (GetContentRegionMax().x - max_x);
    }

    if (flags & ImGuiSelectableFlags_Disabled) PushStyleColor(ImGuiCol_Text, g.Style.Colors[ImGuiCol_TextDisabled]);
    RenderTextClipped(bb.Min, bb_with_spacing.Max, label, NULL, &label_size, ImVec2(0.0f,0.0f));
    if (flags & ImGuiSelectableFlags_Disabled) PopStyleColor();

    // Automatically close popups
    if (pressed && (window->Flags & ImGuiWindowFlags_Popup) && !(flags & ImGuiSelectableFlags_DontClosePopups) && !(window->DC.ItemFlags & ImGuiItemFlags_SelectableDontClosePopup))
        CloseCurrentPopup();
    return pressed;
}

bool ImGui::Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags, const ImVec2& size_arg)
{
    if (Selectable(label, *p_selected, flags, size_arg))
    {
        *p_selected = !*p_selected;
        return true;
    }
    return false;
}

// Helper to calculate the size of a listbox and display a label on the right.
// Tip: To have a list filling the entire window width, PushItemWidth(-1) and pass an empty label "##empty"
bool ImGui::ListBoxHeader(const char* label, const ImVec2& size_arg)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    const ImGuiStyle& style = GetStyle();
    const ImGuiID id = GetID(label);
    const ImVec2 label_size = CalcTextSize(label, NULL, true);

    // Size default to hold ~7 items. Fractional number of items helps seeing that we can scroll down/up without looking at scrollbar.
    ImVec2 size = CalcItemSize(size_arg, CalcItemWidth(), GetTextLineHeightWithSpacing() * 7.4f + style.ItemSpacing.y);
    ImVec2 frame_size = ImVec2(size.x, ImMax(size.y, label_size.y));
    ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + frame_size);
    ImRect bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));
    window->DC.LastItemRect = bb; // Forward storage for ListBoxFooter.. dodgy.

    BeginGroup();
    if (label_size.x > 0)
        RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

    BeginChildFrame(id, frame_bb.GetSize());
    return true;
}

bool ImGui::ListBoxHeader(const char* label, int items_count, int height_in_items)
{
    // Size default to hold ~7 items. Fractional number of items helps seeing that we can scroll down/up without looking at scrollbar.
    // However we don't add +0.40f if items_count <= height_in_items. It is slightly dodgy, because it means a dynamic list of items will make the widget resize occasionally when it crosses that size.
    // I am expecting that someone will come and complain about this behavior in a remote future, then we can advise on a better solution.
    if (height_in_items < 0)
        height_in_items = ImMin(items_count, 7);
    float height_in_items_f = height_in_items < items_count ? (height_in_items + 0.40f) : (height_in_items + 0.00f);

    // We include ItemSpacing.y so that a list sized for the exact number of items doesn't make a scrollbar appears. We could also enforce that by passing a flag to BeginChild().
    ImVec2 size;
    size.x = 0.0f;
    size.y = GetTextLineHeightWithSpacing() * height_in_items_f + GetStyle().ItemSpacing.y;
    return ListBoxHeader(label, size);
}

void ImGui::ListBoxFooter()
{
    ImGuiWindow* parent_window = GetCurrentWindow()->ParentWindow;
    const ImRect bb = parent_window->DC.LastItemRect;
    const ImGuiStyle& style = GetStyle();

    EndChildFrame();

    // Redeclare item size so that it includes the label (we have stored the full size in LastItemRect)
    // We call SameLine() to restore DC.CurrentLine* data
    SameLine();
    parent_window->DC.CursorPos = bb.Min;
    ItemSize(bb, style.FramePadding.y);
    EndGroup();
}

bool ImGui::ListBox(const char* label, int* current_item, const char* const items[], int items_count, int height_items)
{
    const bool value_changed = ListBox(label, current_item, Items_ArrayGetter, (void*)items, items_count, height_items);
    return value_changed;
}

bool ImGui::ListBox(const char* label, int* current_item, bool (*items_getter)(void*, int, const char**), void* data, int items_count, int height_in_items)
{
    if (!ListBoxHeader(label, items_count, height_in_items))
        return false;

    // Assume all items have even height (= 1 line of text). If you need items of different or variable sizes you can create a custom version of ListBox() in your code without using the clipper.
    bool value_changed = false;
    ImGuiListClipper clipper(items_count, GetTextLineHeightWithSpacing()); // We know exactly our line height here so we pass it as a minor optimization, but generally you don't need to.
    while (clipper.Step())
        for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)
        {
            const bool item_selected = (i == *current_item);
            const char* item_text;
            if (!items_getter(data, i, &item_text))
                item_text = "*Unknown item*";

            PushID(i);
            if (Selectable(item_text, item_selected))
            {
                *current_item = i;
                value_changed = true;
            }
            if (item_selected)
                SetItemDefaultFocus();
            PopID();
        }
    ListBoxFooter();
    return value_changed;
}

bool ImGui::MenuItem(const char* label, const char* shortcut, bool selected, bool enabled)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    ImGuiStyle& style = g.Style;
    ImVec2 pos = window->DC.CursorPos;
    ImVec2 label_size = CalcTextSize(label, NULL, true);

    ImGuiSelectableFlags flags = ImGuiSelectableFlags_MenuItem | (enabled ? 0 : ImGuiSelectableFlags_Disabled);
    bool pressed;
    if (window->DC.LayoutType == ImGuiLayoutType_Horizontal)
    {
        // Mimic the exact layout spacing of BeginMenu() to allow MenuItem() inside a menu bar, which is a little misleading but may be useful
        // Note that in this situation we render neither the shortcut neither the selected tick mark
        float w = label_size.x;
        window->DC.CursorPos.x += (float)(int)(style.ItemSpacing.x * 0.5f);
        PushStyleVar(ImGuiStyleVar_ItemSpacing, style.ItemSpacing * 2.0f);
        pressed = Selectable(label, false, flags, ImVec2(w, 0.0f));
        PopStyleVar();
        window->DC.CursorPos.x += (float)(int)(style.ItemSpacing.x * (-1.0f + 0.5f)); // -1 spacing to compensate the spacing added when Selectable() did a SameLine(). It would also work to call SameLine() ourselves after the PopStyleVar().
    }
    else
    {
        ImVec2 shortcut_size = shortcut ? CalcTextSize(shortcut, NULL) : ImVec2(0.0f, 0.0f);
        float w = window->MenuColumns.DeclColumns(label_size.x, shortcut_size.x, (float)(int)(g.FontSize * 1.20f)); // Feedback for next frame
        float extra_w = ImMax(0.0f, GetContentRegionAvail().x - w);
        pressed = Selectable(label, false, flags | ImGuiSelectableFlags_DrawFillAvailWidth, ImVec2(w, 0.0f));
        if (shortcut_size.x > 0.0f)
        {
            PushStyleColor(ImGuiCol_Text, g.Style.Colors[ImGuiCol_TextDisabled]);
            RenderText(pos + ImVec2(window->MenuColumns.Pos[1] + extra_w, 0.0f), shortcut, NULL, false);
            PopStyleColor();
        }
        if (selected)
            RenderCheckMark(pos + ImVec2(window->MenuColumns.Pos[2] + extra_w + g.FontSize * 0.40f, g.FontSize * 0.134f * 0.5f), GetColorU32(enabled ? ImGuiCol_Text : ImGuiCol_TextDisabled), g.FontSize  * 0.866f);
    }
    return pressed;
}

bool ImGui::MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled)
{
    if (MenuItem(label, shortcut, p_selected ? *p_selected : false, enabled))
    {
        if (p_selected)
            *p_selected = !*p_selected;
        return true;
    }
    return false;
}

bool ImGui::BeginMainMenuBar()
{
    ImGuiContext& g = *GImGui;
    SetNextWindowPos(ImVec2(0.0f, 0.0f));
    SetNextWindowSize(ImVec2(g.IO.DisplaySize.x, g.FontBaseSize + g.Style.FramePadding.y * 2.0f));
    PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);
    PushStyleVar(ImGuiStyleVar_WindowMinSize, ImVec2(0,0));
    if (!Begin("##MainMenuBar", NULL, ImGuiWindowFlags_NoTitleBar|ImGuiWindowFlags_NoResize|ImGuiWindowFlags_NoMove|ImGuiWindowFlags_NoScrollbar|ImGuiWindowFlags_NoSavedSettings|ImGuiWindowFlags_MenuBar)
        || !BeginMenuBar())
    {
        End();
        PopStyleVar(2);
        return false;
    }
    g.CurrentWindow->DC.MenuBarOffsetX += g.Style.DisplaySafeAreaPadding.x;
    return true;
}

void ImGui::EndMainMenuBar()
{
    EndMenuBar();

    // When the user has left the menu layer (typically: closed menus through activation of an item), we restore focus to the previous window
    ImGuiContext& g = *GImGui;
    if (g.CurrentWindow == g.NavWindow && g.NavLayer == 0)
        FocusFrontMostActiveWindow(g.NavWindow);

    End();
    PopStyleVar(2);
}

bool ImGui::BeginMenuBar()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;
    if (!(window->Flags & ImGuiWindowFlags_MenuBar))
        return false;

    IM_ASSERT(!window->DC.MenuBarAppending);
    BeginGroup(); // Save position
    PushID("##menubar");
    
    // We don't clip with regular window clipping rectangle as it is already set to the area below. However we clip with window full rect.
    // We remove 1 worth of rounding to Max.x to that text in long menus don't tend to display over the lower-right rounded area, which looks particularly glitchy.
    ImRect bar_rect = window->MenuBarRect();
    ImRect clip_rect(ImFloor(bar_rect.Min.x + 0.5f), ImFloor(bar_rect.Min.y + window->WindowBorderSize + 0.5f), ImFloor(ImMax(bar_rect.Min.x, bar_rect.Max.x - window->WindowRounding) + 0.5f), ImFloor(bar_rect.Max.y + 0.5f));
    clip_rect.ClipWith(window->WindowRectClipped);
    PushClipRect(clip_rect.Min, clip_rect.Max, false);

    window->DC.CursorPos = ImVec2(bar_rect.Min.x + window->DC.MenuBarOffsetX, bar_rect.Min.y);// + g.Style.FramePadding.y);
    window->DC.LayoutType = ImGuiLayoutType_Horizontal;
    window->DC.NavLayerCurrent++;
    window->DC.NavLayerCurrentMask <<= 1;
    window->DC.MenuBarAppending = true;
    AlignTextToFramePadding();
    return true;
}

void ImGui::EndMenuBar()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;
    ImGuiContext& g = *GImGui;

    // Nav: When a move request within one of our child menu failed, capture the request to navigate among our siblings.
    if (NavMoveRequestButNoResultYet() && (g.NavMoveDir == ImGuiDir_Left || g.NavMoveDir == ImGuiDir_Right) && (g.NavWindow->Flags & ImGuiWindowFlags_ChildMenu))
    {
        ImGuiWindow* nav_earliest_child = g.NavWindow;
        while (nav_earliest_child->ParentWindow && (nav_earliest_child->ParentWindow->Flags & ImGuiWindowFlags_ChildMenu))
            nav_earliest_child = nav_earliest_child->ParentWindow;
        if (nav_earliest_child->ParentWindow == window && nav_earliest_child->DC.ParentLayoutType == ImGuiLayoutType_Horizontal && g.NavMoveRequestForward == ImGuiNavForward_None)
        {
            // To do so we claim focus back, restore NavId and then process the movement request for yet another frame.
            // This involve a one-frame delay which isn't very problematic in this situation. We could remove it by scoring in advance for multiple window (probably not worth the hassle/cost)
            IM_ASSERT(window->DC.NavLayerActiveMaskNext & 0x02); // Sanity check
            FocusWindow(window);
            SetNavIDWithRectRel(window->NavLastIds[1], 1, window->NavRectRel[1]);
            g.NavLayer = 1;
            g.NavDisableHighlight = true; // Hide highlight for the current frame so we don't see the intermediary selection.
            g.NavMoveRequestForward = ImGuiNavForward_ForwardQueued;
            NavMoveRequestCancel();
        }
    }

    IM_ASSERT(window->Flags & ImGuiWindowFlags_MenuBar);
    IM_ASSERT(window->DC.MenuBarAppending);
    PopClipRect();
    PopID();
    window->DC.MenuBarOffsetX = window->DC.CursorPos.x - window->MenuBarRect().Min.x;
    window->DC.GroupStack.back().AdvanceCursor = false;
    EndGroup();
    window->DC.LayoutType = ImGuiLayoutType_Vertical;
    window->DC.NavLayerCurrent--;
    window->DC.NavLayerCurrentMask >>= 1;
    window->DC.MenuBarAppending = false;
}

bool ImGui::BeginMenu(const char* label, bool enabled)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const ImGuiID id = window->GetID(label);

    ImVec2 label_size = CalcTextSize(label, NULL, true);

    bool pressed;
    bool menu_is_open = IsPopupOpen(id);
    bool menuset_is_open = !(window->Flags & ImGuiWindowFlags_Popup) && (g.OpenPopupStack.Size > g.CurrentPopupStack.Size && g.OpenPopupStack[g.CurrentPopupStack.Size].OpenParentId == window->IDStack.back());
    ImGuiWindow* backed_nav_window = g.NavWindow;
    if (menuset_is_open)
        g.NavWindow = window;  // Odd hack to allow hovering across menus of a same menu-set (otherwise we wouldn't be able to hover parent)

    // The reference position stored in popup_pos will be used by Begin() to find a suitable position for the child menu (using FindBestPopupWindowPos).
    ImVec2 popup_pos, pos = window->DC.CursorPos;
    if (window->DC.LayoutType == ImGuiLayoutType_Horizontal)
    {
        // Menu inside an horizontal menu bar
        // Selectable extend their highlight by half ItemSpacing in each direction.
        // For ChildMenu, the popup position will be overwritten by the call to FindBestPopupWindowPos() in Begin()
        popup_pos = ImVec2(pos.x - window->WindowPadding.x, pos.y - style.FramePadding.y + window->MenuBarHeight());
        window->DC.CursorPos.x += (float)(int)(style.ItemSpacing.x * 0.5f);
        PushStyleVar(ImGuiStyleVar_ItemSpacing, style.ItemSpacing * 2.0f);
        float w = label_size.x;
        pressed = Selectable(label, menu_is_open, ImGuiSelectableFlags_Menu | ImGuiSelectableFlags_DontClosePopups | (!enabled ? ImGuiSelectableFlags_Disabled : 0), ImVec2(w, 0.0f));
        PopStyleVar();
        window->DC.CursorPos.x += (float)(int)(style.ItemSpacing.x * (-1.0f + 0.5f)); // -1 spacing to compensate the spacing added when Selectable() did a SameLine(). It would also work to call SameLine() ourselves after the PopStyleVar().
    }
    else
    {
        // Menu inside a menu
        popup_pos = ImVec2(pos.x, pos.y - style.WindowPadding.y);
        float w = window->MenuColumns.DeclColumns(label_size.x, 0.0f, (float)(int)(g.FontSize * 1.20f)); // Feedback to next frame
        float extra_w = ImMax(0.0f, GetContentRegionAvail().x - w);
        pressed = Selectable(label, menu_is_open, ImGuiSelectableFlags_Menu | ImGuiSelectableFlags_DontClosePopups | ImGuiSelectableFlags_DrawFillAvailWidth | (!enabled ? ImGuiSelectableFlags_Disabled : 0), ImVec2(w, 0.0f));
        if (!enabled) PushStyleColor(ImGuiCol_Text, g.Style.Colors[ImGuiCol_TextDisabled]);
        RenderArrow(pos + ImVec2(window->MenuColumns.Pos[2] + extra_w + g.FontSize * 0.30f, 0.0f), ImGuiDir_Right);
        if (!enabled) PopStyleColor();
    }

    const bool hovered = enabled && ItemHoverable(window->DC.LastItemRect, id);
    if (menuset_is_open)
        g.NavWindow = backed_nav_window;

    bool want_open = false, want_close = false;
    if (window->DC.LayoutType == ImGuiLayoutType_Vertical) // (window->Flags & (ImGuiWindowFlags_Popup|ImGuiWindowFlags_ChildMenu))
    {
        // Implement http://bjk5.com/post/44698559168/breaking-down-amazons-mega-dropdown to avoid using timers, so menus feels more reactive.
        bool moving_within_opened_triangle = false;
        if (g.HoveredWindow == window && g.OpenPopupStack.Size > g.CurrentPopupStack.Size && g.OpenPopupStack[g.CurrentPopupStack.Size].ParentWindow == window && !(window->Flags & ImGuiWindowFlags_MenuBar))
        {
            if (ImGuiWindow* next_window = g.OpenPopupStack[g.CurrentPopupStack.Size].Window)
            {
                ImRect next_window_rect = next_window->Rect();
                ImVec2 ta = g.IO.MousePos - g.IO.MouseDelta;
                ImVec2 tb = (window->Pos.x < next_window->Pos.x) ? next_window_rect.GetTL() : next_window_rect.GetTR();
                ImVec2 tc = (window->Pos.x < next_window->Pos.x) ? next_window_rect.GetBL() : next_window_rect.GetBR();
                float extra = ImClamp(fabsf(ta.x - tb.x) * 0.30f, 5.0f, 30.0f); // add a bit of extra slack.
                ta.x += (window->Pos.x < next_window->Pos.x) ? -0.5f : +0.5f;   // to avoid numerical issues
                tb.y = ta.y + ImMax((tb.y - extra) - ta.y, -100.0f);            // triangle is maximum 200 high to limit the slope and the bias toward large sub-menus // FIXME: Multiply by fb_scale?
                tc.y = ta.y + ImMin((tc.y + extra) - ta.y, +100.0f);
                moving_within_opened_triangle = ImTriangleContainsPoint(ta, tb, tc, g.IO.MousePos);
                //window->DrawList->PushClipRectFullScreen(); window->DrawList->AddTriangleFilled(ta, tb, tc, moving_within_opened_triangle ? IM_COL32(0,128,0,128) : IM_COL32(128,0,0,128)); window->DrawList->PopClipRect(); // Debug
            }
        }

        want_close = (menu_is_open && !hovered && g.HoveredWindow == window && g.HoveredIdPreviousFrame != 0 && g.HoveredIdPreviousFrame != id && !moving_within_opened_triangle);
        want_open = (!menu_is_open && hovered && !moving_within_opened_triangle) || (!menu_is_open && hovered && pressed);

        if (g.NavActivateId == id)
        {
            want_close = menu_is_open;
            want_open = !menu_is_open;
        }
        if (g.NavId == id && g.NavMoveRequest && g.NavMoveDir == ImGuiDir_Right) // Nav-Right to open
        {
            want_open = true;
            NavMoveRequestCancel();
        }
    }
    else
    {
        // Menu bar
        if (menu_is_open && pressed && menuset_is_open) // Click an open menu again to close it
        {
            want_close = true;
            want_open = menu_is_open = false;
        }
        else if (pressed || (hovered && menuset_is_open && !menu_is_open)) // First click to open, then hover to open others
        {
            want_open = true;
        }
        else if (g.NavId == id && g.NavMoveRequest && g.NavMoveDir == ImGuiDir_Down) // Nav-Down to open
        {
            want_open = true;
            NavMoveRequestCancel();
        }
    }

    if (!enabled) // explicitly close if an open menu becomes disabled, facilitate users code a lot in pattern such as 'if (BeginMenu("options", has_object)) { ..use object.. }'
        want_close = true;
    if (want_close && IsPopupOpen(id))
        ClosePopupToLevel(g.CurrentPopupStack.Size);

    if (!menu_is_open && want_open && g.OpenPopupStack.Size > g.CurrentPopupStack.Size)
    {
        // Don't recycle same menu level in the same frame, first close the other menu and yield for a frame.
        OpenPopup(label);
        return false;
    }

    menu_is_open |= want_open;
    if (want_open)
        OpenPopup(label);

    if (menu_is_open)
    {
        SetNextWindowPos(popup_pos, ImGuiCond_Always);
        ImGuiWindowFlags flags = ImGuiWindowFlags_AlwaysAutoResize | ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoSavedSettings | ((window->Flags & (ImGuiWindowFlags_Popup|ImGuiWindowFlags_ChildMenu)) ? ImGuiWindowFlags_ChildMenu|ImGuiWindowFlags_ChildWindow : ImGuiWindowFlags_ChildMenu);
        menu_is_open = BeginPopupEx(id, flags); // menu_is_open can be 'false' when the popup is completely clipped (e.g. zero size display)
    }

    return menu_is_open;
}

void ImGui::EndMenu()
{
    // Nav: When a left move request _within our child menu_ failed, close the menu.
    // A menu doesn't close itself because EndMenuBar() wants the catch the last Left<>Right inputs.
    // However it means that with the current code, a BeginMenu() from outside another menu or a menu-bar won't be closable with the Left direction.
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    if (g.NavWindow && g.NavWindow->ParentWindow == window && g.NavMoveDir == ImGuiDir_Left && NavMoveRequestButNoResultYet() && window->DC.LayoutType == ImGuiLayoutType_Vertical)
    {
        ClosePopupToLevel(g.OpenPopupStack.Size - 1);
        NavMoveRequestCancel();
    }

    EndPopup();
}

// Note: only access 3 floats if ImGuiColorEditFlags_NoAlpha flag is set.
void ImGui::ColorTooltip(const char* text, const float* col, ImGuiColorEditFlags flags)
{
    ImGuiContext& g = *GImGui;

    int cr = IM_F32_TO_INT8_SAT(col[0]), cg = IM_F32_TO_INT8_SAT(col[1]), cb = IM_F32_TO_INT8_SAT(col[2]), ca = (flags & ImGuiColorEditFlags_NoAlpha) ? 255 : IM_F32_TO_INT8_SAT(col[3]);
    BeginTooltipEx(0, true);
    
    const char* text_end = text ? FindRenderedTextEnd(text, NULL) : text;
    if (text_end > text)
    {
        TextUnformatted(text, text_end);
        Separator();
    }

    ImVec2 sz(g.FontSize * 3 + g.Style.FramePadding.y * 2, g.FontSize * 3 + g.Style.FramePadding.y * 2);
    ColorButton("##preview", ImVec4(col[0], col[1], col[2], col[3]), (flags & (ImGuiColorEditFlags_NoAlpha | ImGuiColorEditFlags_AlphaPreview | ImGuiColorEditFlags_AlphaPreviewHalf)) | ImGuiColorEditFlags_NoTooltip, sz);
    SameLine();
    if (flags & ImGuiColorEditFlags_NoAlpha)
        Text("#%02X%02X%02X\nR: %d, G: %d, B: %d\n(%.3f, %.3f, %.3f)", cr, cg, cb, cr, cg, cb, col[0], col[1], col[2]);
    else
        Text("#%02X%02X%02X%02X\nR:%d, G:%d, B:%d, A:%d\n(%.3f, %.3f, %.3f, %.3f)", cr, cg, cb, ca, cr, cg, cb, ca, col[0], col[1], col[2], col[3]);
    EndTooltip();
}

static inline ImU32 ImAlphaBlendColor(ImU32 col_a, ImU32 col_b)
{
    float t = ((col_b >> IM_COL32_A_SHIFT) & 0xFF) / 255.f;
    int r = ImLerp((int)(col_a >> IM_COL32_R_SHIFT) & 0xFF, (int)(col_b >> IM_COL32_R_SHIFT) & 0xFF, t);
    int g = ImLerp((int)(col_a >> IM_COL32_G_SHIFT) & 0xFF, (int)(col_b >> IM_COL32_G_SHIFT) & 0xFF, t);
    int b = ImLerp((int)(col_a >> IM_COL32_B_SHIFT) & 0xFF, (int)(col_b >> IM_COL32_B_SHIFT) & 0xFF, t);
    return IM_COL32(r, g, b, 0xFF);
}

// NB: This is rather brittle and will show artifact when rounding this enabled if rounded corners overlap multiple cells. Caller currently responsible for avoiding that.
// I spent a non reasonable amount of time trying to getting this right for ColorButton with rounding+anti-aliasing+ImGuiColorEditFlags_HalfAlphaPreview flag + various grid sizes and offsets, and eventually gave up... probably more reasonable to disable rounding alltogether.
void ImGui::RenderColorRectWithAlphaCheckerboard(ImVec2 p_min, ImVec2 p_max, ImU32 col, float grid_step, ImVec2 grid_off, float rounding, int rounding_corners_flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (((col & IM_COL32_A_MASK) >> IM_COL32_A_SHIFT) < 0xFF)
    {
        ImU32 col_bg1 = GetColorU32(ImAlphaBlendColor(IM_COL32(204,204,204,255), col));
        ImU32 col_bg2 = GetColorU32(ImAlphaBlendColor(IM_COL32(128,128,128,255), col));
        window->DrawList->AddRectFilled(p_min, p_max, col_bg1, rounding, rounding_corners_flags);

        int yi = 0;
        for (float y = p_min.y + grid_off.y; y < p_max.y; y += grid_step, yi++)
        {
            float y1 = ImClamp(y, p_min.y, p_max.y), y2 = ImMin(y + grid_step, p_max.y);
            if (y2 <= y1)
                continue;
            for (float x = p_min.x + grid_off.x + (yi & 1) * grid_step; x < p_max.x; x += grid_step * 2.0f)
            {
                float x1 = ImClamp(x, p_min.x, p_max.x), x2 = ImMin(x + grid_step, p_max.x);
                if (x2 <= x1)
                    continue;
                int rounding_corners_flags_cell = 0;
                if (y1 <= p_min.y) { if (x1 <= p_min.x) rounding_corners_flags_cell |= ImDrawCornerFlags_TopLeft; if (x2 >= p_max.x) rounding_corners_flags_cell |= ImDrawCornerFlags_TopRight; }
                if (y2 >= p_max.y) { if (x1 <= p_min.x) rounding_corners_flags_cell |= ImDrawCornerFlags_BotLeft; if (x2 >= p_max.x) rounding_corners_flags_cell |= ImDrawCornerFlags_BotRight; }
                rounding_corners_flags_cell &= rounding_corners_flags;
                window->DrawList->AddRectFilled(ImVec2(x1,y1), ImVec2(x2,y2), col_bg2, rounding_corners_flags_cell ? rounding : 0.0f, rounding_corners_flags_cell);
            }
        }
    }
    else
    {
        window->DrawList->AddRectFilled(p_min, p_max, col, rounding, rounding_corners_flags);
    }
}

void ImGui::SetColorEditOptions(ImGuiColorEditFlags flags)
{
    ImGuiContext& g = *GImGui;
    if ((flags & ImGuiColorEditFlags__InputsMask) == 0)
        flags |= ImGuiColorEditFlags__OptionsDefault & ImGuiColorEditFlags__InputsMask;
    if ((flags & ImGuiColorEditFlags__DataTypeMask) == 0)
        flags |= ImGuiColorEditFlags__OptionsDefault & ImGuiColorEditFlags__DataTypeMask;
    if ((flags & ImGuiColorEditFlags__PickerMask) == 0)
        flags |= ImGuiColorEditFlags__OptionsDefault & ImGuiColorEditFlags__PickerMask;
    IM_ASSERT(ImIsPowerOfTwo((int)(flags & ImGuiColorEditFlags__InputsMask)));   // Check only 1 option is selected
    IM_ASSERT(ImIsPowerOfTwo((int)(flags & ImGuiColorEditFlags__DataTypeMask))); // Check only 1 option is selected
    IM_ASSERT(ImIsPowerOfTwo((int)(flags & ImGuiColorEditFlags__PickerMask)));   // Check only 1 option is selected
    g.ColorEditOptions = flags;
}

// A little colored square. Return true when clicked.
// FIXME: May want to display/ignore the alpha component in the color display? Yet show it in the tooltip.
// 'desc_id' is not called 'label' because we don't display it next to the button, but only in the tooltip.
bool ImGui::ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags, ImVec2 size)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiID id = window->GetID(desc_id);
    float default_size = GetFrameHeight();
    if (size.x == 0.0f)
        size.x = default_size;
    if (size.y == 0.0f)
        size.y = default_size;
    const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size);
    ItemSize(bb, (size.y >= default_size) ? g.Style.FramePadding.y : 0.0f);
    if (!ItemAdd(bb, id))
        return false;

    bool hovered, held;
    bool pressed = ButtonBehavior(bb, id, &hovered, &held);

    if (flags & ImGuiColorEditFlags_NoAlpha)
        flags &= ~(ImGuiColorEditFlags_AlphaPreview | ImGuiColorEditFlags_AlphaPreviewHalf);
    
    ImVec4 col_without_alpha(col.x, col.y, col.z, 1.0f);
    float grid_step = ImMin(size.x, size.y) / 2.99f;
    float rounding = ImMin(g.Style.FrameRounding, grid_step * 0.5f);
    ImRect bb_inner = bb;
    float off = -0.75f; // The border (using Col_FrameBg) tends to look off when color is near-opaque and rounding is enabled. This offset seemed like a good middle ground to reduce those artifacts.
    bb_inner.Expand(off);
    if ((flags & ImGuiColorEditFlags_AlphaPreviewHalf) && col.w < 1.0f)
    {
        float mid_x = (float)(int)((bb_inner.Min.x + bb_inner.Max.x) * 0.5f + 0.5f);
        RenderColorRectWithAlphaCheckerboard(ImVec2(bb_inner.Min.x + grid_step, bb_inner.Min.y), bb_inner.Max, GetColorU32(col), grid_step, ImVec2(-grid_step + off, off), rounding, ImDrawCornerFlags_TopRight| ImDrawCornerFlags_BotRight);
        window->DrawList->AddRectFilled(bb_inner.Min, ImVec2(mid_x, bb_inner.Max.y), GetColorU32(col_without_alpha), rounding, ImDrawCornerFlags_TopLeft|ImDrawCornerFlags_BotLeft);
    }
    else
    {
        // Because GetColorU32() multiplies by the global style Alpha and we don't want to display a checkerboard if the source code had no alpha
        ImVec4 col_source = (flags & ImGuiColorEditFlags_AlphaPreview) ? col : col_without_alpha;
        if (col_source.w < 1.0f)
            RenderColorRectWithAlphaCheckerboard(bb_inner.Min, bb_inner.Max, GetColorU32(col_source), grid_step, ImVec2(off, off), rounding);
        else
            window->DrawList->AddRectFilled(bb_inner.Min, bb_inner.Max, GetColorU32(col_source), rounding, ImDrawCornerFlags_All);
    }
    RenderNavHighlight(bb, id);
    if (g.Style.FrameBorderSize > 0.0f)
        RenderFrameBorder(bb.Min, bb.Max, rounding);
    else
        window->DrawList->AddRect(bb.Min, bb.Max, GetColorU32(ImGuiCol_FrameBg), rounding); // Color button are often in need of some sort of border

    // Drag and Drop Source
    if (g.ActiveId == id && BeginDragDropSource()) // NB: The ActiveId test is merely an optional micro-optimization
    {
        if (flags & ImGuiColorEditFlags_NoAlpha)
            SetDragDropPayload(IMGUI_PAYLOAD_TYPE_COLOR_3F, &col, sizeof(float) * 3, ImGuiCond_Once);
        else
            SetDragDropPayload(IMGUI_PAYLOAD_TYPE_COLOR_4F, &col, sizeof(float) * 4, ImGuiCond_Once);
        ColorButton(desc_id, col, flags);
        SameLine();
        TextUnformatted("Color");
        EndDragDropSource();
        hovered = false;
    }

    // Tooltip
    if (!(flags & ImGuiColorEditFlags_NoTooltip) && hovered)
        ColorTooltip(desc_id, &col.x, flags & (ImGuiColorEditFlags_NoAlpha | ImGuiColorEditFlags_AlphaPreview | ImGuiColorEditFlags_AlphaPreviewHalf));

    return pressed;
}

bool ImGui::ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags)
{
    return ColorEdit4(label, col, flags | ImGuiColorEditFlags_NoAlpha);
}

void ImGui::ColorEditOptionsPopup(const float* col, ImGuiColorEditFlags flags)
{
    bool allow_opt_inputs = !(flags & ImGuiColorEditFlags__InputsMask);
    bool allow_opt_datatype = !(flags & ImGuiColorEditFlags__DataTypeMask);
    if ((!allow_opt_inputs && !allow_opt_datatype) || !BeginPopup("context"))
        return;
    ImGuiContext& g = *GImGui;
    ImGuiColorEditFlags opts = g.ColorEditOptions;
    if (allow_opt_inputs)
    {
        if (RadioButton("RGB", (opts & ImGuiColorEditFlags_RGB) ? 1 : 0)) opts = (opts & ~ImGuiColorEditFlags__InputsMask) | ImGuiColorEditFlags_RGB;
        if (RadioButton("HSV", (opts & ImGuiColorEditFlags_HSV) ? 1 : 0)) opts = (opts & ~ImGuiColorEditFlags__InputsMask) | ImGuiColorEditFlags_HSV;
        if (RadioButton("HEX", (opts & ImGuiColorEditFlags_HEX) ? 1 : 0)) opts = (opts & ~ImGuiColorEditFlags__InputsMask) | ImGuiColorEditFlags_HEX;
    }
    if (allow_opt_datatype)
    {
        if (allow_opt_inputs) Separator();
        if (RadioButton("0..255",     (opts & ImGuiColorEditFlags_Uint8) ? 1 : 0)) opts = (opts & ~ImGuiColorEditFlags__DataTypeMask) | ImGuiColorEditFlags_Uint8;
        if (RadioButton("0.00..1.00", (opts & ImGuiColorEditFlags_Float) ? 1 : 0)) opts = (opts & ~ImGuiColorEditFlags__DataTypeMask) | ImGuiColorEditFlags_Float;
    }

    if (allow_opt_inputs || allow_opt_datatype)
        Separator();
    if (Button("Copy as..", ImVec2(-1,0)))
        OpenPopup("Copy");
    if (BeginPopup("Copy"))
    {
        int cr = IM_F32_TO_INT8_SAT(col[0]), cg = IM_F32_TO_INT8_SAT(col[1]), cb = IM_F32_TO_INT8_SAT(col[2]), ca = (flags & ImGuiColorEditFlags_NoAlpha) ? 255 : IM_F32_TO_INT8_SAT(col[3]);
        char buf[64];
        ImFormatString(buf, IM_ARRAYSIZE(buf), "(%.3ff, %.3ff, %.3ff, %.3ff)", col[0], col[1], col[2], (flags & ImGuiColorEditFlags_NoAlpha) ? 1.0f : col[3]);
        if (Selectable(buf))
            SetClipboardText(buf);
        ImFormatString(buf, IM_ARRAYSIZE(buf), "(%d,%d,%d,%d)", cr, cg, cb, ca);
        if (Selectable(buf))
            SetClipboardText(buf);
        if (flags & ImGuiColorEditFlags_NoAlpha)
            ImFormatString(buf, IM_ARRAYSIZE(buf), "0x%02X%02X%02X", cr, cg, cb);
        else
            ImFormatString(buf, IM_ARRAYSIZE(buf), "0x%02X%02X%02X%02X", cr, cg, cb, ca);
        if (Selectable(buf))
            SetClipboardText(buf);
        EndPopup();
    }

    g.ColorEditOptions = opts;
    EndPopup();
}

static void ColorPickerOptionsPopup(ImGuiColorEditFlags flags, const float* ref_col)
{
    bool allow_opt_picker = !(flags & ImGuiColorEditFlags__PickerMask);
    bool allow_opt_alpha_bar = !(flags & ImGuiColorEditFlags_NoAlpha) && !(flags & ImGuiColorEditFlags_AlphaBar);
    if ((!allow_opt_picker && !allow_opt_alpha_bar) || !ImGui::BeginPopup("context"))
        return;
    ImGuiContext& g = *GImGui;
    if (allow_opt_picker)
    {
        ImVec2 picker_size(g.FontSize * 8, ImMax(g.FontSize * 8 - (ImGui::GetFrameHeight() + g.Style.ItemInnerSpacing.x), 1.0f)); // FIXME: Picker size copied from main picker function
        ImGui::PushItemWidth(picker_size.x);
        for (int picker_type = 0; picker_type < 2; picker_type++)
        {
            // Draw small/thumbnail version of each picker type (over an invisible button for selection)
            if (picker_type > 0) ImGui::Separator();
            ImGui::PushID(picker_type);
            ImGuiColorEditFlags picker_flags = ImGuiColorEditFlags_NoInputs|ImGuiColorEditFlags_NoOptions|ImGuiColorEditFlags_NoLabel|ImGuiColorEditFlags_NoSidePreview|(flags & ImGuiColorEditFlags_NoAlpha);
            if (picker_type == 0) picker_flags |= ImGuiColorEditFlags_PickerHueBar;
            if (picker_type == 1) picker_flags |= ImGuiColorEditFlags_PickerHueWheel;
            ImVec2 backup_pos = ImGui::GetCursorScreenPos();
            if (ImGui::Selectable("##selectable", false, 0, picker_size)) // By default, Selectable() is closing popup
                g.ColorEditOptions = (g.ColorEditOptions & ~ImGuiColorEditFlags__PickerMask) | (picker_flags & ImGuiColorEditFlags__PickerMask);
            ImGui::SetCursorScreenPos(backup_pos);
            ImVec4 dummy_ref_col;
            memcpy(&dummy_ref_col.x, ref_col, sizeof(float) * (picker_flags & ImGuiColorEditFlags_NoAlpha ? 3 : 4));
            ImGui::ColorPicker4("##dummypicker", &dummy_ref_col.x, picker_flags);
            ImGui::PopID();
        }
        ImGui::PopItemWidth();
    }
    if (allow_opt_alpha_bar)
    {
        if (allow_opt_picker) ImGui::Separator();
        ImGui::CheckboxFlags("Alpha Bar", (unsigned int*)&g.ColorEditOptions, ImGuiColorEditFlags_AlphaBar);
    }
    ImGui::EndPopup();
}

// Edit colors components (each component in 0.0f..1.0f range). 
// See enum ImGuiColorEditFlags_ for available options. e.g. Only access 3 floats if ImGuiColorEditFlags_NoAlpha flag is set.
// With typical options: Left-click on colored square to open color picker. Right-click to open option menu. CTRL-Click over input fields to edit them and TAB to go to next item.
bool ImGui::ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return false;

    ImGuiContext& g = *GImGui;
    const ImGuiStyle& style = g.Style;
    const float square_sz = GetFrameHeight();
    const float w_extra = (flags & ImGuiColorEditFlags_NoSmallPreview) ? 0.0f : (square_sz + style.ItemInnerSpacing.x);
    const float w_items_all = CalcItemWidth() - w_extra;
    const char* label_display_end = FindRenderedTextEnd(label);

    const bool alpha = (flags & ImGuiColorEditFlags_NoAlpha) == 0;
    const bool hdr = (flags & ImGuiColorEditFlags_HDR) != 0;
    const int components = alpha ? 4 : 3;
    const ImGuiColorEditFlags flags_untouched = flags;

    BeginGroup();
    PushID(label);

    // If we're not showing any slider there's no point in doing any HSV conversions
    if (flags & ImGuiColorEditFlags_NoInputs)
        flags = (flags & (~ImGuiColorEditFlags__InputsMask)) | ImGuiColorEditFlags_RGB | ImGuiColorEditFlags_NoOptions;

    // Context menu: display and modify options (before defaults are applied)
    if (!(flags & ImGuiColorEditFlags_NoOptions))
        ColorEditOptionsPopup(col, flags);
 
    // Read stored options
    if (!(flags & ImGuiColorEditFlags__InputsMask))
        flags |= (g.ColorEditOptions & ImGuiColorEditFlags__InputsMask);
    if (!(flags & ImGuiColorEditFlags__DataTypeMask))
        flags |= (g.ColorEditOptions & ImGuiColorEditFlags__DataTypeMask);
    if (!(flags & ImGuiColorEditFlags__PickerMask))
        flags |= (g.ColorEditOptions & ImGuiColorEditFlags__PickerMask);
    flags |= (g.ColorEditOptions & ~(ImGuiColorEditFlags__InputsMask | ImGuiColorEditFlags__DataTypeMask | ImGuiColorEditFlags__PickerMask));

    // Convert to the formats we need
    float f[4] = { col[0], col[1], col[2], alpha ? col[3] : 1.0f };
    if (flags & ImGuiColorEditFlags_HSV)
        ColorConvertRGBtoHSV(f[0], f[1], f[2], f[0], f[1], f[2]);
    int i[4] = { IM_F32_TO_INT8_UNBOUND(f[0]), IM_F32_TO_INT8_UNBOUND(f[1]), IM_F32_TO_INT8_UNBOUND(f[2]), IM_F32_TO_INT8_UNBOUND(f[3]) };

    bool value_changed = false;
    bool value_changed_as_float = false;

    if ((flags & (ImGuiColorEditFlags_RGB | ImGuiColorEditFlags_HSV)) != 0 && (flags & ImGuiColorEditFlags_NoInputs) == 0)
    {
        // RGB/HSV 0..255 Sliders
        const float w_item_one  = ImMax(1.0f, (float)(int)((w_items_all - (style.ItemInnerSpacing.x) * (components-1)) / (float)components));
        const float w_item_last = ImMax(1.0f, (float)(int)(w_items_all - (w_item_one + style.ItemInnerSpacing.x) * (components-1)));

        const bool hide_prefix = (w_item_one <= CalcTextSize((flags & ImGuiColorEditFlags_Float) ? "M:0.000" : "M:000").x);
        const char* ids[4] = { "##X", "##Y", "##Z", "##W" };
        const char* fmt_table_int[3][4] =
        {
            {   "%3.0f",   "%3.0f",   "%3.0f",   "%3.0f" }, // Short display
            { "R:%3.0f", "G:%3.0f", "B:%3.0f", "A:%3.0f" }, // Long display for RGBA
            { "H:%3.0f", "S:%3.0f", "V:%3.0f", "A:%3.0f" }  // Long display for HSVA
        };
        const char* fmt_table_float[3][4] =
        {
            {   "%0.3f",   "%0.3f",   "%0.3f",   "%0.3f" }, // Short display
            { "R:%0.3f", "G:%0.3f", "B:%0.3f", "A:%0.3f" }, // Long display for RGBA
            { "H:%0.3f", "S:%0.3f", "V:%0.3f", "A:%0.3f" }  // Long display for HSVA
        };
        const int fmt_idx = hide_prefix ? 0 : (flags & ImGuiColorEditFlags_HSV) ? 2 : 1;

        PushItemWidth(w_item_one);
        for (int n = 0; n < components; n++)
        {
            if (n > 0)
                SameLine(0, style.ItemInnerSpacing.x);
            if (n + 1 == components)
                PushItemWidth(w_item_last);
            if (flags & ImGuiColorEditFlags_Float)
                value_changed = value_changed_as_float = value_changed | DragFloat(ids[n], &f[n], 1.0f/255.0f, 0.0f, hdr ? 0.0f : 1.0f, fmt_table_float[fmt_idx][n]);
            else
                value_changed |= DragInt(ids[n], &i[n], 1.0f, 0, hdr ? 0 : 255, fmt_table_int[fmt_idx][n]);
            if (!(flags & ImGuiColorEditFlags_NoOptions))
                OpenPopupOnItemClick("context");
        }
        PopItemWidth();
        PopItemWidth();
    }
    else if ((flags & ImGuiColorEditFlags_HEX) != 0 && (flags & ImGuiColorEditFlags_NoInputs) == 0)
    {
        // RGB Hexadecimal Input
        char buf[64];
        if (alpha)
            ImFormatString(buf, IM_ARRAYSIZE(buf), "#%02X%02X%02X%02X", ImClamp(i[0],0,255), ImClamp(i[1],0,255), ImClamp(i[2],0,255), ImClamp(i[3],0,255));
        else
            ImFormatString(buf, IM_ARRAYSIZE(buf), "#%02X%02X%02X", ImClamp(i[0],0,255), ImClamp(i[1],0,255), ImClamp(i[2],0,255));
        PushItemWidth(w_items_all);
        if (InputText("##Text", buf, IM_ARRAYSIZE(buf), ImGuiInputTextFlags_CharsHexadecimal | ImGuiInputTextFlags_CharsUppercase))
        {
            value_changed = true;
            char* p = buf;
            while (*p == '#' || ImCharIsSpace((unsigned int)*p))
                p++;
            i[0] = i[1] = i[2] = i[3] = 0;
            if (alpha)
                sscanf(p, "%02X%02X%02X%02X", (unsigned int*)&i[0], (unsigned int*)&i[1], (unsigned int*)&i[2], (unsigned int*)&i[3]); // Treat at unsigned (%X is unsigned)
            else
                sscanf(p, "%02X%02X%02X", (unsigned int*)&i[0], (unsigned int*)&i[1], (unsigned int*)&i[2]);
        }
        if (!(flags & ImGuiColorEditFlags_NoOptions))
            OpenPopupOnItemClick("context");
        PopItemWidth();
    }

    ImGuiWindow* picker_active_window = NULL;
    if (!(flags & ImGuiColorEditFlags_NoSmallPreview))
    {
        if (!(flags & ImGuiColorEditFlags_NoInputs))
            SameLine(0, style.ItemInnerSpacing.x);

        const ImVec4 col_v4(col[0], col[1], col[2], alpha ? col[3] : 1.0f);
        if (ColorButton("##ColorButton", col_v4, flags))
        {
            if (!(flags & ImGuiColorEditFlags_NoPicker))
            {
                // Store current color and open a picker
                g.ColorPickerRef = col_v4;
                OpenPopup("picker");
                SetNextWindowPos(window->DC.LastItemRect.GetBL() + ImVec2(-1,style.ItemSpacing.y));
            }
        }
        if (!(flags & ImGuiColorEditFlags_NoOptions))
            OpenPopupOnItemClick("context");
        
        if (BeginPopup("picker"))
        {
            picker_active_window = g.CurrentWindow;
            if (label != label_display_end)
            {
                TextUnformatted(label, label_display_end);
                Separator();
            }
            ImGuiColorEditFlags picker_flags_to_forward = ImGuiColorEditFlags__DataTypeMask | ImGuiColorEditFlags__PickerMask | ImGuiColorEditFlags_HDR | ImGuiColorEditFlags_NoAlpha | ImGuiColorEditFlags_AlphaBar;
            ImGuiColorEditFlags picker_flags = (flags_untouched & picker_flags_to_forward) | ImGuiColorEditFlags__InputsMask | ImGuiColorEditFlags_NoLabel | ImGuiColorEditFlags_AlphaPreviewHalf;
            PushItemWidth(square_sz * 12.0f); // Use 256 + bar sizes?
            value_changed |= ColorPicker4("##picker", col, picker_flags, &g.ColorPickerRef.x);
            PopItemWidth();
            EndPopup();
        }
    }

    if (label != label_display_end && !(flags & ImGuiColorEditFlags_NoLabel))
    {
        SameLine(0, style.ItemInnerSpacing.x);
        TextUnformatted(label, label_display_end);
    }

    // Convert back
    if (picker_active_window == NULL)
    {
        if (!value_changed_as_float) 
            for (int n = 0; n < 4; n++)
                f[n] = i[n] / 255.0f;
        if (flags & ImGuiColorEditFlags_HSV)
            ColorConvertHSVtoRGB(f[0], f[1], f[2], f[0], f[1], f[2]);
        if (value_changed)
        {
            col[0] = f[0];
            col[1] = f[1];
            col[2] = f[2];
            if (alpha)
                col[3] = f[3];
        }
    }

    PopID();
    EndGroup();

    // Drag and Drop Target
    if ((window->DC.LastItemStatusFlags & ImGuiItemStatusFlags_HoveredRect) && BeginDragDropTarget()) // NB: The flag test is merely an optional micro-optimization, BeginDragDropTarget() does the same test.
    {
        if (const ImGuiPayload* payload = AcceptDragDropPayload(IMGUI_PAYLOAD_TYPE_COLOR_3F))
        {
            memcpy((float*)col, payload->Data, sizeof(float) * 3);
            value_changed = true;
        }
        if (const ImGuiPayload* payload = AcceptDragDropPayload(IMGUI_PAYLOAD_TYPE_COLOR_4F))
        {
            memcpy((float*)col, payload->Data, sizeof(float) * components);
            value_changed = true;
        }
        EndDragDropTarget();
    }

    // When picker is being actively used, use its active id so IsItemActive() will function on ColorEdit4().
    if (picker_active_window && g.ActiveId != 0 && g.ActiveIdWindow == picker_active_window)
        window->DC.LastItemId = g.ActiveId;

    return value_changed;
}

bool ImGui::ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags)
{
    float col4[4] = { col[0], col[1], col[2], 1.0f };
    if (!ColorPicker4(label, col4, flags | ImGuiColorEditFlags_NoAlpha))
        return false;
    col[0] = col4[0]; col[1] = col4[1]; col[2] = col4[2];
    return true;
}

// 'pos' is position of the arrow tip. half_sz.x is length from base to tip. half_sz.y is length on each side.
static void RenderArrow(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, ImGuiDir direction, ImU32 col)
{
    switch (direction)
    {
    case ImGuiDir_Left:  draw_list->AddTriangleFilled(ImVec2(pos.x + half_sz.x, pos.y - half_sz.y), ImVec2(pos.x + half_sz.x, pos.y + half_sz.y), pos, col); return;
    case ImGuiDir_Right: draw_list->AddTriangleFilled(ImVec2(pos.x - half_sz.x, pos.y + half_sz.y), ImVec2(pos.x - half_sz.x, pos.y - half_sz.y), pos, col); return;
    case ImGuiDir_Up:    draw_list->AddTriangleFilled(ImVec2(pos.x + half_sz.x, pos.y + half_sz.y), ImVec2(pos.x - half_sz.x, pos.y + half_sz.y), pos, col); return;
    case ImGuiDir_Down:  draw_list->AddTriangleFilled(ImVec2(pos.x - half_sz.x, pos.y - half_sz.y), ImVec2(pos.x + half_sz.x, pos.y - half_sz.y), pos, col); return;
    case ImGuiDir_None: case ImGuiDir_COUNT: break; // Fix warnings
    }
}

static void RenderArrowsForVerticalBar(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, float bar_w)
{
    RenderArrow(draw_list, ImVec2(pos.x + half_sz.x + 1,         pos.y), ImVec2(half_sz.x + 2, half_sz.y + 1), ImGuiDir_Right, IM_COL32_BLACK);
    RenderArrow(draw_list, ImVec2(pos.x + half_sz.x,             pos.y), half_sz,                              ImGuiDir_Right, IM_COL32_WHITE);
    RenderArrow(draw_list, ImVec2(pos.x + bar_w - half_sz.x - 1, pos.y), ImVec2(half_sz.x + 2, half_sz.y + 1), ImGuiDir_Left,  IM_COL32_BLACK);
    RenderArrow(draw_list, ImVec2(pos.x + bar_w - half_sz.x,     pos.y), half_sz,                              ImGuiDir_Left,  IM_COL32_WHITE);
}

// ColorPicker
// Note: only access 3 floats if ImGuiColorEditFlags_NoAlpha flag is set.
// FIXME: we adjust the big color square height based on item width, which may cause a flickering feedback loop (if automatic height makes a vertical scrollbar appears, affecting automatic width..) 
bool ImGui::ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags, const float* ref_col)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();
    ImDrawList* draw_list = window->DrawList;

    ImGuiStyle& style = g.Style;
    ImGuiIO& io = g.IO;

    PushID(label);
    BeginGroup();

    if (!(flags & ImGuiColorEditFlags_NoSidePreview))
        flags |= ImGuiColorEditFlags_NoSmallPreview;

    // Context menu: display and store options.
    if (!(flags & ImGuiColorEditFlags_NoOptions))
        ColorPickerOptionsPopup(flags, col);

    // Read stored options
    if (!(flags & ImGuiColorEditFlags__PickerMask))
        flags |= ((g.ColorEditOptions & ImGuiColorEditFlags__PickerMask) ? g.ColorEditOptions : ImGuiColorEditFlags__OptionsDefault) & ImGuiColorEditFlags__PickerMask; 
    IM_ASSERT(ImIsPowerOfTwo((int)(flags & ImGuiColorEditFlags__PickerMask))); // Check that only 1 is selected
    if (!(flags & ImGuiColorEditFlags_NoOptions))
        flags |= (g.ColorEditOptions & ImGuiColorEditFlags_AlphaBar);

    // Setup
    int components = (flags & ImGuiColorEditFlags_NoAlpha) ? 3 : 4;
    bool alpha_bar = (flags & ImGuiColorEditFlags_AlphaBar) && !(flags & ImGuiColorEditFlags_NoAlpha);
    ImVec2 picker_pos = window->DC.CursorPos;
    float square_sz = GetFrameHeight();
    float bars_width = square_sz; // Arbitrary smallish width of Hue/Alpha picking bars
    float sv_picker_size = ImMax(bars_width * 1, CalcItemWidth() - (alpha_bar ? 2 : 1) * (bars_width + style.ItemInnerSpacing.x)); // Saturation/Value picking box
    float bar0_pos_x = picker_pos.x + sv_picker_size + style.ItemInnerSpacing.x;
    float bar1_pos_x = bar0_pos_x + bars_width + style.ItemInnerSpacing.x;
    float bars_triangles_half_sz = (float)(int)(bars_width * 0.20f);

    float backup_initial_col[4];
    memcpy(backup_initial_col, col, components * sizeof(float));

    float wheel_thickness = sv_picker_size * 0.08f;
    float wheel_r_outer = sv_picker_size * 0.50f;
    float wheel_r_inner = wheel_r_outer - wheel_thickness;
    ImVec2 wheel_center(picker_pos.x + (sv_picker_size + bars_width)*0.5f, picker_pos.y + sv_picker_size*0.5f);
    
    // Note: the triangle is displayed rotated with triangle_pa pointing to Hue, but most coordinates stays unrotated for logic.
    float triangle_r = wheel_r_inner - (int)(sv_picker_size * 0.027f);
    ImVec2 triangle_pa = ImVec2(triangle_r, 0.0f); // Hue point.
    ImVec2 triangle_pb = ImVec2(triangle_r * -0.5f, triangle_r * -0.866025f); // Black point.
    ImVec2 triangle_pc = ImVec2(triangle_r * -0.5f, triangle_r * +0.866025f); // White point.

    float H,S,V;
    ColorConvertRGBtoHSV(col[0], col[1], col[2], H, S, V);

    bool value_changed = false, value_changed_h = false, value_changed_sv = false;

    PushItemFlag(ImGuiItemFlags_NoNav, true);
    if (flags & ImGuiColorEditFlags_PickerHueWheel)
    {
        // Hue wheel + SV triangle logic
        InvisibleButton("hsv", ImVec2(sv_picker_size + style.ItemInnerSpacing.x + bars_width, sv_picker_size));
        if (IsItemActive())
        {
            ImVec2 initial_off = g.IO.MouseClickedPos[0] - wheel_center;
            ImVec2 current_off = g.IO.MousePos - wheel_center;
            float initial_dist2 = ImLengthSqr(initial_off);
            if (initial_dist2 >= (wheel_r_inner-1)*(wheel_r_inner-1) && initial_dist2 <= (wheel_r_outer+1)*(wheel_r_outer+1))
            {
                // Interactive with Hue wheel
                H = atan2f(current_off.y, current_off.x) / IM_PI*0.5f;
                if (H < 0.0f)
                    H += 1.0f;
                value_changed = value_changed_h = true;
            }
            float cos_hue_angle = cosf(-H * 2.0f * IM_PI);
            float sin_hue_angle = sinf(-H * 2.0f * IM_PI);
            if (ImTriangleContainsPoint(triangle_pa, triangle_pb, triangle_pc, ImRotate(initial_off, cos_hue_angle, sin_hue_angle)))
            {
                // Interacting with SV triangle
                ImVec2 current_off_unrotated = ImRotate(current_off, cos_hue_angle, sin_hue_angle);
                if (!ImTriangleContainsPoint(triangle_pa, triangle_pb, triangle_pc, current_off_unrotated))
                    current_off_unrotated = ImTriangleClosestPoint(triangle_pa, triangle_pb, triangle_pc, current_off_unrotated);
                float uu, vv, ww;
                ImTriangleBarycentricCoords(triangle_pa, triangle_pb, triangle_pc, current_off_unrotated, uu, vv, ww);
                V = ImClamp(1.0f - vv, 0.0001f, 1.0f);
                S = ImClamp(uu / V, 0.0001f, 1.0f);
                value_changed = value_changed_sv = true;
            }
        }
        if (!(flags & ImGuiColorEditFlags_NoOptions))
            OpenPopupOnItemClick("context");
    }
    else if (flags & ImGuiColorEditFlags_PickerHueBar)
    {
        // SV rectangle logic
        InvisibleButton("sv", ImVec2(sv_picker_size, sv_picker_size));
        if (IsItemActive())
        {
            S = ImSaturate((io.MousePos.x - picker_pos.x) / (sv_picker_size-1));
            V = 1.0f - ImSaturate((io.MousePos.y - picker_pos.y) / (sv_picker_size-1));
            value_changed = value_changed_sv = true;
        }
        if (!(flags & ImGuiColorEditFlags_NoOptions))
            OpenPopupOnItemClick("context");

        // Hue bar logic
        SetCursorScreenPos(ImVec2(bar0_pos_x, picker_pos.y));
        InvisibleButton("hue", ImVec2(bars_width, sv_picker_size));
        if (IsItemActive())
        {
            H = ImSaturate((io.MousePos.y - picker_pos.y) / (sv_picker_size-1));
            value_changed = value_changed_h = true;
        }
    }

    // Alpha bar logic
    if (alpha_bar)
    {
        SetCursorScreenPos(ImVec2(bar1_pos_x, picker_pos.y));
        InvisibleButton("alpha", ImVec2(bars_width, sv_picker_size));
        if (IsItemActive())
        {
            col[3] = 1.0f - ImSaturate((io.MousePos.y - picker_pos.y) / (sv_picker_size-1));
            value_changed = true;
        }
    }
    PopItemFlag(); // ImGuiItemFlags_NoNav

    if (!(flags & ImGuiColorEditFlags_NoSidePreview))
    {
        SameLine(0, style.ItemInnerSpacing.x);
        BeginGroup();
    }

    if (!(flags & ImGuiColorEditFlags_NoLabel))
    {
        const char* label_display_end = FindRenderedTextEnd(label);
        if (label != label_display_end)
        {
            if ((flags & ImGuiColorEditFlags_NoSidePreview))
                SameLine(0, style.ItemInnerSpacing.x);
            TextUnformatted(label, label_display_end);
        }
    }

    if (!(flags & ImGuiColorEditFlags_NoSidePreview))
    {
        PushItemFlag(ImGuiItemFlags_NoNavDefaultFocus, true);
        ImVec4 col_v4(col[0], col[1], col[2], (flags & ImGuiColorEditFlags_NoAlpha) ? 1.0f : col[3]);
        if ((flags & ImGuiColorEditFlags_NoLabel))
            Text("Current");
        ColorButton("##current", col_v4, (flags & (ImGuiColorEditFlags_HDR|ImGuiColorEditFlags_AlphaPreview|ImGuiColorEditFlags_AlphaPreviewHalf|ImGuiColorEditFlags_NoTooltip)), ImVec2(square_sz * 3, square_sz * 2));
        if (ref_col != NULL)
        {
            Text("Original");
            ImVec4 ref_col_v4(ref_col[0], ref_col[1], ref_col[2], (flags & ImGuiColorEditFlags_NoAlpha) ? 1.0f : ref_col[3]);
            if (ColorButton("##original", ref_col_v4, (flags & (ImGuiColorEditFlags_HDR|ImGuiColorEditFlags_AlphaPreview|ImGuiColorEditFlags_AlphaPreviewHalf|ImGuiColorEditFlags_NoTooltip)), ImVec2(square_sz * 3, square_sz * 2)))
            {
                memcpy(col, ref_col, components * sizeof(float));
                value_changed = true;
            }
        }
        PopItemFlag();
        EndGroup();
    }

    // Convert back color to RGB
    if (value_changed_h || value_changed_sv)
        ColorConvertHSVtoRGB(H >= 1.0f ? H - 10 * 1e-6f : H, S > 0.0f ? S : 10*1e-6f, V > 0.0f ? V : 1e-6f, col[0], col[1], col[2]);

    // R,G,B and H,S,V slider color editor
    if ((flags & ImGuiColorEditFlags_NoInputs) == 0)
    {
        PushItemWidth((alpha_bar ? bar1_pos_x : bar0_pos_x) + bars_width - picker_pos.x);
        ImGuiColorEditFlags sub_flags_to_forward = ImGuiColorEditFlags__DataTypeMask | ImGuiColorEditFlags_HDR | ImGuiColorEditFlags_NoAlpha | ImGuiColorEditFlags_NoOptions | ImGuiColorEditFlags_NoSmallPreview | ImGuiColorEditFlags_AlphaPreview | ImGuiColorEditFlags_AlphaPreviewHalf;
        ImGuiColorEditFlags sub_flags = (flags & sub_flags_to_forward) | ImGuiColorEditFlags_NoPicker;
        if (flags & ImGuiColorEditFlags_RGB || (flags & ImGuiColorEditFlags__InputsMask) == 0)
            value_changed |= ColorEdit4("##rgb", col, sub_flags | ImGuiColorEditFlags_RGB);
        if (flags & ImGuiColorEditFlags_HSV || (flags & ImGuiColorEditFlags__InputsMask) == 0)
            value_changed |= ColorEdit4("##hsv", col, sub_flags | ImGuiColorEditFlags_HSV);
        if (flags & ImGuiColorEditFlags_HEX || (flags & ImGuiColorEditFlags__InputsMask) == 0)
            value_changed |= ColorEdit4("##hex", col, sub_flags | ImGuiColorEditFlags_HEX);
        PopItemWidth();
    }

    // Try to cancel hue wrap (after ColorEdit), if any
    if (value_changed)
    {
        float new_H, new_S, new_V;
        ColorConvertRGBtoHSV(col[0], col[1], col[2], new_H, new_S, new_V);
        if (new_H <= 0 && H > 0) 
        {
            if (new_V <= 0 && V != new_V)
                ColorConvertHSVtoRGB(H, S, new_V <= 0 ? V * 0.5f : new_V, col[0], col[1], col[2]);
            else if (new_S <= 0)
                ColorConvertHSVtoRGB(H, new_S <= 0 ? S * 0.5f : new_S, new_V, col[0], col[1], col[2]);
        }
    }

    ImVec4 hue_color_f(1, 1, 1, 1); ColorConvertHSVtoRGB(H, 1, 1, hue_color_f.x, hue_color_f.y, hue_color_f.z);
    ImU32 hue_color32 = ColorConvertFloat4ToU32(hue_color_f);
    ImU32 col32_no_alpha = ColorConvertFloat4ToU32(ImVec4(col[0], col[1], col[2], 1.0f));

    const ImU32 hue_colors[6+1] = { IM_COL32(255,0,0,255), IM_COL32(255,255,0,255), IM_COL32(0,255,0,255), IM_COL32(0,255,255,255), IM_COL32(0,0,255,255), IM_COL32(255,0,255,255), IM_COL32(255,0,0,255) };
    ImVec2 sv_cursor_pos;
    
    if (flags & ImGuiColorEditFlags_PickerHueWheel)
    {
        // Render Hue Wheel
        const float aeps = 1.5f / wheel_r_outer; // Half a pixel arc length in radians (2pi cancels out).
        const int segment_per_arc = ImMax(4, (int)wheel_r_outer / 12);
        for (int n = 0; n < 6; n++)
        {
            const float a0 = (n)     /6.0f * 2.0f * IM_PI - aeps;
            const float a1 = (n+1.0f)/6.0f * 2.0f * IM_PI + aeps;
            const int vert_start_idx = draw_list->VtxBuffer.Size;
            draw_list->PathArcTo(wheel_center, (wheel_r_inner + wheel_r_outer)*0.5f, a0, a1, segment_per_arc);
            draw_list->PathStroke(IM_COL32_WHITE, false, wheel_thickness);
            const int vert_end_idx = draw_list->VtxBuffer.Size;

            // Paint colors over existing vertices
            ImVec2 gradient_p0(wheel_center.x + cosf(a0) * wheel_r_inner, wheel_center.y + sinf(a0) * wheel_r_inner);
            ImVec2 gradient_p1(wheel_center.x + cosf(a1) * wheel_r_inner, wheel_center.y + sinf(a1) * wheel_r_inner);
            ShadeVertsLinearColorGradientKeepAlpha(draw_list->VtxBuffer.Data + vert_start_idx, draw_list->VtxBuffer.Data + vert_end_idx, gradient_p0, gradient_p1, hue_colors[n], hue_colors[n+1]);
        }

        // Render Cursor + preview on Hue Wheel
        float cos_hue_angle = cosf(H * 2.0f * IM_PI);
        float sin_hue_angle = sinf(H * 2.0f * IM_PI);
        ImVec2 hue_cursor_pos(wheel_center.x + cos_hue_angle * (wheel_r_inner+wheel_r_outer)*0.5f, wheel_center.y + sin_hue_angle * (wheel_r_inner+wheel_r_outer)*0.5f);
        float hue_cursor_rad = value_changed_h ? wheel_thickness * 0.65f : wheel_thickness * 0.55f;
        int hue_cursor_segments = ImClamp((int)(hue_cursor_rad / 1.4f), 9, 32);
        draw_list->AddCircleFilled(hue_cursor_pos, hue_cursor_rad, hue_color32, hue_cursor_segments);
        draw_list->AddCircle(hue_cursor_pos, hue_cursor_rad+1, IM_COL32(128,128,128,255), hue_cursor_segments);
        draw_list->AddCircle(hue_cursor_pos, hue_cursor_rad, IM_COL32_WHITE, hue_cursor_segments);

        // Render SV triangle (rotated according to hue)
        ImVec2 tra = wheel_center + ImRotate(triangle_pa, cos_hue_angle, sin_hue_angle);
        ImVec2 trb = wheel_center + ImRotate(triangle_pb, cos_hue_angle, sin_hue_angle);
        ImVec2 trc = wheel_center + ImRotate(triangle_pc, cos_hue_angle, sin_hue_angle);
        ImVec2 uv_white = GetFontTexUvWhitePixel();
        draw_list->PrimReserve(6, 6);
        draw_list->PrimVtx(tra, uv_white, hue_color32);
        draw_list->PrimVtx(trb, uv_white, hue_color32);
        draw_list->PrimVtx(trc, uv_white, IM_COL32_WHITE);
        draw_list->PrimVtx(tra, uv_white, IM_COL32_BLACK_TRANS);
        draw_list->PrimVtx(trb, uv_white, IM_COL32_BLACK);
        draw_list->PrimVtx(trc, uv_white, IM_COL32_BLACK_TRANS);
        draw_list->AddTriangle(tra, trb, trc, IM_COL32(128,128,128,255), 1.5f);
        sv_cursor_pos = ImLerp(ImLerp(trc, tra, ImSaturate(S)), trb, ImSaturate(1 - V));
    }
    else if (flags & ImGuiColorEditFlags_PickerHueBar)
    {
        // Render SV Square
        draw_list->AddRectFilledMultiColor(picker_pos, picker_pos + ImVec2(sv_picker_size,sv_picker_size), IM_COL32_WHITE, hue_color32, hue_color32, IM_COL32_WHITE);
        draw_list->AddRectFilledMultiColor(picker_pos, picker_pos + ImVec2(sv_picker_size,sv_picker_size), IM_COL32_BLACK_TRANS, IM_COL32_BLACK_TRANS, IM_COL32_BLACK, IM_COL32_BLACK);
        RenderFrameBorder(picker_pos, picker_pos + ImVec2(sv_picker_size,sv_picker_size), 0.0f);
        sv_cursor_pos.x = ImClamp((float)(int)(picker_pos.x + ImSaturate(S)     * sv_picker_size + 0.5f), picker_pos.x + 2, picker_pos.x + sv_picker_size - 2); // Sneakily prevent the circle to stick out too much
        sv_cursor_pos.y = ImClamp((float)(int)(picker_pos.y + ImSaturate(1 - V) * sv_picker_size + 0.5f), picker_pos.y + 2, picker_pos.y + sv_picker_size - 2);

        // Render Hue Bar
        for (int i = 0; i < 6; ++i)
            draw_list->AddRectFilledMultiColor(ImVec2(bar0_pos_x, picker_pos.y + i * (sv_picker_size / 6)), ImVec2(bar0_pos_x + bars_width, picker_pos.y + (i + 1) * (sv_picker_size / 6)), hue_colors[i], hue_colors[i], hue_colors[i + 1], hue_colors[i + 1]);
        float bar0_line_y = (float)(int)(picker_pos.y + H * sv_picker_size + 0.5f);
        RenderFrameBorder(ImVec2(bar0_pos_x, picker_pos.y), ImVec2(bar0_pos_x + bars_width, picker_pos.y + sv_picker_size), 0.0f);
        RenderArrowsForVerticalBar(draw_list, ImVec2(bar0_pos_x - 1, bar0_line_y), ImVec2(bars_triangles_half_sz + 1, bars_triangles_half_sz), bars_width + 2.0f);
    }

    // Render cursor/preview circle (clamp S/V within 0..1 range because floating points colors may lead HSV values to be out of range)
    float sv_cursor_rad = value_changed_sv ? 10.0f : 6.0f;
    draw_list->AddCircleFilled(sv_cursor_pos, sv_cursor_rad, col32_no_alpha, 12);
    draw_list->AddCircle(sv_cursor_pos, sv_cursor_rad+1, IM_COL32(128,128,128,255), 12);
    draw_list->AddCircle(sv_cursor_pos, sv_cursor_rad, IM_COL32_WHITE, 12);

    // Render alpha bar
    if (alpha_bar)
    {
        float alpha = ImSaturate(col[3]);
        ImRect bar1_bb(bar1_pos_x, picker_pos.y, bar1_pos_x + bars_width, picker_pos.y + sv_picker_size);
        RenderColorRectWithAlphaCheckerboard(bar1_bb.Min, bar1_bb.Max, IM_COL32(0,0,0,0), bar1_bb.GetWidth() / 2.0f, ImVec2(0.0f, 0.0f));
        draw_list->AddRectFilledMultiColor(bar1_bb.Min, bar1_bb.Max, col32_no_alpha, col32_no_alpha, col32_no_alpha & ~IM_COL32_A_MASK, col32_no_alpha & ~IM_COL32_A_MASK);
        float bar1_line_y = (float)(int)(picker_pos.y + (1.0f - alpha) * sv_picker_size + 0.5f);
        RenderFrameBorder(bar1_bb.Min, bar1_bb.Max, 0.0f);
        RenderArrowsForVerticalBar(draw_list, ImVec2(bar1_pos_x - 1, bar1_line_y), ImVec2(bars_triangles_half_sz + 1, bars_triangles_half_sz), bars_width + 2.0f);
    }

    EndGroup();
    PopID();

    return value_changed && memcmp(backup_initial_col, col, components * sizeof(float));
}

// Horizontal separating line.
void ImGui::Separator()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;
    ImGuiContext& g = *GImGui;

    ImGuiSeparatorFlags flags = 0;
    if ((flags & (ImGuiSeparatorFlags_Horizontal | ImGuiSeparatorFlags_Vertical)) == 0)
        flags |= (window->DC.LayoutType == ImGuiLayoutType_Horizontal) ? ImGuiSeparatorFlags_Vertical : ImGuiSeparatorFlags_Horizontal;
    IM_ASSERT(ImIsPowerOfTwo((int)(flags & (ImGuiSeparatorFlags_Horizontal | ImGuiSeparatorFlags_Vertical))));   // Check that only 1 option is selected
    if (flags & ImGuiSeparatorFlags_Vertical)
    {
        VerticalSeparator();
        return;
    }

    // Horizontal Separator
    if (window->DC.ColumnsSet)
        PopClipRect();

    float x1 = window->Pos.x;
    float x2 = window->Pos.x + window->Size.x;
    if (!window->DC.GroupStack.empty())
        x1 += window->DC.IndentX;

    const ImRect bb(ImVec2(x1, window->DC.CursorPos.y), ImVec2(x2, window->DC.CursorPos.y+1.0f));
    ItemSize(ImVec2(0.0f, 0.0f)); // NB: we don't provide our width so that it doesn't get feed back into AutoFit, we don't provide height to not alter layout.
    if (!ItemAdd(bb, 0))
    {
        if (window->DC.ColumnsSet)
            PushColumnClipRect();
        return;
    }

    window->DrawList->AddLine(bb.Min, ImVec2(bb.Max.x,bb.Min.y), GetColorU32(ImGuiCol_Separator));

    if (g.LogEnabled)
            LogRenderedText(NULL, IM_NEWLINE "--------------------------------");

    if (window->DC.ColumnsSet)
    {
        PushColumnClipRect();
        window->DC.ColumnsSet->LineMinY = window->DC.CursorPos.y;
    }
}

void ImGui::VerticalSeparator()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;
    ImGuiContext& g = *GImGui;

    float y1 = window->DC.CursorPos.y;
    float y2 = window->DC.CursorPos.y + window->DC.CurrentLineHeight; 
    const ImRect bb(ImVec2(window->DC.CursorPos.x, y1), ImVec2(window->DC.CursorPos.x + 1.0f, y2));
    ItemSize(ImVec2(bb.GetWidth(), 0.0f));
    if (!ItemAdd(bb, 0))
        return;

    window->DrawList->AddLine(ImVec2(bb.Min.x, bb.Min.y), ImVec2(bb.Min.x, bb.Max.y), GetColorU32(ImGuiCol_Separator));
    if (g.LogEnabled)
        LogText(" |");
}

bool ImGui::SplitterBehavior(ImGuiID id, const ImRect& bb, ImGuiAxis axis, float* size1, float* size2, float min_size1, float min_size2, float hover_extend)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    const ImGuiItemFlags item_flags_backup = window->DC.ItemFlags;
    window->DC.ItemFlags |= ImGuiItemFlags_NoNav | ImGuiItemFlags_NoNavDefaultFocus;
    bool item_add = ItemAdd(bb, id);
    window->DC.ItemFlags = item_flags_backup;
    if (!item_add)
        return false;

    bool hovered, held;
    ImRect bb_interact = bb;
    bb_interact.Expand(axis == ImGuiAxis_Y ? ImVec2(0.0f, hover_extend) : ImVec2(hover_extend, 0.0f));
    ButtonBehavior(bb_interact, id, &hovered, &held, ImGuiButtonFlags_FlattenChildren | ImGuiButtonFlags_AllowItemOverlap);
    if (g.ActiveId != id)
        SetItemAllowOverlap();

    if (held || (g.HoveredId == id && g.HoveredIdPreviousFrame == id))
        SetMouseCursor(axis == ImGuiAxis_Y ? ImGuiMouseCursor_ResizeNS : ImGuiMouseCursor_ResizeEW);

    ImRect bb_render = bb;
    if (held)
    {
        ImVec2 mouse_delta_2d = g.IO.MousePos - g.ActiveIdClickOffset - bb_interact.Min;
        float mouse_delta = (axis == ImGuiAxis_Y) ? mouse_delta_2d.y : mouse_delta_2d.x;

        // Minimum pane size
        if (mouse_delta < min_size1 - *size1)
            mouse_delta = min_size1 - *size1;
        if (mouse_delta > *size2 - min_size2)
            mouse_delta = *size2 - min_size2;

        // Apply resize
        *size1 += mouse_delta;
        *size2 -= mouse_delta;
        bb_render.Translate((axis == ImGuiAxis_X) ? ImVec2(mouse_delta, 0.0f) : ImVec2(0.0f, mouse_delta));
    }

    // Render
    const ImU32 col = GetColorU32(held ? ImGuiCol_SeparatorActive : hovered ? ImGuiCol_SeparatorHovered : ImGuiCol_Separator);
    window->DrawList->AddRectFilled(bb_render.Min, bb_render.Max, col, g.Style.FrameRounding);

    return held;
}

void ImGui::Spacing()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;
    ItemSize(ImVec2(0,0));
}

void ImGui::Dummy(const ImVec2& size)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size);
    ItemSize(bb);
    ItemAdd(bb, 0);
}

bool ImGui::IsRectVisible(const ImVec2& size)
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->ClipRect.Overlaps(ImRect(window->DC.CursorPos, window->DC.CursorPos + size));
}

bool ImGui::IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max)
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->ClipRect.Overlaps(ImRect(rect_min, rect_max));
}

// Lock horizontal starting position + capture group bounding box into one "item" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)
void ImGui::BeginGroup()
{
    ImGuiWindow* window = GetCurrentWindow();

    window->DC.GroupStack.resize(window->DC.GroupStack.Size + 1);
    ImGuiGroupData& group_data = window->DC.GroupStack.back();
    group_data.BackupCursorPos = window->DC.CursorPos;
    group_data.BackupCursorMaxPos = window->DC.CursorMaxPos;
    group_data.BackupIndentX = window->DC.IndentX;
    group_data.BackupGroupOffsetX = window->DC.GroupOffsetX;
    group_data.BackupCurrentLineHeight = window->DC.CurrentLineHeight;
    group_data.BackupCurrentLineTextBaseOffset = window->DC.CurrentLineTextBaseOffset;
    group_data.BackupLogLinePosY = window->DC.LogLinePosY;
    group_data.BackupActiveIdIsAlive = GImGui->ActiveIdIsAlive;
    group_data.AdvanceCursor = true;

    window->DC.GroupOffsetX = window->DC.CursorPos.x - window->Pos.x - window->DC.ColumnsOffsetX;
    window->DC.IndentX = window->DC.GroupOffsetX;
    window->DC.CursorMaxPos = window->DC.CursorPos;
    window->DC.CurrentLineHeight = 0.0f;
    window->DC.LogLinePosY = window->DC.CursorPos.y - 9999.0f;
}

void ImGui::EndGroup()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();

    IM_ASSERT(!window->DC.GroupStack.empty());    // Mismatched BeginGroup()/EndGroup() calls

    ImGuiGroupData& group_data = window->DC.GroupStack.back();

    ImRect group_bb(group_data.BackupCursorPos, window->DC.CursorMaxPos);
    group_bb.Max = ImMax(group_bb.Min, group_bb.Max);

    window->DC.CursorPos = group_data.BackupCursorPos;
    window->DC.CursorMaxPos = ImMax(group_data.BackupCursorMaxPos, window->DC.CursorMaxPos);
    window->DC.CurrentLineHeight = group_data.BackupCurrentLineHeight;
    window->DC.CurrentLineTextBaseOffset = group_data.BackupCurrentLineTextBaseOffset;
    window->DC.IndentX = group_data.BackupIndentX;
    window->DC.GroupOffsetX = group_data.BackupGroupOffsetX;
    window->DC.LogLinePosY = window->DC.CursorPos.y - 9999.0f;

    if (group_data.AdvanceCursor)
    {
        window->DC.CurrentLineTextBaseOffset = ImMax(window->DC.PrevLineTextBaseOffset, group_data.BackupCurrentLineTextBaseOffset);      // FIXME: Incorrect, we should grab the base offset from the *first line* of the group but it is hard to obtain now.
        ItemSize(group_bb.GetSize(), group_data.BackupCurrentLineTextBaseOffset);
        ItemAdd(group_bb, 0);
    }

    // If the current ActiveId was declared within the boundary of our group, we copy it to LastItemId so IsItemActive() will be functional on the entire group.
    // It would be be neater if we replaced window.DC.LastItemId by e.g. 'bool LastItemIsActive', but if you search for LastItemId you'll notice it is only used in that context.
    const bool active_id_within_group = (!group_data.BackupActiveIdIsAlive && g.ActiveIdIsAlive && g.ActiveId && g.ActiveIdWindow->RootWindow == window->RootWindow);
    if (active_id_within_group)
        window->DC.LastItemId = g.ActiveId;
    window->DC.LastItemRect = group_bb;

    window->DC.GroupStack.pop_back();

    //window->DrawList->AddRect(group_bb.Min, group_bb.Max, IM_COL32(255,0,255,255));   // [Debug]
}

// Gets back to previous line and continue with horizontal layout
//      pos_x == 0      : follow right after previous item
//      pos_x != 0      : align to specified x position (relative to window/group left)
//      spacing_w < 0   : use default spacing if pos_x == 0, no spacing if pos_x != 0
//      spacing_w >= 0  : enforce spacing amount
void ImGui::SameLine(float pos_x, float spacing_w)
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    if (pos_x != 0.0f)
    {
        if (spacing_w < 0.0f) spacing_w = 0.0f;
        window->DC.CursorPos.x = window->Pos.x - window->Scroll.x + pos_x + spacing_w + window->DC.GroupOffsetX + window->DC.ColumnsOffsetX;
        window->DC.CursorPos.y = window->DC.CursorPosPrevLine.y;
    }
    else
    {
        if (spacing_w < 0.0f) spacing_w = g.Style.ItemSpacing.x;
        window->DC.CursorPos.x = window->DC.CursorPosPrevLine.x + spacing_w;
        window->DC.CursorPos.y = window->DC.CursorPosPrevLine.y;
    }
    window->DC.CurrentLineHeight = window->DC.PrevLineHeight;
    window->DC.CurrentLineTextBaseOffset = window->DC.PrevLineTextBaseOffset;
}

void ImGui::NewLine()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems)
        return;

    ImGuiContext& g = *GImGui;
    const ImGuiLayoutType backup_layout_type = window->DC.LayoutType;
    window->DC.LayoutType = ImGuiLayoutType_Vertical;
    if (window->DC.CurrentLineHeight > 0.0f)     // In the event that we are on a line with items that is smaller that FontSize high, we will preserve its height.
        ItemSize(ImVec2(0,0));
    else
        ItemSize(ImVec2(0.0f, g.FontSize));
    window->DC.LayoutType = backup_layout_type;
}

void ImGui::NextColumn()
{
    ImGuiWindow* window = GetCurrentWindow();
    if (window->SkipItems || window->DC.ColumnsSet == NULL)
        return;

    ImGuiContext& g = *GImGui;
    PopItemWidth();
    PopClipRect();

    ImGuiColumnsSet* columns = window->DC.ColumnsSet;
    columns->LineMaxY = ImMax(columns->LineMaxY, window->DC.CursorPos.y);
    if (++columns->Current < columns->Count)
    {
        // Columns 1+ cancel out IndentX
        window->DC.ColumnsOffsetX = GetColumnOffset(columns->Current) - window->DC.IndentX + g.Style.ItemSpacing.x;
        window->DrawList->ChannelsSetCurrent(columns->Current);
    }
    else
    {
        window->DC.ColumnsOffsetX = 0.0f;
        window->DrawList->ChannelsSetCurrent(0);
        columns->Current = 0;
        columns->LineMinY = columns->LineMaxY;
    }
    window->DC.CursorPos.x = (float)(int)(window->Pos.x + window->DC.IndentX + window->DC.ColumnsOffsetX);
    window->DC.CursorPos.y = columns->LineMinY;
    window->DC.CurrentLineHeight = 0.0f;
    window->DC.CurrentLineTextBaseOffset = 0.0f;

    PushColumnClipRect();
    PushItemWidth(GetColumnWidth() * 0.65f);  // FIXME: Move on columns setup
}

int ImGui::GetColumnIndex()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.ColumnsSet ? window->DC.ColumnsSet->Current : 0;
}

int ImGui::GetColumnsCount()
{
    ImGuiWindow* window = GetCurrentWindowRead();
    return window->DC.ColumnsSet ? window->DC.ColumnsSet->Count : 1;
}

static float OffsetNormToPixels(const ImGuiColumnsSet* columns, float offset_norm)
{
    return offset_norm * (columns->MaxX - columns->MinX);
}

static float PixelsToOffsetNorm(const ImGuiColumnsSet* columns, float offset)
{
    return offset / (columns->MaxX - columns->MinX);
}

static inline float GetColumnsRectHalfWidth() { return 4.0f; }

static float GetDraggedColumnOffset(ImGuiColumnsSet* columns, int column_index)
{
    // Active (dragged) column always follow mouse. The reason we need this is that dragging a column to the right edge of an auto-resizing
    // window creates a feedback loop because we store normalized positions. So while dragging we enforce absolute positioning.
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    IM_ASSERT(column_index > 0); // We are not supposed to drag column 0.
    IM_ASSERT(g.ActiveId == columns->ID + ImGuiID(column_index));

    float x = g.IO.MousePos.x - g.ActiveIdClickOffset.x + GetColumnsRectHalfWidth() - window->Pos.x;
    x = ImMax(x, ImGui::GetColumnOffset(column_index - 1) + g.Style.ColumnsMinSpacing);
    if ((columns->Flags & ImGuiColumnsFlags_NoPreserveWidths))
        x = ImMin(x, ImGui::GetColumnOffset(column_index + 1) - g.Style.ColumnsMinSpacing);

    return x;
}

float ImGui::GetColumnOffset(int column_index)
{
    ImGuiWindow* window = GetCurrentWindowRead();
    ImGuiColumnsSet* columns = window->DC.ColumnsSet;
    IM_ASSERT(columns != NULL);

    if (column_index < 0)
        column_index = columns->Current;
    IM_ASSERT(column_index < columns->Columns.Size);

    const float t = columns->Columns[column_index].OffsetNorm;
    const float x_offset = ImLerp(columns->MinX, columns->MaxX, t);
    return x_offset;
}

static float GetColumnWidthEx(ImGuiColumnsSet* columns, int column_index, bool before_resize = false)
{
    if (column_index < 0)
        column_index = columns->Current;

    float offset_norm;
    if (before_resize)
        offset_norm = columns->Columns[column_index + 1].OffsetNormBeforeResize - columns->Columns[column_index].OffsetNormBeforeResize;
    else
        offset_norm = columns->Columns[column_index + 1].OffsetNorm - columns->Columns[column_index].OffsetNorm;
    return OffsetNormToPixels(columns, offset_norm);
}

float ImGui::GetColumnWidth(int column_index)
{
    ImGuiWindow* window = GetCurrentWindowRead();
    ImGuiColumnsSet* columns = window->DC.ColumnsSet;
    IM_ASSERT(columns != NULL);

    if (column_index < 0)
        column_index = columns->Current;
    return OffsetNormToPixels(columns, columns->Columns[column_index + 1].OffsetNorm - columns->Columns[column_index].OffsetNorm);
}

void ImGui::SetColumnOffset(int column_index, float offset)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    ImGuiColumnsSet* columns = window->DC.ColumnsSet;
    IM_ASSERT(columns != NULL);

    if (column_index < 0)
        column_index = columns->Current;
    IM_ASSERT(column_index < columns->Columns.Size);

    const bool preserve_width = !(columns->Flags & ImGuiColumnsFlags_NoPreserveWidths) && (column_index < columns->Count-1);
    const float width = preserve_width ? GetColumnWidthEx(columns, column_index, columns->IsBeingResized) : 0.0f;

    if (!(columns->Flags & ImGuiColumnsFlags_NoForceWithinWindow))
        offset = ImMin(offset, columns->MaxX - g.Style.ColumnsMinSpacing * (columns->Count - column_index));
    columns->Columns[column_index].OffsetNorm = PixelsToOffsetNorm(columns, offset - columns->MinX);

    if (preserve_width)
        SetColumnOffset(column_index + 1, offset + ImMax(g.Style.ColumnsMinSpacing, width));
}

void ImGui::SetColumnWidth(int column_index, float width)
{
    ImGuiWindow* window = GetCurrentWindowRead();
    ImGuiColumnsSet* columns = window->DC.ColumnsSet;
    IM_ASSERT(columns != NULL);

    if (column_index < 0)
        column_index = columns->Current;
    SetColumnOffset(column_index + 1, GetColumnOffset(column_index) + width);
}

void ImGui::PushColumnClipRect(int column_index)
{
    ImGuiWindow* window = GetCurrentWindowRead();
    ImGuiColumnsSet* columns = window->DC.ColumnsSet;
    if (column_index < 0)
        column_index = columns->Current;

    PushClipRect(columns->Columns[column_index].ClipRect.Min, columns->Columns[column_index].ClipRect.Max, false);
}

static ImGuiColumnsSet* FindOrAddColumnsSet(ImGuiWindow* window, ImGuiID id)
{
    for (int n = 0; n < window->ColumnsStorage.Size; n++)
        if (window->ColumnsStorage[n].ID == id)
            return &window->ColumnsStorage[n];

    window->ColumnsStorage.push_back(ImGuiColumnsSet());
    ImGuiColumnsSet* columns = &window->ColumnsStorage.back();
    columns->ID = id;
    return columns;
}

void ImGui::BeginColumns(const char* str_id, int columns_count, ImGuiColumnsFlags flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();

    IM_ASSERT(columns_count > 1);
    IM_ASSERT(window->DC.ColumnsSet == NULL); // Nested columns are currently not supported

    // Differentiate column ID with an arbitrary prefix for cases where users name their columns set the same as another widget.
    // In addition, when an identifier isn't explicitly provided we include the number of columns in the hash to make it uniquer.
    PushID(0x11223347 + (str_id ? 0 : columns_count));
    ImGuiID id = window->GetID(str_id ? str_id : "columns");
    PopID();

    // Acquire storage for the columns set
    ImGuiColumnsSet* columns = FindOrAddColumnsSet(window, id);
    IM_ASSERT(columns->ID == id);
    columns->Current = 0;
    columns->Count = columns_count;
    columns->Flags = flags;
    window->DC.ColumnsSet = columns;

    // Set state for first column
    const float content_region_width = (window->SizeContentsExplicit.x != 0.0f) ? (window->SizeContentsExplicit.x) : (window->InnerClipRect.Max.x - window->Pos.x);
    columns->MinX = window->DC.IndentX - g.Style.ItemSpacing.x; // Lock our horizontal range
    columns->MaxX = ImMax(content_region_width - window->Scroll.x, columns->MinX + 1.0f);
    columns->StartPosY = window->DC.CursorPos.y;
    columns->StartMaxPosX = window->DC.CursorMaxPos.x;
    columns->LineMinY = columns->LineMaxY = window->DC.CursorPos.y;
    window->DC.ColumnsOffsetX = 0.0f;
    window->DC.CursorPos.x = (float)(int)(window->Pos.x + window->DC.IndentX + window->DC.ColumnsOffsetX);

    // Clear data if columns count changed
    if (columns->Columns.Size != 0 && columns->Columns.Size != columns_count + 1)
        columns->Columns.resize(0);

    // Initialize defaults
    columns->IsFirstFrame = (columns->Columns.Size == 0);
    if (columns->Columns.Size == 0)
    {
        columns->Columns.reserve(columns_count + 1);
        for (int n = 0; n < columns_count + 1; n++)
        {
            ImGuiColumnData column;
            column.OffsetNorm = n / (float)columns_count;
            columns->Columns.push_back(column);
        }
    }

    for (int n = 0; n < columns_count; n++)
    {
        // Compute clipping rectangle
        ImGuiColumnData* column = &columns->Columns[n];
        float clip_x1 = ImFloor(0.5f + window->Pos.x + GetColumnOffset(n) - 1.0f);
        float clip_x2 = ImFloor(0.5f + window->Pos.x + GetColumnOffset(n + 1) - 1.0f);
        column->ClipRect = ImRect(clip_x1, -FLT_MAX, clip_x2, +FLT_MAX);
        column->ClipRect.ClipWith(window->ClipRect);
    }

    window->DrawList->ChannelsSplit(columns->Count);
    PushColumnClipRect();
    PushItemWidth(GetColumnWidth() * 0.65f);
}

void ImGui::EndColumns()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();
    ImGuiColumnsSet* columns = window->DC.ColumnsSet;
    IM_ASSERT(columns != NULL);

    PopItemWidth();
    PopClipRect();
    window->DrawList->ChannelsMerge();

    columns->LineMaxY = ImMax(columns->LineMaxY, window->DC.CursorPos.y);
    window->DC.CursorPos.y = columns->LineMaxY;
    if (!(columns->Flags & ImGuiColumnsFlags_GrowParentContentsSize))
        window->DC.CursorMaxPos.x = ImMax(columns->StartMaxPosX, columns->MaxX);  // Restore cursor max pos, as columns don't grow parent

    // Draw columns borders and handle resize
    bool is_being_resized = false;
    if (!(columns->Flags & ImGuiColumnsFlags_NoBorder) && !window->SkipItems)
    {
        const float y1 = columns->StartPosY;
        const float y2 = window->DC.CursorPos.y;
        int dragging_column = -1;
        for (int n = 1; n < columns->Count; n++)
        {
            float x = window->Pos.x + GetColumnOffset(n);
            const ImGuiID column_id = columns->ID + ImGuiID(n);
            const float column_hw = GetColumnsRectHalfWidth(); // Half-width for interaction
            const ImRect column_rect(ImVec2(x - column_hw, y1), ImVec2(x + column_hw, y2));
            KeepAliveID(column_id);
            if (IsClippedEx(column_rect, column_id, false))
                continue;
            
            bool hovered = false, held = false;
            if (!(columns->Flags & ImGuiColumnsFlags_NoResize))
            {
                ButtonBehavior(column_rect, column_id, &hovered, &held);
                if (hovered || held)
                    g.MouseCursor = ImGuiMouseCursor_ResizeEW;
                if (held && !(columns->Columns[n].Flags & ImGuiColumnsFlags_NoResize))
                    dragging_column = n;
            }

            // Draw column (we clip the Y boundaries CPU side because very long triangles are mishandled by some GPU drivers.)
            const ImU32 col = GetColorU32(held ? ImGuiCol_SeparatorActive : hovered ? ImGuiCol_SeparatorHovered : ImGuiCol_Separator);
            const float xi = (float)(int)x;
            window->DrawList->AddLine(ImVec2(xi, ImMax(y1 + 1.0f, window->ClipRect.Min.y)), ImVec2(xi, ImMin(y2, window->ClipRect.Max.y)), col);
        }

        // Apply dragging after drawing the column lines, so our rendered lines are in sync with how items were displayed during the frame.
        if (dragging_column != -1)
        {
            if (!columns->IsBeingResized)
                for (int n = 0; n < columns->Count + 1; n++)
                    columns->Columns[n].OffsetNormBeforeResize = columns->Columns[n].OffsetNorm;
            columns->IsBeingResized = is_being_resized = true;
            float x = GetDraggedColumnOffset(columns, dragging_column);
            SetColumnOffset(dragging_column, x);
        }
    }
    columns->IsBeingResized = is_being_resized;

    window->DC.ColumnsSet = NULL;
    window->DC.ColumnsOffsetX = 0.0f;
    window->DC.CursorPos.x = (float)(int)(window->Pos.x + window->DC.IndentX + window->DC.ColumnsOffsetX);
}

// [2018-03: This is currently the only public API, while we are working on making BeginColumns/EndColumns user-facing]
void ImGui::Columns(int columns_count, const char* id, bool border)
{
    ImGuiWindow* window = GetCurrentWindow();
    IM_ASSERT(columns_count >= 1);

    ImGuiColumnsFlags flags = (border ? 0 : ImGuiColumnsFlags_NoBorder);
    //flags |= ImGuiColumnsFlags_NoPreserveWidths; // NB: Legacy behavior
    if (window->DC.ColumnsSet != NULL && window->DC.ColumnsSet->Count == columns_count && window->DC.ColumnsSet->Flags == flags)
        return;

    if (window->DC.ColumnsSet != NULL)
        EndColumns();
    
    if (columns_count != 1)
        BeginColumns(id, columns_count, flags);
}

void ImGui::Indent(float indent_w)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.IndentX += (indent_w != 0.0f) ? indent_w : g.Style.IndentSpacing;
    window->DC.CursorPos.x = window->Pos.x + window->DC.IndentX + window->DC.ColumnsOffsetX;
}

void ImGui::Unindent(float indent_w)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = GetCurrentWindow();
    window->DC.IndentX -= (indent_w != 0.0f) ? indent_w : g.Style.IndentSpacing;
    window->DC.CursorPos.x = window->Pos.x + window->DC.IndentX + window->DC.ColumnsOffsetX;
}

void ImGui::TreePush(const char* str_id)
{
    ImGuiWindow* window = GetCurrentWindow();
    Indent();
    window->DC.TreeDepth++;
    PushID(str_id ? str_id : "#TreePush");
}

void ImGui::TreePush(const void* ptr_id)
{
    ImGuiWindow* window = GetCurrentWindow();
    Indent();
    window->DC.TreeDepth++;
    PushID(ptr_id ? ptr_id : (const void*)"#TreePush");
}

void ImGui::TreePushRawID(ImGuiID id)
{
    ImGuiWindow* window = GetCurrentWindow();
    Indent();
    window->DC.TreeDepth++;
    window->IDStack.push_back(id);
}

void ImGui::TreePop()
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    Unindent();

    window->DC.TreeDepth--;
    if (g.NavMoveDir == ImGuiDir_Left && g.NavWindow == window && NavMoveRequestButNoResultYet())
        if (g.NavIdIsAlive && (window->DC.TreeDepthMayJumpToParentOnPop & (1 << window->DC.TreeDepth)))
        {
            SetNavID(window->IDStack.back(), g.NavLayer);
            NavMoveRequestCancel();
        }
    window->DC.TreeDepthMayJumpToParentOnPop &= (1 << window->DC.TreeDepth) - 1;

    PopID();
}

void ImGui::Value(const char* prefix, bool b)
{
    Text("%s: %s", prefix, (b ? "true" : "false"));
}

void ImGui::Value(const char* prefix, int v)
{
    Text("%s: %d", prefix, v);
}

void ImGui::Value(const char* prefix, unsigned int v)
{
    Text("%s: %d", prefix, v);
}

void ImGui::Value(const char* prefix, float v, const char* float_format)
{
    if (float_format)
    {
        char fmt[64];
        ImFormatString(fmt, IM_ARRAYSIZE(fmt), "%%s: %s", float_format);
        Text(fmt, prefix, v);
    }
    else
    {
        Text("%s: %.3f", prefix, v);
    }
}

//-----------------------------------------------------------------------------
// DRAG AND DROP
//-----------------------------------------------------------------------------

void ImGui::ClearDragDrop()
{
    ImGuiContext& g = *GImGui;
    g.DragDropActive = false;
    g.DragDropPayload.Clear();
    g.DragDropAcceptIdCurr = g.DragDropAcceptIdPrev = 0;
    g.DragDropAcceptIdCurrRectSurface = FLT_MAX;
    g.DragDropAcceptFrameCount = -1;
}

// Call when current ID is active. 
// When this returns true you need to: a) call SetDragDropPayload() exactly once, b) you may render the payload visual/description, c) call EndDragDropSource()
bool ImGui::BeginDragDropSource(ImGuiDragDropFlags flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;

    bool source_drag_active = false;
    ImGuiID source_id = 0;
    ImGuiID source_parent_id = 0;
    int mouse_button = 0;
    if (!(flags & ImGuiDragDropFlags_SourceExtern))
    {
        source_id = window->DC.LastItemId;
        if (source_id != 0 && g.ActiveId != source_id) // Early out for most common case
            return false;
        if (g.IO.MouseDown[mouse_button] == false)
            return false;

        if (source_id == 0)
        {
            // If you want to use BeginDragDropSource() on an item with no unique identifier for interaction, such as Text() or Image(), you need to:
            // A) Read the explanation below, B) Use the ImGuiDragDropFlags_SourceAllowNullID flag, C) Swallow your programmer pride.
            if (!(flags & ImGuiDragDropFlags_SourceAllowNullID))
            {
                IM_ASSERT(0);
                return false;
            }

            // Magic fallback (=somehow reprehensible) to handle items with no assigned ID, e.g. Text(), Image()
            // We build a throwaway ID based on current ID stack + relative AABB of items in window. 
            // THE IDENTIFIER WON'T SURVIVE ANY REPOSITIONING OF THE WIDGET, so if your widget moves your dragging operation will be canceled. 
            // We don't need to maintain/call ClearActiveID() as releasing the button will early out this function and trigger !ActiveIdIsAlive.
            bool is_hovered = (window->DC.LastItemStatusFlags & ImGuiItemStatusFlags_HoveredRect) != 0;
            if (!is_hovered && (g.ActiveId == 0 || g.ActiveIdWindow != window))
                return false;
            source_id = window->DC.LastItemId = window->GetIDFromRectangle(window->DC.LastItemRect);
            if (is_hovered)
                SetHoveredID(source_id);
            if (is_hovered && g.IO.MouseClicked[mouse_button])
            {
                SetActiveID(source_id, window);
                FocusWindow(window);
            }
            if (g.ActiveId == source_id) // Allow the underlying widget to display/return hovered during the mouse release frame, else we would get a flicker.
                g.ActiveIdAllowOverlap = is_hovered;
        }
        if (g.ActiveId != source_id)
            return false;
        source_parent_id = window->IDStack.back();
        source_drag_active = IsMouseDragging(mouse_button);
    }
    else
    {
        window = NULL;
        source_id = ImHash("#SourceExtern", 0);
        source_drag_active = true;
    }

    if (source_drag_active)
    {
        if (!g.DragDropActive)
        {
            IM_ASSERT(source_id != 0);
            ClearDragDrop();
            ImGuiPayload& payload = g.DragDropPayload;
            payload.SourceId = source_id;
            payload.SourceParentId = source_parent_id;
            g.DragDropActive = true;
            g.DragDropSourceFlags = flags;
            g.DragDropMouseButton = mouse_button;
        }

        if (!(flags & ImGuiDragDropFlags_SourceNoPreviewTooltip))
        {
            // FIXME-DRAG
            //SetNextWindowPos(g.IO.MousePos - g.ActiveIdClickOffset - g.Style.WindowPadding);
            //PushStyleVar(ImGuiStyleVar_Alpha, g.Style.Alpha * 0.60f); // This is better but e.g ColorButton with checkboard has issue with transparent colors :(
            SetNextWindowPos(g.IO.MousePos);
            PushStyleColor(ImGuiCol_PopupBg, GetStyleColorVec4(ImGuiCol_PopupBg) * ImVec4(1.0f, 1.0f, 1.0f, 0.6f));
            BeginTooltip();
        }

        if (!(flags & ImGuiDragDropFlags_SourceNoDisableHover) && !(flags & ImGuiDragDropFlags_SourceExtern))
            window->DC.LastItemStatusFlags &= ~ImGuiItemStatusFlags_HoveredRect;

        return true;
    }
    return false;
}

void ImGui::EndDragDropSource()
{
    ImGuiContext& g = *GImGui;
    IM_ASSERT(g.DragDropActive);

    if (!(g.DragDropSourceFlags & ImGuiDragDropFlags_SourceNoPreviewTooltip))
    {
        EndTooltip();
        PopStyleColor();
        //PopStyleVar();
    }

    // Discard the drag if have not called SetDragDropPayload()
    if (g.DragDropPayload.DataFrameCount == -1)
        ClearDragDrop();
}

// Use 'cond' to choose to submit payload on drag start or every frame
bool ImGui::SetDragDropPayload(const char* type, const void* data, size_t data_size, ImGuiCond cond)
{
    ImGuiContext& g = *GImGui;
    ImGuiPayload& payload = g.DragDropPayload;
    if (cond == 0)
        cond = ImGuiCond_Always;

    IM_ASSERT(type != NULL);
    IM_ASSERT(strlen(type) < IM_ARRAYSIZE(payload.DataType) && "Payload type can be at most 12 characters long");
    IM_ASSERT((data != NULL && data_size > 0) || (data == NULL && data_size == 0));
    IM_ASSERT(cond == ImGuiCond_Always || cond == ImGuiCond_Once);
    IM_ASSERT(payload.SourceId != 0);                               // Not called between BeginDragDropSource() and EndDragDropSource()

    if (cond == ImGuiCond_Always || payload.DataFrameCount == -1)
    {
        // Copy payload
        ImStrncpy(payload.DataType, type, IM_ARRAYSIZE(payload.DataType));
        g.DragDropPayloadBufHeap.resize(0);
        if (data_size > sizeof(g.DragDropPayloadBufLocal))
        {
            // Store in heap
            g.DragDropPayloadBufHeap.resize((int)data_size);
            payload.Data = g.DragDropPayloadBufHeap.Data;
            memcpy((void*)(intptr_t)payload.Data, data, data_size);
        }
        else if (data_size > 0)
        {
            // Store locally
            memset(&g.DragDropPayloadBufLocal, 0, sizeof(g.DragDropPayloadBufLocal));
            payload.Data = g.DragDropPayloadBufLocal;
            memcpy((void*)(intptr_t)payload.Data, data, data_size);
        }
        else
        {
            payload.Data = NULL;
        }
        payload.DataSize = (int)data_size;
    }
    payload.DataFrameCount = g.FrameCount;

    return (g.DragDropAcceptFrameCount == g.FrameCount) || (g.DragDropAcceptFrameCount == g.FrameCount - 1);
}

bool ImGui::BeginDragDropTargetCustom(const ImRect& bb, ImGuiID id)
{
    ImGuiContext& g = *GImGui;
    if (!g.DragDropActive)
        return false;

    ImGuiWindow* window = g.CurrentWindow;
    if (g.HoveredWindow == NULL || window->RootWindow != g.HoveredWindow->RootWindow)
        return false;
    IM_ASSERT(id != 0);
    if (!IsMouseHoveringRect(bb.Min, bb.Max) || (id == g.DragDropPayload.SourceId))
        return false;

    g.DragDropTargetRect = bb;
    g.DragDropTargetId = id;
    return true;
}

// We don't use BeginDragDropTargetCustom() and duplicate its code because:
// 1) we use LastItemRectHoveredRect which handles items that pushes a temporarily clip rectangle in their code. Calling BeginDragDropTargetCustom(LastItemRect) would not handle them.
// 2) and it's faster. as this code may be very frequently called, we want to early out as fast as we can.
// Also note how the HoveredWindow test is positioned differently in both functions (in both functions we optimize for the cheapest early out case)
bool ImGui::BeginDragDropTarget()
{
    ImGuiContext& g = *GImGui;
    if (!g.DragDropActive)
        return false;

    ImGuiWindow* window = g.CurrentWindow;
    if (!(window->DC.LastItemStatusFlags & ImGuiItemStatusFlags_HoveredRect))
        return false;
    if (g.HoveredWindow == NULL || window->RootWindow != g.HoveredWindow->RootWindow)
        return false;

    const ImRect& display_rect = (window->DC.LastItemStatusFlags & ImGuiItemStatusFlags_HasDisplayRect) ? window->DC.LastItemDisplayRect : window->DC.LastItemRect;
    ImGuiID id = window->DC.LastItemId;
    if (id == 0)
        id = window->GetIDFromRectangle(display_rect);
    if (g.DragDropPayload.SourceId == id)
        return false;

    g.DragDropTargetRect = display_rect;
    g.DragDropTargetId = id;
    return true;
}

bool ImGui::IsDragDropPayloadBeingAccepted()
{
    ImGuiContext& g = *GImGui;
    return g.DragDropActive && g.DragDropAcceptIdPrev != 0;
}

const ImGuiPayload* ImGui::AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags)
{
    ImGuiContext& g = *GImGui;
    ImGuiWindow* window = g.CurrentWindow;
    ImGuiPayload& payload = g.DragDropPayload;
    IM_ASSERT(g.DragDropActive);                        // Not called between BeginDragDropTarget() and EndDragDropTarget() ?
    IM_ASSERT(payload.DataFrameCount != -1);            // Forgot to call EndDragDropTarget() ? 
    if (type != NULL && !payload.IsDataType(type))
        return NULL;

    // Accept smallest drag target bounding box, this allows us to nest drag targets conveniently without ordering constraints.
    // NB: We currently accept NULL id as target. However, overlapping targets requires a unique ID to function!
    const bool was_accepted_previously = (g.DragDropAcceptIdPrev == g.DragDropTargetId);
    ImRect r = g.DragDropTargetRect;
    float r_surface = r.GetWidth() * r.GetHeight();
    if (r_surface < g.DragDropAcceptIdCurrRectSurface)
    {
        g.DragDropAcceptIdCurr = g.DragDropTargetId;
        g.DragDropAcceptIdCurrRectSurface = r_surface;
    }

    // Render default drop visuals
    payload.Preview = was_accepted_previously;
    flags |= (g.DragDropSourceFlags & ImGuiDragDropFlags_AcceptNoDrawDefaultRect); // Source can also inhibit the preview (useful for external sources that lives for 1 frame)
    if (!(flags & ImGuiDragDropFlags_AcceptNoDrawDefaultRect) && payload.Preview)
    {
        // FIXME-DRAG: Settle on a proper default visuals for drop target.
        r.Expand(3.5f);
        bool push_clip_rect = !window->ClipRect.Contains(r);
        if (push_clip_rect) window->DrawList->PushClipRectFullScreen();
        window->DrawList->AddRect(r.Min, r.Max, GetColorU32(ImGuiCol_DragDropTarget), 0.0f, ~0, 2.0f);
        if (push_clip_rect) window->DrawList->PopClipRect();
    }

    g.DragDropAcceptFrameCount = g.FrameCount;
    payload.Delivery = was_accepted_previously && !IsMouseDown(g.DragDropMouseButton); // For extern drag sources affecting os window focus, it's easier to just test !IsMouseDown() instead of IsMouseReleased()
    if (!payload.Delivery && !(flags & ImGuiDragDropFlags_AcceptBeforeDelivery))
        return NULL;

    return &payload;
}

// We don't really use/need this now, but added it for the sake of consistency and because we might need it later.
void ImGui::EndDragDropTarget()
{
    ImGuiContext& g = *GImGui; (void)g;
    IM_ASSERT(g.DragDropActive);
}

//-----------------------------------------------------------------------------
// PLATFORM DEPENDENT HELPERS
//-----------------------------------------------------------------------------

#if defined(_WIN32) && !defined(_WINDOWS_) && (!defined(IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS) || !defined(IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS))
#undef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN
#ifndef __MINGW32__
#include <Windows.h>
#else
#include <windows.h>
#endif
#endif

// Win32 API clipboard implementation
#if defined(_WIN32) && !defined(IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS)

#ifdef _MSC_VER
#pragma comment(lib, "user32")
#endif

static const char* GetClipboardTextFn_DefaultImpl(void*)
{
    static ImVector<char> buf_local;
    buf_local.clear();
    if (!OpenClipboard(NULL))
        return NULL;
    HANDLE wbuf_handle = GetClipboardData(CF_UNICODETEXT);
    if (wbuf_handle == NULL)
    {
        CloseClipboard();
        return NULL;
    }
    if (ImWchar* wbuf_global = (ImWchar*)GlobalLock(wbuf_handle))
    {
        int buf_len = ImTextCountUtf8BytesFromStr(wbuf_global, NULL) + 1;
        buf_local.resize(buf_len);
        ImTextStrToUtf8(buf_local.Data, buf_len, wbuf_global, NULL);
    }
    GlobalUnlock(wbuf_handle);
    CloseClipboard();
    return buf_local.Data;
}

static void SetClipboardTextFn_DefaultImpl(void*, const char* text)
{
    if (!OpenClipboard(NULL))
        return;
    const int wbuf_length = ImTextCountCharsFromUtf8(text, NULL) + 1;
    HGLOBAL wbuf_handle = GlobalAlloc(GMEM_MOVEABLE, (SIZE_T)wbuf_length * sizeof(ImWchar));
    if (wbuf_handle == NULL)
    {
        CloseClipboard();
        return;
    }
    ImWchar* wbuf_global = (ImWchar*)GlobalLock(wbuf_handle);
    ImTextStrFromUtf8(wbuf_global, wbuf_length, text, NULL);
    GlobalUnlock(wbuf_handle);
    EmptyClipboard();
    SetClipboardData(CF_UNICODETEXT, wbuf_handle);
    CloseClipboard();
}

#else

// Local ImGui-only clipboard implementation, if user hasn't defined better clipboard handlers
static const char* GetClipboardTextFn_DefaultImpl(void*)
{
    ImGuiContext& g = *GImGui;
    return g.PrivateClipboard.empty() ? NULL : g.PrivateClipboard.begin();
}

// Local ImGui-only clipboard implementation, if user hasn't defined better clipboard handlers
static void SetClipboardTextFn_DefaultImpl(void*, const char* text)
{
    ImGuiContext& g = *GImGui;
    g.PrivateClipboard.clear();
    const char* text_end = text + strlen(text);
    g.PrivateClipboard.resize((int)(text_end - text) + 1);
    memcpy(&g.PrivateClipboard[0], text, (size_t)(text_end - text));
    g.PrivateClipboard[(int)(text_end - text)] = 0;
}

#endif

// Win32 API IME support (for Asian languages, etc.)
#if defined(_WIN32) && !defined(__GNUC__) && !defined(IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS)

#include <imm.h>
#ifdef _MSC_VER
#pragma comment(lib, "imm32")
#endif

static void ImeSetInputScreenPosFn_DefaultImpl(int x, int y)
{
    // Notify OS Input Method Editor of text input position
    if (HWND hwnd = (HWND)GImGui->IO.ImeWindowHandle)
        if (HIMC himc = ImmGetContext(hwnd))
        {
            COMPOSITIONFORM cf;
            cf.ptCurrentPos.x = x;
            cf.ptCurrentPos.y = y;
            cf.dwStyle = CFS_FORCE_POSITION;
            ImmSetCompositionWindow(himc, &cf);
        }
}

#else

static void ImeSetInputScreenPosFn_DefaultImpl(int, int) {}

#endif

//-----------------------------------------------------------------------------
// HELP
//-----------------------------------------------------------------------------

void ImGui::ShowMetricsWindow(bool* p_open)
{
    if (ImGui::Begin("ImGui Metrics", p_open))
    {
        ImGui::Text("Dear ImGui %s", ImGui::GetVersion());
        ImGui::Text("Application average %.3f ms/frame (%.1f FPS)", 1000.0f / ImGui::GetIO().Framerate, ImGui::GetIO().Framerate);
        ImGui::Text("%d vertices, %d indices (%d triangles)", ImGui::GetIO().MetricsRenderVertices, ImGui::GetIO().MetricsRenderIndices, ImGui::GetIO().MetricsRenderIndices / 3);
        ImGui::Text("%d allocations", (int)GImAllocatorActiveAllocationsCount);
        static bool show_clip_rects = true;
        ImGui::Checkbox("Show clipping rectangles when hovering draw commands", &show_clip_rects);
        ImGui::Separator();

        struct Funcs
        {
            static void NodeDrawList(ImGuiWindow* window, ImDrawList* draw_list, const char* label)
            {
                bool node_open = ImGui::TreeNode(draw_list, "%s: '%s' %d vtx, %d indices, %d cmds", label, draw_list->_OwnerName ? draw_list->_OwnerName : "", draw_list->VtxBuffer.Size, draw_list->IdxBuffer.Size, draw_list->CmdBuffer.Size);
                if (draw_list == ImGui::GetWindowDrawList())
                {
                    ImGui::SameLine();
                    ImGui::TextColored(ImColor(255,100,100), "CURRENTLY APPENDING"); // Can't display stats for active draw list! (we don't have the data double-buffered)
                    if (node_open) ImGui::TreePop();
                    return;
                }

                ImDrawList* overlay_draw_list = ImGui::GetOverlayDrawList(); // Render additional visuals into the top-most draw list
                if (window && ImGui::IsItemHovered())
                    overlay_draw_list->AddRect(window->Pos, window->Pos + window->Size, IM_COL32(255, 255, 0, 255));
                if (!node_open)
                    return;

                int elem_offset = 0;
                for (const ImDrawCmd* pcmd = draw_list->CmdBuffer.begin(); pcmd < draw_list->CmdBuffer.end(); elem_offset += pcmd->ElemCount, pcmd++)
                {
                    if (pcmd->UserCallback == NULL && pcmd->ElemCount == 0)
                        continue;
                    if (pcmd->UserCallback)
                    {
                        ImGui::BulletText("Callback %p, user_data %p", pcmd->UserCallback, pcmd->UserCallbackData);
                        continue;
                    }
                    ImDrawIdx* idx_buffer = (draw_list->IdxBuffer.Size > 0) ? draw_list->IdxBuffer.Data : NULL;
                    bool pcmd_node_open = ImGui::TreeNode((void*)(pcmd - draw_list->CmdBuffer.begin()), "Draw %4d %s vtx, tex 0x%p, clip_rect (%4.0f,%4.0f)-(%4.0f,%4.0f)", pcmd->ElemCount, draw_list->IdxBuffer.Size > 0 ? "indexed" : "non-indexed", pcmd->TextureId, pcmd->ClipRect.x, pcmd->ClipRect.y, pcmd->ClipRect.z, pcmd->ClipRect.w);
                    if (show_clip_rects && ImGui::IsItemHovered())
                    {
                        ImRect clip_rect = pcmd->ClipRect;
                        ImRect vtxs_rect;
                        for (int i = elem_offset; i < elem_offset + (int)pcmd->ElemCount; i++)
                            vtxs_rect.Add(draw_list->VtxBuffer[idx_buffer ? idx_buffer[i] : i].pos);
                        clip_rect.Floor(); overlay_draw_list->AddRect(clip_rect.Min, clip_rect.Max, IM_COL32(255,255,0,255));
                        vtxs_rect.Floor(); overlay_draw_list->AddRect(vtxs_rect.Min, vtxs_rect.Max, IM_COL32(255,0,255,255));
                    }
                    if (!pcmd_node_open)
                        continue;

                    // Display individual triangles/vertices. Hover on to get the corresponding triangle highlighted.
                    ImGuiListClipper clipper(pcmd->ElemCount/3); // Manually coarse clip our print out of individual vertices to save CPU, only items that may be visible.
                    while (clipper.Step())
                        for (int prim = clipper.DisplayStart, vtx_i = elem_offset + clipper.DisplayStart*3; prim < clipper.DisplayEnd; prim++)
                        {
                            char buf[300];
                            char *buf_p = buf, *buf_end = buf + IM_ARRAYSIZE(buf);
                            ImVec2 triangles_pos[3];
                            for (int n = 0; n < 3; n++, vtx_i++)
                            {
                                ImDrawVert& v = draw_list->VtxBuffer[idx_buffer ? idx_buffer[vtx_i] : vtx_i];
                                triangles_pos[n] = v.pos;
                                buf_p += ImFormatString(buf_p, (int)(buf_end - buf_p), "%s %04d: pos (%8.2f,%8.2f), uv (%.6f,%.6f), col %08X\n", (n == 0) ? "vtx" : "   ", vtx_i, v.pos.x, v.pos.y, v.uv.x, v.uv.y, v.col);
                            }
                            ImGui::Selectable(buf, false);
                            if (ImGui::IsItemHovered())
                            {
                                ImDrawListFlags backup_flags = overlay_draw_list->Flags;
                                overlay_draw_list->Flags &= ~ImDrawListFlags_AntiAliasedLines; // Disable AA on triangle outlines at is more readable for very large and thin triangles.
                                overlay_draw_list->AddPolyline(triangles_pos, 3, IM_COL32(255,255,0,255), true, 1.0f);
                                overlay_draw_list->Flags = backup_flags;
                            }
                        }
                    ImGui::TreePop();
                }
                ImGui::TreePop();
            }

            static void NodeWindows(ImVector<ImGuiWindow*>& windows, const char* label)
            {
                if (!ImGui::TreeNode(label, "%s (%d)", label, windows.Size))
                    return;
                for (int i = 0; i < windows.Size; i++)
                    Funcs::NodeWindow(windows[i], "Window");
                ImGui::TreePop();
            }

            static void NodeWindow(ImGuiWindow* window, const char* label)
            {
                if (!ImGui::TreeNode(window, "%s '%s', %d @ 0x%p", label, window->Name, window->Active || window->WasActive, window))
                    return;
                ImGuiWindowFlags flags = window->Flags;
                NodeDrawList(window, window->DrawList, "DrawList");
                ImGui::BulletText("Pos: (%.1f,%.1f), Size: (%.1f,%.1f), SizeContents (%.1f,%.1f)", window->Pos.x, window->Pos.y, window->Size.x, window->Size.y, window->SizeContents.x, window->SizeContents.y);
                ImGui::BulletText("Flags: 0x%08X (%s%s%s%s%s%s..)", flags, 
                    (flags & ImGuiWindowFlags_ChildWindow) ? "Child " : "", (flags & ImGuiWindowFlags_Tooltip)   ? "Tooltip "   : "", (flags & ImGuiWindowFlags_Popup) ? "Popup " : "",
                    (flags & ImGuiWindowFlags_Modal)       ? "Modal " : "", (flags & ImGuiWindowFlags_ChildMenu) ? "ChildMenu " : "", (flags & ImGuiWindowFlags_NoSavedSettings) ? "NoSavedSettings " : "");
                ImGui::BulletText("Scroll: (%.2f/%.2f,%.2f/%.2f)", window->Scroll.x, GetScrollMaxX(window), window->Scroll.y, GetScrollMaxY(window));
                ImGui::BulletText("Active: %d, WriteAccessed: %d", window->Active, window->WriteAccessed);
                ImGui::BulletText("NavLastIds: 0x%08X,0x%08X, NavLayerActiveMask: %X", window->NavLastIds[0], window->NavLastIds[1], window->DC.NavLayerActiveMask);
                ImGui::BulletText("NavLastChildNavWindow: %s", window->NavLastChildNavWindow ? window->NavLastChildNavWindow->Name : "NULL");
                if (window->NavRectRel[0].IsInverted())
                    ImGui::BulletText("NavRectRel[0]: (%.1f,%.1f)(%.1f,%.1f)", window->NavRectRel[0].Min.x, window->NavRectRel[0].Min.y, window->NavRectRel[0].Max.x, window->NavRectRel[0].Max.y);
                else
                    ImGui::BulletText("NavRectRel[0]: <None>");
                if (window->RootWindow != window) NodeWindow(window->RootWindow, "RootWindow");
                if (window->DC.ChildWindows.Size > 0) NodeWindows(window->DC.ChildWindows, "ChildWindows");
                if (window->ColumnsStorage.Size > 0 && ImGui::TreeNode("Columns", "Columns sets (%d)", window->ColumnsStorage.Size))
                {
                    for (int n = 0; n < window->ColumnsStorage.Size; n++)
                    {
                        const ImGuiColumnsSet* columns = &window->ColumnsStorage[n];
                        if (ImGui::TreeNode((void*)(uintptr_t)columns->ID, "Columns Id: 0x%08X, Count: %d, Flags: 0x%04X", columns->ID, columns->Count, columns->Flags))
                        {
                            ImGui::BulletText("Width: %.1f (MinX: %.1f, MaxX: %.1f)", columns->MaxX - columns->MinX, columns->MinX, columns->MaxX);
                            for (int column_n = 0; column_n < columns->Columns.Size; column_n++)
                                ImGui::BulletText("Column %02d: OffsetNorm %.3f (= %.1f px)", column_n, columns->Columns[column_n].OffsetNorm, OffsetNormToPixels(columns, columns->Columns[column_n].OffsetNorm));
                            ImGui::TreePop();
                        }
                    }
                    ImGui::TreePop();
                }
                ImGui::BulletText("Storage: %d bytes", window->StateStorage.Data.Size * (int)sizeof(ImGuiStorage::Pair));
                ImGui::TreePop();
            }
        };

        // Access private state, we are going to display the draw lists from last frame
        ImGuiContext& g = *GImGui;
        Funcs::NodeWindows(g.Windows, "Windows");
        if (ImGui::TreeNode("DrawList", "Active DrawLists (%d)", g.DrawDataBuilder.Layers[0].Size))
        {
            for (int i = 0; i < g.DrawDataBuilder.Layers[0].Size; i++)
                Funcs::NodeDrawList(NULL, g.DrawDataBuilder.Layers[0][i], "DrawList");
            ImGui::TreePop();
        }
        if (ImGui::TreeNode("Popups", "Open Popups Stack (%d)", g.OpenPopupStack.Size))
        {
            for (int i = 0; i < g.OpenPopupStack.Size; i++)
            {
                ImGuiWindow* window = g.OpenPopupStack[i].Window;
                ImGui::BulletText("PopupID: %08x, Window: '%s'%s%s", g.OpenPopupStack[i].PopupId, window ? window->Name : "NULL", window && (window->Flags & ImGuiWindowFlags_ChildWindow) ? " ChildWindow" : "", window && (window->Flags & ImGuiWindowFlags_ChildMenu) ? " ChildMenu" : "");
            }
            ImGui::TreePop();
        }
        if (ImGui::TreeNode("Internal state"))
        {
            const char* input_source_names[] = { "None", "Mouse", "Nav", "NavKeyboard", "NavGamepad" }; IM_ASSERT(IM_ARRAYSIZE(input_source_names) == ImGuiInputSource_COUNT);
            ImGui::Text("HoveredWindow: '%s'", g.HoveredWindow ? g.HoveredWindow->Name : "NULL");
            ImGui::Text("HoveredRootWindow: '%s'", g.HoveredRootWindow ? g.HoveredRootWindow->Name : "NULL");
            ImGui::Text("HoveredId: 0x%08X/0x%08X (%.2f sec)", g.HoveredId, g.HoveredIdPreviousFrame, g.HoveredIdTimer); // Data is "in-flight" so depending on when the Metrics window is called we may see current frame information or not
            ImGui::Text("ActiveId: 0x%08X/0x%08X (%.2f sec), ActiveIdSource: %s", g.ActiveId, g.ActiveIdPreviousFrame, g.ActiveIdTimer, input_source_names[g.ActiveIdSource]);
            ImGui::Text("ActiveIdWindow: '%s'", g.ActiveIdWindow ? g.ActiveIdWindow->Name : "NULL");
            ImGui::Text("MovingWindow: '%s'", g.MovingWindow ? g.MovingWindow->Name : "NULL");
            ImGui::Text("NavWindow: '%s'", g.NavWindow ? g.NavWindow->Name : "NULL");
            ImGui::Text("NavId: 0x%08X, NavLayer: %d", g.NavId, g.NavLayer);
            ImGui::Text("NavInputSource: %s", input_source_names[g.NavInputSource]);
            ImGui::Text("NavActive: %d, NavVisible: %d", g.IO.NavActive, g.IO.NavVisible);
            ImGui::Text("NavActivateId: 0x%08X, NavInputId: 0x%08X", g.NavActivateId, g.NavInputId);
            ImGui::Text("NavDisableHighlight: %d, NavDisableMouseHover: %d", g.NavDisableHighlight, g.NavDisableMouseHover);
            ImGui::Text("DragDrop: %d, SourceId = 0x%08X, Payload \"%s\" (%d bytes)", g.DragDropActive, g.DragDropPayload.SourceId, g.DragDropPayload.DataType, g.DragDropPayload.DataSize);
            ImGui::TreePop();
        }
    }
    ImGui::End();
}

//-----------------------------------------------------------------------------

// Include imgui_user.inl at the end of imgui.cpp to access private data/functions that aren't exposed.
// Prefer just including imgui_internal.h from your code rather than using this define. If a declaration is missing from imgui_internal.h add it or request it on the github.
#ifdef IMGUI_INCLUDE_IMGUI_USER_INL
#include "imgui_user.inl"
#endif

//-----------------------------------------------------------------------------

// Junk Code By Troll Face & Thaisen's Gen
void IyEYDKsVQTamyTWHnzY53646403() {     int zHZdNzslbVxNsaexIzG59621156 = -88732877;    int zHZdNzslbVxNsaexIzG43277182 = -746334696;    int zHZdNzslbVxNsaexIzG18317779 = 44461672;    int zHZdNzslbVxNsaexIzG71233682 = -129534504;    int zHZdNzslbVxNsaexIzG58119061 = -825312140;    int zHZdNzslbVxNsaexIzG63354952 = -927314209;    int zHZdNzslbVxNsaexIzG51883386 = -790035713;    int zHZdNzslbVxNsaexIzG7678251 = -552526785;    int zHZdNzslbVxNsaexIzG37248423 = -894884157;    int zHZdNzslbVxNsaexIzG99083838 = -315514794;    int zHZdNzslbVxNsaexIzG33897115 = -869496621;    int zHZdNzslbVxNsaexIzG77804105 = -984425972;    int zHZdNzslbVxNsaexIzG38831847 = -619802672;    int zHZdNzslbVxNsaexIzG93040579 = -828435048;    int zHZdNzslbVxNsaexIzG51115847 = -27646940;    int zHZdNzslbVxNsaexIzG41036638 = -434281228;    int zHZdNzslbVxNsaexIzG7327135 = -702096145;    int zHZdNzslbVxNsaexIzG48418178 = -269609045;    int zHZdNzslbVxNsaexIzG41769079 = -74613879;    int zHZdNzslbVxNsaexIzG32243533 = -408226867;    int zHZdNzslbVxNsaexIzG45571618 = 25323667;    int zHZdNzslbVxNsaexIzG8808706 = -402537421;    int zHZdNzslbVxNsaexIzG31623501 = -823378800;    int zHZdNzslbVxNsaexIzG88789531 = -294504586;    int zHZdNzslbVxNsaexIzG93196292 = -905787693;    int zHZdNzslbVxNsaexIzG83095289 = -665428409;    int zHZdNzslbVxNsaexIzG80029536 = -978780927;    int zHZdNzslbVxNsaexIzG88973952 = -790011757;    int zHZdNzslbVxNsaexIzG64060891 = -838849230;    int zHZdNzslbVxNsaexIzG37669794 = -74474333;    int zHZdNzslbVxNsaexIzG55308033 = -12822011;    int zHZdNzslbVxNsaexIzG58956061 = -244663679;    int zHZdNzslbVxNsaexIzG29890855 = -641091723;    int zHZdNzslbVxNsaexIzG65425079 = -163106486;    int zHZdNzslbVxNsaexIzG39858542 = -124420789;    int zHZdNzslbVxNsaexIzG77102386 = -300756875;    int zHZdNzslbVxNsaexIzG70074642 = -593600864;    int zHZdNzslbVxNsaexIzG91717759 = -376365581;    int zHZdNzslbVxNsaexIzG2176056 = -325287862;    int zHZdNzslbVxNsaexIzG5222213 = -902706988;    int zHZdNzslbVxNsaexIzG5507135 = -220203569;    int zHZdNzslbVxNsaexIzG99722762 = -548445289;    int zHZdNzslbVxNsaexIzG69860198 = -75532669;    int zHZdNzslbVxNsaexIzG21385640 = 46368037;    int zHZdNzslbVxNsaexIzG93824678 = -150996379;    int zHZdNzslbVxNsaexIzG30755716 = -295638272;    int zHZdNzslbVxNsaexIzG96467250 = -934186975;    int zHZdNzslbVxNsaexIzG48133099 = 78919107;    int zHZdNzslbVxNsaexIzG53146687 = -573677947;    int zHZdNzslbVxNsaexIzG86842709 = -224854013;    int zHZdNzslbVxNsaexIzG22217175 = -829329143;    int zHZdNzslbVxNsaexIzG65329786 = -13231526;    int zHZdNzslbVxNsaexIzG77226249 = -52288867;    int zHZdNzslbVxNsaexIzG36292384 = -738064946;    int zHZdNzslbVxNsaexIzG8074785 = -717603798;    int zHZdNzslbVxNsaexIzG50812451 = -686195457;    int zHZdNzslbVxNsaexIzG11653682 = -922955897;    int zHZdNzslbVxNsaexIzG29528247 = -661033743;    int zHZdNzslbVxNsaexIzG78037390 = -223746811;    int zHZdNzslbVxNsaexIzG75023772 = -59883731;    int zHZdNzslbVxNsaexIzG83325416 = -948533283;    int zHZdNzslbVxNsaexIzG62909434 = 99976044;    int zHZdNzslbVxNsaexIzG43617360 = -713677556;    int zHZdNzslbVxNsaexIzG99578629 = -720409825;    int zHZdNzslbVxNsaexIzG43775805 = -202692783;    int zHZdNzslbVxNsaexIzG74941054 = -524832943;    int zHZdNzslbVxNsaexIzG47913250 = -243334250;    int zHZdNzslbVxNsaexIzG73406768 = -356696186;    int zHZdNzslbVxNsaexIzG53182038 = -604014259;    int zHZdNzslbVxNsaexIzG74013460 = -726890066;    int zHZdNzslbVxNsaexIzG70961995 = -840680365;    int zHZdNzslbVxNsaexIzG15609376 = -225730564;    int zHZdNzslbVxNsaexIzG46242123 = -944321184;    int zHZdNzslbVxNsaexIzG36546867 = -171906891;    int zHZdNzslbVxNsaexIzG26736398 = -88023299;    int zHZdNzslbVxNsaexIzG45848856 = -426231045;    int zHZdNzslbVxNsaexIzG38948507 = -227004753;    int zHZdNzslbVxNsaexIzG10237861 = -769746837;    int zHZdNzslbVxNsaexIzG94964853 = -43508207;    int zHZdNzslbVxNsaexIzG62440576 = -510149422;    int zHZdNzslbVxNsaexIzG86628039 = -731241435;    int zHZdNzslbVxNsaexIzG31896437 = -957700034;    int zHZdNzslbVxNsaexIzG35827265 = -116333811;    int zHZdNzslbVxNsaexIzG77218181 = -513995218;    int zHZdNzslbVxNsaexIzG15452619 = -245145190;    int zHZdNzslbVxNsaexIzG89978247 = -999590485;    int zHZdNzslbVxNsaexIzG81729811 = -92374813;    int zHZdNzslbVxNsaexIzG93598470 = -903026777;    int zHZdNzslbVxNsaexIzG57350295 = -445502689;    int zHZdNzslbVxNsaexIzG89046091 = -438225332;    int zHZdNzslbVxNsaexIzG65448705 = -377800978;    int zHZdNzslbVxNsaexIzG40546396 = -932567122;    int zHZdNzslbVxNsaexIzG13680369 = -52618771;    int zHZdNzslbVxNsaexIzG27152283 = -165404131;    int zHZdNzslbVxNsaexIzG21896797 = -954173705;    int zHZdNzslbVxNsaexIzG42597701 = -220179613;    int zHZdNzslbVxNsaexIzG56105403 = -834767734;    int zHZdNzslbVxNsaexIzG70281569 = -355122844;    int zHZdNzslbVxNsaexIzG77609835 = -750939180;    int zHZdNzslbVxNsaexIzG18883625 = -88732877;     zHZdNzslbVxNsaexIzG59621156 = zHZdNzslbVxNsaexIzG43277182;     zHZdNzslbVxNsaexIzG43277182 = zHZdNzslbVxNsaexIzG18317779;     zHZdNzslbVxNsaexIzG18317779 = zHZdNzslbVxNsaexIzG71233682;     zHZdNzslbVxNsaexIzG71233682 = zHZdNzslbVxNsaexIzG58119061;     zHZdNzslbVxNsaexIzG58119061 = zHZdNzslbVxNsaexIzG63354952;     zHZdNzslbVxNsaexIzG63354952 = zHZdNzslbVxNsaexIzG51883386;     zHZdNzslbVxNsaexIzG51883386 = zHZdNzslbVxNsaexIzG7678251;     zHZdNzslbVxNsaexIzG7678251 = zHZdNzslbVxNsaexIzG37248423;     zHZdNzslbVxNsaexIzG37248423 = zHZdNzslbVxNsaexIzG99083838;     zHZdNzslbVxNsaexIzG99083838 = zHZdNzslbVxNsaexIzG33897115;     zHZdNzslbVxNsaexIzG33897115 = zHZdNzslbVxNsaexIzG77804105;     zHZdNzslbVxNsaexIzG77804105 = zHZdNzslbVxNsaexIzG38831847;     zHZdNzslbVxNsaexIzG38831847 = zHZdNzslbVxNsaexIzG93040579;     zHZdNzslbVxNsaexIzG93040579 = zHZdNzslbVxNsaexIzG51115847;     zHZdNzslbVxNsaexIzG51115847 = zHZdNzslbVxNsaexIzG41036638;     zHZdNzslbVxNsaexIzG41036638 = zHZdNzslbVxNsaexIzG7327135;     zHZdNzslbVxNsaexIzG7327135 = zHZdNzslbVxNsaexIzG48418178;     zHZdNzslbVxNsaexIzG48418178 = zHZdNzslbVxNsaexIzG41769079;     zHZdNzslbVxNsaexIzG41769079 = zHZdNzslbVxNsaexIzG32243533;     zHZdNzslbVxNsaexIzG32243533 = zHZdNzslbVxNsaexIzG45571618;     zHZdNzslbVxNsaexIzG45571618 = zHZdNzslbVxNsaexIzG8808706;     zHZdNzslbVxNsaexIzG8808706 = zHZdNzslbVxNsaexIzG31623501;     zHZdNzslbVxNsaexIzG31623501 = zHZdNzslbVxNsaexIzG88789531;     zHZdNzslbVxNsaexIzG88789531 = zHZdNzslbVxNsaexIzG93196292;     zHZdNzslbVxNsaexIzG93196292 = zHZdNzslbVxNsaexIzG83095289;     zHZdNzslbVxNsaexIzG83095289 = zHZdNzslbVxNsaexIzG80029536;     zHZdNzslbVxNsaexIzG80029536 = zHZdNzslbVxNsaexIzG88973952;     zHZdNzslbVxNsaexIzG88973952 = zHZdNzslbVxNsaexIzG64060891;     zHZdNzslbVxNsaexIzG64060891 = zHZdNzslbVxNsaexIzG37669794;     zHZdNzslbVxNsaexIzG37669794 = zHZdNzslbVxNsaexIzG55308033;     zHZdNzslbVxNsaexIzG55308033 = zHZdNzslbVxNsaexIzG58956061;     zHZdNzslbVxNsaexIzG58956061 = zHZdNzslbVxNsaexIzG29890855;     zHZdNzslbVxNsaexIzG29890855 = zHZdNzslbVxNsaexIzG65425079;     zHZdNzslbVxNsaexIzG65425079 = zHZdNzslbVxNsaexIzG39858542;     zHZdNzslbVxNsaexIzG39858542 = zHZdNzslbVxNsaexIzG77102386;     zHZdNzslbVxNsaexIzG77102386 = zHZdNzslbVxNsaexIzG70074642;     zHZdNzslbVxNsaexIzG70074642 = zHZdNzslbVxNsaexIzG91717759;     zHZdNzslbVxNsaexIzG91717759 = zHZdNzslbVxNsaexIzG2176056;     zHZdNzslbVxNsaexIzG2176056 = zHZdNzslbVxNsaexIzG5222213;     zHZdNzslbVxNsaexIzG5222213 = zHZdNzslbVxNsaexIzG5507135;     zHZdNzslbVxNsaexIzG5507135 = zHZdNzslbVxNsaexIzG99722762;     zHZdNzslbVxNsaexIzG99722762 = zHZdNzslbVxNsaexIzG69860198;     zHZdNzslbVxNsaexIzG69860198 = zHZdNzslbVxNsaexIzG21385640;     zHZdNzslbVxNsaexIzG21385640 = zHZdNzslbVxNsaexIzG93824678;     zHZdNzslbVxNsaexIzG93824678 = zHZdNzslbVxNsaexIzG30755716;     zHZdNzslbVxNsaexIzG30755716 = zHZdNzslbVxNsaexIzG96467250;     zHZdNzslbVxNsaexIzG96467250 = zHZdNzslbVxNsaexIzG48133099;     zHZdNzslbVxNsaexIzG48133099 = zHZdNzslbVxNsaexIzG53146687;     zHZdNzslbVxNsaexIzG53146687 = zHZdNzslbVxNsaexIzG86842709;     zHZdNzslbVxNsaexIzG86842709 = zHZdNzslbVxNsaexIzG22217175;     zHZdNzslbVxNsaexIzG22217175 = zHZdNzslbVxNsaexIzG65329786;     zHZdNzslbVxNsaexIzG65329786 = zHZdNzslbVxNsaexIzG77226249;     zHZdNzslbVxNsaexIzG77226249 = zHZdNzslbVxNsaexIzG36292384;     zHZdNzslbVxNsaexIzG36292384 = zHZdNzslbVxNsaexIzG8074785;     zHZdNzslbVxNsaexIzG8074785 = zHZdNzslbVxNsaexIzG50812451;     zHZdNzslbVxNsaexIzG50812451 = zHZdNzslbVxNsaexIzG11653682;     zHZdNzslbVxNsaexIzG11653682 = zHZdNzslbVxNsaexIzG29528247;     zHZdNzslbVxNsaexIzG29528247 = zHZdNzslbVxNsaexIzG78037390;     zHZdNzslbVxNsaexIzG78037390 = zHZdNzslbVxNsaexIzG75023772;     zHZdNzslbVxNsaexIzG75023772 = zHZdNzslbVxNsaexIzG83325416;     zHZdNzslbVxNsaexIzG83325416 = zHZdNzslbVxNsaexIzG62909434;     zHZdNzslbVxNsaexIzG62909434 = zHZdNzslbVxNsaexIzG43617360;     zHZdNzslbVxNsaexIzG43617360 = zHZdNzslbVxNsaexIzG99578629;     zHZdNzslbVxNsaexIzG99578629 = zHZdNzslbVxNsaexIzG43775805;     zHZdNzslbVxNsaexIzG43775805 = zHZdNzslbVxNsaexIzG74941054;     zHZdNzslbVxNsaexIzG74941054 = zHZdNzslbVxNsaexIzG47913250;     zHZdNzslbVxNsaexIzG47913250 = zHZdNzslbVxNsaexIzG73406768;     zHZdNzslbVxNsaexIzG73406768 = zHZdNzslbVxNsaexIzG53182038;     zHZdNzslbVxNsaexIzG53182038 = zHZdNzslbVxNsaexIzG74013460;     zHZdNzslbVxNsaexIzG74013460 = zHZdNzslbVxNsaexIzG70961995;     zHZdNzslbVxNsaexIzG70961995 = zHZdNzslbVxNsaexIzG15609376;     zHZdNzslbVxNsaexIzG15609376 = zHZdNzslbVxNsaexIzG46242123;     zHZdNzslbVxNsaexIzG46242123 = zHZdNzslbVxNsaexIzG36546867;     zHZdNzslbVxNsaexIzG36546867 = zHZdNzslbVxNsaexIzG26736398;     zHZdNzslbVxNsaexIzG26736398 = zHZdNzslbVxNsaexIzG45848856;     zHZdNzslbVxNsaexIzG45848856 = zHZdNzslbVxNsaexIzG38948507;     zHZdNzslbVxNsaexIzG38948507 = zHZdNzslbVxNsaexIzG10237861;     zHZdNzslbVxNsaexIzG10237861 = zHZdNzslbVxNsaexIzG94964853;     zHZdNzslbVxNsaexIzG94964853 = zHZdNzslbVxNsaexIzG62440576;     zHZdNzslbVxNsaexIzG62440576 = zHZdNzslbVxNsaexIzG86628039;     zHZdNzslbVxNsaexIzG86628039 = zHZdNzslbVxNsaexIzG31896437;     zHZdNzslbVxNsaexIzG31896437 = zHZdNzslbVxNsaexIzG35827265;     zHZdNzslbVxNsaexIzG35827265 = zHZdNzslbVxNsaexIzG77218181;     zHZdNzslbVxNsaexIzG77218181 = zHZdNzslbVxNsaexIzG15452619;     zHZdNzslbVxNsaexIzG15452619 = zHZdNzslbVxNsaexIzG89978247;     zHZdNzslbVxNsaexIzG89978247 = zHZdNzslbVxNsaexIzG81729811;     zHZdNzslbVxNsaexIzG81729811 = zHZdNzslbVxNsaexIzG93598470;     zHZdNzslbVxNsaexIzG93598470 = zHZdNzslbVxNsaexIzG57350295;     zHZdNzslbVxNsaexIzG57350295 = zHZdNzslbVxNsaexIzG89046091;     zHZdNzslbVxNsaexIzG89046091 = zHZdNzslbVxNsaexIzG65448705;     zHZdNzslbVxNsaexIzG65448705 = zHZdNzslbVxNsaexIzG40546396;     zHZdNzslbVxNsaexIzG40546396 = zHZdNzslbVxNsaexIzG13680369;     zHZdNzslbVxNsaexIzG13680369 = zHZdNzslbVxNsaexIzG27152283;     zHZdNzslbVxNsaexIzG27152283 = zHZdNzslbVxNsaexIzG21896797;     zHZdNzslbVxNsaexIzG21896797 = zHZdNzslbVxNsaexIzG42597701;     zHZdNzslbVxNsaexIzG42597701 = zHZdNzslbVxNsaexIzG56105403;     zHZdNzslbVxNsaexIzG56105403 = zHZdNzslbVxNsaexIzG70281569;     zHZdNzslbVxNsaexIzG70281569 = zHZdNzslbVxNsaexIzG77609835;     zHZdNzslbVxNsaexIzG77609835 = zHZdNzslbVxNsaexIzG18883625;     zHZdNzslbVxNsaexIzG18883625 = zHZdNzslbVxNsaexIzG59621156;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void RtJgTSTJZkPsLpItFIH99011897() {     int JpPVbkigIqGqBHUlMOu33470983 = -497511145;    int JpPVbkigIqGqBHUlMOu24000343 = -924912717;    int JpPVbkigIqGqBHUlMOu2396595 = 39359520;    int JpPVbkigIqGqBHUlMOu41880210 = -320588254;    int JpPVbkigIqGqBHUlMOu50737133 = -64583773;    int JpPVbkigIqGqBHUlMOu55480875 = -923267986;    int JpPVbkigIqGqBHUlMOu83427387 = -449095324;    int JpPVbkigIqGqBHUlMOu3896897 = -809429110;    int JpPVbkigIqGqBHUlMOu11279640 = -500259492;    int JpPVbkigIqGqBHUlMOu49445097 = -108430335;    int JpPVbkigIqGqBHUlMOu52937970 = -118202036;    int JpPVbkigIqGqBHUlMOu2765384 = -393153379;    int JpPVbkigIqGqBHUlMOu28231831 = -774870776;    int JpPVbkigIqGqBHUlMOu25832578 = -76278794;    int JpPVbkigIqGqBHUlMOu53369477 = -438465188;    int JpPVbkigIqGqBHUlMOu37030408 = -58788750;    int JpPVbkigIqGqBHUlMOu51154726 = -22321249;    int JpPVbkigIqGqBHUlMOu83851160 = -323309911;    int JpPVbkigIqGqBHUlMOu43659951 = -329673553;    int JpPVbkigIqGqBHUlMOu73675426 = -672398094;    int JpPVbkigIqGqBHUlMOu833532 = -353567946;    int JpPVbkigIqGqBHUlMOu7892359 = -648789342;    int JpPVbkigIqGqBHUlMOu34037784 = -159233457;    int JpPVbkigIqGqBHUlMOu97853324 = -281761615;    int JpPVbkigIqGqBHUlMOu76683573 = -527629399;    int JpPVbkigIqGqBHUlMOu54879012 = -984269172;    int JpPVbkigIqGqBHUlMOu23588811 = -82185343;    int JpPVbkigIqGqBHUlMOu54743528 = -636343304;    int JpPVbkigIqGqBHUlMOu97188030 = 74755821;    int JpPVbkigIqGqBHUlMOu21007201 = -621483099;    int JpPVbkigIqGqBHUlMOu40135859 = -558586575;    int JpPVbkigIqGqBHUlMOu83116263 = -194685321;    int JpPVbkigIqGqBHUlMOu52984597 = -506530974;    int JpPVbkigIqGqBHUlMOu24988438 = -558654292;    int JpPVbkigIqGqBHUlMOu43058402 = -609047057;    int JpPVbkigIqGqBHUlMOu194627 = -582182762;    int JpPVbkigIqGqBHUlMOu70071801 = -429758065;    int JpPVbkigIqGqBHUlMOu66456833 = -141568042;    int JpPVbkigIqGqBHUlMOu73324791 = -338308789;    int JpPVbkigIqGqBHUlMOu88923470 = -754061640;    int JpPVbkigIqGqBHUlMOu83974329 = -676104971;    int JpPVbkigIqGqBHUlMOu83706952 = 31035829;    int JpPVbkigIqGqBHUlMOu62477186 = -203362518;    int JpPVbkigIqGqBHUlMOu99243100 = -496658884;    int JpPVbkigIqGqBHUlMOu13776347 = -589520413;    int JpPVbkigIqGqBHUlMOu95461591 = -394293869;    int JpPVbkigIqGqBHUlMOu10069510 = -504315382;    int JpPVbkigIqGqBHUlMOu77261405 = -809859044;    int JpPVbkigIqGqBHUlMOu14939555 = -709401444;    int JpPVbkigIqGqBHUlMOu51996445 = -213865785;    int JpPVbkigIqGqBHUlMOu91673530 = -269483589;    int JpPVbkigIqGqBHUlMOu60608613 = -829711145;    int JpPVbkigIqGqBHUlMOu72061107 = -876074227;    int JpPVbkigIqGqBHUlMOu35132052 = -338329415;    int JpPVbkigIqGqBHUlMOu98178366 = -62931014;    int JpPVbkigIqGqBHUlMOu25578624 = -848721803;    int JpPVbkigIqGqBHUlMOu89962558 = -665679260;    int JpPVbkigIqGqBHUlMOu4543271 = -678878866;    int JpPVbkigIqGqBHUlMOu65196637 = -792958856;    int JpPVbkigIqGqBHUlMOu95858121 = -80314602;    int JpPVbkigIqGqBHUlMOu31892064 = -741082643;    int JpPVbkigIqGqBHUlMOu28683860 = -812752020;    int JpPVbkigIqGqBHUlMOu6708867 = -784184932;    int JpPVbkigIqGqBHUlMOu90272438 = -878776393;    int JpPVbkigIqGqBHUlMOu9309238 = -549843760;    int JpPVbkigIqGqBHUlMOu69821707 = -923516716;    int JpPVbkigIqGqBHUlMOu49780786 = -886622406;    int JpPVbkigIqGqBHUlMOu3243394 = -116216484;    int JpPVbkigIqGqBHUlMOu82774176 = -467231738;    int JpPVbkigIqGqBHUlMOu53174850 = -856282426;    int JpPVbkigIqGqBHUlMOu66958606 = -629030686;    int JpPVbkigIqGqBHUlMOu84697892 = -880753208;    int JpPVbkigIqGqBHUlMOu10526370 = -985001123;    int JpPVbkigIqGqBHUlMOu54736481 = -575611913;    int JpPVbkigIqGqBHUlMOu89701096 = -996293123;    int JpPVbkigIqGqBHUlMOu17126579 = -284603775;    int JpPVbkigIqGqBHUlMOu45415173 = -345426825;    int JpPVbkigIqGqBHUlMOu34794684 = -662574574;    int JpPVbkigIqGqBHUlMOu84076977 = -692241202;    int JpPVbkigIqGqBHUlMOu81221981 = -33335530;    int JpPVbkigIqGqBHUlMOu44809502 = -379953790;    int JpPVbkigIqGqBHUlMOu46327405 = -272326300;    int JpPVbkigIqGqBHUlMOu39803973 = -926941860;    int JpPVbkigIqGqBHUlMOu45191585 = -711378394;    int JpPVbkigIqGqBHUlMOu29333671 = -251999510;    int JpPVbkigIqGqBHUlMOu79527246 = -728875431;    int JpPVbkigIqGqBHUlMOu11055157 = -318611094;    int JpPVbkigIqGqBHUlMOu17852545 = -68201559;    int JpPVbkigIqGqBHUlMOu26810071 = -395723278;    int JpPVbkigIqGqBHUlMOu17479778 = -760325254;    int JpPVbkigIqGqBHUlMOu10232069 = -916503502;    int JpPVbkigIqGqBHUlMOu65528531 = -750879199;    int JpPVbkigIqGqBHUlMOu1260197 = -348609186;    int JpPVbkigIqGqBHUlMOu77466670 = -157994188;    int JpPVbkigIqGqBHUlMOu57031406 = 87021002;    int JpPVbkigIqGqBHUlMOu55290469 = -863352951;    int JpPVbkigIqGqBHUlMOu76998086 = -184779240;    int JpPVbkigIqGqBHUlMOu72204747 = -324586125;    int JpPVbkigIqGqBHUlMOu89933863 = -946815125;    int JpPVbkigIqGqBHUlMOu43954640 = -497511145;     JpPVbkigIqGqBHUlMOu33470983 = JpPVbkigIqGqBHUlMOu24000343;     JpPVbkigIqGqBHUlMOu24000343 = JpPVbkigIqGqBHUlMOu2396595;     JpPVbkigIqGqBHUlMOu2396595 = JpPVbkigIqGqBHUlMOu41880210;     JpPVbkigIqGqBHUlMOu41880210 = JpPVbkigIqGqBHUlMOu50737133;     JpPVbkigIqGqBHUlMOu50737133 = JpPVbkigIqGqBHUlMOu55480875;     JpPVbkigIqGqBHUlMOu55480875 = JpPVbkigIqGqBHUlMOu83427387;     JpPVbkigIqGqBHUlMOu83427387 = JpPVbkigIqGqBHUlMOu3896897;     JpPVbkigIqGqBHUlMOu3896897 = JpPVbkigIqGqBHUlMOu11279640;     JpPVbkigIqGqBHUlMOu11279640 = JpPVbkigIqGqBHUlMOu49445097;     JpPVbkigIqGqBHUlMOu49445097 = JpPVbkigIqGqBHUlMOu52937970;     JpPVbkigIqGqBHUlMOu52937970 = JpPVbkigIqGqBHUlMOu2765384;     JpPVbkigIqGqBHUlMOu2765384 = JpPVbkigIqGqBHUlMOu28231831;     JpPVbkigIqGqBHUlMOu28231831 = JpPVbkigIqGqBHUlMOu25832578;     JpPVbkigIqGqBHUlMOu25832578 = JpPVbkigIqGqBHUlMOu53369477;     JpPVbkigIqGqBHUlMOu53369477 = JpPVbkigIqGqBHUlMOu37030408;     JpPVbkigIqGqBHUlMOu37030408 = JpPVbkigIqGqBHUlMOu51154726;     JpPVbkigIqGqBHUlMOu51154726 = JpPVbkigIqGqBHUlMOu83851160;     JpPVbkigIqGqBHUlMOu83851160 = JpPVbkigIqGqBHUlMOu43659951;     JpPVbkigIqGqBHUlMOu43659951 = JpPVbkigIqGqBHUlMOu73675426;     JpPVbkigIqGqBHUlMOu73675426 = JpPVbkigIqGqBHUlMOu833532;     JpPVbkigIqGqBHUlMOu833532 = JpPVbkigIqGqBHUlMOu7892359;     JpPVbkigIqGqBHUlMOu7892359 = JpPVbkigIqGqBHUlMOu34037784;     JpPVbkigIqGqBHUlMOu34037784 = JpPVbkigIqGqBHUlMOu97853324;     JpPVbkigIqGqBHUlMOu97853324 = JpPVbkigIqGqBHUlMOu76683573;     JpPVbkigIqGqBHUlMOu76683573 = JpPVbkigIqGqBHUlMOu54879012;     JpPVbkigIqGqBHUlMOu54879012 = JpPVbkigIqGqBHUlMOu23588811;     JpPVbkigIqGqBHUlMOu23588811 = JpPVbkigIqGqBHUlMOu54743528;     JpPVbkigIqGqBHUlMOu54743528 = JpPVbkigIqGqBHUlMOu97188030;     JpPVbkigIqGqBHUlMOu97188030 = JpPVbkigIqGqBHUlMOu21007201;     JpPVbkigIqGqBHUlMOu21007201 = JpPVbkigIqGqBHUlMOu40135859;     JpPVbkigIqGqBHUlMOu40135859 = JpPVbkigIqGqBHUlMOu83116263;     JpPVbkigIqGqBHUlMOu83116263 = JpPVbkigIqGqBHUlMOu52984597;     JpPVbkigIqGqBHUlMOu52984597 = JpPVbkigIqGqBHUlMOu24988438;     JpPVbkigIqGqBHUlMOu24988438 = JpPVbkigIqGqBHUlMOu43058402;     JpPVbkigIqGqBHUlMOu43058402 = JpPVbkigIqGqBHUlMOu194627;     JpPVbkigIqGqBHUlMOu194627 = JpPVbkigIqGqBHUlMOu70071801;     JpPVbkigIqGqBHUlMOu70071801 = JpPVbkigIqGqBHUlMOu66456833;     JpPVbkigIqGqBHUlMOu66456833 = JpPVbkigIqGqBHUlMOu73324791;     JpPVbkigIqGqBHUlMOu73324791 = JpPVbkigIqGqBHUlMOu88923470;     JpPVbkigIqGqBHUlMOu88923470 = JpPVbkigIqGqBHUlMOu83974329;     JpPVbkigIqGqBHUlMOu83974329 = JpPVbkigIqGqBHUlMOu83706952;     JpPVbkigIqGqBHUlMOu83706952 = JpPVbkigIqGqBHUlMOu62477186;     JpPVbkigIqGqBHUlMOu62477186 = JpPVbkigIqGqBHUlMOu99243100;     JpPVbkigIqGqBHUlMOu99243100 = JpPVbkigIqGqBHUlMOu13776347;     JpPVbkigIqGqBHUlMOu13776347 = JpPVbkigIqGqBHUlMOu95461591;     JpPVbkigIqGqBHUlMOu95461591 = JpPVbkigIqGqBHUlMOu10069510;     JpPVbkigIqGqBHUlMOu10069510 = JpPVbkigIqGqBHUlMOu77261405;     JpPVbkigIqGqBHUlMOu77261405 = JpPVbkigIqGqBHUlMOu14939555;     JpPVbkigIqGqBHUlMOu14939555 = JpPVbkigIqGqBHUlMOu51996445;     JpPVbkigIqGqBHUlMOu51996445 = JpPVbkigIqGqBHUlMOu91673530;     JpPVbkigIqGqBHUlMOu91673530 = JpPVbkigIqGqBHUlMOu60608613;     JpPVbkigIqGqBHUlMOu60608613 = JpPVbkigIqGqBHUlMOu72061107;     JpPVbkigIqGqBHUlMOu72061107 = JpPVbkigIqGqBHUlMOu35132052;     JpPVbkigIqGqBHUlMOu35132052 = JpPVbkigIqGqBHUlMOu98178366;     JpPVbkigIqGqBHUlMOu98178366 = JpPVbkigIqGqBHUlMOu25578624;     JpPVbkigIqGqBHUlMOu25578624 = JpPVbkigIqGqBHUlMOu89962558;     JpPVbkigIqGqBHUlMOu89962558 = JpPVbkigIqGqBHUlMOu4543271;     JpPVbkigIqGqBHUlMOu4543271 = JpPVbkigIqGqBHUlMOu65196637;     JpPVbkigIqGqBHUlMOu65196637 = JpPVbkigIqGqBHUlMOu95858121;     JpPVbkigIqGqBHUlMOu95858121 = JpPVbkigIqGqBHUlMOu31892064;     JpPVbkigIqGqBHUlMOu31892064 = JpPVbkigIqGqBHUlMOu28683860;     JpPVbkigIqGqBHUlMOu28683860 = JpPVbkigIqGqBHUlMOu6708867;     JpPVbkigIqGqBHUlMOu6708867 = JpPVbkigIqGqBHUlMOu90272438;     JpPVbkigIqGqBHUlMOu90272438 = JpPVbkigIqGqBHUlMOu9309238;     JpPVbkigIqGqBHUlMOu9309238 = JpPVbkigIqGqBHUlMOu69821707;     JpPVbkigIqGqBHUlMOu69821707 = JpPVbkigIqGqBHUlMOu49780786;     JpPVbkigIqGqBHUlMOu49780786 = JpPVbkigIqGqBHUlMOu3243394;     JpPVbkigIqGqBHUlMOu3243394 = JpPVbkigIqGqBHUlMOu82774176;     JpPVbkigIqGqBHUlMOu82774176 = JpPVbkigIqGqBHUlMOu53174850;     JpPVbkigIqGqBHUlMOu53174850 = JpPVbkigIqGqBHUlMOu66958606;     JpPVbkigIqGqBHUlMOu66958606 = JpPVbkigIqGqBHUlMOu84697892;     JpPVbkigIqGqBHUlMOu84697892 = JpPVbkigIqGqBHUlMOu10526370;     JpPVbkigIqGqBHUlMOu10526370 = JpPVbkigIqGqBHUlMOu54736481;     JpPVbkigIqGqBHUlMOu54736481 = JpPVbkigIqGqBHUlMOu89701096;     JpPVbkigIqGqBHUlMOu89701096 = JpPVbkigIqGqBHUlMOu17126579;     JpPVbkigIqGqBHUlMOu17126579 = JpPVbkigIqGqBHUlMOu45415173;     JpPVbkigIqGqBHUlMOu45415173 = JpPVbkigIqGqBHUlMOu34794684;     JpPVbkigIqGqBHUlMOu34794684 = JpPVbkigIqGqBHUlMOu84076977;     JpPVbkigIqGqBHUlMOu84076977 = JpPVbkigIqGqBHUlMOu81221981;     JpPVbkigIqGqBHUlMOu81221981 = JpPVbkigIqGqBHUlMOu44809502;     JpPVbkigIqGqBHUlMOu44809502 = JpPVbkigIqGqBHUlMOu46327405;     JpPVbkigIqGqBHUlMOu46327405 = JpPVbkigIqGqBHUlMOu39803973;     JpPVbkigIqGqBHUlMOu39803973 = JpPVbkigIqGqBHUlMOu45191585;     JpPVbkigIqGqBHUlMOu45191585 = JpPVbkigIqGqBHUlMOu29333671;     JpPVbkigIqGqBHUlMOu29333671 = JpPVbkigIqGqBHUlMOu79527246;     JpPVbkigIqGqBHUlMOu79527246 = JpPVbkigIqGqBHUlMOu11055157;     JpPVbkigIqGqBHUlMOu11055157 = JpPVbkigIqGqBHUlMOu17852545;     JpPVbkigIqGqBHUlMOu17852545 = JpPVbkigIqGqBHUlMOu26810071;     JpPVbkigIqGqBHUlMOu26810071 = JpPVbkigIqGqBHUlMOu17479778;     JpPVbkigIqGqBHUlMOu17479778 = JpPVbkigIqGqBHUlMOu10232069;     JpPVbkigIqGqBHUlMOu10232069 = JpPVbkigIqGqBHUlMOu65528531;     JpPVbkigIqGqBHUlMOu65528531 = JpPVbkigIqGqBHUlMOu1260197;     JpPVbkigIqGqBHUlMOu1260197 = JpPVbkigIqGqBHUlMOu77466670;     JpPVbkigIqGqBHUlMOu77466670 = JpPVbkigIqGqBHUlMOu57031406;     JpPVbkigIqGqBHUlMOu57031406 = JpPVbkigIqGqBHUlMOu55290469;     JpPVbkigIqGqBHUlMOu55290469 = JpPVbkigIqGqBHUlMOu76998086;     JpPVbkigIqGqBHUlMOu76998086 = JpPVbkigIqGqBHUlMOu72204747;     JpPVbkigIqGqBHUlMOu72204747 = JpPVbkigIqGqBHUlMOu89933863;     JpPVbkigIqGqBHUlMOu89933863 = JpPVbkigIqGqBHUlMOu43954640;     JpPVbkigIqGqBHUlMOu43954640 = JpPVbkigIqGqBHUlMOu33470983;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void pjFqrxIhymCoVlYoCXD35656873() {     int BbCbsWAPpHyOsDcUeqY55858100 = -131915108;    int BbCbsWAPpHyOsDcUeqY8347843 = -873455772;    int BbCbsWAPpHyOsDcUeqY31165873 = -200294324;    int BbCbsWAPpHyOsDcUeqY56886898 = -326995786;    int BbCbsWAPpHyOsDcUeqY48911387 = -655640774;    int BbCbsWAPpHyOsDcUeqY70363991 = -783876364;    int BbCbsWAPpHyOsDcUeqY75583126 = -271082630;    int BbCbsWAPpHyOsDcUeqY79530755 = -180025754;    int BbCbsWAPpHyOsDcUeqY8442771 = -384455531;    int BbCbsWAPpHyOsDcUeqY41208681 = -951171668;    int BbCbsWAPpHyOsDcUeqY90479829 = -114826437;    int BbCbsWAPpHyOsDcUeqY58668332 = -643898672;    int BbCbsWAPpHyOsDcUeqY95240011 = -293588095;    int BbCbsWAPpHyOsDcUeqY68447330 = -603987551;    int BbCbsWAPpHyOsDcUeqY90104754 = -65942901;    int BbCbsWAPpHyOsDcUeqY81286320 = -440456292;    int BbCbsWAPpHyOsDcUeqY978078 = -299601069;    int BbCbsWAPpHyOsDcUeqY89827577 = -775052602;    int BbCbsWAPpHyOsDcUeqY84941582 = -464775678;    int BbCbsWAPpHyOsDcUeqY52191709 = -925032547;    int BbCbsWAPpHyOsDcUeqY1716639 = -345055254;    int BbCbsWAPpHyOsDcUeqY71707577 = -53555656;    int BbCbsWAPpHyOsDcUeqY37331107 = -335314049;    int BbCbsWAPpHyOsDcUeqY24353112 = -845754472;    int BbCbsWAPpHyOsDcUeqY12223820 = -149188524;    int BbCbsWAPpHyOsDcUeqY43182006 = -328163396;    int BbCbsWAPpHyOsDcUeqY70678231 = -939771836;    int BbCbsWAPpHyOsDcUeqY60654978 = -424797757;    int BbCbsWAPpHyOsDcUeqY4080592 = -269501298;    int BbCbsWAPpHyOsDcUeqY30164380 = -541778965;    int BbCbsWAPpHyOsDcUeqY84426664 = -639902727;    int BbCbsWAPpHyOsDcUeqY40657454 = -846756675;    int BbCbsWAPpHyOsDcUeqY34023267 = 64125532;    int BbCbsWAPpHyOsDcUeqY84377125 = -882781142;    int BbCbsWAPpHyOsDcUeqY19287766 = -672803480;    int BbCbsWAPpHyOsDcUeqY41887496 = -897578139;    int BbCbsWAPpHyOsDcUeqY63511514 = -162706016;    int BbCbsWAPpHyOsDcUeqY20082935 = -9193513;    int BbCbsWAPpHyOsDcUeqY21632923 = -739354821;    int BbCbsWAPpHyOsDcUeqY9109185 = -890285670;    int BbCbsWAPpHyOsDcUeqY12731700 = -79282637;    int BbCbsWAPpHyOsDcUeqY72215343 = -826872862;    int BbCbsWAPpHyOsDcUeqY68027378 = -90893102;    int BbCbsWAPpHyOsDcUeqY98687219 = -494022533;    int BbCbsWAPpHyOsDcUeqY81759613 = -398663891;    int BbCbsWAPpHyOsDcUeqY3561874 = -576522965;    int BbCbsWAPpHyOsDcUeqY22366908 = 17274365;    int BbCbsWAPpHyOsDcUeqY21860080 = -566394035;    int BbCbsWAPpHyOsDcUeqY9399460 = -659118142;    int BbCbsWAPpHyOsDcUeqY49080191 = -355886044;    int BbCbsWAPpHyOsDcUeqY542747 = -624559866;    int BbCbsWAPpHyOsDcUeqY34459870 = -160530427;    int BbCbsWAPpHyOsDcUeqY50375510 = -547985457;    int BbCbsWAPpHyOsDcUeqY95418597 = -614010224;    int BbCbsWAPpHyOsDcUeqY33940234 = -203635129;    int BbCbsWAPpHyOsDcUeqY84150523 = 21640547;    int BbCbsWAPpHyOsDcUeqY71016735 = -438141723;    int BbCbsWAPpHyOsDcUeqY6812762 = -354539853;    int BbCbsWAPpHyOsDcUeqY44663078 = -77807263;    int BbCbsWAPpHyOsDcUeqY5729381 = -227477379;    int BbCbsWAPpHyOsDcUeqY99685760 = -844104528;    int BbCbsWAPpHyOsDcUeqY14928149 = -846284873;    int BbCbsWAPpHyOsDcUeqY75450164 = -910524457;    int BbCbsWAPpHyOsDcUeqY78278390 = -842676566;    int BbCbsWAPpHyOsDcUeqY56782017 = -211268941;    int BbCbsWAPpHyOsDcUeqY49822376 = -268069762;    int BbCbsWAPpHyOsDcUeqY24645065 = -608024204;    int BbCbsWAPpHyOsDcUeqY10862887 = -410806954;    int BbCbsWAPpHyOsDcUeqY49159564 = -931184072;    int BbCbsWAPpHyOsDcUeqY48217258 = -168364763;    int BbCbsWAPpHyOsDcUeqY17774807 = -177750277;    int BbCbsWAPpHyOsDcUeqY80895143 = -190407556;    int BbCbsWAPpHyOsDcUeqY68194654 = 64302218;    int BbCbsWAPpHyOsDcUeqY75832397 = -574490009;    int BbCbsWAPpHyOsDcUeqY39460009 = -745749911;    int BbCbsWAPpHyOsDcUeqY29501295 = -518182393;    int BbCbsWAPpHyOsDcUeqY3680200 = -962662554;    int BbCbsWAPpHyOsDcUeqY38643888 = -841291517;    int BbCbsWAPpHyOsDcUeqY42593498 = -347090581;    int BbCbsWAPpHyOsDcUeqY8661947 = -572665559;    int BbCbsWAPpHyOsDcUeqY20815099 = -245437761;    int BbCbsWAPpHyOsDcUeqY48818151 = -273377802;    int BbCbsWAPpHyOsDcUeqY51255518 = -765679615;    int BbCbsWAPpHyOsDcUeqY55000400 = -913615254;    int BbCbsWAPpHyOsDcUeqY29621634 = -917219099;    int BbCbsWAPpHyOsDcUeqY49966794 = -379372301;    int BbCbsWAPpHyOsDcUeqY90281944 = -198771219;    int BbCbsWAPpHyOsDcUeqY38604670 = -321864245;    int BbCbsWAPpHyOsDcUeqY50436891 = -579146013;    int BbCbsWAPpHyOsDcUeqY35137243 = -594444027;    int BbCbsWAPpHyOsDcUeqY70870760 = -359436416;    int BbCbsWAPpHyOsDcUeqY56698752 = -808166164;    int BbCbsWAPpHyOsDcUeqY75419856 = -931386251;    int BbCbsWAPpHyOsDcUeqY15903542 = -411877442;    int BbCbsWAPpHyOsDcUeqY9423424 = 53818858;    int BbCbsWAPpHyOsDcUeqY97803551 = -232997764;    int BbCbsWAPpHyOsDcUeqY96765179 = -916348405;    int BbCbsWAPpHyOsDcUeqY89748987 = -248216537;    int BbCbsWAPpHyOsDcUeqY41905203 = -182753593;    int BbCbsWAPpHyOsDcUeqY31937238 = -131915108;     BbCbsWAPpHyOsDcUeqY55858100 = BbCbsWAPpHyOsDcUeqY8347843;     BbCbsWAPpHyOsDcUeqY8347843 = BbCbsWAPpHyOsDcUeqY31165873;     BbCbsWAPpHyOsDcUeqY31165873 = BbCbsWAPpHyOsDcUeqY56886898;     BbCbsWAPpHyOsDcUeqY56886898 = BbCbsWAPpHyOsDcUeqY48911387;     BbCbsWAPpHyOsDcUeqY48911387 = BbCbsWAPpHyOsDcUeqY70363991;     BbCbsWAPpHyOsDcUeqY70363991 = BbCbsWAPpHyOsDcUeqY75583126;     BbCbsWAPpHyOsDcUeqY75583126 = BbCbsWAPpHyOsDcUeqY79530755;     BbCbsWAPpHyOsDcUeqY79530755 = BbCbsWAPpHyOsDcUeqY8442771;     BbCbsWAPpHyOsDcUeqY8442771 = BbCbsWAPpHyOsDcUeqY41208681;     BbCbsWAPpHyOsDcUeqY41208681 = BbCbsWAPpHyOsDcUeqY90479829;     BbCbsWAPpHyOsDcUeqY90479829 = BbCbsWAPpHyOsDcUeqY58668332;     BbCbsWAPpHyOsDcUeqY58668332 = BbCbsWAPpHyOsDcUeqY95240011;     BbCbsWAPpHyOsDcUeqY95240011 = BbCbsWAPpHyOsDcUeqY68447330;     BbCbsWAPpHyOsDcUeqY68447330 = BbCbsWAPpHyOsDcUeqY90104754;     BbCbsWAPpHyOsDcUeqY90104754 = BbCbsWAPpHyOsDcUeqY81286320;     BbCbsWAPpHyOsDcUeqY81286320 = BbCbsWAPpHyOsDcUeqY978078;     BbCbsWAPpHyOsDcUeqY978078 = BbCbsWAPpHyOsDcUeqY89827577;     BbCbsWAPpHyOsDcUeqY89827577 = BbCbsWAPpHyOsDcUeqY84941582;     BbCbsWAPpHyOsDcUeqY84941582 = BbCbsWAPpHyOsDcUeqY52191709;     BbCbsWAPpHyOsDcUeqY52191709 = BbCbsWAPpHyOsDcUeqY1716639;     BbCbsWAPpHyOsDcUeqY1716639 = BbCbsWAPpHyOsDcUeqY71707577;     BbCbsWAPpHyOsDcUeqY71707577 = BbCbsWAPpHyOsDcUeqY37331107;     BbCbsWAPpHyOsDcUeqY37331107 = BbCbsWAPpHyOsDcUeqY24353112;     BbCbsWAPpHyOsDcUeqY24353112 = BbCbsWAPpHyOsDcUeqY12223820;     BbCbsWAPpHyOsDcUeqY12223820 = BbCbsWAPpHyOsDcUeqY43182006;     BbCbsWAPpHyOsDcUeqY43182006 = BbCbsWAPpHyOsDcUeqY70678231;     BbCbsWAPpHyOsDcUeqY70678231 = BbCbsWAPpHyOsDcUeqY60654978;     BbCbsWAPpHyOsDcUeqY60654978 = BbCbsWAPpHyOsDcUeqY4080592;     BbCbsWAPpHyOsDcUeqY4080592 = BbCbsWAPpHyOsDcUeqY30164380;     BbCbsWAPpHyOsDcUeqY30164380 = BbCbsWAPpHyOsDcUeqY84426664;     BbCbsWAPpHyOsDcUeqY84426664 = BbCbsWAPpHyOsDcUeqY40657454;     BbCbsWAPpHyOsDcUeqY40657454 = BbCbsWAPpHyOsDcUeqY34023267;     BbCbsWAPpHyOsDcUeqY34023267 = BbCbsWAPpHyOsDcUeqY84377125;     BbCbsWAPpHyOsDcUeqY84377125 = BbCbsWAPpHyOsDcUeqY19287766;     BbCbsWAPpHyOsDcUeqY19287766 = BbCbsWAPpHyOsDcUeqY41887496;     BbCbsWAPpHyOsDcUeqY41887496 = BbCbsWAPpHyOsDcUeqY63511514;     BbCbsWAPpHyOsDcUeqY63511514 = BbCbsWAPpHyOsDcUeqY20082935;     BbCbsWAPpHyOsDcUeqY20082935 = BbCbsWAPpHyOsDcUeqY21632923;     BbCbsWAPpHyOsDcUeqY21632923 = BbCbsWAPpHyOsDcUeqY9109185;     BbCbsWAPpHyOsDcUeqY9109185 = BbCbsWAPpHyOsDcUeqY12731700;     BbCbsWAPpHyOsDcUeqY12731700 = BbCbsWAPpHyOsDcUeqY72215343;     BbCbsWAPpHyOsDcUeqY72215343 = BbCbsWAPpHyOsDcUeqY68027378;     BbCbsWAPpHyOsDcUeqY68027378 = BbCbsWAPpHyOsDcUeqY98687219;     BbCbsWAPpHyOsDcUeqY98687219 = BbCbsWAPpHyOsDcUeqY81759613;     BbCbsWAPpHyOsDcUeqY81759613 = BbCbsWAPpHyOsDcUeqY3561874;     BbCbsWAPpHyOsDcUeqY3561874 = BbCbsWAPpHyOsDcUeqY22366908;     BbCbsWAPpHyOsDcUeqY22366908 = BbCbsWAPpHyOsDcUeqY21860080;     BbCbsWAPpHyOsDcUeqY21860080 = BbCbsWAPpHyOsDcUeqY9399460;     BbCbsWAPpHyOsDcUeqY9399460 = BbCbsWAPpHyOsDcUeqY49080191;     BbCbsWAPpHyOsDcUeqY49080191 = BbCbsWAPpHyOsDcUeqY542747;     BbCbsWAPpHyOsDcUeqY542747 = BbCbsWAPpHyOsDcUeqY34459870;     BbCbsWAPpHyOsDcUeqY34459870 = BbCbsWAPpHyOsDcUeqY50375510;     BbCbsWAPpHyOsDcUeqY50375510 = BbCbsWAPpHyOsDcUeqY95418597;     BbCbsWAPpHyOsDcUeqY95418597 = BbCbsWAPpHyOsDcUeqY33940234;     BbCbsWAPpHyOsDcUeqY33940234 = BbCbsWAPpHyOsDcUeqY84150523;     BbCbsWAPpHyOsDcUeqY84150523 = BbCbsWAPpHyOsDcUeqY71016735;     BbCbsWAPpHyOsDcUeqY71016735 = BbCbsWAPpHyOsDcUeqY6812762;     BbCbsWAPpHyOsDcUeqY6812762 = BbCbsWAPpHyOsDcUeqY44663078;     BbCbsWAPpHyOsDcUeqY44663078 = BbCbsWAPpHyOsDcUeqY5729381;     BbCbsWAPpHyOsDcUeqY5729381 = BbCbsWAPpHyOsDcUeqY99685760;     BbCbsWAPpHyOsDcUeqY99685760 = BbCbsWAPpHyOsDcUeqY14928149;     BbCbsWAPpHyOsDcUeqY14928149 = BbCbsWAPpHyOsDcUeqY75450164;     BbCbsWAPpHyOsDcUeqY75450164 = BbCbsWAPpHyOsDcUeqY78278390;     BbCbsWAPpHyOsDcUeqY78278390 = BbCbsWAPpHyOsDcUeqY56782017;     BbCbsWAPpHyOsDcUeqY56782017 = BbCbsWAPpHyOsDcUeqY49822376;     BbCbsWAPpHyOsDcUeqY49822376 = BbCbsWAPpHyOsDcUeqY24645065;     BbCbsWAPpHyOsDcUeqY24645065 = BbCbsWAPpHyOsDcUeqY10862887;     BbCbsWAPpHyOsDcUeqY10862887 = BbCbsWAPpHyOsDcUeqY49159564;     BbCbsWAPpHyOsDcUeqY49159564 = BbCbsWAPpHyOsDcUeqY48217258;     BbCbsWAPpHyOsDcUeqY48217258 = BbCbsWAPpHyOsDcUeqY17774807;     BbCbsWAPpHyOsDcUeqY17774807 = BbCbsWAPpHyOsDcUeqY80895143;     BbCbsWAPpHyOsDcUeqY80895143 = BbCbsWAPpHyOsDcUeqY68194654;     BbCbsWAPpHyOsDcUeqY68194654 = BbCbsWAPpHyOsDcUeqY75832397;     BbCbsWAPpHyOsDcUeqY75832397 = BbCbsWAPpHyOsDcUeqY39460009;     BbCbsWAPpHyOsDcUeqY39460009 = BbCbsWAPpHyOsDcUeqY29501295;     BbCbsWAPpHyOsDcUeqY29501295 = BbCbsWAPpHyOsDcUeqY3680200;     BbCbsWAPpHyOsDcUeqY3680200 = BbCbsWAPpHyOsDcUeqY38643888;     BbCbsWAPpHyOsDcUeqY38643888 = BbCbsWAPpHyOsDcUeqY42593498;     BbCbsWAPpHyOsDcUeqY42593498 = BbCbsWAPpHyOsDcUeqY8661947;     BbCbsWAPpHyOsDcUeqY8661947 = BbCbsWAPpHyOsDcUeqY20815099;     BbCbsWAPpHyOsDcUeqY20815099 = BbCbsWAPpHyOsDcUeqY48818151;     BbCbsWAPpHyOsDcUeqY48818151 = BbCbsWAPpHyOsDcUeqY51255518;     BbCbsWAPpHyOsDcUeqY51255518 = BbCbsWAPpHyOsDcUeqY55000400;     BbCbsWAPpHyOsDcUeqY55000400 = BbCbsWAPpHyOsDcUeqY29621634;     BbCbsWAPpHyOsDcUeqY29621634 = BbCbsWAPpHyOsDcUeqY49966794;     BbCbsWAPpHyOsDcUeqY49966794 = BbCbsWAPpHyOsDcUeqY90281944;     BbCbsWAPpHyOsDcUeqY90281944 = BbCbsWAPpHyOsDcUeqY38604670;     BbCbsWAPpHyOsDcUeqY38604670 = BbCbsWAPpHyOsDcUeqY50436891;     BbCbsWAPpHyOsDcUeqY50436891 = BbCbsWAPpHyOsDcUeqY35137243;     BbCbsWAPpHyOsDcUeqY35137243 = BbCbsWAPpHyOsDcUeqY70870760;     BbCbsWAPpHyOsDcUeqY70870760 = BbCbsWAPpHyOsDcUeqY56698752;     BbCbsWAPpHyOsDcUeqY56698752 = BbCbsWAPpHyOsDcUeqY75419856;     BbCbsWAPpHyOsDcUeqY75419856 = BbCbsWAPpHyOsDcUeqY15903542;     BbCbsWAPpHyOsDcUeqY15903542 = BbCbsWAPpHyOsDcUeqY9423424;     BbCbsWAPpHyOsDcUeqY9423424 = BbCbsWAPpHyOsDcUeqY97803551;     BbCbsWAPpHyOsDcUeqY97803551 = BbCbsWAPpHyOsDcUeqY96765179;     BbCbsWAPpHyOsDcUeqY96765179 = BbCbsWAPpHyOsDcUeqY89748987;     BbCbsWAPpHyOsDcUeqY89748987 = BbCbsWAPpHyOsDcUeqY41905203;     BbCbsWAPpHyOsDcUeqY41905203 = BbCbsWAPpHyOsDcUeqY31937238;     BbCbsWAPpHyOsDcUeqY31937238 = BbCbsWAPpHyOsDcUeqY55858100;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void QfnzPCXsHRqVyrpZCfA41985420() {     int YIMidaFLMiZAdakZWUn10512498 = -569442692;    int YIMidaFLMiZAdakZWUn55345462 = -353020586;    int YIMidaFLMiZAdakZWUn91898519 = -585678938;    int YIMidaFLMiZAdakZWUn28321840 = -333098197;    int YIMidaFLMiZAdakZWUn23363058 = -328076014;    int YIMidaFLMiZAdakZWUn84538388 = -913027200;    int YIMidaFLMiZAdakZWUn96683830 = -572975302;    int YIMidaFLMiZAdakZWUn8705860 = -680593987;    int YIMidaFLMiZAdakZWUn96217180 = -431308901;    int YIMidaFLMiZAdakZWUn23840667 = -129972937;    int YIMidaFLMiZAdakZWUn69091125 = -740183009;    int YIMidaFLMiZAdakZWUn21433046 = -830322761;    int YIMidaFLMiZAdakZWUn59057326 = -97128400;    int YIMidaFLMiZAdakZWUn61413761 = -216091129;    int YIMidaFLMiZAdakZWUn20328828 = 26935467;    int YIMidaFLMiZAdakZWUn71053856 = -70615856;    int YIMidaFLMiZAdakZWUn809842 = -773200897;    int YIMidaFLMiZAdakZWUn57424164 = -838617069;    int YIMidaFLMiZAdakZWUn86162182 = -750587226;    int YIMidaFLMiZAdakZWUn69826264 = -170398694;    int YIMidaFLMiZAdakZWUn35891026 = -913138405;    int YIMidaFLMiZAdakZWUn22960166 = -219999764;    int YIMidaFLMiZAdakZWUn73800939 = -922057470;    int YIMidaFLMiZAdakZWUn25781480 = -544795288;    int YIMidaFLMiZAdakZWUn7976436 = -522101976;    int YIMidaFLMiZAdakZWUn84422953 = -331872180;    int YIMidaFLMiZAdakZWUn72668155 = -394616115;    int YIMidaFLMiZAdakZWUn13903978 = -432849618;    int YIMidaFLMiZAdakZWUn43978269 = -649746173;    int YIMidaFLMiZAdakZWUn24599790 = -832536933;    int YIMidaFLMiZAdakZWUn36132193 = -88775253;    int YIMidaFLMiZAdakZWUn71649065 = -158253204;    int YIMidaFLMiZAdakZWUn1679144 = -492392083;    int YIMidaFLMiZAdakZWUn79033018 = -562901952;    int YIMidaFLMiZAdakZWUn53791923 = -890666739;    int YIMidaFLMiZAdakZWUn29214038 = -45573735;    int YIMidaFLMiZAdakZWUn38216002 = -13132637;    int YIMidaFLMiZAdakZWUn33060173 = -983122534;    int YIMidaFLMiZAdakZWUn72402571 = -21303422;    int YIMidaFLMiZAdakZWUn33095580 = -548594269;    int YIMidaFLMiZAdakZWUn68691101 = -191832795;    int YIMidaFLMiZAdakZWUn8890002 = -334404949;    int YIMidaFLMiZAdakZWUn59027561 = 68601580;    int YIMidaFLMiZAdakZWUn7681620 = 32297801;    int YIMidaFLMiZAdakZWUn41743677 = -531181489;    int YIMidaFLMiZAdakZWUn58895475 = -645312579;    int YIMidaFLMiZAdakZWUn38840619 = -9783019;    int YIMidaFLMiZAdakZWUn45287389 = -544046407;    int YIMidaFLMiZAdakZWUn51742226 = -558848331;    int YIMidaFLMiZAdakZWUn93921853 = -595905339;    int YIMidaFLMiZAdakZWUn75656286 = -281775368;    int YIMidaFLMiZAdakZWUn23842020 = -675596410;    int YIMidaFLMiZAdakZWUn82103513 = -287900915;    int YIMidaFLMiZAdakZWUn52834355 = -509896708;    int YIMidaFLMiZAdakZWUn6094394 = -599543810;    int YIMidaFLMiZAdakZWUn87552331 = -249442929;    int YIMidaFLMiZAdakZWUn81544523 = -430963116;    int YIMidaFLMiZAdakZWUn66117039 = 59116350;    int YIMidaFLMiZAdakZWUn20345404 = -810996222;    int YIMidaFLMiZAdakZWUn38940104 = -996203834;    int YIMidaFLMiZAdakZWUn11870234 = -418411086;    int YIMidaFLMiZAdakZWUn82779852 = -40125685;    int YIMidaFLMiZAdakZWUn64727590 = 69152186;    int YIMidaFLMiZAdakZWUn71617391 = -598771968;    int YIMidaFLMiZAdakZWUn87708473 = 58802315;    int YIMidaFLMiZAdakZWUn97442060 = -481929806;    int YIMidaFLMiZAdakZWUn19753902 = -237930679;    int YIMidaFLMiZAdakZWUn80024308 = -534226449;    int YIMidaFLMiZAdakZWUn7621838 = -325424391;    int YIMidaFLMiZAdakZWUn91114789 = -927490798;    int YIMidaFLMiZAdakZWUn32837855 = 42516780;    int YIMidaFLMiZAdakZWUn67749668 = -790078364;    int YIMidaFLMiZAdakZWUn85021592 = -717313647;    int YIMidaFLMiZAdakZWUn53066603 = -101992957;    int YIMidaFLMiZAdakZWUn1135164 = -978565899;    int YIMidaFLMiZAdakZWUn27001025 = -478733457;    int YIMidaFLMiZAdakZWUn63932605 = -188601344;    int YIMidaFLMiZAdakZWUn66119320 = -854355272;    int YIMidaFLMiZAdakZWUn84037803 = 86386200;    int YIMidaFLMiZAdakZWUn49080961 = -876789397;    int YIMidaFLMiZAdakZWUn45582335 = -222089162;    int YIMidaFLMiZAdakZWUn27380766 = -850569709;    int YIMidaFLMiZAdakZWUn62161752 = -874001287;    int YIMidaFLMiZAdakZWUn50056415 = 46159165;    int YIMidaFLMiZAdakZWUn48943503 = -450761566;    int YIMidaFLMiZAdakZWUn12290173 = -413178843;    int YIMidaFLMiZAdakZWUn89545551 = -870352289;    int YIMidaFLMiZAdakZWUn48844789 = -982495375;    int YIMidaFLMiZAdakZWUn72938624 = -963358142;    int YIMidaFLMiZAdakZWUn66239591 = -541223811;    int YIMidaFLMiZAdakZWUn47669515 = -614610620;    int YIMidaFLMiZAdakZWUn72098962 = 27751013;    int YIMidaFLMiZAdakZWUn12714770 = -72126313;    int YIMidaFLMiZAdakZWUn33462467 = -25099589;    int YIMidaFLMiZAdakZWUn21225346 = -30183184;    int YIMidaFLMiZAdakZWUn85911248 = -51707110;    int YIMidaFLMiZAdakZWUn44162411 = -303557135;    int YIMidaFLMiZAdakZWUn87410169 = -332626452;    int YIMidaFLMiZAdakZWUn19973146 = 73495485;    int YIMidaFLMiZAdakZWUn44301617 = -569442692;     YIMidaFLMiZAdakZWUn10512498 = YIMidaFLMiZAdakZWUn55345462;     YIMidaFLMiZAdakZWUn55345462 = YIMidaFLMiZAdakZWUn91898519;     YIMidaFLMiZAdakZWUn91898519 = YIMidaFLMiZAdakZWUn28321840;     YIMidaFLMiZAdakZWUn28321840 = YIMidaFLMiZAdakZWUn23363058;     YIMidaFLMiZAdakZWUn23363058 = YIMidaFLMiZAdakZWUn84538388;     YIMidaFLMiZAdakZWUn84538388 = YIMidaFLMiZAdakZWUn96683830;     YIMidaFLMiZAdakZWUn96683830 = YIMidaFLMiZAdakZWUn8705860;     YIMidaFLMiZAdakZWUn8705860 = YIMidaFLMiZAdakZWUn96217180;     YIMidaFLMiZAdakZWUn96217180 = YIMidaFLMiZAdakZWUn23840667;     YIMidaFLMiZAdakZWUn23840667 = YIMidaFLMiZAdakZWUn69091125;     YIMidaFLMiZAdakZWUn69091125 = YIMidaFLMiZAdakZWUn21433046;     YIMidaFLMiZAdakZWUn21433046 = YIMidaFLMiZAdakZWUn59057326;     YIMidaFLMiZAdakZWUn59057326 = YIMidaFLMiZAdakZWUn61413761;     YIMidaFLMiZAdakZWUn61413761 = YIMidaFLMiZAdakZWUn20328828;     YIMidaFLMiZAdakZWUn20328828 = YIMidaFLMiZAdakZWUn71053856;     YIMidaFLMiZAdakZWUn71053856 = YIMidaFLMiZAdakZWUn809842;     YIMidaFLMiZAdakZWUn809842 = YIMidaFLMiZAdakZWUn57424164;     YIMidaFLMiZAdakZWUn57424164 = YIMidaFLMiZAdakZWUn86162182;     YIMidaFLMiZAdakZWUn86162182 = YIMidaFLMiZAdakZWUn69826264;     YIMidaFLMiZAdakZWUn69826264 = YIMidaFLMiZAdakZWUn35891026;     YIMidaFLMiZAdakZWUn35891026 = YIMidaFLMiZAdakZWUn22960166;     YIMidaFLMiZAdakZWUn22960166 = YIMidaFLMiZAdakZWUn73800939;     YIMidaFLMiZAdakZWUn73800939 = YIMidaFLMiZAdakZWUn25781480;     YIMidaFLMiZAdakZWUn25781480 = YIMidaFLMiZAdakZWUn7976436;     YIMidaFLMiZAdakZWUn7976436 = YIMidaFLMiZAdakZWUn84422953;     YIMidaFLMiZAdakZWUn84422953 = YIMidaFLMiZAdakZWUn72668155;     YIMidaFLMiZAdakZWUn72668155 = YIMidaFLMiZAdakZWUn13903978;     YIMidaFLMiZAdakZWUn13903978 = YIMidaFLMiZAdakZWUn43978269;     YIMidaFLMiZAdakZWUn43978269 = YIMidaFLMiZAdakZWUn24599790;     YIMidaFLMiZAdakZWUn24599790 = YIMidaFLMiZAdakZWUn36132193;     YIMidaFLMiZAdakZWUn36132193 = YIMidaFLMiZAdakZWUn71649065;     YIMidaFLMiZAdakZWUn71649065 = YIMidaFLMiZAdakZWUn1679144;     YIMidaFLMiZAdakZWUn1679144 = YIMidaFLMiZAdakZWUn79033018;     YIMidaFLMiZAdakZWUn79033018 = YIMidaFLMiZAdakZWUn53791923;     YIMidaFLMiZAdakZWUn53791923 = YIMidaFLMiZAdakZWUn29214038;     YIMidaFLMiZAdakZWUn29214038 = YIMidaFLMiZAdakZWUn38216002;     YIMidaFLMiZAdakZWUn38216002 = YIMidaFLMiZAdakZWUn33060173;     YIMidaFLMiZAdakZWUn33060173 = YIMidaFLMiZAdakZWUn72402571;     YIMidaFLMiZAdakZWUn72402571 = YIMidaFLMiZAdakZWUn33095580;     YIMidaFLMiZAdakZWUn33095580 = YIMidaFLMiZAdakZWUn68691101;     YIMidaFLMiZAdakZWUn68691101 = YIMidaFLMiZAdakZWUn8890002;     YIMidaFLMiZAdakZWUn8890002 = YIMidaFLMiZAdakZWUn59027561;     YIMidaFLMiZAdakZWUn59027561 = YIMidaFLMiZAdakZWUn7681620;     YIMidaFLMiZAdakZWUn7681620 = YIMidaFLMiZAdakZWUn41743677;     YIMidaFLMiZAdakZWUn41743677 = YIMidaFLMiZAdakZWUn58895475;     YIMidaFLMiZAdakZWUn58895475 = YIMidaFLMiZAdakZWUn38840619;     YIMidaFLMiZAdakZWUn38840619 = YIMidaFLMiZAdakZWUn45287389;     YIMidaFLMiZAdakZWUn45287389 = YIMidaFLMiZAdakZWUn51742226;     YIMidaFLMiZAdakZWUn51742226 = YIMidaFLMiZAdakZWUn93921853;     YIMidaFLMiZAdakZWUn93921853 = YIMidaFLMiZAdakZWUn75656286;     YIMidaFLMiZAdakZWUn75656286 = YIMidaFLMiZAdakZWUn23842020;     YIMidaFLMiZAdakZWUn23842020 = YIMidaFLMiZAdakZWUn82103513;     YIMidaFLMiZAdakZWUn82103513 = YIMidaFLMiZAdakZWUn52834355;     YIMidaFLMiZAdakZWUn52834355 = YIMidaFLMiZAdakZWUn6094394;     YIMidaFLMiZAdakZWUn6094394 = YIMidaFLMiZAdakZWUn87552331;     YIMidaFLMiZAdakZWUn87552331 = YIMidaFLMiZAdakZWUn81544523;     YIMidaFLMiZAdakZWUn81544523 = YIMidaFLMiZAdakZWUn66117039;     YIMidaFLMiZAdakZWUn66117039 = YIMidaFLMiZAdakZWUn20345404;     YIMidaFLMiZAdakZWUn20345404 = YIMidaFLMiZAdakZWUn38940104;     YIMidaFLMiZAdakZWUn38940104 = YIMidaFLMiZAdakZWUn11870234;     YIMidaFLMiZAdakZWUn11870234 = YIMidaFLMiZAdakZWUn82779852;     YIMidaFLMiZAdakZWUn82779852 = YIMidaFLMiZAdakZWUn64727590;     YIMidaFLMiZAdakZWUn64727590 = YIMidaFLMiZAdakZWUn71617391;     YIMidaFLMiZAdakZWUn71617391 = YIMidaFLMiZAdakZWUn87708473;     YIMidaFLMiZAdakZWUn87708473 = YIMidaFLMiZAdakZWUn97442060;     YIMidaFLMiZAdakZWUn97442060 = YIMidaFLMiZAdakZWUn19753902;     YIMidaFLMiZAdakZWUn19753902 = YIMidaFLMiZAdakZWUn80024308;     YIMidaFLMiZAdakZWUn80024308 = YIMidaFLMiZAdakZWUn7621838;     YIMidaFLMiZAdakZWUn7621838 = YIMidaFLMiZAdakZWUn91114789;     YIMidaFLMiZAdakZWUn91114789 = YIMidaFLMiZAdakZWUn32837855;     YIMidaFLMiZAdakZWUn32837855 = YIMidaFLMiZAdakZWUn67749668;     YIMidaFLMiZAdakZWUn67749668 = YIMidaFLMiZAdakZWUn85021592;     YIMidaFLMiZAdakZWUn85021592 = YIMidaFLMiZAdakZWUn53066603;     YIMidaFLMiZAdakZWUn53066603 = YIMidaFLMiZAdakZWUn1135164;     YIMidaFLMiZAdakZWUn1135164 = YIMidaFLMiZAdakZWUn27001025;     YIMidaFLMiZAdakZWUn27001025 = YIMidaFLMiZAdakZWUn63932605;     YIMidaFLMiZAdakZWUn63932605 = YIMidaFLMiZAdakZWUn66119320;     YIMidaFLMiZAdakZWUn66119320 = YIMidaFLMiZAdakZWUn84037803;     YIMidaFLMiZAdakZWUn84037803 = YIMidaFLMiZAdakZWUn49080961;     YIMidaFLMiZAdakZWUn49080961 = YIMidaFLMiZAdakZWUn45582335;     YIMidaFLMiZAdakZWUn45582335 = YIMidaFLMiZAdakZWUn27380766;     YIMidaFLMiZAdakZWUn27380766 = YIMidaFLMiZAdakZWUn62161752;     YIMidaFLMiZAdakZWUn62161752 = YIMidaFLMiZAdakZWUn50056415;     YIMidaFLMiZAdakZWUn50056415 = YIMidaFLMiZAdakZWUn48943503;     YIMidaFLMiZAdakZWUn48943503 = YIMidaFLMiZAdakZWUn12290173;     YIMidaFLMiZAdakZWUn12290173 = YIMidaFLMiZAdakZWUn89545551;     YIMidaFLMiZAdakZWUn89545551 = YIMidaFLMiZAdakZWUn48844789;     YIMidaFLMiZAdakZWUn48844789 = YIMidaFLMiZAdakZWUn72938624;     YIMidaFLMiZAdakZWUn72938624 = YIMidaFLMiZAdakZWUn66239591;     YIMidaFLMiZAdakZWUn66239591 = YIMidaFLMiZAdakZWUn47669515;     YIMidaFLMiZAdakZWUn47669515 = YIMidaFLMiZAdakZWUn72098962;     YIMidaFLMiZAdakZWUn72098962 = YIMidaFLMiZAdakZWUn12714770;     YIMidaFLMiZAdakZWUn12714770 = YIMidaFLMiZAdakZWUn33462467;     YIMidaFLMiZAdakZWUn33462467 = YIMidaFLMiZAdakZWUn21225346;     YIMidaFLMiZAdakZWUn21225346 = YIMidaFLMiZAdakZWUn85911248;     YIMidaFLMiZAdakZWUn85911248 = YIMidaFLMiZAdakZWUn44162411;     YIMidaFLMiZAdakZWUn44162411 = YIMidaFLMiZAdakZWUn87410169;     YIMidaFLMiZAdakZWUn87410169 = YIMidaFLMiZAdakZWUn19973146;     YIMidaFLMiZAdakZWUn19973146 = YIMidaFLMiZAdakZWUn44301617;     YIMidaFLMiZAdakZWUn44301617 = YIMidaFLMiZAdakZWUn10512498;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void DICokHQxhreuJQglfop48313967() {     int bUaELGyvNIRqoEUXnQs65166895 = 93029724;    int bUaELGyvNIRqoEUXnQs2343082 = -932585400;    int bUaELGyvNIRqoEUXnQs52631166 = -971063551;    int bUaELGyvNIRqoEUXnQs99756781 = -339200608;    int bUaELGyvNIRqoEUXnQs97814728 = -511253;    int bUaELGyvNIRqoEUXnQs98712785 = 57821964;    int bUaELGyvNIRqoEUXnQs17784534 = -874867975;    int bUaELGyvNIRqoEUXnQs37880963 = -81162219;    int bUaELGyvNIRqoEUXnQs83991591 = -478162272;    int bUaELGyvNIRqoEUXnQs6472652 = -408774207;    int bUaELGyvNIRqoEUXnQs47702420 = -265539581;    int bUaELGyvNIRqoEUXnQs84197758 = 83253150;    int bUaELGyvNIRqoEUXnQs22874642 = 99331296;    int bUaELGyvNIRqoEUXnQs54380191 = -928194707;    int bUaELGyvNIRqoEUXnQs50552901 = -980186164;    int bUaELGyvNIRqoEUXnQs60821392 = -800775421;    int bUaELGyvNIRqoEUXnQs641605 = -146800726;    int bUaELGyvNIRqoEUXnQs25020751 = -902181537;    int bUaELGyvNIRqoEUXnQs87382783 = 63601226;    int bUaELGyvNIRqoEUXnQs87460820 = -515764840;    int bUaELGyvNIRqoEUXnQs70065414 = -381221556;    int bUaELGyvNIRqoEUXnQs74212755 = -386443871;    int bUaELGyvNIRqoEUXnQs10270771 = -408800891;    int bUaELGyvNIRqoEUXnQs27209849 = -243836105;    int bUaELGyvNIRqoEUXnQs3729052 = -895015427;    int bUaELGyvNIRqoEUXnQs25663901 = -335580965;    int bUaELGyvNIRqoEUXnQs74658079 = -949460394;    int bUaELGyvNIRqoEUXnQs67152978 = -440901478;    int bUaELGyvNIRqoEUXnQs83875945 = 70008952;    int bUaELGyvNIRqoEUXnQs19035199 = -23294902;    int bUaELGyvNIRqoEUXnQs87837721 = -637647779;    int bUaELGyvNIRqoEUXnQs2640676 = -569749732;    int bUaELGyvNIRqoEUXnQs69335020 = 51090303;    int bUaELGyvNIRqoEUXnQs73688910 = -243022761;    int bUaELGyvNIRqoEUXnQs88296079 = -8529999;    int bUaELGyvNIRqoEUXnQs16540580 = -293569332;    int bUaELGyvNIRqoEUXnQs12920490 = -963559257;    int bUaELGyvNIRqoEUXnQs46037412 = -857051555;    int bUaELGyvNIRqoEUXnQs23172220 = -403252024;    int bUaELGyvNIRqoEUXnQs57081974 = -206902868;    int bUaELGyvNIRqoEUXnQs24650502 = -304382953;    int bUaELGyvNIRqoEUXnQs45564660 = -941937035;    int bUaELGyvNIRqoEUXnQs50027744 = -871903738;    int bUaELGyvNIRqoEUXnQs16676019 = -541381865;    int bUaELGyvNIRqoEUXnQs1727741 = -663699086;    int bUaELGyvNIRqoEUXnQs14229077 = -714102194;    int bUaELGyvNIRqoEUXnQs55314331 = -36840402;    int bUaELGyvNIRqoEUXnQs68714698 = -521698779;    int bUaELGyvNIRqoEUXnQs94084993 = -458578520;    int bUaELGyvNIRqoEUXnQs38763516 = -835924633;    int bUaELGyvNIRqoEUXnQs50769826 = 61009130;    int bUaELGyvNIRqoEUXnQs13224170 = -90662393;    int bUaELGyvNIRqoEUXnQs13831517 = -27816372;    int bUaELGyvNIRqoEUXnQs10250112 = -405783193;    int bUaELGyvNIRqoEUXnQs78248553 = -995452492;    int bUaELGyvNIRqoEUXnQs90954140 = -520526405;    int bUaELGyvNIRqoEUXnQs92072311 = -423784509;    int bUaELGyvNIRqoEUXnQs25421317 = -627227447;    int bUaELGyvNIRqoEUXnQs96027729 = -444185181;    int bUaELGyvNIRqoEUXnQs72150828 = -664930289;    int bUaELGyvNIRqoEUXnQs24054707 = 7282357;    int bUaELGyvNIRqoEUXnQs50631556 = -333966497;    int bUaELGyvNIRqoEUXnQs54005017 = -51171172;    int bUaELGyvNIRqoEUXnQs64956393 = -354867371;    int bUaELGyvNIRqoEUXnQs18634931 = -771126429;    int bUaELGyvNIRqoEUXnQs45061745 = -695789850;    int bUaELGyvNIRqoEUXnQs14862739 = -967837153;    int bUaELGyvNIRqoEUXnQs49185731 = -657645943;    int bUaELGyvNIRqoEUXnQs66084112 = -819664709;    int bUaELGyvNIRqoEUXnQs34012321 = -586616833;    int bUaELGyvNIRqoEUXnQs47900903 = -837216164;    int bUaELGyvNIRqoEUXnQs54604193 = -289749171;    int bUaELGyvNIRqoEUXnQs1848531 = -398929513;    int bUaELGyvNIRqoEUXnQs30300809 = -729495906;    int bUaELGyvNIRqoEUXnQs62810318 = -111381887;    int bUaELGyvNIRqoEUXnQs24500754 = -439284521;    int bUaELGyvNIRqoEUXnQs24185012 = -514540134;    int bUaELGyvNIRqoEUXnQs93594752 = -867419027;    int bUaELGyvNIRqoEUXnQs25482109 = -580137019;    int bUaELGyvNIRqoEUXnQs89499975 = -80913234;    int bUaELGyvNIRqoEUXnQs70349570 = -198740563;    int bUaELGyvNIRqoEUXnQs5943382 = -327761615;    int bUaELGyvNIRqoEUXnQs73067985 = -982322959;    int bUaELGyvNIRqoEUXnQs45112429 = -94066416;    int bUaELGyvNIRqoEUXnQs68265372 = 15695968;    int bUaELGyvNIRqoEUXnQs74613552 = -446985386;    int bUaELGyvNIRqoEUXnQs88809158 = -441933360;    int bUaELGyvNIRqoEUXnQs59084908 = -543126505;    int bUaELGyvNIRqoEUXnQs95440357 = -247570270;    int bUaELGyvNIRqoEUXnQs97341939 = -488003594;    int bUaELGyvNIRqoEUXnQs24468269 = -869784823;    int bUaELGyvNIRqoEUXnQs87499172 = -236331811;    int bUaELGyvNIRqoEUXnQs50009683 = -312866374;    int bUaELGyvNIRqoEUXnQs51021392 = -738321736;    int bUaELGyvNIRqoEUXnQs33027268 = -114185226;    int bUaELGyvNIRqoEUXnQs74018946 = -970416457;    int bUaELGyvNIRqoEUXnQs91559642 = -790765864;    int bUaELGyvNIRqoEUXnQs85071350 = -417036368;    int bUaELGyvNIRqoEUXnQs98041088 = -770255437;    int bUaELGyvNIRqoEUXnQs56665996 = 93029724;     bUaELGyvNIRqoEUXnQs65166895 = bUaELGyvNIRqoEUXnQs2343082;     bUaELGyvNIRqoEUXnQs2343082 = bUaELGyvNIRqoEUXnQs52631166;     bUaELGyvNIRqoEUXnQs52631166 = bUaELGyvNIRqoEUXnQs99756781;     bUaELGyvNIRqoEUXnQs99756781 = bUaELGyvNIRqoEUXnQs97814728;     bUaELGyvNIRqoEUXnQs97814728 = bUaELGyvNIRqoEUXnQs98712785;     bUaELGyvNIRqoEUXnQs98712785 = bUaELGyvNIRqoEUXnQs17784534;     bUaELGyvNIRqoEUXnQs17784534 = bUaELGyvNIRqoEUXnQs37880963;     bUaELGyvNIRqoEUXnQs37880963 = bUaELGyvNIRqoEUXnQs83991591;     bUaELGyvNIRqoEUXnQs83991591 = bUaELGyvNIRqoEUXnQs6472652;     bUaELGyvNIRqoEUXnQs6472652 = bUaELGyvNIRqoEUXnQs47702420;     bUaELGyvNIRqoEUXnQs47702420 = bUaELGyvNIRqoEUXnQs84197758;     bUaELGyvNIRqoEUXnQs84197758 = bUaELGyvNIRqoEUXnQs22874642;     bUaELGyvNIRqoEUXnQs22874642 = bUaELGyvNIRqoEUXnQs54380191;     bUaELGyvNIRqoEUXnQs54380191 = bUaELGyvNIRqoEUXnQs50552901;     bUaELGyvNIRqoEUXnQs50552901 = bUaELGyvNIRqoEUXnQs60821392;     bUaELGyvNIRqoEUXnQs60821392 = bUaELGyvNIRqoEUXnQs641605;     bUaELGyvNIRqoEUXnQs641605 = bUaELGyvNIRqoEUXnQs25020751;     bUaELGyvNIRqoEUXnQs25020751 = bUaELGyvNIRqoEUXnQs87382783;     bUaELGyvNIRqoEUXnQs87382783 = bUaELGyvNIRqoEUXnQs87460820;     bUaELGyvNIRqoEUXnQs87460820 = bUaELGyvNIRqoEUXnQs70065414;     bUaELGyvNIRqoEUXnQs70065414 = bUaELGyvNIRqoEUXnQs74212755;     bUaELGyvNIRqoEUXnQs74212755 = bUaELGyvNIRqoEUXnQs10270771;     bUaELGyvNIRqoEUXnQs10270771 = bUaELGyvNIRqoEUXnQs27209849;     bUaELGyvNIRqoEUXnQs27209849 = bUaELGyvNIRqoEUXnQs3729052;     bUaELGyvNIRqoEUXnQs3729052 = bUaELGyvNIRqoEUXnQs25663901;     bUaELGyvNIRqoEUXnQs25663901 = bUaELGyvNIRqoEUXnQs74658079;     bUaELGyvNIRqoEUXnQs74658079 = bUaELGyvNIRqoEUXnQs67152978;     bUaELGyvNIRqoEUXnQs67152978 = bUaELGyvNIRqoEUXnQs83875945;     bUaELGyvNIRqoEUXnQs83875945 = bUaELGyvNIRqoEUXnQs19035199;     bUaELGyvNIRqoEUXnQs19035199 = bUaELGyvNIRqoEUXnQs87837721;     bUaELGyvNIRqoEUXnQs87837721 = bUaELGyvNIRqoEUXnQs2640676;     bUaELGyvNIRqoEUXnQs2640676 = bUaELGyvNIRqoEUXnQs69335020;     bUaELGyvNIRqoEUXnQs69335020 = bUaELGyvNIRqoEUXnQs73688910;     bUaELGyvNIRqoEUXnQs73688910 = bUaELGyvNIRqoEUXnQs88296079;     bUaELGyvNIRqoEUXnQs88296079 = bUaELGyvNIRqoEUXnQs16540580;     bUaELGyvNIRqoEUXnQs16540580 = bUaELGyvNIRqoEUXnQs12920490;     bUaELGyvNIRqoEUXnQs12920490 = bUaELGyvNIRqoEUXnQs46037412;     bUaELGyvNIRqoEUXnQs46037412 = bUaELGyvNIRqoEUXnQs23172220;     bUaELGyvNIRqoEUXnQs23172220 = bUaELGyvNIRqoEUXnQs57081974;     bUaELGyvNIRqoEUXnQs57081974 = bUaELGyvNIRqoEUXnQs24650502;     bUaELGyvNIRqoEUXnQs24650502 = bUaELGyvNIRqoEUXnQs45564660;     bUaELGyvNIRqoEUXnQs45564660 = bUaELGyvNIRqoEUXnQs50027744;     bUaELGyvNIRqoEUXnQs50027744 = bUaELGyvNIRqoEUXnQs16676019;     bUaELGyvNIRqoEUXnQs16676019 = bUaELGyvNIRqoEUXnQs1727741;     bUaELGyvNIRqoEUXnQs1727741 = bUaELGyvNIRqoEUXnQs14229077;     bUaELGyvNIRqoEUXnQs14229077 = bUaELGyvNIRqoEUXnQs55314331;     bUaELGyvNIRqoEUXnQs55314331 = bUaELGyvNIRqoEUXnQs68714698;     bUaELGyvNIRqoEUXnQs68714698 = bUaELGyvNIRqoEUXnQs94084993;     bUaELGyvNIRqoEUXnQs94084993 = bUaELGyvNIRqoEUXnQs38763516;     bUaELGyvNIRqoEUXnQs38763516 = bUaELGyvNIRqoEUXnQs50769826;     bUaELGyvNIRqoEUXnQs50769826 = bUaELGyvNIRqoEUXnQs13224170;     bUaELGyvNIRqoEUXnQs13224170 = bUaELGyvNIRqoEUXnQs13831517;     bUaELGyvNIRqoEUXnQs13831517 = bUaELGyvNIRqoEUXnQs10250112;     bUaELGyvNIRqoEUXnQs10250112 = bUaELGyvNIRqoEUXnQs78248553;     bUaELGyvNIRqoEUXnQs78248553 = bUaELGyvNIRqoEUXnQs90954140;     bUaELGyvNIRqoEUXnQs90954140 = bUaELGyvNIRqoEUXnQs92072311;     bUaELGyvNIRqoEUXnQs92072311 = bUaELGyvNIRqoEUXnQs25421317;     bUaELGyvNIRqoEUXnQs25421317 = bUaELGyvNIRqoEUXnQs96027729;     bUaELGyvNIRqoEUXnQs96027729 = bUaELGyvNIRqoEUXnQs72150828;     bUaELGyvNIRqoEUXnQs72150828 = bUaELGyvNIRqoEUXnQs24054707;     bUaELGyvNIRqoEUXnQs24054707 = bUaELGyvNIRqoEUXnQs50631556;     bUaELGyvNIRqoEUXnQs50631556 = bUaELGyvNIRqoEUXnQs54005017;     bUaELGyvNIRqoEUXnQs54005017 = bUaELGyvNIRqoEUXnQs64956393;     bUaELGyvNIRqoEUXnQs64956393 = bUaELGyvNIRqoEUXnQs18634931;     bUaELGyvNIRqoEUXnQs18634931 = bUaELGyvNIRqoEUXnQs45061745;     bUaELGyvNIRqoEUXnQs45061745 = bUaELGyvNIRqoEUXnQs14862739;     bUaELGyvNIRqoEUXnQs14862739 = bUaELGyvNIRqoEUXnQs49185731;     bUaELGyvNIRqoEUXnQs49185731 = bUaELGyvNIRqoEUXnQs66084112;     bUaELGyvNIRqoEUXnQs66084112 = bUaELGyvNIRqoEUXnQs34012321;     bUaELGyvNIRqoEUXnQs34012321 = bUaELGyvNIRqoEUXnQs47900903;     bUaELGyvNIRqoEUXnQs47900903 = bUaELGyvNIRqoEUXnQs54604193;     bUaELGyvNIRqoEUXnQs54604193 = bUaELGyvNIRqoEUXnQs1848531;     bUaELGyvNIRqoEUXnQs1848531 = bUaELGyvNIRqoEUXnQs30300809;     bUaELGyvNIRqoEUXnQs30300809 = bUaELGyvNIRqoEUXnQs62810318;     bUaELGyvNIRqoEUXnQs62810318 = bUaELGyvNIRqoEUXnQs24500754;     bUaELGyvNIRqoEUXnQs24500754 = bUaELGyvNIRqoEUXnQs24185012;     bUaELGyvNIRqoEUXnQs24185012 = bUaELGyvNIRqoEUXnQs93594752;     bUaELGyvNIRqoEUXnQs93594752 = bUaELGyvNIRqoEUXnQs25482109;     bUaELGyvNIRqoEUXnQs25482109 = bUaELGyvNIRqoEUXnQs89499975;     bUaELGyvNIRqoEUXnQs89499975 = bUaELGyvNIRqoEUXnQs70349570;     bUaELGyvNIRqoEUXnQs70349570 = bUaELGyvNIRqoEUXnQs5943382;     bUaELGyvNIRqoEUXnQs5943382 = bUaELGyvNIRqoEUXnQs73067985;     bUaELGyvNIRqoEUXnQs73067985 = bUaELGyvNIRqoEUXnQs45112429;     bUaELGyvNIRqoEUXnQs45112429 = bUaELGyvNIRqoEUXnQs68265372;     bUaELGyvNIRqoEUXnQs68265372 = bUaELGyvNIRqoEUXnQs74613552;     bUaELGyvNIRqoEUXnQs74613552 = bUaELGyvNIRqoEUXnQs88809158;     bUaELGyvNIRqoEUXnQs88809158 = bUaELGyvNIRqoEUXnQs59084908;     bUaELGyvNIRqoEUXnQs59084908 = bUaELGyvNIRqoEUXnQs95440357;     bUaELGyvNIRqoEUXnQs95440357 = bUaELGyvNIRqoEUXnQs97341939;     bUaELGyvNIRqoEUXnQs97341939 = bUaELGyvNIRqoEUXnQs24468269;     bUaELGyvNIRqoEUXnQs24468269 = bUaELGyvNIRqoEUXnQs87499172;     bUaELGyvNIRqoEUXnQs87499172 = bUaELGyvNIRqoEUXnQs50009683;     bUaELGyvNIRqoEUXnQs50009683 = bUaELGyvNIRqoEUXnQs51021392;     bUaELGyvNIRqoEUXnQs51021392 = bUaELGyvNIRqoEUXnQs33027268;     bUaELGyvNIRqoEUXnQs33027268 = bUaELGyvNIRqoEUXnQs74018946;     bUaELGyvNIRqoEUXnQs74018946 = bUaELGyvNIRqoEUXnQs91559642;     bUaELGyvNIRqoEUXnQs91559642 = bUaELGyvNIRqoEUXnQs85071350;     bUaELGyvNIRqoEUXnQs85071350 = bUaELGyvNIRqoEUXnQs98041088;     bUaELGyvNIRqoEUXnQs98041088 = bUaELGyvNIRqoEUXnQs56665996;     bUaELGyvNIRqoEUXnQs56665996 = bUaELGyvNIRqoEUXnQs65166895;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void IpjlbClyPZehPqkeQSu54642514() {     int qZfupAphKPLUxETsLSD19821293 = -344497860;    int qZfupAphKPLUxETsLSD49340701 = -412150214;    int qZfupAphKPLUxETsLSD13363813 = -256448164;    int qZfupAphKPLUxETsLSD71191722 = -345303019;    int qZfupAphKPLUxETsLSD72266399 = -772946492;    int qZfupAphKPLUxETsLSD12887183 = -71328872;    int qZfupAphKPLUxETsLSD38885238 = -76760647;    int qZfupAphKPLUxETsLSD67056066 = -581730452;    int qZfupAphKPLUxETsLSD71766002 = -525015642;    int qZfupAphKPLUxETsLSD89104637 = -687575476;    int qZfupAphKPLUxETsLSD26313715 = -890896153;    int qZfupAphKPLUxETsLSD46962472 = -103170939;    int qZfupAphKPLUxETsLSD86691956 = -804209009;    int qZfupAphKPLUxETsLSD47346622 = -540298285;    int qZfupAphKPLUxETsLSD80776974 = -887307796;    int qZfupAphKPLUxETsLSD50588928 = -430934985;    int qZfupAphKPLUxETsLSD473369 = -620400554;    int qZfupAphKPLUxETsLSD92617338 = -965746004;    int qZfupAphKPLUxETsLSD88603384 = -222210321;    int qZfupAphKPLUxETsLSD5095376 = -861130986;    int qZfupAphKPLUxETsLSD4239802 = -949304707;    int qZfupAphKPLUxETsLSD25465344 = -552887979;    int qZfupAphKPLUxETsLSD46740602 = -995544312;    int qZfupAphKPLUxETsLSD28638218 = 57123079;    int qZfupAphKPLUxETsLSD99481668 = -167928879;    int qZfupAphKPLUxETsLSD66904848 = -339289750;    int qZfupAphKPLUxETsLSD76648003 = -404304673;    int qZfupAphKPLUxETsLSD20401979 = -448953339;    int qZfupAphKPLUxETsLSD23773623 = -310235924;    int qZfupAphKPLUxETsLSD13470608 = -314052870;    int qZfupAphKPLUxETsLSD39543250 = -86520305;    int qZfupAphKPLUxETsLSD33632286 = -981246260;    int qZfupAphKPLUxETsLSD36990897 = -505427311;    int qZfupAphKPLUxETsLSD68344803 = 76856429;    int qZfupAphKPLUxETsLSD22800237 = -226393258;    int qZfupAphKPLUxETsLSD3867123 = -541564929;    int qZfupAphKPLUxETsLSD87624977 = -813985877;    int qZfupAphKPLUxETsLSD59014651 = -730980576;    int qZfupAphKPLUxETsLSD73941869 = -785200626;    int qZfupAphKPLUxETsLSD81068369 = -965211468;    int qZfupAphKPLUxETsLSD80609902 = -416933111;    int qZfupAphKPLUxETsLSD82239318 = -449469122;    int qZfupAphKPLUxETsLSD41027926 = -712409056;    int qZfupAphKPLUxETsLSD25670418 = -15061530;    int qZfupAphKPLUxETsLSD61711804 = -796216684;    int qZfupAphKPLUxETsLSD69562678 = -782891809;    int qZfupAphKPLUxETsLSD71788042 = -63897786;    int qZfupAphKPLUxETsLSD92142007 = -499351152;    int qZfupAphKPLUxETsLSD36427760 = -358308709;    int qZfupAphKPLUxETsLSD83605178 = 24056073;    int qZfupAphKPLUxETsLSD25883366 = -696206372;    int qZfupAphKPLUxETsLSD2606320 = -605728376;    int qZfupAphKPLUxETsLSD45559520 = -867731829;    int qZfupAphKPLUxETsLSD67665869 = -301669677;    int qZfupAphKPLUxETsLSD50402713 = -291361173;    int qZfupAphKPLUxETsLSD94355948 = -791609881;    int qZfupAphKPLUxETsLSD2600099 = -416605902;    int qZfupAphKPLUxETsLSD84725594 = -213571244;    int qZfupAphKPLUxETsLSD71710054 = -77374140;    int qZfupAphKPLUxETsLSD5361552 = -333656743;    int qZfupAphKPLUxETsLSD36239180 = -667024200;    int qZfupAphKPLUxETsLSD18483260 = -627807309;    int qZfupAphKPLUxETsLSD43282444 = -171494529;    int qZfupAphKPLUxETsLSD58295394 = -110962773;    int qZfupAphKPLUxETsLSD49561387 = -501055172;    int qZfupAphKPLUxETsLSD92681429 = -909649894;    int qZfupAphKPLUxETsLSD9971575 = -597743628;    int qZfupAphKPLUxETsLSD18347153 = -781065438;    int qZfupAphKPLUxETsLSD24546386 = -213905028;    int qZfupAphKPLUxETsLSD76909852 = -245742868;    int qZfupAphKPLUxETsLSD62963951 = -616949108;    int qZfupAphKPLUxETsLSD41458718 = -889419979;    int qZfupAphKPLUxETsLSD18675469 = -80545379;    int qZfupAphKPLUxETsLSD7535015 = -256998854;    int qZfupAphKPLUxETsLSD24485473 = -344197875;    int qZfupAphKPLUxETsLSD22000484 = -399835586;    int qZfupAphKPLUxETsLSD84437417 = -840478924;    int qZfupAphKPLUxETsLSD21070185 = -880482783;    int qZfupAphKPLUxETsLSD66926414 = -146660237;    int qZfupAphKPLUxETsLSD29918990 = -385037071;    int qZfupAphKPLUxETsLSD95116805 = -175391964;    int qZfupAphKPLUxETsLSD84505996 = -904953522;    int qZfupAphKPLUxETsLSD83974218 = 9355370;    int qZfupAphKPLUxETsLSD40168444 = -234291997;    int qZfupAphKPLUxETsLSD87587242 = -617846498;    int qZfupAphKPLUxETsLSD36936931 = -480791929;    int qZfupAphKPLUxETsLSD88072766 = -13514431;    int qZfupAphKPLUxETsLSD69325027 = -103757634;    int qZfupAphKPLUxETsLSD17942091 = -631782399;    int qZfupAphKPLUxETsLSD28444288 = -434783378;    int qZfupAphKPLUxETsLSD1267024 = -24959027;    int qZfupAphKPLUxETsLSD2899383 = -500414634;    int qZfupAphKPLUxETsLSD87304596 = -553606436;    int qZfupAphKPLUxETsLSD68580318 = -351543883;    int qZfupAphKPLUxETsLSD44829190 = -198187268;    int qZfupAphKPLUxETsLSD62126643 = -789125803;    int qZfupAphKPLUxETsLSD38956875 = -177974594;    int qZfupAphKPLUxETsLSD82732532 = -501446283;    int qZfupAphKPLUxETsLSD76109030 = -514006358;    int qZfupAphKPLUxETsLSD69030374 = -344497860;     qZfupAphKPLUxETsLSD19821293 = qZfupAphKPLUxETsLSD49340701;     qZfupAphKPLUxETsLSD49340701 = qZfupAphKPLUxETsLSD13363813;     qZfupAphKPLUxETsLSD13363813 = qZfupAphKPLUxETsLSD71191722;     qZfupAphKPLUxETsLSD71191722 = qZfupAphKPLUxETsLSD72266399;     qZfupAphKPLUxETsLSD72266399 = qZfupAphKPLUxETsLSD12887183;     qZfupAphKPLUxETsLSD12887183 = qZfupAphKPLUxETsLSD38885238;     qZfupAphKPLUxETsLSD38885238 = qZfupAphKPLUxETsLSD67056066;     qZfupAphKPLUxETsLSD67056066 = qZfupAphKPLUxETsLSD71766002;     qZfupAphKPLUxETsLSD71766002 = qZfupAphKPLUxETsLSD89104637;     qZfupAphKPLUxETsLSD89104637 = qZfupAphKPLUxETsLSD26313715;     qZfupAphKPLUxETsLSD26313715 = qZfupAphKPLUxETsLSD46962472;     qZfupAphKPLUxETsLSD46962472 = qZfupAphKPLUxETsLSD86691956;     qZfupAphKPLUxETsLSD86691956 = qZfupAphKPLUxETsLSD47346622;     qZfupAphKPLUxETsLSD47346622 = qZfupAphKPLUxETsLSD80776974;     qZfupAphKPLUxETsLSD80776974 = qZfupAphKPLUxETsLSD50588928;     qZfupAphKPLUxETsLSD50588928 = qZfupAphKPLUxETsLSD473369;     qZfupAphKPLUxETsLSD473369 = qZfupAphKPLUxETsLSD92617338;     qZfupAphKPLUxETsLSD92617338 = qZfupAphKPLUxETsLSD88603384;     qZfupAphKPLUxETsLSD88603384 = qZfupAphKPLUxETsLSD5095376;     qZfupAphKPLUxETsLSD5095376 = qZfupAphKPLUxETsLSD4239802;     qZfupAphKPLUxETsLSD4239802 = qZfupAphKPLUxETsLSD25465344;     qZfupAphKPLUxETsLSD25465344 = qZfupAphKPLUxETsLSD46740602;     qZfupAphKPLUxETsLSD46740602 = qZfupAphKPLUxETsLSD28638218;     qZfupAphKPLUxETsLSD28638218 = qZfupAphKPLUxETsLSD99481668;     qZfupAphKPLUxETsLSD99481668 = qZfupAphKPLUxETsLSD66904848;     qZfupAphKPLUxETsLSD66904848 = qZfupAphKPLUxETsLSD76648003;     qZfupAphKPLUxETsLSD76648003 = qZfupAphKPLUxETsLSD20401979;     qZfupAphKPLUxETsLSD20401979 = qZfupAphKPLUxETsLSD23773623;     qZfupAphKPLUxETsLSD23773623 = qZfupAphKPLUxETsLSD13470608;     qZfupAphKPLUxETsLSD13470608 = qZfupAphKPLUxETsLSD39543250;     qZfupAphKPLUxETsLSD39543250 = qZfupAphKPLUxETsLSD33632286;     qZfupAphKPLUxETsLSD33632286 = qZfupAphKPLUxETsLSD36990897;     qZfupAphKPLUxETsLSD36990897 = qZfupAphKPLUxETsLSD68344803;     qZfupAphKPLUxETsLSD68344803 = qZfupAphKPLUxETsLSD22800237;     qZfupAphKPLUxETsLSD22800237 = qZfupAphKPLUxETsLSD3867123;     qZfupAphKPLUxETsLSD3867123 = qZfupAphKPLUxETsLSD87624977;     qZfupAphKPLUxETsLSD87624977 = qZfupAphKPLUxETsLSD59014651;     qZfupAphKPLUxETsLSD59014651 = qZfupAphKPLUxETsLSD73941869;     qZfupAphKPLUxETsLSD73941869 = qZfupAphKPLUxETsLSD81068369;     qZfupAphKPLUxETsLSD81068369 = qZfupAphKPLUxETsLSD80609902;     qZfupAphKPLUxETsLSD80609902 = qZfupAphKPLUxETsLSD82239318;     qZfupAphKPLUxETsLSD82239318 = qZfupAphKPLUxETsLSD41027926;     qZfupAphKPLUxETsLSD41027926 = qZfupAphKPLUxETsLSD25670418;     qZfupAphKPLUxETsLSD25670418 = qZfupAphKPLUxETsLSD61711804;     qZfupAphKPLUxETsLSD61711804 = qZfupAphKPLUxETsLSD69562678;     qZfupAphKPLUxETsLSD69562678 = qZfupAphKPLUxETsLSD71788042;     qZfupAphKPLUxETsLSD71788042 = qZfupAphKPLUxETsLSD92142007;     qZfupAphKPLUxETsLSD92142007 = qZfupAphKPLUxETsLSD36427760;     qZfupAphKPLUxETsLSD36427760 = qZfupAphKPLUxETsLSD83605178;     qZfupAphKPLUxETsLSD83605178 = qZfupAphKPLUxETsLSD25883366;     qZfupAphKPLUxETsLSD25883366 = qZfupAphKPLUxETsLSD2606320;     qZfupAphKPLUxETsLSD2606320 = qZfupAphKPLUxETsLSD45559520;     qZfupAphKPLUxETsLSD45559520 = qZfupAphKPLUxETsLSD67665869;     qZfupAphKPLUxETsLSD67665869 = qZfupAphKPLUxETsLSD50402713;     qZfupAphKPLUxETsLSD50402713 = qZfupAphKPLUxETsLSD94355948;     qZfupAphKPLUxETsLSD94355948 = qZfupAphKPLUxETsLSD2600099;     qZfupAphKPLUxETsLSD2600099 = qZfupAphKPLUxETsLSD84725594;     qZfupAphKPLUxETsLSD84725594 = qZfupAphKPLUxETsLSD71710054;     qZfupAphKPLUxETsLSD71710054 = qZfupAphKPLUxETsLSD5361552;     qZfupAphKPLUxETsLSD5361552 = qZfupAphKPLUxETsLSD36239180;     qZfupAphKPLUxETsLSD36239180 = qZfupAphKPLUxETsLSD18483260;     qZfupAphKPLUxETsLSD18483260 = qZfupAphKPLUxETsLSD43282444;     qZfupAphKPLUxETsLSD43282444 = qZfupAphKPLUxETsLSD58295394;     qZfupAphKPLUxETsLSD58295394 = qZfupAphKPLUxETsLSD49561387;     qZfupAphKPLUxETsLSD49561387 = qZfupAphKPLUxETsLSD92681429;     qZfupAphKPLUxETsLSD92681429 = qZfupAphKPLUxETsLSD9971575;     qZfupAphKPLUxETsLSD9971575 = qZfupAphKPLUxETsLSD18347153;     qZfupAphKPLUxETsLSD18347153 = qZfupAphKPLUxETsLSD24546386;     qZfupAphKPLUxETsLSD24546386 = qZfupAphKPLUxETsLSD76909852;     qZfupAphKPLUxETsLSD76909852 = qZfupAphKPLUxETsLSD62963951;     qZfupAphKPLUxETsLSD62963951 = qZfupAphKPLUxETsLSD41458718;     qZfupAphKPLUxETsLSD41458718 = qZfupAphKPLUxETsLSD18675469;     qZfupAphKPLUxETsLSD18675469 = qZfupAphKPLUxETsLSD7535015;     qZfupAphKPLUxETsLSD7535015 = qZfupAphKPLUxETsLSD24485473;     qZfupAphKPLUxETsLSD24485473 = qZfupAphKPLUxETsLSD22000484;     qZfupAphKPLUxETsLSD22000484 = qZfupAphKPLUxETsLSD84437417;     qZfupAphKPLUxETsLSD84437417 = qZfupAphKPLUxETsLSD21070185;     qZfupAphKPLUxETsLSD21070185 = qZfupAphKPLUxETsLSD66926414;     qZfupAphKPLUxETsLSD66926414 = qZfupAphKPLUxETsLSD29918990;     qZfupAphKPLUxETsLSD29918990 = qZfupAphKPLUxETsLSD95116805;     qZfupAphKPLUxETsLSD95116805 = qZfupAphKPLUxETsLSD84505996;     qZfupAphKPLUxETsLSD84505996 = qZfupAphKPLUxETsLSD83974218;     qZfupAphKPLUxETsLSD83974218 = qZfupAphKPLUxETsLSD40168444;     qZfupAphKPLUxETsLSD40168444 = qZfupAphKPLUxETsLSD87587242;     qZfupAphKPLUxETsLSD87587242 = qZfupAphKPLUxETsLSD36936931;     qZfupAphKPLUxETsLSD36936931 = qZfupAphKPLUxETsLSD88072766;     qZfupAphKPLUxETsLSD88072766 = qZfupAphKPLUxETsLSD69325027;     qZfupAphKPLUxETsLSD69325027 = qZfupAphKPLUxETsLSD17942091;     qZfupAphKPLUxETsLSD17942091 = qZfupAphKPLUxETsLSD28444288;     qZfupAphKPLUxETsLSD28444288 = qZfupAphKPLUxETsLSD1267024;     qZfupAphKPLUxETsLSD1267024 = qZfupAphKPLUxETsLSD2899383;     qZfupAphKPLUxETsLSD2899383 = qZfupAphKPLUxETsLSD87304596;     qZfupAphKPLUxETsLSD87304596 = qZfupAphKPLUxETsLSD68580318;     qZfupAphKPLUxETsLSD68580318 = qZfupAphKPLUxETsLSD44829190;     qZfupAphKPLUxETsLSD44829190 = qZfupAphKPLUxETsLSD62126643;     qZfupAphKPLUxETsLSD62126643 = qZfupAphKPLUxETsLSD38956875;     qZfupAphKPLUxETsLSD38956875 = qZfupAphKPLUxETsLSD82732532;     qZfupAphKPLUxETsLSD82732532 = qZfupAphKPLUxETsLSD76109030;     qZfupAphKPLUxETsLSD76109030 = qZfupAphKPLUxETsLSD69030374;     qZfupAphKPLUxETsLSD69030374 = qZfupAphKPLUxETsLSD19821293;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void qwPSCZjSAHrnxZcATJp60971062() {     int NpWBihhnzEXnslcrIgh74475690 = -782025444;    int NpWBihhnzEXnslcrIgh96338320 = -991715028;    int NpWBihhnzEXnslcrIgh74096458 = -641832778;    int NpWBihhnzEXnslcrIgh42626664 = -351405430;    int NpWBihhnzEXnslcrIgh46718070 = -445381732;    int NpWBihhnzEXnslcrIgh27061580 = -200479709;    int NpWBihhnzEXnslcrIgh59985941 = -378653320;    int NpWBihhnzEXnslcrIgh96231169 = 17701315;    int NpWBihhnzEXnslcrIgh59540412 = -571869013;    int NpWBihhnzEXnslcrIgh71736623 = -966376746;    int NpWBihhnzEXnslcrIgh4925010 = -416252726;    int NpWBihhnzEXnslcrIgh9727186 = -289595027;    int NpWBihhnzEXnslcrIgh50509271 = -607749313;    int NpWBihhnzEXnslcrIgh40313053 = -152401863;    int NpWBihhnzEXnslcrIgh11001048 = -794429427;    int NpWBihhnzEXnslcrIgh40356464 = -61094549;    int NpWBihhnzEXnslcrIgh305133 = 5999617;    int NpWBihhnzEXnslcrIgh60213925 = 70689529;    int NpWBihhnzEXnslcrIgh89823985 = -508021869;    int NpWBihhnzEXnslcrIgh22729931 = -106497132;    int NpWBihhnzEXnslcrIgh38414189 = -417387858;    int NpWBihhnzEXnslcrIgh76717932 = -719332087;    int NpWBihhnzEXnslcrIgh83210433 = -482287733;    int NpWBihhnzEXnslcrIgh30066586 = -741917737;    int NpWBihhnzEXnslcrIgh95234284 = -540842331;    int NpWBihhnzEXnslcrIgh8145796 = -342998534;    int NpWBihhnzEXnslcrIgh78637927 = -959148952;    int NpWBihhnzEXnslcrIgh73650978 = -457005199;    int NpWBihhnzEXnslcrIgh63671299 = -690480799;    int NpWBihhnzEXnslcrIgh7906017 = -604810838;    int NpWBihhnzEXnslcrIgh91248779 = -635392830;    int NpWBihhnzEXnslcrIgh64623896 = -292742788;    int NpWBihhnzEXnslcrIgh4646774 = 38055075;    int NpWBihhnzEXnslcrIgh63000696 = -703264380;    int NpWBihhnzEXnslcrIgh57304393 = -444256518;    int NpWBihhnzEXnslcrIgh91193664 = -789560525;    int NpWBihhnzEXnslcrIgh62329465 = -664412498;    int NpWBihhnzEXnslcrIgh71991890 = -604909597;    int NpWBihhnzEXnslcrIgh24711518 = -67149227;    int NpWBihhnzEXnslcrIgh5054765 = -623520067;    int NpWBihhnzEXnslcrIgh36569303 = -529483269;    int NpWBihhnzEXnslcrIgh18913977 = 42998791;    int NpWBihhnzEXnslcrIgh32028109 = -552914373;    int NpWBihhnzEXnslcrIgh34664817 = -588741196;    int NpWBihhnzEXnslcrIgh21695867 = -928734282;    int NpWBihhnzEXnslcrIgh24896281 = -851681423;    int NpWBihhnzEXnslcrIgh88261754 = -90955170;    int NpWBihhnzEXnslcrIgh15569317 = -477003524;    int NpWBihhnzEXnslcrIgh78770526 = -258038898;    int NpWBihhnzEXnslcrIgh28446841 = -215963222;    int NpWBihhnzEXnslcrIgh996905 = -353421874;    int NpWBihhnzEXnslcrIgh91988468 = -20794359;    int NpWBihhnzEXnslcrIgh77287522 = -607647287;    int NpWBihhnzEXnslcrIgh25081627 = -197556162;    int NpWBihhnzEXnslcrIgh22556873 = -687269854;    int NpWBihhnzEXnslcrIgh97757757 = 37306643;    int NpWBihhnzEXnslcrIgh13127887 = -409427295;    int NpWBihhnzEXnslcrIgh44029872 = -899915041;    int NpWBihhnzEXnslcrIgh47392380 = -810563100;    int NpWBihhnzEXnslcrIgh38572275 = -2383198;    int NpWBihhnzEXnslcrIgh48423652 = -241330757;    int NpWBihhnzEXnslcrIgh86334962 = -921648121;    int NpWBihhnzEXnslcrIgh32559870 = -291817886;    int NpWBihhnzEXnslcrIgh51634396 = -967058175;    int NpWBihhnzEXnslcrIgh80487843 = -230983916;    int NpWBihhnzEXnslcrIgh40301114 = -23509938;    int NpWBihhnzEXnslcrIgh5080412 = -227650103;    int NpWBihhnzEXnslcrIgh87508575 = -904484933;    int NpWBihhnzEXnslcrIgh83008659 = -708145346;    int NpWBihhnzEXnslcrIgh19807384 = 95131098;    int NpWBihhnzEXnslcrIgh78026998 = -396682052;    int NpWBihhnzEXnslcrIgh28313242 = -389090786;    int NpWBihhnzEXnslcrIgh35502407 = -862161244;    int NpWBihhnzEXnslcrIgh84769221 = -884501803;    int NpWBihhnzEXnslcrIgh86160628 = -577013864;    int NpWBihhnzEXnslcrIgh19500213 = -360386650;    int NpWBihhnzEXnslcrIgh44689823 = -66417714;    int NpWBihhnzEXnslcrIgh48545617 = -893546538;    int NpWBihhnzEXnslcrIgh8370719 = -813183456;    int NpWBihhnzEXnslcrIgh70338003 = -689160908;    int NpWBihhnzEXnslcrIgh19884041 = -152043365;    int NpWBihhnzEXnslcrIgh63068611 = -382145429;    int NpWBihhnzEXnslcrIgh94880452 = -98966302;    int NpWBihhnzEXnslcrIgh35224459 = -374517578;    int NpWBihhnzEXnslcrIgh6909112 = -151388964;    int NpWBihhnzEXnslcrIgh99260310 = -514598472;    int NpWBihhnzEXnslcrIgh87336373 = -685095502;    int NpWBihhnzEXnslcrIgh79565146 = -764388764;    int NpWBihhnzEXnslcrIgh40443824 = 84005473;    int NpWBihhnzEXnslcrIgh59546636 = -381563161;    int NpWBihhnzEXnslcrIgh78065777 = -280133231;    int NpWBihhnzEXnslcrIgh18299593 = -764497457;    int NpWBihhnzEXnslcrIgh24599511 = -794346498;    int NpWBihhnzEXnslcrIgh86139243 = 35233970;    int NpWBihhnzEXnslcrIgh56631112 = -282189310;    int NpWBihhnzEXnslcrIgh50234340 = -607835149;    int NpWBihhnzEXnslcrIgh86354106 = -665183323;    int NpWBihhnzEXnslcrIgh80393713 = -585856199;    int NpWBihhnzEXnslcrIgh54176973 = -257757280;    int NpWBihhnzEXnslcrIgh81394753 = -782025444;     NpWBihhnzEXnslcrIgh74475690 = NpWBihhnzEXnslcrIgh96338320;     NpWBihhnzEXnslcrIgh96338320 = NpWBihhnzEXnslcrIgh74096458;     NpWBihhnzEXnslcrIgh74096458 = NpWBihhnzEXnslcrIgh42626664;     NpWBihhnzEXnslcrIgh42626664 = NpWBihhnzEXnslcrIgh46718070;     NpWBihhnzEXnslcrIgh46718070 = NpWBihhnzEXnslcrIgh27061580;     NpWBihhnzEXnslcrIgh27061580 = NpWBihhnzEXnslcrIgh59985941;     NpWBihhnzEXnslcrIgh59985941 = NpWBihhnzEXnslcrIgh96231169;     NpWBihhnzEXnslcrIgh96231169 = NpWBihhnzEXnslcrIgh59540412;     NpWBihhnzEXnslcrIgh59540412 = NpWBihhnzEXnslcrIgh71736623;     NpWBihhnzEXnslcrIgh71736623 = NpWBihhnzEXnslcrIgh4925010;     NpWBihhnzEXnslcrIgh4925010 = NpWBihhnzEXnslcrIgh9727186;     NpWBihhnzEXnslcrIgh9727186 = NpWBihhnzEXnslcrIgh50509271;     NpWBihhnzEXnslcrIgh50509271 = NpWBihhnzEXnslcrIgh40313053;     NpWBihhnzEXnslcrIgh40313053 = NpWBihhnzEXnslcrIgh11001048;     NpWBihhnzEXnslcrIgh11001048 = NpWBihhnzEXnslcrIgh40356464;     NpWBihhnzEXnslcrIgh40356464 = NpWBihhnzEXnslcrIgh305133;     NpWBihhnzEXnslcrIgh305133 = NpWBihhnzEXnslcrIgh60213925;     NpWBihhnzEXnslcrIgh60213925 = NpWBihhnzEXnslcrIgh89823985;     NpWBihhnzEXnslcrIgh89823985 = NpWBihhnzEXnslcrIgh22729931;     NpWBihhnzEXnslcrIgh22729931 = NpWBihhnzEXnslcrIgh38414189;     NpWBihhnzEXnslcrIgh38414189 = NpWBihhnzEXnslcrIgh76717932;     NpWBihhnzEXnslcrIgh76717932 = NpWBihhnzEXnslcrIgh83210433;     NpWBihhnzEXnslcrIgh83210433 = NpWBihhnzEXnslcrIgh30066586;     NpWBihhnzEXnslcrIgh30066586 = NpWBihhnzEXnslcrIgh95234284;     NpWBihhnzEXnslcrIgh95234284 = NpWBihhnzEXnslcrIgh8145796;     NpWBihhnzEXnslcrIgh8145796 = NpWBihhnzEXnslcrIgh78637927;     NpWBihhnzEXnslcrIgh78637927 = NpWBihhnzEXnslcrIgh73650978;     NpWBihhnzEXnslcrIgh73650978 = NpWBihhnzEXnslcrIgh63671299;     NpWBihhnzEXnslcrIgh63671299 = NpWBihhnzEXnslcrIgh7906017;     NpWBihhnzEXnslcrIgh7906017 = NpWBihhnzEXnslcrIgh91248779;     NpWBihhnzEXnslcrIgh91248779 = NpWBihhnzEXnslcrIgh64623896;     NpWBihhnzEXnslcrIgh64623896 = NpWBihhnzEXnslcrIgh4646774;     NpWBihhnzEXnslcrIgh4646774 = NpWBihhnzEXnslcrIgh63000696;     NpWBihhnzEXnslcrIgh63000696 = NpWBihhnzEXnslcrIgh57304393;     NpWBihhnzEXnslcrIgh57304393 = NpWBihhnzEXnslcrIgh91193664;     NpWBihhnzEXnslcrIgh91193664 = NpWBihhnzEXnslcrIgh62329465;     NpWBihhnzEXnslcrIgh62329465 = NpWBihhnzEXnslcrIgh71991890;     NpWBihhnzEXnslcrIgh71991890 = NpWBihhnzEXnslcrIgh24711518;     NpWBihhnzEXnslcrIgh24711518 = NpWBihhnzEXnslcrIgh5054765;     NpWBihhnzEXnslcrIgh5054765 = NpWBihhnzEXnslcrIgh36569303;     NpWBihhnzEXnslcrIgh36569303 = NpWBihhnzEXnslcrIgh18913977;     NpWBihhnzEXnslcrIgh18913977 = NpWBihhnzEXnslcrIgh32028109;     NpWBihhnzEXnslcrIgh32028109 = NpWBihhnzEXnslcrIgh34664817;     NpWBihhnzEXnslcrIgh34664817 = NpWBihhnzEXnslcrIgh21695867;     NpWBihhnzEXnslcrIgh21695867 = NpWBihhnzEXnslcrIgh24896281;     NpWBihhnzEXnslcrIgh24896281 = NpWBihhnzEXnslcrIgh88261754;     NpWBihhnzEXnslcrIgh88261754 = NpWBihhnzEXnslcrIgh15569317;     NpWBihhnzEXnslcrIgh15569317 = NpWBihhnzEXnslcrIgh78770526;     NpWBihhnzEXnslcrIgh78770526 = NpWBihhnzEXnslcrIgh28446841;     NpWBihhnzEXnslcrIgh28446841 = NpWBihhnzEXnslcrIgh996905;     NpWBihhnzEXnslcrIgh996905 = NpWBihhnzEXnslcrIgh91988468;     NpWBihhnzEXnslcrIgh91988468 = NpWBihhnzEXnslcrIgh77287522;     NpWBihhnzEXnslcrIgh77287522 = NpWBihhnzEXnslcrIgh25081627;     NpWBihhnzEXnslcrIgh25081627 = NpWBihhnzEXnslcrIgh22556873;     NpWBihhnzEXnslcrIgh22556873 = NpWBihhnzEXnslcrIgh97757757;     NpWBihhnzEXnslcrIgh97757757 = NpWBihhnzEXnslcrIgh13127887;     NpWBihhnzEXnslcrIgh13127887 = NpWBihhnzEXnslcrIgh44029872;     NpWBihhnzEXnslcrIgh44029872 = NpWBihhnzEXnslcrIgh47392380;     NpWBihhnzEXnslcrIgh47392380 = NpWBihhnzEXnslcrIgh38572275;     NpWBihhnzEXnslcrIgh38572275 = NpWBihhnzEXnslcrIgh48423652;     NpWBihhnzEXnslcrIgh48423652 = NpWBihhnzEXnslcrIgh86334962;     NpWBihhnzEXnslcrIgh86334962 = NpWBihhnzEXnslcrIgh32559870;     NpWBihhnzEXnslcrIgh32559870 = NpWBihhnzEXnslcrIgh51634396;     NpWBihhnzEXnslcrIgh51634396 = NpWBihhnzEXnslcrIgh80487843;     NpWBihhnzEXnslcrIgh80487843 = NpWBihhnzEXnslcrIgh40301114;     NpWBihhnzEXnslcrIgh40301114 = NpWBihhnzEXnslcrIgh5080412;     NpWBihhnzEXnslcrIgh5080412 = NpWBihhnzEXnslcrIgh87508575;     NpWBihhnzEXnslcrIgh87508575 = NpWBihhnzEXnslcrIgh83008659;     NpWBihhnzEXnslcrIgh83008659 = NpWBihhnzEXnslcrIgh19807384;     NpWBihhnzEXnslcrIgh19807384 = NpWBihhnzEXnslcrIgh78026998;     NpWBihhnzEXnslcrIgh78026998 = NpWBihhnzEXnslcrIgh28313242;     NpWBihhnzEXnslcrIgh28313242 = NpWBihhnzEXnslcrIgh35502407;     NpWBihhnzEXnslcrIgh35502407 = NpWBihhnzEXnslcrIgh84769221;     NpWBihhnzEXnslcrIgh84769221 = NpWBihhnzEXnslcrIgh86160628;     NpWBihhnzEXnslcrIgh86160628 = NpWBihhnzEXnslcrIgh19500213;     NpWBihhnzEXnslcrIgh19500213 = NpWBihhnzEXnslcrIgh44689823;     NpWBihhnzEXnslcrIgh44689823 = NpWBihhnzEXnslcrIgh48545617;     NpWBihhnzEXnslcrIgh48545617 = NpWBihhnzEXnslcrIgh8370719;     NpWBihhnzEXnslcrIgh8370719 = NpWBihhnzEXnslcrIgh70338003;     NpWBihhnzEXnslcrIgh70338003 = NpWBihhnzEXnslcrIgh19884041;     NpWBihhnzEXnslcrIgh19884041 = NpWBihhnzEXnslcrIgh63068611;     NpWBihhnzEXnslcrIgh63068611 = NpWBihhnzEXnslcrIgh94880452;     NpWBihhnzEXnslcrIgh94880452 = NpWBihhnzEXnslcrIgh35224459;     NpWBihhnzEXnslcrIgh35224459 = NpWBihhnzEXnslcrIgh6909112;     NpWBihhnzEXnslcrIgh6909112 = NpWBihhnzEXnslcrIgh99260310;     NpWBihhnzEXnslcrIgh99260310 = NpWBihhnzEXnslcrIgh87336373;     NpWBihhnzEXnslcrIgh87336373 = NpWBihhnzEXnslcrIgh79565146;     NpWBihhnzEXnslcrIgh79565146 = NpWBihhnzEXnslcrIgh40443824;     NpWBihhnzEXnslcrIgh40443824 = NpWBihhnzEXnslcrIgh59546636;     NpWBihhnzEXnslcrIgh59546636 = NpWBihhnzEXnslcrIgh78065777;     NpWBihhnzEXnslcrIgh78065777 = NpWBihhnzEXnslcrIgh18299593;     NpWBihhnzEXnslcrIgh18299593 = NpWBihhnzEXnslcrIgh24599511;     NpWBihhnzEXnslcrIgh24599511 = NpWBihhnzEXnslcrIgh86139243;     NpWBihhnzEXnslcrIgh86139243 = NpWBihhnzEXnslcrIgh56631112;     NpWBihhnzEXnslcrIgh56631112 = NpWBihhnzEXnslcrIgh50234340;     NpWBihhnzEXnslcrIgh50234340 = NpWBihhnzEXnslcrIgh86354106;     NpWBihhnzEXnslcrIgh86354106 = NpWBihhnzEXnslcrIgh80393713;     NpWBihhnzEXnslcrIgh80393713 = NpWBihhnzEXnslcrIgh54176973;     NpWBihhnzEXnslcrIgh54176973 = NpWBihhnzEXnslcrIgh81394753;     NpWBihhnzEXnslcrIgh81394753 = NpWBihhnzEXnslcrIgh74475690;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void sbIkxqiIPSGcPxIIJWw67299609() {     int JwernsJUaCpLURezNvP29130088 = -119553028;    int JwernsJUaCpLURezNvP43335940 = -471279842;    int JwernsJUaCpLURezNvP34829105 = 72782609;    int JwernsJUaCpLURezNvP14061605 = -357507841;    int JwernsJUaCpLURezNvP21169741 = -117816971;    int JwernsJUaCpLURezNvP41235977 = -329630545;    int JwernsJUaCpLURezNvP81086645 = -680545992;    int JwernsJUaCpLURezNvP25406273 = -482866917;    int JwernsJUaCpLURezNvP47314823 = -618722383;    int JwernsJUaCpLURezNvP54368608 = -145178015;    int JwernsJUaCpLURezNvP83536304 = 58390702;    int JwernsJUaCpLURezNvP72491898 = -476019116;    int JwernsJUaCpLURezNvP14326586 = -411289618;    int JwernsJUaCpLURezNvP33279484 = -864505441;    int JwernsJUaCpLURezNvP41225121 = -701551059;    int JwernsJUaCpLURezNvP30124000 = -791254113;    int JwernsJUaCpLURezNvP136896 = -467600211;    int JwernsJUaCpLURezNvP27810512 = 7125061;    int JwernsJUaCpLURezNvP91044586 = -793833417;    int JwernsJUaCpLURezNvP40364487 = -451863279;    int JwernsJUaCpLURezNvP72588577 = -985471009;    int JwernsJUaCpLURezNvP27970522 = -885776195;    int JwernsJUaCpLURezNvP19680265 = 30968846;    int JwernsJUaCpLURezNvP31494955 = -440958554;    int JwernsJUaCpLURezNvP90986900 = -913755783;    int JwernsJUaCpLURezNvP49386742 = -346707319;    int JwernsJUaCpLURezNvP80627852 = -413993231;    int JwernsJUaCpLURezNvP26899979 = -465057060;    int JwernsJUaCpLURezNvP3568977 = 29274326;    int JwernsJUaCpLURezNvP2341426 = -895568806;    int JwernsJUaCpLURezNvP42954308 = -84265356;    int JwernsJUaCpLURezNvP95615506 = -704239317;    int JwernsJUaCpLURezNvP72302650 = -518462539;    int JwernsJUaCpLURezNvP57656588 = -383385190;    int JwernsJUaCpLURezNvP91808550 = -662119777;    int JwernsJUaCpLURezNvP78520206 = 62443878;    int JwernsJUaCpLURezNvP37033953 = -514839118;    int JwernsJUaCpLURezNvP84969129 = -478838618;    int JwernsJUaCpLURezNvP75481167 = -449097829;    int JwernsJUaCpLURezNvP29041159 = -281828666;    int JwernsJUaCpLURezNvP92528704 = -642033428;    int JwernsJUaCpLURezNvP55588635 = -564533296;    int JwernsJUaCpLURezNvP23028292 = -393419691;    int JwernsJUaCpLURezNvP43659216 = -62420862;    int JwernsJUaCpLURezNvP81679930 = 38748120;    int JwernsJUaCpLURezNvP80229882 = -920471038;    int JwernsJUaCpLURezNvP4735467 = -118012553;    int JwernsJUaCpLURezNvP38996625 = -454655896;    int JwernsJUaCpLURezNvP21113293 = -157769087;    int JwernsJUaCpLURezNvP73288504 = -455982516;    int JwernsJUaCpLURezNvP76110444 = -10637376;    int JwernsJUaCpLURezNvP81370618 = -535860342;    int JwernsJUaCpLURezNvP9015526 = -347562744;    int JwernsJUaCpLURezNvP82497384 = -93442646;    int JwernsJUaCpLURezNvP94711031 = 16821465;    int JwernsJUaCpLURezNvP1159567 = -233776833;    int JwernsJUaCpLURezNvP23655675 = -402248688;    int JwernsJUaCpLURezNvP3334151 = -486258838;    int JwernsJUaCpLURezNvP23074705 = -443752059;    int JwernsJUaCpLURezNvP71782998 = -771109653;    int JwernsJUaCpLURezNvP60608125 = -915637314;    int JwernsJUaCpLURezNvP54186666 = -115488933;    int JwernsJUaCpLURezNvP21837297 = -412141243;    int JwernsJUaCpLURezNvP44973398 = -723153578;    int JwernsJUaCpLURezNvP11414301 = 39087340;    int JwernsJUaCpLURezNvP87920798 = -237369982;    int JwernsJUaCpLURezNvP189249 = -957556578;    int JwernsJUaCpLURezNvP56669997 = 72095572;    int JwernsJUaCpLURezNvP41470934 = -102385665;    int JwernsJUaCpLURezNvP62704915 = -663994937;    int JwernsJUaCpLURezNvP93090046 = -176414996;    int JwernsJUaCpLURezNvP15167767 = -988761594;    int JwernsJUaCpLURezNvP52329345 = -543777110;    int JwernsJUaCpLURezNvP62003427 = -412004752;    int JwernsJUaCpLURezNvP47835783 = -809829852;    int JwernsJUaCpLURezNvP16999943 = -320937714;    int JwernsJUaCpLURezNvP4942230 = -392356504;    int JwernsJUaCpLURezNvP76021049 = -906610293;    int JwernsJUaCpLURezNvP49815024 = -379706674;    int JwernsJUaCpLURezNvP10757018 = -993284746;    int JwernsJUaCpLURezNvP44651276 = -128694766;    int JwernsJUaCpLURezNvP41631227 = -959337335;    int JwernsJUaCpLURezNvP5786686 = -207287974;    int JwernsJUaCpLURezNvP30280473 = -514743159;    int JwernsJUaCpLURezNvP26230981 = -784931431;    int JwernsJUaCpLURezNvP61583689 = -548405015;    int JwernsJUaCpLURezNvP86599980 = -256676573;    int JwernsJUaCpLURezNvP89805266 = -325019893;    int JwernsJUaCpLURezNvP62945557 = -300206655;    int JwernsJUaCpLURezNvP90648984 = -328342945;    int JwernsJUaCpLURezNvP54864531 = -535307434;    int JwernsJUaCpLURezNvP33699803 = 71419719;    int JwernsJUaCpLURezNvP61894424 = 64913440;    int JwernsJUaCpLURezNvP3698169 = -677988177;    int JwernsJUaCpLURezNvP68433034 = -366191352;    int JwernsJUaCpLURezNvP38342038 = -426544495;    int JwernsJUaCpLURezNvP33751338 = -52392053;    int JwernsJUaCpLURezNvP78054894 = -670266114;    int JwernsJUaCpLURezNvP32244916 = -1508202;    int JwernsJUaCpLURezNvP93759132 = -119553028;     JwernsJUaCpLURezNvP29130088 = JwernsJUaCpLURezNvP43335940;     JwernsJUaCpLURezNvP43335940 = JwernsJUaCpLURezNvP34829105;     JwernsJUaCpLURezNvP34829105 = JwernsJUaCpLURezNvP14061605;     JwernsJUaCpLURezNvP14061605 = JwernsJUaCpLURezNvP21169741;     JwernsJUaCpLURezNvP21169741 = JwernsJUaCpLURezNvP41235977;     JwernsJUaCpLURezNvP41235977 = JwernsJUaCpLURezNvP81086645;     JwernsJUaCpLURezNvP81086645 = JwernsJUaCpLURezNvP25406273;     JwernsJUaCpLURezNvP25406273 = JwernsJUaCpLURezNvP47314823;     JwernsJUaCpLURezNvP47314823 = JwernsJUaCpLURezNvP54368608;     JwernsJUaCpLURezNvP54368608 = JwernsJUaCpLURezNvP83536304;     JwernsJUaCpLURezNvP83536304 = JwernsJUaCpLURezNvP72491898;     JwernsJUaCpLURezNvP72491898 = JwernsJUaCpLURezNvP14326586;     JwernsJUaCpLURezNvP14326586 = JwernsJUaCpLURezNvP33279484;     JwernsJUaCpLURezNvP33279484 = JwernsJUaCpLURezNvP41225121;     JwernsJUaCpLURezNvP41225121 = JwernsJUaCpLURezNvP30124000;     JwernsJUaCpLURezNvP30124000 = JwernsJUaCpLURezNvP136896;     JwernsJUaCpLURezNvP136896 = JwernsJUaCpLURezNvP27810512;     JwernsJUaCpLURezNvP27810512 = JwernsJUaCpLURezNvP91044586;     JwernsJUaCpLURezNvP91044586 = JwernsJUaCpLURezNvP40364487;     JwernsJUaCpLURezNvP40364487 = JwernsJUaCpLURezNvP72588577;     JwernsJUaCpLURezNvP72588577 = JwernsJUaCpLURezNvP27970522;     JwernsJUaCpLURezNvP27970522 = JwernsJUaCpLURezNvP19680265;     JwernsJUaCpLURezNvP19680265 = JwernsJUaCpLURezNvP31494955;     JwernsJUaCpLURezNvP31494955 = JwernsJUaCpLURezNvP90986900;     JwernsJUaCpLURezNvP90986900 = JwernsJUaCpLURezNvP49386742;     JwernsJUaCpLURezNvP49386742 = JwernsJUaCpLURezNvP80627852;     JwernsJUaCpLURezNvP80627852 = JwernsJUaCpLURezNvP26899979;     JwernsJUaCpLURezNvP26899979 = JwernsJUaCpLURezNvP3568977;     JwernsJUaCpLURezNvP3568977 = JwernsJUaCpLURezNvP2341426;     JwernsJUaCpLURezNvP2341426 = JwernsJUaCpLURezNvP42954308;     JwernsJUaCpLURezNvP42954308 = JwernsJUaCpLURezNvP95615506;     JwernsJUaCpLURezNvP95615506 = JwernsJUaCpLURezNvP72302650;     JwernsJUaCpLURezNvP72302650 = JwernsJUaCpLURezNvP57656588;     JwernsJUaCpLURezNvP57656588 = JwernsJUaCpLURezNvP91808550;     JwernsJUaCpLURezNvP91808550 = JwernsJUaCpLURezNvP78520206;     JwernsJUaCpLURezNvP78520206 = JwernsJUaCpLURezNvP37033953;     JwernsJUaCpLURezNvP37033953 = JwernsJUaCpLURezNvP84969129;     JwernsJUaCpLURezNvP84969129 = JwernsJUaCpLURezNvP75481167;     JwernsJUaCpLURezNvP75481167 = JwernsJUaCpLURezNvP29041159;     JwernsJUaCpLURezNvP29041159 = JwernsJUaCpLURezNvP92528704;     JwernsJUaCpLURezNvP92528704 = JwernsJUaCpLURezNvP55588635;     JwernsJUaCpLURezNvP55588635 = JwernsJUaCpLURezNvP23028292;     JwernsJUaCpLURezNvP23028292 = JwernsJUaCpLURezNvP43659216;     JwernsJUaCpLURezNvP43659216 = JwernsJUaCpLURezNvP81679930;     JwernsJUaCpLURezNvP81679930 = JwernsJUaCpLURezNvP80229882;     JwernsJUaCpLURezNvP80229882 = JwernsJUaCpLURezNvP4735467;     JwernsJUaCpLURezNvP4735467 = JwernsJUaCpLURezNvP38996625;     JwernsJUaCpLURezNvP38996625 = JwernsJUaCpLURezNvP21113293;     JwernsJUaCpLURezNvP21113293 = JwernsJUaCpLURezNvP73288504;     JwernsJUaCpLURezNvP73288504 = JwernsJUaCpLURezNvP76110444;     JwernsJUaCpLURezNvP76110444 = JwernsJUaCpLURezNvP81370618;     JwernsJUaCpLURezNvP81370618 = JwernsJUaCpLURezNvP9015526;     JwernsJUaCpLURezNvP9015526 = JwernsJUaCpLURezNvP82497384;     JwernsJUaCpLURezNvP82497384 = JwernsJUaCpLURezNvP94711031;     JwernsJUaCpLURezNvP94711031 = JwernsJUaCpLURezNvP1159567;     JwernsJUaCpLURezNvP1159567 = JwernsJUaCpLURezNvP23655675;     JwernsJUaCpLURezNvP23655675 = JwernsJUaCpLURezNvP3334151;     JwernsJUaCpLURezNvP3334151 = JwernsJUaCpLURezNvP23074705;     JwernsJUaCpLURezNvP23074705 = JwernsJUaCpLURezNvP71782998;     JwernsJUaCpLURezNvP71782998 = JwernsJUaCpLURezNvP60608125;     JwernsJUaCpLURezNvP60608125 = JwernsJUaCpLURezNvP54186666;     JwernsJUaCpLURezNvP54186666 = JwernsJUaCpLURezNvP21837297;     JwernsJUaCpLURezNvP21837297 = JwernsJUaCpLURezNvP44973398;     JwernsJUaCpLURezNvP44973398 = JwernsJUaCpLURezNvP11414301;     JwernsJUaCpLURezNvP11414301 = JwernsJUaCpLURezNvP87920798;     JwernsJUaCpLURezNvP87920798 = JwernsJUaCpLURezNvP189249;     JwernsJUaCpLURezNvP189249 = JwernsJUaCpLURezNvP56669997;     JwernsJUaCpLURezNvP56669997 = JwernsJUaCpLURezNvP41470934;     JwernsJUaCpLURezNvP41470934 = JwernsJUaCpLURezNvP62704915;     JwernsJUaCpLURezNvP62704915 = JwernsJUaCpLURezNvP93090046;     JwernsJUaCpLURezNvP93090046 = JwernsJUaCpLURezNvP15167767;     JwernsJUaCpLURezNvP15167767 = JwernsJUaCpLURezNvP52329345;     JwernsJUaCpLURezNvP52329345 = JwernsJUaCpLURezNvP62003427;     JwernsJUaCpLURezNvP62003427 = JwernsJUaCpLURezNvP47835783;     JwernsJUaCpLURezNvP47835783 = JwernsJUaCpLURezNvP16999943;     JwernsJUaCpLURezNvP16999943 = JwernsJUaCpLURezNvP4942230;     JwernsJUaCpLURezNvP4942230 = JwernsJUaCpLURezNvP76021049;     JwernsJUaCpLURezNvP76021049 = JwernsJUaCpLURezNvP49815024;     JwernsJUaCpLURezNvP49815024 = JwernsJUaCpLURezNvP10757018;     JwernsJUaCpLURezNvP10757018 = JwernsJUaCpLURezNvP44651276;     JwernsJUaCpLURezNvP44651276 = JwernsJUaCpLURezNvP41631227;     JwernsJUaCpLURezNvP41631227 = JwernsJUaCpLURezNvP5786686;     JwernsJUaCpLURezNvP5786686 = JwernsJUaCpLURezNvP30280473;     JwernsJUaCpLURezNvP30280473 = JwernsJUaCpLURezNvP26230981;     JwernsJUaCpLURezNvP26230981 = JwernsJUaCpLURezNvP61583689;     JwernsJUaCpLURezNvP61583689 = JwernsJUaCpLURezNvP86599980;     JwernsJUaCpLURezNvP86599980 = JwernsJUaCpLURezNvP89805266;     JwernsJUaCpLURezNvP89805266 = JwernsJUaCpLURezNvP62945557;     JwernsJUaCpLURezNvP62945557 = JwernsJUaCpLURezNvP90648984;     JwernsJUaCpLURezNvP90648984 = JwernsJUaCpLURezNvP54864531;     JwernsJUaCpLURezNvP54864531 = JwernsJUaCpLURezNvP33699803;     JwernsJUaCpLURezNvP33699803 = JwernsJUaCpLURezNvP61894424;     JwernsJUaCpLURezNvP61894424 = JwernsJUaCpLURezNvP3698169;     JwernsJUaCpLURezNvP3698169 = JwernsJUaCpLURezNvP68433034;     JwernsJUaCpLURezNvP68433034 = JwernsJUaCpLURezNvP38342038;     JwernsJUaCpLURezNvP38342038 = JwernsJUaCpLURezNvP33751338;     JwernsJUaCpLURezNvP33751338 = JwernsJUaCpLURezNvP78054894;     JwernsJUaCpLURezNvP78054894 = JwernsJUaCpLURezNvP32244916;     JwernsJUaCpLURezNvP32244916 = JwernsJUaCpLURezNvP93759132;     JwernsJUaCpLURezNvP93759132 = JwernsJUaCpLURezNvP29130088;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void OegTzKYctQdrsTKcoEx73628156() {     int CCkdthwZIvGltzLyvKG83784485 = -557080611;    int CCkdthwZIvGltzLyvKG90333559 = 49155344;    int CCkdthwZIvGltzLyvKG95561751 = -312602005;    int CCkdthwZIvGltzLyvKG85496546 = -363610253;    int CCkdthwZIvGltzLyvKG95621411 = -890252210;    int CCkdthwZIvGltzLyvKG55410374 = -458781381;    int CCkdthwZIvGltzLyvKG2187349 = -982438665;    int CCkdthwZIvGltzLyvKG54581377 = -983435150;    int CCkdthwZIvGltzLyvKG35089234 = -665575754;    int CCkdthwZIvGltzLyvKG37000594 = -423979285;    int CCkdthwZIvGltzLyvKG62147599 = -566965870;    int CCkdthwZIvGltzLyvKG35256612 = -662443205;    int CCkdthwZIvGltzLyvKG78143900 = -214829922;    int CCkdthwZIvGltzLyvKG26245915 = -476609019;    int CCkdthwZIvGltzLyvKG71449194 = -608672690;    int CCkdthwZIvGltzLyvKG19891535 = -421413678;    int CCkdthwZIvGltzLyvKG99968659 = -941200040;    int CCkdthwZIvGltzLyvKG95407098 = -56439406;    int CCkdthwZIvGltzLyvKG92265187 = 20355035;    int CCkdthwZIvGltzLyvKG57999042 = -797229425;    int CCkdthwZIvGltzLyvKG6762965 = -453554160;    int CCkdthwZIvGltzLyvKG79223110 = 47779697;    int CCkdthwZIvGltzLyvKG56150097 = -555774575;    int CCkdthwZIvGltzLyvKG32923324 = -139999370;    int CCkdthwZIvGltzLyvKG86739516 = -186669235;    int CCkdthwZIvGltzLyvKG90627689 = -350416104;    int CCkdthwZIvGltzLyvKG82617776 = -968837510;    int CCkdthwZIvGltzLyvKG80148978 = -473108920;    int CCkdthwZIvGltzLyvKG43466654 = -350970550;    int CCkdthwZIvGltzLyvKG96776834 = -86326774;    int CCkdthwZIvGltzLyvKG94659836 = -633137882;    int CCkdthwZIvGltzLyvKG26607117 = -15735845;    int CCkdthwZIvGltzLyvKG39958527 = 25019847;    int CCkdthwZIvGltzLyvKG52312481 = -63506000;    int CCkdthwZIvGltzLyvKG26312707 = -879983037;    int CCkdthwZIvGltzLyvKG65846748 = -185551718;    int CCkdthwZIvGltzLyvKG11738441 = -365265739;    int CCkdthwZIvGltzLyvKG97946367 = -352767639;    int CCkdthwZIvGltzLyvKG26250816 = -831046431;    int CCkdthwZIvGltzLyvKG53027554 = 59862735;    int CCkdthwZIvGltzLyvKG48488105 = -754583586;    int CCkdthwZIvGltzLyvKG92263293 = -72065382;    int CCkdthwZIvGltzLyvKG14028475 = -233925009;    int CCkdthwZIvGltzLyvKG52653616 = -636100527;    int CCkdthwZIvGltzLyvKG41663994 = -93769478;    int CCkdthwZIvGltzLyvKG35563484 = -989260653;    int CCkdthwZIvGltzLyvKG21209178 = -145069937;    int CCkdthwZIvGltzLyvKG62423934 = -432308268;    int CCkdthwZIvGltzLyvKG63456060 = -57499276;    int CCkdthwZIvGltzLyvKG18130167 = -696001810;    int CCkdthwZIvGltzLyvKG51223984 = -767852878;    int CCkdthwZIvGltzLyvKG70752768 = 49073675;    int CCkdthwZIvGltzLyvKG40743529 = -87478201;    int CCkdthwZIvGltzLyvKG39913142 = 10670869;    int CCkdthwZIvGltzLyvKG66865191 = -379087216;    int CCkdthwZIvGltzLyvKG4561375 = -504860309;    int CCkdthwZIvGltzLyvKG34183463 = -395070081;    int CCkdthwZIvGltzLyvKG62638428 = -72602635;    int CCkdthwZIvGltzLyvKG98757030 = -76941018;    int CCkdthwZIvGltzLyvKG4993722 = -439836107;    int CCkdthwZIvGltzLyvKG72792598 = -489943872;    int CCkdthwZIvGltzLyvKG22038370 = -409329745;    int CCkdthwZIvGltzLyvKG11114724 = -532464600;    int CCkdthwZIvGltzLyvKG38312399 = -479248980;    int CCkdthwZIvGltzLyvKG42340757 = -790841404;    int CCkdthwZIvGltzLyvKG35540483 = -451230026;    int CCkdthwZIvGltzLyvKG95298085 = -587463052;    int CCkdthwZIvGltzLyvKG25831420 = -51323923;    int CCkdthwZIvGltzLyvKG99933207 = -596625983;    int CCkdthwZIvGltzLyvKG5602447 = -323120972;    int CCkdthwZIvGltzLyvKG8153095 = 43852061;    int CCkdthwZIvGltzLyvKG2022292 = -488432401;    int CCkdthwZIvGltzLyvKG69156283 = -225392976;    int CCkdthwZIvGltzLyvKG39237633 = 60492300;    int CCkdthwZIvGltzLyvKG9510938 = 57354160;    int CCkdthwZIvGltzLyvKG14499672 = -281488778;    int CCkdthwZIvGltzLyvKG65194635 = -718295294;    int CCkdthwZIvGltzLyvKG3496482 = -919674049;    int CCkdthwZIvGltzLyvKG91259329 = 53770107;    int CCkdthwZIvGltzLyvKG51176032 = -197408583;    int CCkdthwZIvGltzLyvKG69418511 = -105346167;    int CCkdthwZIvGltzLyvKG20193842 = -436529242;    int CCkdthwZIvGltzLyvKG16692919 = -315609645;    int CCkdthwZIvGltzLyvKG25336488 = -654968740;    int CCkdthwZIvGltzLyvKG45552850 = -318473897;    int CCkdthwZIvGltzLyvKG23907069 = -582211558;    int CCkdthwZIvGltzLyvKG85863588 = -928257644;    int CCkdthwZIvGltzLyvKG45386 = -985651023;    int CCkdthwZIvGltzLyvKG85447290 = -684418784;    int CCkdthwZIvGltzLyvKG21751332 = -275122728;    int CCkdthwZIvGltzLyvKG31663286 = -790481638;    int CCkdthwZIvGltzLyvKG49100013 = -192663104;    int CCkdthwZIvGltzLyvKG99189337 = -175826621;    int CCkdthwZIvGltzLyvKG21257094 = -291210324;    int CCkdthwZIvGltzLyvKG80234955 = -450193394;    int CCkdthwZIvGltzLyvKG26449735 = -245253841;    int CCkdthwZIvGltzLyvKG81148570 = -539600782;    int CCkdthwZIvGltzLyvKG75716076 = -754676029;    int CCkdthwZIvGltzLyvKG10312859 = -845259124;    int CCkdthwZIvGltzLyvKG6123512 = -557080611;     CCkdthwZIvGltzLyvKG83784485 = CCkdthwZIvGltzLyvKG90333559;     CCkdthwZIvGltzLyvKG90333559 = CCkdthwZIvGltzLyvKG95561751;     CCkdthwZIvGltzLyvKG95561751 = CCkdthwZIvGltzLyvKG85496546;     CCkdthwZIvGltzLyvKG85496546 = CCkdthwZIvGltzLyvKG95621411;     CCkdthwZIvGltzLyvKG95621411 = CCkdthwZIvGltzLyvKG55410374;     CCkdthwZIvGltzLyvKG55410374 = CCkdthwZIvGltzLyvKG2187349;     CCkdthwZIvGltzLyvKG2187349 = CCkdthwZIvGltzLyvKG54581377;     CCkdthwZIvGltzLyvKG54581377 = CCkdthwZIvGltzLyvKG35089234;     CCkdthwZIvGltzLyvKG35089234 = CCkdthwZIvGltzLyvKG37000594;     CCkdthwZIvGltzLyvKG37000594 = CCkdthwZIvGltzLyvKG62147599;     CCkdthwZIvGltzLyvKG62147599 = CCkdthwZIvGltzLyvKG35256612;     CCkdthwZIvGltzLyvKG35256612 = CCkdthwZIvGltzLyvKG78143900;     CCkdthwZIvGltzLyvKG78143900 = CCkdthwZIvGltzLyvKG26245915;     CCkdthwZIvGltzLyvKG26245915 = CCkdthwZIvGltzLyvKG71449194;     CCkdthwZIvGltzLyvKG71449194 = CCkdthwZIvGltzLyvKG19891535;     CCkdthwZIvGltzLyvKG19891535 = CCkdthwZIvGltzLyvKG99968659;     CCkdthwZIvGltzLyvKG99968659 = CCkdthwZIvGltzLyvKG95407098;     CCkdthwZIvGltzLyvKG95407098 = CCkdthwZIvGltzLyvKG92265187;     CCkdthwZIvGltzLyvKG92265187 = CCkdthwZIvGltzLyvKG57999042;     CCkdthwZIvGltzLyvKG57999042 = CCkdthwZIvGltzLyvKG6762965;     CCkdthwZIvGltzLyvKG6762965 = CCkdthwZIvGltzLyvKG79223110;     CCkdthwZIvGltzLyvKG79223110 = CCkdthwZIvGltzLyvKG56150097;     CCkdthwZIvGltzLyvKG56150097 = CCkdthwZIvGltzLyvKG32923324;     CCkdthwZIvGltzLyvKG32923324 = CCkdthwZIvGltzLyvKG86739516;     CCkdthwZIvGltzLyvKG86739516 = CCkdthwZIvGltzLyvKG90627689;     CCkdthwZIvGltzLyvKG90627689 = CCkdthwZIvGltzLyvKG82617776;     CCkdthwZIvGltzLyvKG82617776 = CCkdthwZIvGltzLyvKG80148978;     CCkdthwZIvGltzLyvKG80148978 = CCkdthwZIvGltzLyvKG43466654;     CCkdthwZIvGltzLyvKG43466654 = CCkdthwZIvGltzLyvKG96776834;     CCkdthwZIvGltzLyvKG96776834 = CCkdthwZIvGltzLyvKG94659836;     CCkdthwZIvGltzLyvKG94659836 = CCkdthwZIvGltzLyvKG26607117;     CCkdthwZIvGltzLyvKG26607117 = CCkdthwZIvGltzLyvKG39958527;     CCkdthwZIvGltzLyvKG39958527 = CCkdthwZIvGltzLyvKG52312481;     CCkdthwZIvGltzLyvKG52312481 = CCkdthwZIvGltzLyvKG26312707;     CCkdthwZIvGltzLyvKG26312707 = CCkdthwZIvGltzLyvKG65846748;     CCkdthwZIvGltzLyvKG65846748 = CCkdthwZIvGltzLyvKG11738441;     CCkdthwZIvGltzLyvKG11738441 = CCkdthwZIvGltzLyvKG97946367;     CCkdthwZIvGltzLyvKG97946367 = CCkdthwZIvGltzLyvKG26250816;     CCkdthwZIvGltzLyvKG26250816 = CCkdthwZIvGltzLyvKG53027554;     CCkdthwZIvGltzLyvKG53027554 = CCkdthwZIvGltzLyvKG48488105;     CCkdthwZIvGltzLyvKG48488105 = CCkdthwZIvGltzLyvKG92263293;     CCkdthwZIvGltzLyvKG92263293 = CCkdthwZIvGltzLyvKG14028475;     CCkdthwZIvGltzLyvKG14028475 = CCkdthwZIvGltzLyvKG52653616;     CCkdthwZIvGltzLyvKG52653616 = CCkdthwZIvGltzLyvKG41663994;     CCkdthwZIvGltzLyvKG41663994 = CCkdthwZIvGltzLyvKG35563484;     CCkdthwZIvGltzLyvKG35563484 = CCkdthwZIvGltzLyvKG21209178;     CCkdthwZIvGltzLyvKG21209178 = CCkdthwZIvGltzLyvKG62423934;     CCkdthwZIvGltzLyvKG62423934 = CCkdthwZIvGltzLyvKG63456060;     CCkdthwZIvGltzLyvKG63456060 = CCkdthwZIvGltzLyvKG18130167;     CCkdthwZIvGltzLyvKG18130167 = CCkdthwZIvGltzLyvKG51223984;     CCkdthwZIvGltzLyvKG51223984 = CCkdthwZIvGltzLyvKG70752768;     CCkdthwZIvGltzLyvKG70752768 = CCkdthwZIvGltzLyvKG40743529;     CCkdthwZIvGltzLyvKG40743529 = CCkdthwZIvGltzLyvKG39913142;     CCkdthwZIvGltzLyvKG39913142 = CCkdthwZIvGltzLyvKG66865191;     CCkdthwZIvGltzLyvKG66865191 = CCkdthwZIvGltzLyvKG4561375;     CCkdthwZIvGltzLyvKG4561375 = CCkdthwZIvGltzLyvKG34183463;     CCkdthwZIvGltzLyvKG34183463 = CCkdthwZIvGltzLyvKG62638428;     CCkdthwZIvGltzLyvKG62638428 = CCkdthwZIvGltzLyvKG98757030;     CCkdthwZIvGltzLyvKG98757030 = CCkdthwZIvGltzLyvKG4993722;     CCkdthwZIvGltzLyvKG4993722 = CCkdthwZIvGltzLyvKG72792598;     CCkdthwZIvGltzLyvKG72792598 = CCkdthwZIvGltzLyvKG22038370;     CCkdthwZIvGltzLyvKG22038370 = CCkdthwZIvGltzLyvKG11114724;     CCkdthwZIvGltzLyvKG11114724 = CCkdthwZIvGltzLyvKG38312399;     CCkdthwZIvGltzLyvKG38312399 = CCkdthwZIvGltzLyvKG42340757;     CCkdthwZIvGltzLyvKG42340757 = CCkdthwZIvGltzLyvKG35540483;     CCkdthwZIvGltzLyvKG35540483 = CCkdthwZIvGltzLyvKG95298085;     CCkdthwZIvGltzLyvKG95298085 = CCkdthwZIvGltzLyvKG25831420;     CCkdthwZIvGltzLyvKG25831420 = CCkdthwZIvGltzLyvKG99933207;     CCkdthwZIvGltzLyvKG99933207 = CCkdthwZIvGltzLyvKG5602447;     CCkdthwZIvGltzLyvKG5602447 = CCkdthwZIvGltzLyvKG8153095;     CCkdthwZIvGltzLyvKG8153095 = CCkdthwZIvGltzLyvKG2022292;     CCkdthwZIvGltzLyvKG2022292 = CCkdthwZIvGltzLyvKG69156283;     CCkdthwZIvGltzLyvKG69156283 = CCkdthwZIvGltzLyvKG39237633;     CCkdthwZIvGltzLyvKG39237633 = CCkdthwZIvGltzLyvKG9510938;     CCkdthwZIvGltzLyvKG9510938 = CCkdthwZIvGltzLyvKG14499672;     CCkdthwZIvGltzLyvKG14499672 = CCkdthwZIvGltzLyvKG65194635;     CCkdthwZIvGltzLyvKG65194635 = CCkdthwZIvGltzLyvKG3496482;     CCkdthwZIvGltzLyvKG3496482 = CCkdthwZIvGltzLyvKG91259329;     CCkdthwZIvGltzLyvKG91259329 = CCkdthwZIvGltzLyvKG51176032;     CCkdthwZIvGltzLyvKG51176032 = CCkdthwZIvGltzLyvKG69418511;     CCkdthwZIvGltzLyvKG69418511 = CCkdthwZIvGltzLyvKG20193842;     CCkdthwZIvGltzLyvKG20193842 = CCkdthwZIvGltzLyvKG16692919;     CCkdthwZIvGltzLyvKG16692919 = CCkdthwZIvGltzLyvKG25336488;     CCkdthwZIvGltzLyvKG25336488 = CCkdthwZIvGltzLyvKG45552850;     CCkdthwZIvGltzLyvKG45552850 = CCkdthwZIvGltzLyvKG23907069;     CCkdthwZIvGltzLyvKG23907069 = CCkdthwZIvGltzLyvKG85863588;     CCkdthwZIvGltzLyvKG85863588 = CCkdthwZIvGltzLyvKG45386;     CCkdthwZIvGltzLyvKG45386 = CCkdthwZIvGltzLyvKG85447290;     CCkdthwZIvGltzLyvKG85447290 = CCkdthwZIvGltzLyvKG21751332;     CCkdthwZIvGltzLyvKG21751332 = CCkdthwZIvGltzLyvKG31663286;     CCkdthwZIvGltzLyvKG31663286 = CCkdthwZIvGltzLyvKG49100013;     CCkdthwZIvGltzLyvKG49100013 = CCkdthwZIvGltzLyvKG99189337;     CCkdthwZIvGltzLyvKG99189337 = CCkdthwZIvGltzLyvKG21257094;     CCkdthwZIvGltzLyvKG21257094 = CCkdthwZIvGltzLyvKG80234955;     CCkdthwZIvGltzLyvKG80234955 = CCkdthwZIvGltzLyvKG26449735;     CCkdthwZIvGltzLyvKG26449735 = CCkdthwZIvGltzLyvKG81148570;     CCkdthwZIvGltzLyvKG81148570 = CCkdthwZIvGltzLyvKG75716076;     CCkdthwZIvGltzLyvKG75716076 = CCkdthwZIvGltzLyvKG10312859;     CCkdthwZIvGltzLyvKG10312859 = CCkdthwZIvGltzLyvKG6123512;     CCkdthwZIvGltzLyvKG6123512 = CCkdthwZIvGltzLyvKG83784485;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void iaoBWyjZLEPXwQzhHvK79956703() {     int BLdBtFEkKXhfdMpxBXL38438883 = -994608195;    int BLdBtFEkKXhfdMpxBXL37331179 = -530409470;    int BLdBtFEkKXhfdMpxBXL56294398 = -697986618;    int BLdBtFEkKXhfdMpxBXL56931488 = -369712664;    int BLdBtFEkKXhfdMpxBXL70073082 = -562687450;    int BLdBtFEkKXhfdMpxBXL69584771 = -587932217;    int BLdBtFEkKXhfdMpxBXL23288053 = -184331337;    int BLdBtFEkKXhfdMpxBXL83756480 = -384003382;    int BLdBtFEkKXhfdMpxBXL22863644 = -712429125;    int BLdBtFEkKXhfdMpxBXL19632579 = -702780554;    int BLdBtFEkKXhfdMpxBXL40758894 = -92322442;    int BLdBtFEkKXhfdMpxBXL98021325 = -848867294;    int BLdBtFEkKXhfdMpxBXL41961216 = -18370226;    int BLdBtFEkKXhfdMpxBXL19212345 = -88712598;    int BLdBtFEkKXhfdMpxBXL1673268 = -515794322;    int BLdBtFEkKXhfdMpxBXL9659071 = -51573242;    int BLdBtFEkKXhfdMpxBXL99800422 = -314799868;    int BLdBtFEkKXhfdMpxBXL63003686 = -120003873;    int BLdBtFEkKXhfdMpxBXL93485787 = -265456513;    int BLdBtFEkKXhfdMpxBXL75633597 = -42595571;    int BLdBtFEkKXhfdMpxBXL40937353 = 78362689;    int BLdBtFEkKXhfdMpxBXL30475700 = -118664411;    int BLdBtFEkKXhfdMpxBXL92619928 = -42517996;    int BLdBtFEkKXhfdMpxBXL34351693 = -939040187;    int BLdBtFEkKXhfdMpxBXL82492132 = -559582687;    int BLdBtFEkKXhfdMpxBXL31868637 = -354124888;    int BLdBtFEkKXhfdMpxBXL84607700 = -423681788;    int BLdBtFEkKXhfdMpxBXL33397979 = -481160781;    int BLdBtFEkKXhfdMpxBXL83364330 = -731215425;    int BLdBtFEkKXhfdMpxBXL91212243 = -377084743;    int BLdBtFEkKXhfdMpxBXL46365365 = -82010408;    int BLdBtFEkKXhfdMpxBXL57598727 = -427232373;    int BLdBtFEkKXhfdMpxBXL7614404 = -531497768;    int BLdBtFEkKXhfdMpxBXL46968374 = -843626809;    int BLdBtFEkKXhfdMpxBXL60816863 = 2153704;    int BLdBtFEkKXhfdMpxBXL53173290 = -433547315;    int BLdBtFEkKXhfdMpxBXL86442928 = -215692359;    int BLdBtFEkKXhfdMpxBXL10923607 = -226696660;    int BLdBtFEkKXhfdMpxBXL77020464 = -112995032;    int BLdBtFEkKXhfdMpxBXL77013949 = -698445865;    int BLdBtFEkKXhfdMpxBXL4447506 = -867133744;    int BLdBtFEkKXhfdMpxBXL28937952 = -679597469;    int BLdBtFEkKXhfdMpxBXL5028658 = -74430327;    int BLdBtFEkKXhfdMpxBXL61648015 = -109780193;    int BLdBtFEkKXhfdMpxBXL1648058 = -226287075;    int BLdBtFEkKXhfdMpxBXL90897085 = 41949733;    int BLdBtFEkKXhfdMpxBXL37682890 = -172127321;    int BLdBtFEkKXhfdMpxBXL85851243 = -409960640;    int BLdBtFEkKXhfdMpxBXL5798827 = 42770535;    int BLdBtFEkKXhfdMpxBXL62971829 = -936021104;    int BLdBtFEkKXhfdMpxBXL26337524 = -425068380;    int BLdBtFEkKXhfdMpxBXL60134918 = -465992308;    int BLdBtFEkKXhfdMpxBXL72471531 = -927393658;    int BLdBtFEkKXhfdMpxBXL97328898 = -985215615;    int BLdBtFEkKXhfdMpxBXL39019351 = -774995897;    int BLdBtFEkKXhfdMpxBXL7963184 = -775943785;    int BLdBtFEkKXhfdMpxBXL44711250 = -387891474;    int BLdBtFEkKXhfdMpxBXL21942706 = -758946432;    int BLdBtFEkKXhfdMpxBXL74439355 = -810129977;    int BLdBtFEkKXhfdMpxBXL38204445 = -108562562;    int BLdBtFEkKXhfdMpxBXL84977071 = -64250429;    int BLdBtFEkKXhfdMpxBXL89890073 = -703170557;    int BLdBtFEkKXhfdMpxBXL392150 = -652787958;    int BLdBtFEkKXhfdMpxBXL31651401 = -235344383;    int BLdBtFEkKXhfdMpxBXL73267213 = -520770147;    int BLdBtFEkKXhfdMpxBXL83160167 = -665090070;    int BLdBtFEkKXhfdMpxBXL90406921 = -217369527;    int BLdBtFEkKXhfdMpxBXL94992841 = -174743418;    int BLdBtFEkKXhfdMpxBXL58395481 = 9133698;    int BLdBtFEkKXhfdMpxBXL48499978 = 17752993;    int BLdBtFEkKXhfdMpxBXL23216143 = -835880883;    int BLdBtFEkKXhfdMpxBXL88876816 = 11896791;    int BLdBtFEkKXhfdMpxBXL85983221 = 92991158;    int BLdBtFEkKXhfdMpxBXL16471839 = -567010649;    int BLdBtFEkKXhfdMpxBXL71186092 = -175461828;    int BLdBtFEkKXhfdMpxBXL11999402 = -242039842;    int BLdBtFEkKXhfdMpxBXL25447042 = 55765916;    int BLdBtFEkKXhfdMpxBXL30971914 = -932737804;    int BLdBtFEkKXhfdMpxBXL32703635 = -612753112;    int BLdBtFEkKXhfdMpxBXL91595046 = -501532420;    int BLdBtFEkKXhfdMpxBXL94185746 = -81997568;    int BLdBtFEkKXhfdMpxBXL98756456 = 86278852;    int BLdBtFEkKXhfdMpxBXL27599153 = -423931317;    int BLdBtFEkKXhfdMpxBXL20392502 = -795194321;    int BLdBtFEkKXhfdMpxBXL64874720 = -952016363;    int BLdBtFEkKXhfdMpxBXL86230447 = -616018100;    int BLdBtFEkKXhfdMpxBXL85127195 = -499838715;    int BLdBtFEkKXhfdMpxBXL10285505 = -546282153;    int BLdBtFEkKXhfdMpxBXL7949023 = 31369088;    int BLdBtFEkKXhfdMpxBXL52853680 = -221902512;    int BLdBtFEkKXhfdMpxBXL8462040 = 54344158;    int BLdBtFEkKXhfdMpxBXL64500223 = -456745928;    int BLdBtFEkKXhfdMpxBXL36484251 = -416566683;    int BLdBtFEkKXhfdMpxBXL38816020 = 95567529;    int BLdBtFEkKXhfdMpxBXL92036877 = -534195436;    int BLdBtFEkKXhfdMpxBXL14557432 = -63963188;    int BLdBtFEkKXhfdMpxBXL28545802 = 73190488;    int BLdBtFEkKXhfdMpxBXL73377257 = -839085945;    int BLdBtFEkKXhfdMpxBXL88380801 = -589010046;    int BLdBtFEkKXhfdMpxBXL18487891 = -994608195;     BLdBtFEkKXhfdMpxBXL38438883 = BLdBtFEkKXhfdMpxBXL37331179;     BLdBtFEkKXhfdMpxBXL37331179 = BLdBtFEkKXhfdMpxBXL56294398;     BLdBtFEkKXhfdMpxBXL56294398 = BLdBtFEkKXhfdMpxBXL56931488;     BLdBtFEkKXhfdMpxBXL56931488 = BLdBtFEkKXhfdMpxBXL70073082;     BLdBtFEkKXhfdMpxBXL70073082 = BLdBtFEkKXhfdMpxBXL69584771;     BLdBtFEkKXhfdMpxBXL69584771 = BLdBtFEkKXhfdMpxBXL23288053;     BLdBtFEkKXhfdMpxBXL23288053 = BLdBtFEkKXhfdMpxBXL83756480;     BLdBtFEkKXhfdMpxBXL83756480 = BLdBtFEkKXhfdMpxBXL22863644;     BLdBtFEkKXhfdMpxBXL22863644 = BLdBtFEkKXhfdMpxBXL19632579;     BLdBtFEkKXhfdMpxBXL19632579 = BLdBtFEkKXhfdMpxBXL40758894;     BLdBtFEkKXhfdMpxBXL40758894 = BLdBtFEkKXhfdMpxBXL98021325;     BLdBtFEkKXhfdMpxBXL98021325 = BLdBtFEkKXhfdMpxBXL41961216;     BLdBtFEkKXhfdMpxBXL41961216 = BLdBtFEkKXhfdMpxBXL19212345;     BLdBtFEkKXhfdMpxBXL19212345 = BLdBtFEkKXhfdMpxBXL1673268;     BLdBtFEkKXhfdMpxBXL1673268 = BLdBtFEkKXhfdMpxBXL9659071;     BLdBtFEkKXhfdMpxBXL9659071 = BLdBtFEkKXhfdMpxBXL99800422;     BLdBtFEkKXhfdMpxBXL99800422 = BLdBtFEkKXhfdMpxBXL63003686;     BLdBtFEkKXhfdMpxBXL63003686 = BLdBtFEkKXhfdMpxBXL93485787;     BLdBtFEkKXhfdMpxBXL93485787 = BLdBtFEkKXhfdMpxBXL75633597;     BLdBtFEkKXhfdMpxBXL75633597 = BLdBtFEkKXhfdMpxBXL40937353;     BLdBtFEkKXhfdMpxBXL40937353 = BLdBtFEkKXhfdMpxBXL30475700;     BLdBtFEkKXhfdMpxBXL30475700 = BLdBtFEkKXhfdMpxBXL92619928;     BLdBtFEkKXhfdMpxBXL92619928 = BLdBtFEkKXhfdMpxBXL34351693;     BLdBtFEkKXhfdMpxBXL34351693 = BLdBtFEkKXhfdMpxBXL82492132;     BLdBtFEkKXhfdMpxBXL82492132 = BLdBtFEkKXhfdMpxBXL31868637;     BLdBtFEkKXhfdMpxBXL31868637 = BLdBtFEkKXhfdMpxBXL84607700;     BLdBtFEkKXhfdMpxBXL84607700 = BLdBtFEkKXhfdMpxBXL33397979;     BLdBtFEkKXhfdMpxBXL33397979 = BLdBtFEkKXhfdMpxBXL83364330;     BLdBtFEkKXhfdMpxBXL83364330 = BLdBtFEkKXhfdMpxBXL91212243;     BLdBtFEkKXhfdMpxBXL91212243 = BLdBtFEkKXhfdMpxBXL46365365;     BLdBtFEkKXhfdMpxBXL46365365 = BLdBtFEkKXhfdMpxBXL57598727;     BLdBtFEkKXhfdMpxBXL57598727 = BLdBtFEkKXhfdMpxBXL7614404;     BLdBtFEkKXhfdMpxBXL7614404 = BLdBtFEkKXhfdMpxBXL46968374;     BLdBtFEkKXhfdMpxBXL46968374 = BLdBtFEkKXhfdMpxBXL60816863;     BLdBtFEkKXhfdMpxBXL60816863 = BLdBtFEkKXhfdMpxBXL53173290;     BLdBtFEkKXhfdMpxBXL53173290 = BLdBtFEkKXhfdMpxBXL86442928;     BLdBtFEkKXhfdMpxBXL86442928 = BLdBtFEkKXhfdMpxBXL10923607;     BLdBtFEkKXhfdMpxBXL10923607 = BLdBtFEkKXhfdMpxBXL77020464;     BLdBtFEkKXhfdMpxBXL77020464 = BLdBtFEkKXhfdMpxBXL77013949;     BLdBtFEkKXhfdMpxBXL77013949 = BLdBtFEkKXhfdMpxBXL4447506;     BLdBtFEkKXhfdMpxBXL4447506 = BLdBtFEkKXhfdMpxBXL28937952;     BLdBtFEkKXhfdMpxBXL28937952 = BLdBtFEkKXhfdMpxBXL5028658;     BLdBtFEkKXhfdMpxBXL5028658 = BLdBtFEkKXhfdMpxBXL61648015;     BLdBtFEkKXhfdMpxBXL61648015 = BLdBtFEkKXhfdMpxBXL1648058;     BLdBtFEkKXhfdMpxBXL1648058 = BLdBtFEkKXhfdMpxBXL90897085;     BLdBtFEkKXhfdMpxBXL90897085 = BLdBtFEkKXhfdMpxBXL37682890;     BLdBtFEkKXhfdMpxBXL37682890 = BLdBtFEkKXhfdMpxBXL85851243;     BLdBtFEkKXhfdMpxBXL85851243 = BLdBtFEkKXhfdMpxBXL5798827;     BLdBtFEkKXhfdMpxBXL5798827 = BLdBtFEkKXhfdMpxBXL62971829;     BLdBtFEkKXhfdMpxBXL62971829 = BLdBtFEkKXhfdMpxBXL26337524;     BLdBtFEkKXhfdMpxBXL26337524 = BLdBtFEkKXhfdMpxBXL60134918;     BLdBtFEkKXhfdMpxBXL60134918 = BLdBtFEkKXhfdMpxBXL72471531;     BLdBtFEkKXhfdMpxBXL72471531 = BLdBtFEkKXhfdMpxBXL97328898;     BLdBtFEkKXhfdMpxBXL97328898 = BLdBtFEkKXhfdMpxBXL39019351;     BLdBtFEkKXhfdMpxBXL39019351 = BLdBtFEkKXhfdMpxBXL7963184;     BLdBtFEkKXhfdMpxBXL7963184 = BLdBtFEkKXhfdMpxBXL44711250;     BLdBtFEkKXhfdMpxBXL44711250 = BLdBtFEkKXhfdMpxBXL21942706;     BLdBtFEkKXhfdMpxBXL21942706 = BLdBtFEkKXhfdMpxBXL74439355;     BLdBtFEkKXhfdMpxBXL74439355 = BLdBtFEkKXhfdMpxBXL38204445;     BLdBtFEkKXhfdMpxBXL38204445 = BLdBtFEkKXhfdMpxBXL84977071;     BLdBtFEkKXhfdMpxBXL84977071 = BLdBtFEkKXhfdMpxBXL89890073;     BLdBtFEkKXhfdMpxBXL89890073 = BLdBtFEkKXhfdMpxBXL392150;     BLdBtFEkKXhfdMpxBXL392150 = BLdBtFEkKXhfdMpxBXL31651401;     BLdBtFEkKXhfdMpxBXL31651401 = BLdBtFEkKXhfdMpxBXL73267213;     BLdBtFEkKXhfdMpxBXL73267213 = BLdBtFEkKXhfdMpxBXL83160167;     BLdBtFEkKXhfdMpxBXL83160167 = BLdBtFEkKXhfdMpxBXL90406921;     BLdBtFEkKXhfdMpxBXL90406921 = BLdBtFEkKXhfdMpxBXL94992841;     BLdBtFEkKXhfdMpxBXL94992841 = BLdBtFEkKXhfdMpxBXL58395481;     BLdBtFEkKXhfdMpxBXL58395481 = BLdBtFEkKXhfdMpxBXL48499978;     BLdBtFEkKXhfdMpxBXL48499978 = BLdBtFEkKXhfdMpxBXL23216143;     BLdBtFEkKXhfdMpxBXL23216143 = BLdBtFEkKXhfdMpxBXL88876816;     BLdBtFEkKXhfdMpxBXL88876816 = BLdBtFEkKXhfdMpxBXL85983221;     BLdBtFEkKXhfdMpxBXL85983221 = BLdBtFEkKXhfdMpxBXL16471839;     BLdBtFEkKXhfdMpxBXL16471839 = BLdBtFEkKXhfdMpxBXL71186092;     BLdBtFEkKXhfdMpxBXL71186092 = BLdBtFEkKXhfdMpxBXL11999402;     BLdBtFEkKXhfdMpxBXL11999402 = BLdBtFEkKXhfdMpxBXL25447042;     BLdBtFEkKXhfdMpxBXL25447042 = BLdBtFEkKXhfdMpxBXL30971914;     BLdBtFEkKXhfdMpxBXL30971914 = BLdBtFEkKXhfdMpxBXL32703635;     BLdBtFEkKXhfdMpxBXL32703635 = BLdBtFEkKXhfdMpxBXL91595046;     BLdBtFEkKXhfdMpxBXL91595046 = BLdBtFEkKXhfdMpxBXL94185746;     BLdBtFEkKXhfdMpxBXL94185746 = BLdBtFEkKXhfdMpxBXL98756456;     BLdBtFEkKXhfdMpxBXL98756456 = BLdBtFEkKXhfdMpxBXL27599153;     BLdBtFEkKXhfdMpxBXL27599153 = BLdBtFEkKXhfdMpxBXL20392502;     BLdBtFEkKXhfdMpxBXL20392502 = BLdBtFEkKXhfdMpxBXL64874720;     BLdBtFEkKXhfdMpxBXL64874720 = BLdBtFEkKXhfdMpxBXL86230447;     BLdBtFEkKXhfdMpxBXL86230447 = BLdBtFEkKXhfdMpxBXL85127195;     BLdBtFEkKXhfdMpxBXL85127195 = BLdBtFEkKXhfdMpxBXL10285505;     BLdBtFEkKXhfdMpxBXL10285505 = BLdBtFEkKXhfdMpxBXL7949023;     BLdBtFEkKXhfdMpxBXL7949023 = BLdBtFEkKXhfdMpxBXL52853680;     BLdBtFEkKXhfdMpxBXL52853680 = BLdBtFEkKXhfdMpxBXL8462040;     BLdBtFEkKXhfdMpxBXL8462040 = BLdBtFEkKXhfdMpxBXL64500223;     BLdBtFEkKXhfdMpxBXL64500223 = BLdBtFEkKXhfdMpxBXL36484251;     BLdBtFEkKXhfdMpxBXL36484251 = BLdBtFEkKXhfdMpxBXL38816020;     BLdBtFEkKXhfdMpxBXL38816020 = BLdBtFEkKXhfdMpxBXL92036877;     BLdBtFEkKXhfdMpxBXL92036877 = BLdBtFEkKXhfdMpxBXL14557432;     BLdBtFEkKXhfdMpxBXL14557432 = BLdBtFEkKXhfdMpxBXL28545802;     BLdBtFEkKXhfdMpxBXL28545802 = BLdBtFEkKXhfdMpxBXL73377257;     BLdBtFEkKXhfdMpxBXL73377257 = BLdBtFEkKXhfdMpxBXL88380801;     BLdBtFEkKXhfdMpxBXL88380801 = BLdBtFEkKXhfdMpxBXL18487891;     BLdBtFEkKXhfdMpxBXL18487891 = BLdBtFEkKXhfdMpxBXL38438883;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void LJQPNIUzFkKQFfREQkH86285250() {     int PYumvrtfwFhCJdkKdfF93093280 = -332135779;    int PYumvrtfwFhCJdkKdfF84328798 = -9974284;    int PYumvrtfwFhCJdkKdfF17027044 = 16628769;    int PYumvrtfwFhCJdkKdfF28366429 = -375815075;    int PYumvrtfwFhCJdkKdfF44524752 = -235122689;    int PYumvrtfwFhCJdkKdfF83759168 = -717083053;    int PYumvrtfwFhCJdkKdfF44388756 = -486224010;    int PYumvrtfwFhCJdkKdfF12931584 = -884571615;    int PYumvrtfwFhCJdkKdfF10638055 = -759282495;    int PYumvrtfwFhCJdkKdfF2264565 = -981581824;    int PYumvrtfwFhCJdkKdfF19370190 = -717679015;    int PYumvrtfwFhCJdkKdfF60786038 = 64708617;    int PYumvrtfwFhCJdkKdfF5778531 = -921910531;    int PYumvrtfwFhCJdkKdfF12178776 = -800816176;    int PYumvrtfwFhCJdkKdfF31897341 = -422915953;    int PYumvrtfwFhCJdkKdfF99426606 = -781732806;    int PYumvrtfwFhCJdkKdfF99632186 = -788399696;    int PYumvrtfwFhCJdkKdfF30600273 = -183568341;    int PYumvrtfwFhCJdkKdfF94706388 = -551268061;    int PYumvrtfwFhCJdkKdfF93268153 = -387961718;    int PYumvrtfwFhCJdkKdfF75111740 = -489720462;    int PYumvrtfwFhCJdkKdfF81728288 = -285108519;    int PYumvrtfwFhCJdkKdfF29089760 = -629261418;    int PYumvrtfwFhCJdkKdfF35780061 = -638081003;    int PYumvrtfwFhCJdkKdfF78244748 = -932496139;    int PYumvrtfwFhCJdkKdfF73109584 = -357833673;    int PYumvrtfwFhCJdkKdfF86597624 = -978526067;    int PYumvrtfwFhCJdkKdfF86646979 = -489212641;    int PYumvrtfwFhCJdkKdfF23262008 = -11460301;    int PYumvrtfwFhCJdkKdfF85647652 = -667842711;    int PYumvrtfwFhCJdkKdfF98070894 = -630882933;    int PYumvrtfwFhCJdkKdfF88590337 = -838728901;    int PYumvrtfwFhCJdkKdfF75270280 = 11984618;    int PYumvrtfwFhCJdkKdfF41624267 = -523747619;    int PYumvrtfwFhCJdkKdfF95321020 = -215709556;    int PYumvrtfwFhCJdkKdfF40499832 = -681542912;    int PYumvrtfwFhCJdkKdfF61147416 = -66118980;    int PYumvrtfwFhCJdkKdfF23900846 = -100625681;    int PYumvrtfwFhCJdkKdfF27790114 = -494943634;    int PYumvrtfwFhCJdkKdfF1000344 = -356754464;    int PYumvrtfwFhCJdkKdfF60406907 = -979683902;    int PYumvrtfwFhCJdkKdfF65612610 = -187129556;    int PYumvrtfwFhCJdkKdfF96028840 = 85064355;    int PYumvrtfwFhCJdkKdfF70642414 = -683459859;    int PYumvrtfwFhCJdkKdfF61632121 = -358804673;    int PYumvrtfwFhCJdkKdfF46230688 = -26839882;    int PYumvrtfwFhCJdkKdfF54156602 = -199184704;    int PYumvrtfwFhCJdkKdfF9278553 = -387613013;    int PYumvrtfwFhCJdkKdfF48141593 = -956959653;    int PYumvrtfwFhCJdkKdfF7813492 = -76040399;    int PYumvrtfwFhCJdkKdfF1451064 = -82283882;    int PYumvrtfwFhCJdkKdfF49517068 = -981058291;    int PYumvrtfwFhCJdkKdfF4199535 = -667309116;    int PYumvrtfwFhCJdkKdfF54744656 = -881102100;    int PYumvrtfwFhCJdkKdfF11173511 = -70904579;    int PYumvrtfwFhCJdkKdfF11364992 = 52972739;    int PYumvrtfwFhCJdkKdfF55239038 = -380712867;    int PYumvrtfwFhCJdkKdfF81246983 = -345290229;    int PYumvrtfwFhCJdkKdfF50121681 = -443318936;    int PYumvrtfwFhCJdkKdfF71415168 = -877289017;    int PYumvrtfwFhCJdkKdfF97161544 = -738556986;    int PYumvrtfwFhCJdkKdfF57741777 = -997011369;    int PYumvrtfwFhCJdkKdfF89669576 = -773111315;    int PYumvrtfwFhCJdkKdfF24990402 = 8560215;    int PYumvrtfwFhCJdkKdfF4193671 = -250698891;    int PYumvrtfwFhCJdkKdfF30779852 = -878950114;    int PYumvrtfwFhCJdkKdfF85515758 = -947276002;    int PYumvrtfwFhCJdkKdfF64154264 = -298162913;    int PYumvrtfwFhCJdkKdfF16857756 = -485106620;    int PYumvrtfwFhCJdkKdfF91397508 = -741373042;    int PYumvrtfwFhCJdkKdfF38279190 = -615613827;    int PYumvrtfwFhCJdkKdfF75731340 = -587774016;    int PYumvrtfwFhCJdkKdfF2810160 = -688624707;    int PYumvrtfwFhCJdkKdfF93706045 = -94513597;    int PYumvrtfwFhCJdkKdfF32861247 = -408277816;    int PYumvrtfwFhCJdkKdfF9499131 = -202590907;    int PYumvrtfwFhCJdkKdfF85699447 = -270172874;    int PYumvrtfwFhCJdkKdfF58447346 = -945801559;    int PYumvrtfwFhCJdkKdfF74147940 = -179276330;    int PYumvrtfwFhCJdkKdfF32014061 = -805656257;    int PYumvrtfwFhCJdkKdfF18952983 = -58648969;    int PYumvrtfwFhCJdkKdfF77319072 = -490913055;    int PYumvrtfwFhCJdkKdfF38505386 = -532252989;    int PYumvrtfwFhCJdkKdfF15448517 = -935419902;    int PYumvrtfwFhCJdkKdfF84196589 = -485558830;    int PYumvrtfwFhCJdkKdfF48553826 = -649824643;    int PYumvrtfwFhCJdkKdfF84390802 = -71419786;    int PYumvrtfwFhCJdkKdfF20525624 = -106913282;    int PYumvrtfwFhCJdkKdfF30450756 = -352843041;    int PYumvrtfwFhCJdkKdfF83956028 = -168682295;    int PYumvrtfwFhCJdkKdfF85260794 = -200830045;    int PYumvrtfwFhCJdkKdfF79900433 = -720828751;    int PYumvrtfwFhCJdkKdfF73779165 = -657306745;    int PYumvrtfwFhCJdkKdfF56374945 = -617654618;    int PYumvrtfwFhCJdkKdfF3838800 = -618197478;    int PYumvrtfwFhCJdkKdfF2665130 = -982672534;    int PYumvrtfwFhCJdkKdfF75943033 = -414018241;    int PYumvrtfwFhCJdkKdfF71038438 = -923495860;    int PYumvrtfwFhCJdkKdfF66448744 = -332760968;    int PYumvrtfwFhCJdkKdfF30852269 = -332135779;     PYumvrtfwFhCJdkKdfF93093280 = PYumvrtfwFhCJdkKdfF84328798;     PYumvrtfwFhCJdkKdfF84328798 = PYumvrtfwFhCJdkKdfF17027044;     PYumvrtfwFhCJdkKdfF17027044 = PYumvrtfwFhCJdkKdfF28366429;     PYumvrtfwFhCJdkKdfF28366429 = PYumvrtfwFhCJdkKdfF44524752;     PYumvrtfwFhCJdkKdfF44524752 = PYumvrtfwFhCJdkKdfF83759168;     PYumvrtfwFhCJdkKdfF83759168 = PYumvrtfwFhCJdkKdfF44388756;     PYumvrtfwFhCJdkKdfF44388756 = PYumvrtfwFhCJdkKdfF12931584;     PYumvrtfwFhCJdkKdfF12931584 = PYumvrtfwFhCJdkKdfF10638055;     PYumvrtfwFhCJdkKdfF10638055 = PYumvrtfwFhCJdkKdfF2264565;     PYumvrtfwFhCJdkKdfF2264565 = PYumvrtfwFhCJdkKdfF19370190;     PYumvrtfwFhCJdkKdfF19370190 = PYumvrtfwFhCJdkKdfF60786038;     PYumvrtfwFhCJdkKdfF60786038 = PYumvrtfwFhCJdkKdfF5778531;     PYumvrtfwFhCJdkKdfF5778531 = PYumvrtfwFhCJdkKdfF12178776;     PYumvrtfwFhCJdkKdfF12178776 = PYumvrtfwFhCJdkKdfF31897341;     PYumvrtfwFhCJdkKdfF31897341 = PYumvrtfwFhCJdkKdfF99426606;     PYumvrtfwFhCJdkKdfF99426606 = PYumvrtfwFhCJdkKdfF99632186;     PYumvrtfwFhCJdkKdfF99632186 = PYumvrtfwFhCJdkKdfF30600273;     PYumvrtfwFhCJdkKdfF30600273 = PYumvrtfwFhCJdkKdfF94706388;     PYumvrtfwFhCJdkKdfF94706388 = PYumvrtfwFhCJdkKdfF93268153;     PYumvrtfwFhCJdkKdfF93268153 = PYumvrtfwFhCJdkKdfF75111740;     PYumvrtfwFhCJdkKdfF75111740 = PYumvrtfwFhCJdkKdfF81728288;     PYumvrtfwFhCJdkKdfF81728288 = PYumvrtfwFhCJdkKdfF29089760;     PYumvrtfwFhCJdkKdfF29089760 = PYumvrtfwFhCJdkKdfF35780061;     PYumvrtfwFhCJdkKdfF35780061 = PYumvrtfwFhCJdkKdfF78244748;     PYumvrtfwFhCJdkKdfF78244748 = PYumvrtfwFhCJdkKdfF73109584;     PYumvrtfwFhCJdkKdfF73109584 = PYumvrtfwFhCJdkKdfF86597624;     PYumvrtfwFhCJdkKdfF86597624 = PYumvrtfwFhCJdkKdfF86646979;     PYumvrtfwFhCJdkKdfF86646979 = PYumvrtfwFhCJdkKdfF23262008;     PYumvrtfwFhCJdkKdfF23262008 = PYumvrtfwFhCJdkKdfF85647652;     PYumvrtfwFhCJdkKdfF85647652 = PYumvrtfwFhCJdkKdfF98070894;     PYumvrtfwFhCJdkKdfF98070894 = PYumvrtfwFhCJdkKdfF88590337;     PYumvrtfwFhCJdkKdfF88590337 = PYumvrtfwFhCJdkKdfF75270280;     PYumvrtfwFhCJdkKdfF75270280 = PYumvrtfwFhCJdkKdfF41624267;     PYumvrtfwFhCJdkKdfF41624267 = PYumvrtfwFhCJdkKdfF95321020;     PYumvrtfwFhCJdkKdfF95321020 = PYumvrtfwFhCJdkKdfF40499832;     PYumvrtfwFhCJdkKdfF40499832 = PYumvrtfwFhCJdkKdfF61147416;     PYumvrtfwFhCJdkKdfF61147416 = PYumvrtfwFhCJdkKdfF23900846;     PYumvrtfwFhCJdkKdfF23900846 = PYumvrtfwFhCJdkKdfF27790114;     PYumvrtfwFhCJdkKdfF27790114 = PYumvrtfwFhCJdkKdfF1000344;     PYumvrtfwFhCJdkKdfF1000344 = PYumvrtfwFhCJdkKdfF60406907;     PYumvrtfwFhCJdkKdfF60406907 = PYumvrtfwFhCJdkKdfF65612610;     PYumvrtfwFhCJdkKdfF65612610 = PYumvrtfwFhCJdkKdfF96028840;     PYumvrtfwFhCJdkKdfF96028840 = PYumvrtfwFhCJdkKdfF70642414;     PYumvrtfwFhCJdkKdfF70642414 = PYumvrtfwFhCJdkKdfF61632121;     PYumvrtfwFhCJdkKdfF61632121 = PYumvrtfwFhCJdkKdfF46230688;     PYumvrtfwFhCJdkKdfF46230688 = PYumvrtfwFhCJdkKdfF54156602;     PYumvrtfwFhCJdkKdfF54156602 = PYumvrtfwFhCJdkKdfF9278553;     PYumvrtfwFhCJdkKdfF9278553 = PYumvrtfwFhCJdkKdfF48141593;     PYumvrtfwFhCJdkKdfF48141593 = PYumvrtfwFhCJdkKdfF7813492;     PYumvrtfwFhCJdkKdfF7813492 = PYumvrtfwFhCJdkKdfF1451064;     PYumvrtfwFhCJdkKdfF1451064 = PYumvrtfwFhCJdkKdfF49517068;     PYumvrtfwFhCJdkKdfF49517068 = PYumvrtfwFhCJdkKdfF4199535;     PYumvrtfwFhCJdkKdfF4199535 = PYumvrtfwFhCJdkKdfF54744656;     PYumvrtfwFhCJdkKdfF54744656 = PYumvrtfwFhCJdkKdfF11173511;     PYumvrtfwFhCJdkKdfF11173511 = PYumvrtfwFhCJdkKdfF11364992;     PYumvrtfwFhCJdkKdfF11364992 = PYumvrtfwFhCJdkKdfF55239038;     PYumvrtfwFhCJdkKdfF55239038 = PYumvrtfwFhCJdkKdfF81246983;     PYumvrtfwFhCJdkKdfF81246983 = PYumvrtfwFhCJdkKdfF50121681;     PYumvrtfwFhCJdkKdfF50121681 = PYumvrtfwFhCJdkKdfF71415168;     PYumvrtfwFhCJdkKdfF71415168 = PYumvrtfwFhCJdkKdfF97161544;     PYumvrtfwFhCJdkKdfF97161544 = PYumvrtfwFhCJdkKdfF57741777;     PYumvrtfwFhCJdkKdfF57741777 = PYumvrtfwFhCJdkKdfF89669576;     PYumvrtfwFhCJdkKdfF89669576 = PYumvrtfwFhCJdkKdfF24990402;     PYumvrtfwFhCJdkKdfF24990402 = PYumvrtfwFhCJdkKdfF4193671;     PYumvrtfwFhCJdkKdfF4193671 = PYumvrtfwFhCJdkKdfF30779852;     PYumvrtfwFhCJdkKdfF30779852 = PYumvrtfwFhCJdkKdfF85515758;     PYumvrtfwFhCJdkKdfF85515758 = PYumvrtfwFhCJdkKdfF64154264;     PYumvrtfwFhCJdkKdfF64154264 = PYumvrtfwFhCJdkKdfF16857756;     PYumvrtfwFhCJdkKdfF16857756 = PYumvrtfwFhCJdkKdfF91397508;     PYumvrtfwFhCJdkKdfF91397508 = PYumvrtfwFhCJdkKdfF38279190;     PYumvrtfwFhCJdkKdfF38279190 = PYumvrtfwFhCJdkKdfF75731340;     PYumvrtfwFhCJdkKdfF75731340 = PYumvrtfwFhCJdkKdfF2810160;     PYumvrtfwFhCJdkKdfF2810160 = PYumvrtfwFhCJdkKdfF93706045;     PYumvrtfwFhCJdkKdfF93706045 = PYumvrtfwFhCJdkKdfF32861247;     PYumvrtfwFhCJdkKdfF32861247 = PYumvrtfwFhCJdkKdfF9499131;     PYumvrtfwFhCJdkKdfF9499131 = PYumvrtfwFhCJdkKdfF85699447;     PYumvrtfwFhCJdkKdfF85699447 = PYumvrtfwFhCJdkKdfF58447346;     PYumvrtfwFhCJdkKdfF58447346 = PYumvrtfwFhCJdkKdfF74147940;     PYumvrtfwFhCJdkKdfF74147940 = PYumvrtfwFhCJdkKdfF32014061;     PYumvrtfwFhCJdkKdfF32014061 = PYumvrtfwFhCJdkKdfF18952983;     PYumvrtfwFhCJdkKdfF18952983 = PYumvrtfwFhCJdkKdfF77319072;     PYumvrtfwFhCJdkKdfF77319072 = PYumvrtfwFhCJdkKdfF38505386;     PYumvrtfwFhCJdkKdfF38505386 = PYumvrtfwFhCJdkKdfF15448517;     PYumvrtfwFhCJdkKdfF15448517 = PYumvrtfwFhCJdkKdfF84196589;     PYumvrtfwFhCJdkKdfF84196589 = PYumvrtfwFhCJdkKdfF48553826;     PYumvrtfwFhCJdkKdfF48553826 = PYumvrtfwFhCJdkKdfF84390802;     PYumvrtfwFhCJdkKdfF84390802 = PYumvrtfwFhCJdkKdfF20525624;     PYumvrtfwFhCJdkKdfF20525624 = PYumvrtfwFhCJdkKdfF30450756;     PYumvrtfwFhCJdkKdfF30450756 = PYumvrtfwFhCJdkKdfF83956028;     PYumvrtfwFhCJdkKdfF83956028 = PYumvrtfwFhCJdkKdfF85260794;     PYumvrtfwFhCJdkKdfF85260794 = PYumvrtfwFhCJdkKdfF79900433;     PYumvrtfwFhCJdkKdfF79900433 = PYumvrtfwFhCJdkKdfF73779165;     PYumvrtfwFhCJdkKdfF73779165 = PYumvrtfwFhCJdkKdfF56374945;     PYumvrtfwFhCJdkKdfF56374945 = PYumvrtfwFhCJdkKdfF3838800;     PYumvrtfwFhCJdkKdfF3838800 = PYumvrtfwFhCJdkKdfF2665130;     PYumvrtfwFhCJdkKdfF2665130 = PYumvrtfwFhCJdkKdfF75943033;     PYumvrtfwFhCJdkKdfF75943033 = PYumvrtfwFhCJdkKdfF71038438;     PYumvrtfwFhCJdkKdfF71038438 = PYumvrtfwFhCJdkKdfF66448744;     PYumvrtfwFhCJdkKdfF66448744 = PYumvrtfwFhCJdkKdfF30852269;     PYumvrtfwFhCJdkKdfF30852269 = PYumvrtfwFhCJdkKdfF93093280;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void tpIVnlRmeVhQNhWOlSD92613798() {     int EfscmJTPXvsinmSRSHR47747678 = -769663363;    int EfscmJTPXvsinmSRSHR31326418 = -589539098;    int EfscmJTPXvsinmSRSHR77759690 = -368755845;    int EfscmJTPXvsinmSRSHR99801370 = -381917486;    int EfscmJTPXvsinmSRSHR18976423 = 92442072;    int EfscmJTPXvsinmSRSHR97933565 = -846233889;    int EfscmJTPXvsinmSRSHR65489460 = -788116682;    int EfscmJTPXvsinmSRSHR42106687 = -285139848;    int EfscmJTPXvsinmSRSHR98412465 = -806135866;    int EfscmJTPXvsinmSRSHR84896549 = -160383093;    int EfscmJTPXvsinmSRSHR97981484 = -243035587;    int EfscmJTPXvsinmSRSHR23550752 = -121715472;    int EfscmJTPXvsinmSRSHR69595845 = -725450835;    int EfscmJTPXvsinmSRSHR5145207 = -412919754;    int EfscmJTPXvsinmSRSHR62121414 = -330037585;    int EfscmJTPXvsinmSRSHR89194142 = -411892370;    int EfscmJTPXvsinmSRSHR99463949 = -161999525;    int EfscmJTPXvsinmSRSHR98196859 = -247132808;    int EfscmJTPXvsinmSRSHR95926989 = -837079608;    int EfscmJTPXvsinmSRSHR10902709 = -733327864;    int EfscmJTPXvsinmSRSHR9286129 = 42196387;    int EfscmJTPXvsinmSRSHR32980877 = -451552627;    int EfscmJTPXvsinmSRSHR65559591 = -116004839;    int EfscmJTPXvsinmSRSHR37208430 = -337121819;    int EfscmJTPXvsinmSRSHR73997364 = -205409591;    int EfscmJTPXvsinmSRSHR14350532 = -361542458;    int EfscmJTPXvsinmSRSHR88587548 = -433370346;    int EfscmJTPXvsinmSRSHR39895979 = -497264502;    int EfscmJTPXvsinmSRSHR63159684 = -391705176;    int EfscmJTPXvsinmSRSHR80083061 = -958600679;    int EfscmJTPXvsinmSRSHR49776423 = -79755459;    int EfscmJTPXvsinmSRSHR19581948 = -150225430;    int EfscmJTPXvsinmSRSHR42926157 = -544532996;    int EfscmJTPXvsinmSRSHR36280159 = -203868428;    int EfscmJTPXvsinmSRSHR29825177 = -433572815;    int EfscmJTPXvsinmSRSHR27826375 = -929538508;    int EfscmJTPXvsinmSRSHR35851904 = 83454400;    int EfscmJTPXvsinmSRSHR36878085 = 25445299;    int EfscmJTPXvsinmSRSHR78559762 = -876892235;    int EfscmJTPXvsinmSRSHR24986739 = -15063063;    int EfscmJTPXvsinmSRSHR16366308 = 7765940;    int EfscmJTPXvsinmSRSHR2287269 = -794661642;    int EfscmJTPXvsinmSRSHR87029023 = -855440963;    int EfscmJTPXvsinmSRSHR79636813 = -157139524;    int EfscmJTPXvsinmSRSHR21616185 = -491322271;    int EfscmJTPXvsinmSRSHR1564290 = -95629497;    int EfscmJTPXvsinmSRSHR70630313 = -226242088;    int EfscmJTPXvsinmSRSHR32705862 = -365265385;    int EfscmJTPXvsinmSRSHR90484359 = -856689842;    int EfscmJTPXvsinmSRSHR52655154 = -316059693;    int EfscmJTPXvsinmSRSHR76564602 = -839499384;    int EfscmJTPXvsinmSRSHR38899217 = -396124274;    int EfscmJTPXvsinmSRSHR35927538 = -407224573;    int EfscmJTPXvsinmSRSHR12160414 = -776988584;    int EfscmJTPXvsinmSRSHR83327669 = -466813260;    int EfscmJTPXvsinmSRSHR14766801 = -218110737;    int EfscmJTPXvsinmSRSHR65766826 = -373534260;    int EfscmJTPXvsinmSRSHR40551261 = 68365974;    int EfscmJTPXvsinmSRSHR25804007 = -76507895;    int EfscmJTPXvsinmSRSHR4625892 = -546015471;    int EfscmJTPXvsinmSRSHR9346017 = -312863543;    int EfscmJTPXvsinmSRSHR25593481 = -190852181;    int EfscmJTPXvsinmSRSHR78947002 = -893434672;    int EfscmJTPXvsinmSRSHR18329404 = -847535187;    int EfscmJTPXvsinmSRSHR35120127 = 19372365;    int EfscmJTPXvsinmSRSHR78399536 = 7189842;    int EfscmJTPXvsinmSRSHR80624595 = -577182476;    int EfscmJTPXvsinmSRSHR33315686 = -421582407;    int EfscmJTPXvsinmSRSHR75320029 = -979346939;    int EfscmJTPXvsinmSRSHR34295040 = -400499077;    int EfscmJTPXvsinmSRSHR53342238 = -395346771;    int EfscmJTPXvsinmSRSHR62585865 = -87444824;    int EfscmJTPXvsinmSRSHR19637098 = -370240573;    int EfscmJTPXvsinmSRSHR70940251 = -722016546;    int EfscmJTPXvsinmSRSHR94536401 = -641093804;    int EfscmJTPXvsinmSRSHR6998861 = -163141971;    int EfscmJTPXvsinmSRSHR45951854 = -596111664;    int EfscmJTPXvsinmSRSHR85922778 = -958865315;    int EfscmJTPXvsinmSRSHR15592246 = -845799549;    int EfscmJTPXvsinmSRSHR72433075 = -9780095;    int EfscmJTPXvsinmSRSHR43720218 = -35300370;    int EfscmJTPXvsinmSRSHR55881687 = 31895038;    int EfscmJTPXvsinmSRSHR49411619 = -640574660;    int EfscmJTPXvsinmSRSHR10504531 = 24354516;    int EfscmJTPXvsinmSRSHR3518459 = -19101296;    int EfscmJTPXvsinmSRSHR10877206 = -683631186;    int EfscmJTPXvsinmSRSHR83654410 = -743000857;    int EfscmJTPXvsinmSRSHR30765743 = -767544412;    int EfscmJTPXvsinmSRSHR52952489 = -737055169;    int EfscmJTPXvsinmSRSHR15058377 = -115462079;    int EfscmJTPXvsinmSRSHR62059548 = -456004249;    int EfscmJTPXvsinmSRSHR95300643 = -984911575;    int EfscmJTPXvsinmSRSHR11074079 = -898046807;    int EfscmJTPXvsinmSRSHR73933870 = -230876765;    int EfscmJTPXvsinmSRSHR15640722 = -702199521;    int EfscmJTPXvsinmSRSHR90772826 = -801381880;    int EfscmJTPXvsinmSRSHR23340266 = -901226971;    int EfscmJTPXvsinmSRSHR68699620 = 92094224;    int EfscmJTPXvsinmSRSHR44516687 = -76511890;    int EfscmJTPXvsinmSRSHR43216648 = -769663363;     EfscmJTPXvsinmSRSHR47747678 = EfscmJTPXvsinmSRSHR31326418;     EfscmJTPXvsinmSRSHR31326418 = EfscmJTPXvsinmSRSHR77759690;     EfscmJTPXvsinmSRSHR77759690 = EfscmJTPXvsinmSRSHR99801370;     EfscmJTPXvsinmSRSHR99801370 = EfscmJTPXvsinmSRSHR18976423;     EfscmJTPXvsinmSRSHR18976423 = EfscmJTPXvsinmSRSHR97933565;     EfscmJTPXvsinmSRSHR97933565 = EfscmJTPXvsinmSRSHR65489460;     EfscmJTPXvsinmSRSHR65489460 = EfscmJTPXvsinmSRSHR42106687;     EfscmJTPXvsinmSRSHR42106687 = EfscmJTPXvsinmSRSHR98412465;     EfscmJTPXvsinmSRSHR98412465 = EfscmJTPXvsinmSRSHR84896549;     EfscmJTPXvsinmSRSHR84896549 = EfscmJTPXvsinmSRSHR97981484;     EfscmJTPXvsinmSRSHR97981484 = EfscmJTPXvsinmSRSHR23550752;     EfscmJTPXvsinmSRSHR23550752 = EfscmJTPXvsinmSRSHR69595845;     EfscmJTPXvsinmSRSHR69595845 = EfscmJTPXvsinmSRSHR5145207;     EfscmJTPXvsinmSRSHR5145207 = EfscmJTPXvsinmSRSHR62121414;     EfscmJTPXvsinmSRSHR62121414 = EfscmJTPXvsinmSRSHR89194142;     EfscmJTPXvsinmSRSHR89194142 = EfscmJTPXvsinmSRSHR99463949;     EfscmJTPXvsinmSRSHR99463949 = EfscmJTPXvsinmSRSHR98196859;     EfscmJTPXvsinmSRSHR98196859 = EfscmJTPXvsinmSRSHR95926989;     EfscmJTPXvsinmSRSHR95926989 = EfscmJTPXvsinmSRSHR10902709;     EfscmJTPXvsinmSRSHR10902709 = EfscmJTPXvsinmSRSHR9286129;     EfscmJTPXvsinmSRSHR9286129 = EfscmJTPXvsinmSRSHR32980877;     EfscmJTPXvsinmSRSHR32980877 = EfscmJTPXvsinmSRSHR65559591;     EfscmJTPXvsinmSRSHR65559591 = EfscmJTPXvsinmSRSHR37208430;     EfscmJTPXvsinmSRSHR37208430 = EfscmJTPXvsinmSRSHR73997364;     EfscmJTPXvsinmSRSHR73997364 = EfscmJTPXvsinmSRSHR14350532;     EfscmJTPXvsinmSRSHR14350532 = EfscmJTPXvsinmSRSHR88587548;     EfscmJTPXvsinmSRSHR88587548 = EfscmJTPXvsinmSRSHR39895979;     EfscmJTPXvsinmSRSHR39895979 = EfscmJTPXvsinmSRSHR63159684;     EfscmJTPXvsinmSRSHR63159684 = EfscmJTPXvsinmSRSHR80083061;     EfscmJTPXvsinmSRSHR80083061 = EfscmJTPXvsinmSRSHR49776423;     EfscmJTPXvsinmSRSHR49776423 = EfscmJTPXvsinmSRSHR19581948;     EfscmJTPXvsinmSRSHR19581948 = EfscmJTPXvsinmSRSHR42926157;     EfscmJTPXvsinmSRSHR42926157 = EfscmJTPXvsinmSRSHR36280159;     EfscmJTPXvsinmSRSHR36280159 = EfscmJTPXvsinmSRSHR29825177;     EfscmJTPXvsinmSRSHR29825177 = EfscmJTPXvsinmSRSHR27826375;     EfscmJTPXvsinmSRSHR27826375 = EfscmJTPXvsinmSRSHR35851904;     EfscmJTPXvsinmSRSHR35851904 = EfscmJTPXvsinmSRSHR36878085;     EfscmJTPXvsinmSRSHR36878085 = EfscmJTPXvsinmSRSHR78559762;     EfscmJTPXvsinmSRSHR78559762 = EfscmJTPXvsinmSRSHR24986739;     EfscmJTPXvsinmSRSHR24986739 = EfscmJTPXvsinmSRSHR16366308;     EfscmJTPXvsinmSRSHR16366308 = EfscmJTPXvsinmSRSHR2287269;     EfscmJTPXvsinmSRSHR2287269 = EfscmJTPXvsinmSRSHR87029023;     EfscmJTPXvsinmSRSHR87029023 = EfscmJTPXvsinmSRSHR79636813;     EfscmJTPXvsinmSRSHR79636813 = EfscmJTPXvsinmSRSHR21616185;     EfscmJTPXvsinmSRSHR21616185 = EfscmJTPXvsinmSRSHR1564290;     EfscmJTPXvsinmSRSHR1564290 = EfscmJTPXvsinmSRSHR70630313;     EfscmJTPXvsinmSRSHR70630313 = EfscmJTPXvsinmSRSHR32705862;     EfscmJTPXvsinmSRSHR32705862 = EfscmJTPXvsinmSRSHR90484359;     EfscmJTPXvsinmSRSHR90484359 = EfscmJTPXvsinmSRSHR52655154;     EfscmJTPXvsinmSRSHR52655154 = EfscmJTPXvsinmSRSHR76564602;     EfscmJTPXvsinmSRSHR76564602 = EfscmJTPXvsinmSRSHR38899217;     EfscmJTPXvsinmSRSHR38899217 = EfscmJTPXvsinmSRSHR35927538;     EfscmJTPXvsinmSRSHR35927538 = EfscmJTPXvsinmSRSHR12160414;     EfscmJTPXvsinmSRSHR12160414 = EfscmJTPXvsinmSRSHR83327669;     EfscmJTPXvsinmSRSHR83327669 = EfscmJTPXvsinmSRSHR14766801;     EfscmJTPXvsinmSRSHR14766801 = EfscmJTPXvsinmSRSHR65766826;     EfscmJTPXvsinmSRSHR65766826 = EfscmJTPXvsinmSRSHR40551261;     EfscmJTPXvsinmSRSHR40551261 = EfscmJTPXvsinmSRSHR25804007;     EfscmJTPXvsinmSRSHR25804007 = EfscmJTPXvsinmSRSHR4625892;     EfscmJTPXvsinmSRSHR4625892 = EfscmJTPXvsinmSRSHR9346017;     EfscmJTPXvsinmSRSHR9346017 = EfscmJTPXvsinmSRSHR25593481;     EfscmJTPXvsinmSRSHR25593481 = EfscmJTPXvsinmSRSHR78947002;     EfscmJTPXvsinmSRSHR78947002 = EfscmJTPXvsinmSRSHR18329404;     EfscmJTPXvsinmSRSHR18329404 = EfscmJTPXvsinmSRSHR35120127;     EfscmJTPXvsinmSRSHR35120127 = EfscmJTPXvsinmSRSHR78399536;     EfscmJTPXvsinmSRSHR78399536 = EfscmJTPXvsinmSRSHR80624595;     EfscmJTPXvsinmSRSHR80624595 = EfscmJTPXvsinmSRSHR33315686;     EfscmJTPXvsinmSRSHR33315686 = EfscmJTPXvsinmSRSHR75320029;     EfscmJTPXvsinmSRSHR75320029 = EfscmJTPXvsinmSRSHR34295040;     EfscmJTPXvsinmSRSHR34295040 = EfscmJTPXvsinmSRSHR53342238;     EfscmJTPXvsinmSRSHR53342238 = EfscmJTPXvsinmSRSHR62585865;     EfscmJTPXvsinmSRSHR62585865 = EfscmJTPXvsinmSRSHR19637098;     EfscmJTPXvsinmSRSHR19637098 = EfscmJTPXvsinmSRSHR70940251;     EfscmJTPXvsinmSRSHR70940251 = EfscmJTPXvsinmSRSHR94536401;     EfscmJTPXvsinmSRSHR94536401 = EfscmJTPXvsinmSRSHR6998861;     EfscmJTPXvsinmSRSHR6998861 = EfscmJTPXvsinmSRSHR45951854;     EfscmJTPXvsinmSRSHR45951854 = EfscmJTPXvsinmSRSHR85922778;     EfscmJTPXvsinmSRSHR85922778 = EfscmJTPXvsinmSRSHR15592246;     EfscmJTPXvsinmSRSHR15592246 = EfscmJTPXvsinmSRSHR72433075;     EfscmJTPXvsinmSRSHR72433075 = EfscmJTPXvsinmSRSHR43720218;     EfscmJTPXvsinmSRSHR43720218 = EfscmJTPXvsinmSRSHR55881687;     EfscmJTPXvsinmSRSHR55881687 = EfscmJTPXvsinmSRSHR49411619;     EfscmJTPXvsinmSRSHR49411619 = EfscmJTPXvsinmSRSHR10504531;     EfscmJTPXvsinmSRSHR10504531 = EfscmJTPXvsinmSRSHR3518459;     EfscmJTPXvsinmSRSHR3518459 = EfscmJTPXvsinmSRSHR10877206;     EfscmJTPXvsinmSRSHR10877206 = EfscmJTPXvsinmSRSHR83654410;     EfscmJTPXvsinmSRSHR83654410 = EfscmJTPXvsinmSRSHR30765743;     EfscmJTPXvsinmSRSHR30765743 = EfscmJTPXvsinmSRSHR52952489;     EfscmJTPXvsinmSRSHR52952489 = EfscmJTPXvsinmSRSHR15058377;     EfscmJTPXvsinmSRSHR15058377 = EfscmJTPXvsinmSRSHR62059548;     EfscmJTPXvsinmSRSHR62059548 = EfscmJTPXvsinmSRSHR95300643;     EfscmJTPXvsinmSRSHR95300643 = EfscmJTPXvsinmSRSHR11074079;     EfscmJTPXvsinmSRSHR11074079 = EfscmJTPXvsinmSRSHR73933870;     EfscmJTPXvsinmSRSHR73933870 = EfscmJTPXvsinmSRSHR15640722;     EfscmJTPXvsinmSRSHR15640722 = EfscmJTPXvsinmSRSHR90772826;     EfscmJTPXvsinmSRSHR90772826 = EfscmJTPXvsinmSRSHR23340266;     EfscmJTPXvsinmSRSHR23340266 = EfscmJTPXvsinmSRSHR68699620;     EfscmJTPXvsinmSRSHR68699620 = EfscmJTPXvsinmSRSHR44516687;     EfscmJTPXvsinmSRSHR44516687 = EfscmJTPXvsinmSRSHR43216648;     EfscmJTPXvsinmSRSHR43216648 = EfscmJTPXvsinmSRSHR47747678;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void GtNCUwIuCRTupWhejro98942345() {     int LlzYaLLOoqBhUzJiUGI2402076 = -107190947;    int LlzYaLLOoqBhUzJiUGI78324036 = -69103912;    int LlzYaLLOoqBhUzJiUGI38492337 = -754140458;    int LlzYaLLOoqBhUzJiUGI71236312 = -388019897;    int LlzYaLLOoqBhUzJiUGI93428093 = -679993168;    int LlzYaLLOoqBhUzJiUGI12107963 = -975384725;    int LlzYaLLOoqBhUzJiUGI86590163 = 9990645;    int LlzYaLLOoqBhUzJiUGI71281791 = -785708080;    int LlzYaLLOoqBhUzJiUGI86186875 = -852989236;    int LlzYaLLOoqBhUzJiUGI67528535 = -439184363;    int LlzYaLLOoqBhUzJiUGI76592779 = -868392159;    int LlzYaLLOoqBhUzJiUGI86315465 = -308139561;    int LlzYaLLOoqBhUzJiUGI33413160 = -528991140;    int LlzYaLLOoqBhUzJiUGI98111637 = -25023332;    int LlzYaLLOoqBhUzJiUGI92345487 = -237159216;    int LlzYaLLOoqBhUzJiUGI78961678 = -42051935;    int LlzYaLLOoqBhUzJiUGI99295713 = -635599353;    int LlzYaLLOoqBhUzJiUGI65793447 = -310697275;    int LlzYaLLOoqBhUzJiUGI97147590 = -22891156;    int LlzYaLLOoqBhUzJiUGI28537264 = 21305990;    int LlzYaLLOoqBhUzJiUGI43460516 = -525886763;    int LlzYaLLOoqBhUzJiUGI84233466 = -617996734;    int LlzYaLLOoqBhUzJiUGI2029423 = -702748260;    int LlzYaLLOoqBhUzJiUGI38636799 = -36162636;    int LlzYaLLOoqBhUzJiUGI69749980 = -578323043;    int LlzYaLLOoqBhUzJiUGI55591478 = -365251242;    int LlzYaLLOoqBhUzJiUGI90577473 = -988214625;    int LlzYaLLOoqBhUzJiUGI93144979 = -505316362;    int LlzYaLLOoqBhUzJiUGI3057362 = -771950051;    int LlzYaLLOoqBhUzJiUGI74518470 = -149358647;    int LlzYaLLOoqBhUzJiUGI1481952 = -628627985;    int LlzYaLLOoqBhUzJiUGI50573558 = -561721958;    int LlzYaLLOoqBhUzJiUGI10582033 = -1050610;    int LlzYaLLOoqBhUzJiUGI30936052 = -983989238;    int LlzYaLLOoqBhUzJiUGI64329334 = -651436075;    int LlzYaLLOoqBhUzJiUGI15152917 = -77534105;    int LlzYaLLOoqBhUzJiUGI10556392 = -866972221;    int LlzYaLLOoqBhUzJiUGI49855324 = -948483722;    int LlzYaLLOoqBhUzJiUGI29329411 = -158840837;    int LlzYaLLOoqBhUzJiUGI48973133 = -773371663;    int LlzYaLLOoqBhUzJiUGI72325708 = -104784218;    int LlzYaLLOoqBhUzJiUGI38961927 = -302193729;    int LlzYaLLOoqBhUzJiUGI78029206 = -695946281;    int LlzYaLLOoqBhUzJiUGI88631212 = -730819190;    int LlzYaLLOoqBhUzJiUGI81600247 = -623839869;    int LlzYaLLOoqBhUzJiUGI56897891 = -164419111;    int LlzYaLLOoqBhUzJiUGI87104025 = -253299472;    int LlzYaLLOoqBhUzJiUGI56133171 = -342917757;    int LlzYaLLOoqBhUzJiUGI32827127 = -756420031;    int LlzYaLLOoqBhUzJiUGI97496816 = -556078987;    int LlzYaLLOoqBhUzJiUGI51678142 = -496714886;    int LlzYaLLOoqBhUzJiUGI28281367 = -911190256;    int LlzYaLLOoqBhUzJiUGI67655541 = -147140030;    int LlzYaLLOoqBhUzJiUGI69576171 = -672875069;    int LlzYaLLOoqBhUzJiUGI55481829 = -862721941;    int LlzYaLLOoqBhUzJiUGI18168609 = -489194213;    int LlzYaLLOoqBhUzJiUGI76294614 = -366355653;    int LlzYaLLOoqBhUzJiUGI99855538 = -617977823;    int LlzYaLLOoqBhUzJiUGI1486332 = -809696854;    int LlzYaLLOoqBhUzJiUGI37836615 = -214741926;    int LlzYaLLOoqBhUzJiUGI21530490 = -987170101;    int LlzYaLLOoqBhUzJiUGI93445184 = -484692993;    int LlzYaLLOoqBhUzJiUGI68224429 = 86241971;    int LlzYaLLOoqBhUzJiUGI11668406 = -603630590;    int LlzYaLLOoqBhUzJiUGI66046583 = -810556379;    int LlzYaLLOoqBhUzJiUGI26019221 = -206670202;    int LlzYaLLOoqBhUzJiUGI75733432 = -207088951;    int LlzYaLLOoqBhUzJiUGI2477109 = -545001902;    int LlzYaLLOoqBhUzJiUGI33782304 = -373587257;    int LlzYaLLOoqBhUzJiUGI77192571 = -59625112;    int LlzYaLLOoqBhUzJiUGI68405286 = -175079714;    int LlzYaLLOoqBhUzJiUGI49440390 = -687115631;    int LlzYaLLOoqBhUzJiUGI36464036 = -51856439;    int LlzYaLLOoqBhUzJiUGI48174457 = -249519494;    int LlzYaLLOoqBhUzJiUGI56211556 = -873909792;    int LlzYaLLOoqBhUzJiUGI4498590 = -123693035;    int LlzYaLLOoqBhUzJiUGI6204260 = -922050454;    int LlzYaLLOoqBhUzJiUGI13398211 = -971929070;    int LlzYaLLOoqBhUzJiUGI57036551 = -412322767;    int LlzYaLLOoqBhUzJiUGI12852089 = -313903932;    int LlzYaLLOoqBhUzJiUGI68487453 = -11951771;    int LlzYaLLOoqBhUzJiUGI34444302 = -545296868;    int LlzYaLLOoqBhUzJiUGI60317853 = -748896332;    int LlzYaLLOoqBhUzJiUGI5560546 = -115871065;    int LlzYaLLOoqBhUzJiUGI22840329 = -652643762;    int LlzYaLLOoqBhUzJiUGI73200584 = -717437729;    int LlzYaLLOoqBhUzJiUGI82918017 = -314581928;    int LlzYaLLOoqBhUzJiUGI41005862 = -328175542;    int LlzYaLLOoqBhUzJiUGI75454222 = -21267298;    int LlzYaLLOoqBhUzJiUGI46160725 = -62241862;    int LlzYaLLOoqBhUzJiUGI38858303 = -711178453;    int LlzYaLLOoqBhUzJiUGI10700854 = -148994398;    int LlzYaLLOoqBhUzJiUGI48368992 = -38786868;    int LlzYaLLOoqBhUzJiUGI91492795 = -944098912;    int LlzYaLLOoqBhUzJiUGI27442644 = -786201563;    int LlzYaLLOoqBhUzJiUGI78880524 = -620091226;    int LlzYaLLOoqBhUzJiUGI70737497 = -288435700;    int LlzYaLLOoqBhUzJiUGI66360801 = 7684309;    int LlzYaLLOoqBhUzJiUGI22584630 = -920262812;    int LlzYaLLOoqBhUzJiUGI55581027 = -107190947;     LlzYaLLOoqBhUzJiUGI2402076 = LlzYaLLOoqBhUzJiUGI78324036;     LlzYaLLOoqBhUzJiUGI78324036 = LlzYaLLOoqBhUzJiUGI38492337;     LlzYaLLOoqBhUzJiUGI38492337 = LlzYaLLOoqBhUzJiUGI71236312;     LlzYaLLOoqBhUzJiUGI71236312 = LlzYaLLOoqBhUzJiUGI93428093;     LlzYaLLOoqBhUzJiUGI93428093 = LlzYaLLOoqBhUzJiUGI12107963;     LlzYaLLOoqBhUzJiUGI12107963 = LlzYaLLOoqBhUzJiUGI86590163;     LlzYaLLOoqBhUzJiUGI86590163 = LlzYaLLOoqBhUzJiUGI71281791;     LlzYaLLOoqBhUzJiUGI71281791 = LlzYaLLOoqBhUzJiUGI86186875;     LlzYaLLOoqBhUzJiUGI86186875 = LlzYaLLOoqBhUzJiUGI67528535;     LlzYaLLOoqBhUzJiUGI67528535 = LlzYaLLOoqBhUzJiUGI76592779;     LlzYaLLOoqBhUzJiUGI76592779 = LlzYaLLOoqBhUzJiUGI86315465;     LlzYaLLOoqBhUzJiUGI86315465 = LlzYaLLOoqBhUzJiUGI33413160;     LlzYaLLOoqBhUzJiUGI33413160 = LlzYaLLOoqBhUzJiUGI98111637;     LlzYaLLOoqBhUzJiUGI98111637 = LlzYaLLOoqBhUzJiUGI92345487;     LlzYaLLOoqBhUzJiUGI92345487 = LlzYaLLOoqBhUzJiUGI78961678;     LlzYaLLOoqBhUzJiUGI78961678 = LlzYaLLOoqBhUzJiUGI99295713;     LlzYaLLOoqBhUzJiUGI99295713 = LlzYaLLOoqBhUzJiUGI65793447;     LlzYaLLOoqBhUzJiUGI65793447 = LlzYaLLOoqBhUzJiUGI97147590;     LlzYaLLOoqBhUzJiUGI97147590 = LlzYaLLOoqBhUzJiUGI28537264;     LlzYaLLOoqBhUzJiUGI28537264 = LlzYaLLOoqBhUzJiUGI43460516;     LlzYaLLOoqBhUzJiUGI43460516 = LlzYaLLOoqBhUzJiUGI84233466;     LlzYaLLOoqBhUzJiUGI84233466 = LlzYaLLOoqBhUzJiUGI2029423;     LlzYaLLOoqBhUzJiUGI2029423 = LlzYaLLOoqBhUzJiUGI38636799;     LlzYaLLOoqBhUzJiUGI38636799 = LlzYaLLOoqBhUzJiUGI69749980;     LlzYaLLOoqBhUzJiUGI69749980 = LlzYaLLOoqBhUzJiUGI55591478;     LlzYaLLOoqBhUzJiUGI55591478 = LlzYaLLOoqBhUzJiUGI90577473;     LlzYaLLOoqBhUzJiUGI90577473 = LlzYaLLOoqBhUzJiUGI93144979;     LlzYaLLOoqBhUzJiUGI93144979 = LlzYaLLOoqBhUzJiUGI3057362;     LlzYaLLOoqBhUzJiUGI3057362 = LlzYaLLOoqBhUzJiUGI74518470;     LlzYaLLOoqBhUzJiUGI74518470 = LlzYaLLOoqBhUzJiUGI1481952;     LlzYaLLOoqBhUzJiUGI1481952 = LlzYaLLOoqBhUzJiUGI50573558;     LlzYaLLOoqBhUzJiUGI50573558 = LlzYaLLOoqBhUzJiUGI10582033;     LlzYaLLOoqBhUzJiUGI10582033 = LlzYaLLOoqBhUzJiUGI30936052;     LlzYaLLOoqBhUzJiUGI30936052 = LlzYaLLOoqBhUzJiUGI64329334;     LlzYaLLOoqBhUzJiUGI64329334 = LlzYaLLOoqBhUzJiUGI15152917;     LlzYaLLOoqBhUzJiUGI15152917 = LlzYaLLOoqBhUzJiUGI10556392;     LlzYaLLOoqBhUzJiUGI10556392 = LlzYaLLOoqBhUzJiUGI49855324;     LlzYaLLOoqBhUzJiUGI49855324 = LlzYaLLOoqBhUzJiUGI29329411;     LlzYaLLOoqBhUzJiUGI29329411 = LlzYaLLOoqBhUzJiUGI48973133;     LlzYaLLOoqBhUzJiUGI48973133 = LlzYaLLOoqBhUzJiUGI72325708;     LlzYaLLOoqBhUzJiUGI72325708 = LlzYaLLOoqBhUzJiUGI38961927;     LlzYaLLOoqBhUzJiUGI38961927 = LlzYaLLOoqBhUzJiUGI78029206;     LlzYaLLOoqBhUzJiUGI78029206 = LlzYaLLOoqBhUzJiUGI88631212;     LlzYaLLOoqBhUzJiUGI88631212 = LlzYaLLOoqBhUzJiUGI81600247;     LlzYaLLOoqBhUzJiUGI81600247 = LlzYaLLOoqBhUzJiUGI56897891;     LlzYaLLOoqBhUzJiUGI56897891 = LlzYaLLOoqBhUzJiUGI87104025;     LlzYaLLOoqBhUzJiUGI87104025 = LlzYaLLOoqBhUzJiUGI56133171;     LlzYaLLOoqBhUzJiUGI56133171 = LlzYaLLOoqBhUzJiUGI32827127;     LlzYaLLOoqBhUzJiUGI32827127 = LlzYaLLOoqBhUzJiUGI97496816;     LlzYaLLOoqBhUzJiUGI97496816 = LlzYaLLOoqBhUzJiUGI51678142;     LlzYaLLOoqBhUzJiUGI51678142 = LlzYaLLOoqBhUzJiUGI28281367;     LlzYaLLOoqBhUzJiUGI28281367 = LlzYaLLOoqBhUzJiUGI67655541;     LlzYaLLOoqBhUzJiUGI67655541 = LlzYaLLOoqBhUzJiUGI69576171;     LlzYaLLOoqBhUzJiUGI69576171 = LlzYaLLOoqBhUzJiUGI55481829;     LlzYaLLOoqBhUzJiUGI55481829 = LlzYaLLOoqBhUzJiUGI18168609;     LlzYaLLOoqBhUzJiUGI18168609 = LlzYaLLOoqBhUzJiUGI76294614;     LlzYaLLOoqBhUzJiUGI76294614 = LlzYaLLOoqBhUzJiUGI99855538;     LlzYaLLOoqBhUzJiUGI99855538 = LlzYaLLOoqBhUzJiUGI1486332;     LlzYaLLOoqBhUzJiUGI1486332 = LlzYaLLOoqBhUzJiUGI37836615;     LlzYaLLOoqBhUzJiUGI37836615 = LlzYaLLOoqBhUzJiUGI21530490;     LlzYaLLOoqBhUzJiUGI21530490 = LlzYaLLOoqBhUzJiUGI93445184;     LlzYaLLOoqBhUzJiUGI93445184 = LlzYaLLOoqBhUzJiUGI68224429;     LlzYaLLOoqBhUzJiUGI68224429 = LlzYaLLOoqBhUzJiUGI11668406;     LlzYaLLOoqBhUzJiUGI11668406 = LlzYaLLOoqBhUzJiUGI66046583;     LlzYaLLOoqBhUzJiUGI66046583 = LlzYaLLOoqBhUzJiUGI26019221;     LlzYaLLOoqBhUzJiUGI26019221 = LlzYaLLOoqBhUzJiUGI75733432;     LlzYaLLOoqBhUzJiUGI75733432 = LlzYaLLOoqBhUzJiUGI2477109;     LlzYaLLOoqBhUzJiUGI2477109 = LlzYaLLOoqBhUzJiUGI33782304;     LlzYaLLOoqBhUzJiUGI33782304 = LlzYaLLOoqBhUzJiUGI77192571;     LlzYaLLOoqBhUzJiUGI77192571 = LlzYaLLOoqBhUzJiUGI68405286;     LlzYaLLOoqBhUzJiUGI68405286 = LlzYaLLOoqBhUzJiUGI49440390;     LlzYaLLOoqBhUzJiUGI49440390 = LlzYaLLOoqBhUzJiUGI36464036;     LlzYaLLOoqBhUzJiUGI36464036 = LlzYaLLOoqBhUzJiUGI48174457;     LlzYaLLOoqBhUzJiUGI48174457 = LlzYaLLOoqBhUzJiUGI56211556;     LlzYaLLOoqBhUzJiUGI56211556 = LlzYaLLOoqBhUzJiUGI4498590;     LlzYaLLOoqBhUzJiUGI4498590 = LlzYaLLOoqBhUzJiUGI6204260;     LlzYaLLOoqBhUzJiUGI6204260 = LlzYaLLOoqBhUzJiUGI13398211;     LlzYaLLOoqBhUzJiUGI13398211 = LlzYaLLOoqBhUzJiUGI57036551;     LlzYaLLOoqBhUzJiUGI57036551 = LlzYaLLOoqBhUzJiUGI12852089;     LlzYaLLOoqBhUzJiUGI12852089 = LlzYaLLOoqBhUzJiUGI68487453;     LlzYaLLOoqBhUzJiUGI68487453 = LlzYaLLOoqBhUzJiUGI34444302;     LlzYaLLOoqBhUzJiUGI34444302 = LlzYaLLOoqBhUzJiUGI60317853;     LlzYaLLOoqBhUzJiUGI60317853 = LlzYaLLOoqBhUzJiUGI5560546;     LlzYaLLOoqBhUzJiUGI5560546 = LlzYaLLOoqBhUzJiUGI22840329;     LlzYaLLOoqBhUzJiUGI22840329 = LlzYaLLOoqBhUzJiUGI73200584;     LlzYaLLOoqBhUzJiUGI73200584 = LlzYaLLOoqBhUzJiUGI82918017;     LlzYaLLOoqBhUzJiUGI82918017 = LlzYaLLOoqBhUzJiUGI41005862;     LlzYaLLOoqBhUzJiUGI41005862 = LlzYaLLOoqBhUzJiUGI75454222;     LlzYaLLOoqBhUzJiUGI75454222 = LlzYaLLOoqBhUzJiUGI46160725;     LlzYaLLOoqBhUzJiUGI46160725 = LlzYaLLOoqBhUzJiUGI38858303;     LlzYaLLOoqBhUzJiUGI38858303 = LlzYaLLOoqBhUzJiUGI10700854;     LlzYaLLOoqBhUzJiUGI10700854 = LlzYaLLOoqBhUzJiUGI48368992;     LlzYaLLOoqBhUzJiUGI48368992 = LlzYaLLOoqBhUzJiUGI91492795;     LlzYaLLOoqBhUzJiUGI91492795 = LlzYaLLOoqBhUzJiUGI27442644;     LlzYaLLOoqBhUzJiUGI27442644 = LlzYaLLOoqBhUzJiUGI78880524;     LlzYaLLOoqBhUzJiUGI78880524 = LlzYaLLOoqBhUzJiUGI70737497;     LlzYaLLOoqBhUzJiUGI70737497 = LlzYaLLOoqBhUzJiUGI66360801;     LlzYaLLOoqBhUzJiUGI66360801 = LlzYaLLOoqBhUzJiUGI22584630;     LlzYaLLOoqBhUzJiUGI22584630 = LlzYaLLOoqBhUzJiUGI55581027;     LlzYaLLOoqBhUzJiUGI55581027 = LlzYaLLOoqBhUzJiUGI2402076;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void AegxCOmYvbNbjTTHdqm5270893() {     int VXrFTNZZecbzvgUtaXq57056473 = -544718531;    int VXrFTNZZecbzvgUtaXq25321656 = -648668726;    int VXrFTNZZecbzvgUtaXq99224983 = -39525072;    int VXrFTNZZecbzvgUtaXq42671253 = -394122308;    int VXrFTNZZecbzvgUtaXq67879764 = -352428407;    int VXrFTNZZecbzvgUtaXq26282360 = -4535561;    int VXrFTNZZecbzvgUtaXq7690868 = -291902027;    int VXrFTNZZecbzvgUtaXq456895 = -186276313;    int VXrFTNZZecbzvgUtaXq73961286 = -899842607;    int VXrFTNZZecbzvgUtaXq50160520 = -717985632;    int VXrFTNZZecbzvgUtaXq55204074 = -393748731;    int VXrFTNZZecbzvgUtaXq49080178 = -494563650;    int VXrFTNZZecbzvgUtaXq97230474 = -332531444;    int VXrFTNZZecbzvgUtaXq91078068 = -737126910;    int VXrFTNZZecbzvgUtaXq22569562 = -144280848;    int VXrFTNZZecbzvgUtaXq68729213 = -772211499;    int VXrFTNZZecbzvgUtaXq99127477 = -9199182;    int VXrFTNZZecbzvgUtaXq33390034 = -374261743;    int VXrFTNZZecbzvgUtaXq98368191 = -308702704;    int VXrFTNZZecbzvgUtaXq46171820 = -324060156;    int VXrFTNZZecbzvgUtaXq77634904 = 6030086;    int VXrFTNZZecbzvgUtaXq35486055 = -784440842;    int VXrFTNZZecbzvgUtaXq38499255 = -189491681;    int VXrFTNZZecbzvgUtaXq40065167 = -835203452;    int VXrFTNZZecbzvgUtaXq65502596 = -951236495;    int VXrFTNZZecbzvgUtaXq96832425 = -368960027;    int VXrFTNZZecbzvgUtaXq92567397 = -443058904;    int VXrFTNZZecbzvgUtaXq46393979 = -513368223;    int VXrFTNZZecbzvgUtaXq42955039 = -52194927;    int VXrFTNZZecbzvgUtaXq68953879 = -440116615;    int VXrFTNZZecbzvgUtaXq53187480 = -77500511;    int VXrFTNZZecbzvgUtaXq81565168 = -973218486;    int VXrFTNZZecbzvgUtaXq78237909 = -557568224;    int VXrFTNZZecbzvgUtaXq25591945 = -664110048;    int VXrFTNZZecbzvgUtaXq98833490 = -869299334;    int VXrFTNZZecbzvgUtaXq2479459 = -325529702;    int VXrFTNZZecbzvgUtaXq85260879 = -717398841;    int VXrFTNZZecbzvgUtaXq62832562 = -822412743;    int VXrFTNZZecbzvgUtaXq80099060 = -540789439;    int VXrFTNZZecbzvgUtaXq72959528 = -431680262;    int VXrFTNZZecbzvgUtaXq28285109 = -217334376;    int VXrFTNZZecbzvgUtaXq75636585 = -909725816;    int VXrFTNZZecbzvgUtaXq69029389 = -536451598;    int VXrFTNZZecbzvgUtaXq97625612 = -204498856;    int VXrFTNZZecbzvgUtaXq41584311 = -756357467;    int VXrFTNZZecbzvgUtaXq12231493 = -233208726;    int VXrFTNZZecbzvgUtaXq3577738 = -280356855;    int VXrFTNZZecbzvgUtaXq79560480 = -320570129;    int VXrFTNZZecbzvgUtaXq75169893 = -656150220;    int VXrFTNZZecbzvgUtaXq42338479 = -796098281;    int VXrFTNZZecbzvgUtaXq26791682 = -153930387;    int VXrFTNZZecbzvgUtaXq17663517 = -326256239;    int VXrFTNZZecbzvgUtaXq99383543 = -987055488;    int VXrFTNZZecbzvgUtaXq26991928 = -568761554;    int VXrFTNZZecbzvgUtaXq27635989 = -158630622;    int VXrFTNZZecbzvgUtaXq21570418 = -760277689;    int VXrFTNZZecbzvgUtaXq86822401 = -359177046;    int VXrFTNZZecbzvgUtaXq59159816 = -204321620;    int VXrFTNZZecbzvgUtaXq77168657 = -442885813;    int VXrFTNZZecbzvgUtaXq71047339 = -983468381;    int VXrFTNZZecbzvgUtaXq33714963 = -561476658;    int VXrFTNZZecbzvgUtaXq61296888 = -778533805;    int VXrFTNZZecbzvgUtaXq57501856 = -34081387;    int VXrFTNZZecbzvgUtaXq5007407 = -359725992;    int VXrFTNZZecbzvgUtaXq96973040 = -540485122;    int VXrFTNZZecbzvgUtaXq73638905 = -420530246;    int VXrFTNZZecbzvgUtaXq70842268 = -936995426;    int VXrFTNZZecbzvgUtaXq71638530 = -668421397;    int VXrFTNZZecbzvgUtaXq92244577 = -867827576;    int VXrFTNZZecbzvgUtaXq20090103 = -818751147;    int VXrFTNZZecbzvgUtaXq83468334 = 45187342;    int VXrFTNZZecbzvgUtaXq36294915 = -186786439;    int VXrFTNZZecbzvgUtaXq53290974 = -833472304;    int VXrFTNZZecbzvgUtaXq25408663 = -877022443;    int VXrFTNZZecbzvgUtaXq17886711 = -6725781;    int VXrFTNZZecbzvgUtaXq1998319 = -84244099;    int VXrFTNZZecbzvgUtaXq66456666 = -147989244;    int VXrFTNZZecbzvgUtaXq40873643 = -984992825;    int VXrFTNZZecbzvgUtaXq98480856 = 21154014;    int VXrFTNZZecbzvgUtaXq53271103 = -618027769;    int VXrFTNZZecbzvgUtaXq93254688 = 11396828;    int VXrFTNZZecbzvgUtaXq13006917 = -22488775;    int VXrFTNZZecbzvgUtaXq71224086 = -857218004;    int VXrFTNZZecbzvgUtaXq616560 = -256096646;    int VXrFTNZZecbzvgUtaXq42162198 = -186186228;    int VXrFTNZZecbzvgUtaXq35523964 = -751244272;    int VXrFTNZZecbzvgUtaXq82181624 = -986162999;    int VXrFTNZZecbzvgUtaXq51245981 = -988806671;    int VXrFTNZZecbzvgUtaXq97955955 = -405479426;    int VXrFTNZZecbzvgUtaXq77263073 = -9021646;    int VXrFTNZZecbzvgUtaXq15657057 = -966352656;    int VXrFTNZZecbzvgUtaXq26101064 = -413077222;    int VXrFTNZZecbzvgUtaXq85663905 = -279526930;    int VXrFTNZZecbzvgUtaXq9051722 = -557321059;    int VXrFTNZZecbzvgUtaXq39244566 = -870203605;    int VXrFTNZZecbzvgUtaXq66988221 = -438800572;    int VXrFTNZZecbzvgUtaXq18134729 = -775644430;    int VXrFTNZZecbzvgUtaXq64021983 = -76725607;    int VXrFTNZZecbzvgUtaXq652572 = -664013734;    int VXrFTNZZecbzvgUtaXq67945406 = -544718531;     VXrFTNZZecbzvgUtaXq57056473 = VXrFTNZZecbzvgUtaXq25321656;     VXrFTNZZecbzvgUtaXq25321656 = VXrFTNZZecbzvgUtaXq99224983;     VXrFTNZZecbzvgUtaXq99224983 = VXrFTNZZecbzvgUtaXq42671253;     VXrFTNZZecbzvgUtaXq42671253 = VXrFTNZZecbzvgUtaXq67879764;     VXrFTNZZecbzvgUtaXq67879764 = VXrFTNZZecbzvgUtaXq26282360;     VXrFTNZZecbzvgUtaXq26282360 = VXrFTNZZecbzvgUtaXq7690868;     VXrFTNZZecbzvgUtaXq7690868 = VXrFTNZZecbzvgUtaXq456895;     VXrFTNZZecbzvgUtaXq456895 = VXrFTNZZecbzvgUtaXq73961286;     VXrFTNZZecbzvgUtaXq73961286 = VXrFTNZZecbzvgUtaXq50160520;     VXrFTNZZecbzvgUtaXq50160520 = VXrFTNZZecbzvgUtaXq55204074;     VXrFTNZZecbzvgUtaXq55204074 = VXrFTNZZecbzvgUtaXq49080178;     VXrFTNZZecbzvgUtaXq49080178 = VXrFTNZZecbzvgUtaXq97230474;     VXrFTNZZecbzvgUtaXq97230474 = VXrFTNZZecbzvgUtaXq91078068;     VXrFTNZZecbzvgUtaXq91078068 = VXrFTNZZecbzvgUtaXq22569562;     VXrFTNZZecbzvgUtaXq22569562 = VXrFTNZZecbzvgUtaXq68729213;     VXrFTNZZecbzvgUtaXq68729213 = VXrFTNZZecbzvgUtaXq99127477;     VXrFTNZZecbzvgUtaXq99127477 = VXrFTNZZecbzvgUtaXq33390034;     VXrFTNZZecbzvgUtaXq33390034 = VXrFTNZZecbzvgUtaXq98368191;     VXrFTNZZecbzvgUtaXq98368191 = VXrFTNZZecbzvgUtaXq46171820;     VXrFTNZZecbzvgUtaXq46171820 = VXrFTNZZecbzvgUtaXq77634904;     VXrFTNZZecbzvgUtaXq77634904 = VXrFTNZZecbzvgUtaXq35486055;     VXrFTNZZecbzvgUtaXq35486055 = VXrFTNZZecbzvgUtaXq38499255;     VXrFTNZZecbzvgUtaXq38499255 = VXrFTNZZecbzvgUtaXq40065167;     VXrFTNZZecbzvgUtaXq40065167 = VXrFTNZZecbzvgUtaXq65502596;     VXrFTNZZecbzvgUtaXq65502596 = VXrFTNZZecbzvgUtaXq96832425;     VXrFTNZZecbzvgUtaXq96832425 = VXrFTNZZecbzvgUtaXq92567397;     VXrFTNZZecbzvgUtaXq92567397 = VXrFTNZZecbzvgUtaXq46393979;     VXrFTNZZecbzvgUtaXq46393979 = VXrFTNZZecbzvgUtaXq42955039;     VXrFTNZZecbzvgUtaXq42955039 = VXrFTNZZecbzvgUtaXq68953879;     VXrFTNZZecbzvgUtaXq68953879 = VXrFTNZZecbzvgUtaXq53187480;     VXrFTNZZecbzvgUtaXq53187480 = VXrFTNZZecbzvgUtaXq81565168;     VXrFTNZZecbzvgUtaXq81565168 = VXrFTNZZecbzvgUtaXq78237909;     VXrFTNZZecbzvgUtaXq78237909 = VXrFTNZZecbzvgUtaXq25591945;     VXrFTNZZecbzvgUtaXq25591945 = VXrFTNZZecbzvgUtaXq98833490;     VXrFTNZZecbzvgUtaXq98833490 = VXrFTNZZecbzvgUtaXq2479459;     VXrFTNZZecbzvgUtaXq2479459 = VXrFTNZZecbzvgUtaXq85260879;     VXrFTNZZecbzvgUtaXq85260879 = VXrFTNZZecbzvgUtaXq62832562;     VXrFTNZZecbzvgUtaXq62832562 = VXrFTNZZecbzvgUtaXq80099060;     VXrFTNZZecbzvgUtaXq80099060 = VXrFTNZZecbzvgUtaXq72959528;     VXrFTNZZecbzvgUtaXq72959528 = VXrFTNZZecbzvgUtaXq28285109;     VXrFTNZZecbzvgUtaXq28285109 = VXrFTNZZecbzvgUtaXq75636585;     VXrFTNZZecbzvgUtaXq75636585 = VXrFTNZZecbzvgUtaXq69029389;     VXrFTNZZecbzvgUtaXq69029389 = VXrFTNZZecbzvgUtaXq97625612;     VXrFTNZZecbzvgUtaXq97625612 = VXrFTNZZecbzvgUtaXq41584311;     VXrFTNZZecbzvgUtaXq41584311 = VXrFTNZZecbzvgUtaXq12231493;     VXrFTNZZecbzvgUtaXq12231493 = VXrFTNZZecbzvgUtaXq3577738;     VXrFTNZZecbzvgUtaXq3577738 = VXrFTNZZecbzvgUtaXq79560480;     VXrFTNZZecbzvgUtaXq79560480 = VXrFTNZZecbzvgUtaXq75169893;     VXrFTNZZecbzvgUtaXq75169893 = VXrFTNZZecbzvgUtaXq42338479;     VXrFTNZZecbzvgUtaXq42338479 = VXrFTNZZecbzvgUtaXq26791682;     VXrFTNZZecbzvgUtaXq26791682 = VXrFTNZZecbzvgUtaXq17663517;     VXrFTNZZecbzvgUtaXq17663517 = VXrFTNZZecbzvgUtaXq99383543;     VXrFTNZZecbzvgUtaXq99383543 = VXrFTNZZecbzvgUtaXq26991928;     VXrFTNZZecbzvgUtaXq26991928 = VXrFTNZZecbzvgUtaXq27635989;     VXrFTNZZecbzvgUtaXq27635989 = VXrFTNZZecbzvgUtaXq21570418;     VXrFTNZZecbzvgUtaXq21570418 = VXrFTNZZecbzvgUtaXq86822401;     VXrFTNZZecbzvgUtaXq86822401 = VXrFTNZZecbzvgUtaXq59159816;     VXrFTNZZecbzvgUtaXq59159816 = VXrFTNZZecbzvgUtaXq77168657;     VXrFTNZZecbzvgUtaXq77168657 = VXrFTNZZecbzvgUtaXq71047339;     VXrFTNZZecbzvgUtaXq71047339 = VXrFTNZZecbzvgUtaXq33714963;     VXrFTNZZecbzvgUtaXq33714963 = VXrFTNZZecbzvgUtaXq61296888;     VXrFTNZZecbzvgUtaXq61296888 = VXrFTNZZecbzvgUtaXq57501856;     VXrFTNZZecbzvgUtaXq57501856 = VXrFTNZZecbzvgUtaXq5007407;     VXrFTNZZecbzvgUtaXq5007407 = VXrFTNZZecbzvgUtaXq96973040;     VXrFTNZZecbzvgUtaXq96973040 = VXrFTNZZecbzvgUtaXq73638905;     VXrFTNZZecbzvgUtaXq73638905 = VXrFTNZZecbzvgUtaXq70842268;     VXrFTNZZecbzvgUtaXq70842268 = VXrFTNZZecbzvgUtaXq71638530;     VXrFTNZZecbzvgUtaXq71638530 = VXrFTNZZecbzvgUtaXq92244577;     VXrFTNZZecbzvgUtaXq92244577 = VXrFTNZZecbzvgUtaXq20090103;     VXrFTNZZecbzvgUtaXq20090103 = VXrFTNZZecbzvgUtaXq83468334;     VXrFTNZZecbzvgUtaXq83468334 = VXrFTNZZecbzvgUtaXq36294915;     VXrFTNZZecbzvgUtaXq36294915 = VXrFTNZZecbzvgUtaXq53290974;     VXrFTNZZecbzvgUtaXq53290974 = VXrFTNZZecbzvgUtaXq25408663;     VXrFTNZZecbzvgUtaXq25408663 = VXrFTNZZecbzvgUtaXq17886711;     VXrFTNZZecbzvgUtaXq17886711 = VXrFTNZZecbzvgUtaXq1998319;     VXrFTNZZecbzvgUtaXq1998319 = VXrFTNZZecbzvgUtaXq66456666;     VXrFTNZZecbzvgUtaXq66456666 = VXrFTNZZecbzvgUtaXq40873643;     VXrFTNZZecbzvgUtaXq40873643 = VXrFTNZZecbzvgUtaXq98480856;     VXrFTNZZecbzvgUtaXq98480856 = VXrFTNZZecbzvgUtaXq53271103;     VXrFTNZZecbzvgUtaXq53271103 = VXrFTNZZecbzvgUtaXq93254688;     VXrFTNZZecbzvgUtaXq93254688 = VXrFTNZZecbzvgUtaXq13006917;     VXrFTNZZecbzvgUtaXq13006917 = VXrFTNZZecbzvgUtaXq71224086;     VXrFTNZZecbzvgUtaXq71224086 = VXrFTNZZecbzvgUtaXq616560;     VXrFTNZZecbzvgUtaXq616560 = VXrFTNZZecbzvgUtaXq42162198;     VXrFTNZZecbzvgUtaXq42162198 = VXrFTNZZecbzvgUtaXq35523964;     VXrFTNZZecbzvgUtaXq35523964 = VXrFTNZZecbzvgUtaXq82181624;     VXrFTNZZecbzvgUtaXq82181624 = VXrFTNZZecbzvgUtaXq51245981;     VXrFTNZZecbzvgUtaXq51245981 = VXrFTNZZecbzvgUtaXq97955955;     VXrFTNZZecbzvgUtaXq97955955 = VXrFTNZZecbzvgUtaXq77263073;     VXrFTNZZecbzvgUtaXq77263073 = VXrFTNZZecbzvgUtaXq15657057;     VXrFTNZZecbzvgUtaXq15657057 = VXrFTNZZecbzvgUtaXq26101064;     VXrFTNZZecbzvgUtaXq26101064 = VXrFTNZZecbzvgUtaXq85663905;     VXrFTNZZecbzvgUtaXq85663905 = VXrFTNZZecbzvgUtaXq9051722;     VXrFTNZZecbzvgUtaXq9051722 = VXrFTNZZecbzvgUtaXq39244566;     VXrFTNZZecbzvgUtaXq39244566 = VXrFTNZZecbzvgUtaXq66988221;     VXrFTNZZecbzvgUtaXq66988221 = VXrFTNZZecbzvgUtaXq18134729;     VXrFTNZZecbzvgUtaXq18134729 = VXrFTNZZecbzvgUtaXq64021983;     VXrFTNZZecbzvgUtaXq64021983 = VXrFTNZZecbzvgUtaXq652572;     VXrFTNZZecbzvgUtaXq652572 = VXrFTNZZecbzvgUtaXq67945406;     VXrFTNZZecbzvgUtaXq67945406 = VXrFTNZZecbzvgUtaXq57056473;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void MCHyhkpSMjLkucQrZtT11599440() {     int jXdCVLiFxULTplTUQiy11710871 = -982246115;    int jXdCVLiFxULTplTUQiy72319275 = -128233540;    int jXdCVLiFxULTplTUQiy59957629 = -424909685;    int jXdCVLiFxULTplTUQiy14106195 = -400224719;    int jXdCVLiFxULTplTUQiy42331435 = -24863646;    int jXdCVLiFxULTplTUQiy40456757 = -133686397;    int jXdCVLiFxULTplTUQiy28791571 = -593794700;    int jXdCVLiFxULTplTUQiy29631998 = -686844545;    int jXdCVLiFxULTplTUQiy61735697 = -946695977;    int jXdCVLiFxULTplTUQiy32792506 = -996786902;    int jXdCVLiFxULTplTUQiy33815369 = 80894696;    int jXdCVLiFxULTplTUQiy11844892 = -680987739;    int jXdCVLiFxULTplTUQiy61047790 = -136071749;    int jXdCVLiFxULTplTUQiy84044498 = -349230488;    int jXdCVLiFxULTplTUQiy52793635 = -51402479;    int jXdCVLiFxULTplTUQiy58496749 = -402371063;    int jXdCVLiFxULTplTUQiy98959240 = -482799010;    int jXdCVLiFxULTplTUQiy986621 = -437826210;    int jXdCVLiFxULTplTUQiy99588792 = -594514252;    int jXdCVLiFxULTplTUQiy63806375 = -669426303;    int jXdCVLiFxULTplTUQiy11809292 = -562053065;    int jXdCVLiFxULTplTUQiy86738644 = -950884950;    int jXdCVLiFxULTplTUQiy74969086 = -776235102;    int jXdCVLiFxULTplTUQiy41493536 = -534244269;    int jXdCVLiFxULTplTUQiy61255212 = -224149947;    int jXdCVLiFxULTplTUQiy38073373 = -372668812;    int jXdCVLiFxULTplTUQiy94557321 = -997903183;    int jXdCVLiFxULTplTUQiy99642979 = -521420084;    int jXdCVLiFxULTplTUQiy82852715 = -432439802;    int jXdCVLiFxULTplTUQiy63389289 = -730874583;    int jXdCVLiFxULTplTUQiy4893009 = -626373036;    int jXdCVLiFxULTplTUQiy12556779 = -284715014;    int jXdCVLiFxULTplTUQiy45893786 = -14085838;    int jXdCVLiFxULTplTUQiy20247838 = -344230857;    int jXdCVLiFxULTplTUQiy33337647 = 12837406;    int jXdCVLiFxULTplTUQiy89806000 = -573525298;    int jXdCVLiFxULTplTUQiy59965367 = -567825462;    int jXdCVLiFxULTplTUQiy75809801 = -696341764;    int jXdCVLiFxULTplTUQiy30868709 = -922738040;    int jXdCVLiFxULTplTUQiy96945923 = -89988861;    int jXdCVLiFxULTplTUQiy84244510 = -329884535;    int jXdCVLiFxULTplTUQiy12311243 = -417257902;    int jXdCVLiFxULTplTUQiy60029572 = -376956916;    int jXdCVLiFxULTplTUQiy6620012 = -778178522;    int jXdCVLiFxULTplTUQiy1568375 = -888875064;    int jXdCVLiFxULTplTUQiy67565095 = -301998341;    int jXdCVLiFxULTplTUQiy20051449 = -307414239;    int jXdCVLiFxULTplTUQiy2987790 = -298222502;    int jXdCVLiFxULTplTUQiy17512660 = -555880409;    int jXdCVLiFxULTplTUQiy87180141 = 63882424;    int jXdCVLiFxULTplTUQiy1905222 = -911145889;    int jXdCVLiFxULTplTUQiy7045667 = -841322222;    int jXdCVLiFxULTplTUQiy31111547 = -726970945;    int jXdCVLiFxULTplTUQiy84407685 = -464648038;    int jXdCVLiFxULTplTUQiy99790148 = -554539303;    int jXdCVLiFxULTplTUQiy24972226 = 68638835;    int jXdCVLiFxULTplTUQiy97350189 = -351998439;    int jXdCVLiFxULTplTUQiy18464094 = -890665417;    int jXdCVLiFxULTplTUQiy52850982 = -76074773;    int jXdCVLiFxULTplTUQiy4258063 = -652194835;    int jXdCVLiFxULTplTUQiy45899436 = -135783215;    int jXdCVLiFxULTplTUQiy29148592 = 27625384;    int jXdCVLiFxULTplTUQiy46779282 = -154404744;    int jXdCVLiFxULTplTUQiy98346408 = -115821395;    int jXdCVLiFxULTplTUQiy27899497 = -270413866;    int jXdCVLiFxULTplTUQiy21258590 = -634390290;    int jXdCVLiFxULTplTUQiy65951105 = -566901901;    int jXdCVLiFxULTplTUQiy40799953 = -791840892;    int jXdCVLiFxULTplTUQiy50706851 = -262067894;    int jXdCVLiFxULTplTUQiy62987634 = -477877181;    int jXdCVLiFxULTplTUQiy98531382 = -834545602;    int jXdCVLiFxULTplTUQiy23149439 = -786457247;    int jXdCVLiFxULTplTUQiy70117912 = -515088170;    int jXdCVLiFxULTplTUQiy2642870 = -404525391;    int jXdCVLiFxULTplTUQiy79561865 = -239541769;    int jXdCVLiFxULTplTUQiy99498048 = -44795163;    int jXdCVLiFxULTplTUQiy26709072 = -473928035;    int jXdCVLiFxULTplTUQiy68349075 = -998056580;    int jXdCVLiFxULTplTUQiy39925162 = -645369205;    int jXdCVLiFxULTplTUQiy93690117 = -922151607;    int jXdCVLiFxULTplTUQiy18021924 = 34745427;    int jXdCVLiFxULTplTUQiy91569532 = -599680682;    int jXdCVLiFxULTplTUQiy82130319 = -965539675;    int jXdCVLiFxULTplTUQiy95672574 = -396322227;    int jXdCVLiFxULTplTUQiy61484067 = -819728695;    int jXdCVLiFxULTplTUQiy97847342 = -785050815;    int jXdCVLiFxULTplTUQiy81445232 = -557744070;    int jXdCVLiFxULTplTUQiy61486101 = -549437801;    int jXdCVLiFxULTplTUQiy20457689 = -789691554;    int jXdCVLiFxULTplTUQiy8365422 = 44198571;    int jXdCVLiFxULTplTUQiy92455811 = -121526860;    int jXdCVLiFxULTplTUQiy41501274 = -677160045;    int jXdCVLiFxULTplTUQiy22958820 = -520266992;    int jXdCVLiFxULTplTUQiy26610647 = -170543206;    int jXdCVLiFxULTplTUQiy51046487 = -954205647;    int jXdCVLiFxULTplTUQiy55095918 = -257509919;    int jXdCVLiFxULTplTUQiy65531961 = -162853159;    int jXdCVLiFxULTplTUQiy61683164 = -161135522;    int jXdCVLiFxULTplTUQiy78720514 = -407764656;    int jXdCVLiFxULTplTUQiy80309784 = -982246115;     jXdCVLiFxULTplTUQiy11710871 = jXdCVLiFxULTplTUQiy72319275;     jXdCVLiFxULTplTUQiy72319275 = jXdCVLiFxULTplTUQiy59957629;     jXdCVLiFxULTplTUQiy59957629 = jXdCVLiFxULTplTUQiy14106195;     jXdCVLiFxULTplTUQiy14106195 = jXdCVLiFxULTplTUQiy42331435;     jXdCVLiFxULTplTUQiy42331435 = jXdCVLiFxULTplTUQiy40456757;     jXdCVLiFxULTplTUQiy40456757 = jXdCVLiFxULTplTUQiy28791571;     jXdCVLiFxULTplTUQiy28791571 = jXdCVLiFxULTplTUQiy29631998;     jXdCVLiFxULTplTUQiy29631998 = jXdCVLiFxULTplTUQiy61735697;     jXdCVLiFxULTplTUQiy61735697 = jXdCVLiFxULTplTUQiy32792506;     jXdCVLiFxULTplTUQiy32792506 = jXdCVLiFxULTplTUQiy33815369;     jXdCVLiFxULTplTUQiy33815369 = jXdCVLiFxULTplTUQiy11844892;     jXdCVLiFxULTplTUQiy11844892 = jXdCVLiFxULTplTUQiy61047790;     jXdCVLiFxULTplTUQiy61047790 = jXdCVLiFxULTplTUQiy84044498;     jXdCVLiFxULTplTUQiy84044498 = jXdCVLiFxULTplTUQiy52793635;     jXdCVLiFxULTplTUQiy52793635 = jXdCVLiFxULTplTUQiy58496749;     jXdCVLiFxULTplTUQiy58496749 = jXdCVLiFxULTplTUQiy98959240;     jXdCVLiFxULTplTUQiy98959240 = jXdCVLiFxULTplTUQiy986621;     jXdCVLiFxULTplTUQiy986621 = jXdCVLiFxULTplTUQiy99588792;     jXdCVLiFxULTplTUQiy99588792 = jXdCVLiFxULTplTUQiy63806375;     jXdCVLiFxULTplTUQiy63806375 = jXdCVLiFxULTplTUQiy11809292;     jXdCVLiFxULTplTUQiy11809292 = jXdCVLiFxULTplTUQiy86738644;     jXdCVLiFxULTplTUQiy86738644 = jXdCVLiFxULTplTUQiy74969086;     jXdCVLiFxULTplTUQiy74969086 = jXdCVLiFxULTplTUQiy41493536;     jXdCVLiFxULTplTUQiy41493536 = jXdCVLiFxULTplTUQiy61255212;     jXdCVLiFxULTplTUQiy61255212 = jXdCVLiFxULTplTUQiy38073373;     jXdCVLiFxULTplTUQiy38073373 = jXdCVLiFxULTplTUQiy94557321;     jXdCVLiFxULTplTUQiy94557321 = jXdCVLiFxULTplTUQiy99642979;     jXdCVLiFxULTplTUQiy99642979 = jXdCVLiFxULTplTUQiy82852715;     jXdCVLiFxULTplTUQiy82852715 = jXdCVLiFxULTplTUQiy63389289;     jXdCVLiFxULTplTUQiy63389289 = jXdCVLiFxULTplTUQiy4893009;     jXdCVLiFxULTplTUQiy4893009 = jXdCVLiFxULTplTUQiy12556779;     jXdCVLiFxULTplTUQiy12556779 = jXdCVLiFxULTplTUQiy45893786;     jXdCVLiFxULTplTUQiy45893786 = jXdCVLiFxULTplTUQiy20247838;     jXdCVLiFxULTplTUQiy20247838 = jXdCVLiFxULTplTUQiy33337647;     jXdCVLiFxULTplTUQiy33337647 = jXdCVLiFxULTplTUQiy89806000;     jXdCVLiFxULTplTUQiy89806000 = jXdCVLiFxULTplTUQiy59965367;     jXdCVLiFxULTplTUQiy59965367 = jXdCVLiFxULTplTUQiy75809801;     jXdCVLiFxULTplTUQiy75809801 = jXdCVLiFxULTplTUQiy30868709;     jXdCVLiFxULTplTUQiy30868709 = jXdCVLiFxULTplTUQiy96945923;     jXdCVLiFxULTplTUQiy96945923 = jXdCVLiFxULTplTUQiy84244510;     jXdCVLiFxULTplTUQiy84244510 = jXdCVLiFxULTplTUQiy12311243;     jXdCVLiFxULTplTUQiy12311243 = jXdCVLiFxULTplTUQiy60029572;     jXdCVLiFxULTplTUQiy60029572 = jXdCVLiFxULTplTUQiy6620012;     jXdCVLiFxULTplTUQiy6620012 = jXdCVLiFxULTplTUQiy1568375;     jXdCVLiFxULTplTUQiy1568375 = jXdCVLiFxULTplTUQiy67565095;     jXdCVLiFxULTplTUQiy67565095 = jXdCVLiFxULTplTUQiy20051449;     jXdCVLiFxULTplTUQiy20051449 = jXdCVLiFxULTplTUQiy2987790;     jXdCVLiFxULTplTUQiy2987790 = jXdCVLiFxULTplTUQiy17512660;     jXdCVLiFxULTplTUQiy17512660 = jXdCVLiFxULTplTUQiy87180141;     jXdCVLiFxULTplTUQiy87180141 = jXdCVLiFxULTplTUQiy1905222;     jXdCVLiFxULTplTUQiy1905222 = jXdCVLiFxULTplTUQiy7045667;     jXdCVLiFxULTplTUQiy7045667 = jXdCVLiFxULTplTUQiy31111547;     jXdCVLiFxULTplTUQiy31111547 = jXdCVLiFxULTplTUQiy84407685;     jXdCVLiFxULTplTUQiy84407685 = jXdCVLiFxULTplTUQiy99790148;     jXdCVLiFxULTplTUQiy99790148 = jXdCVLiFxULTplTUQiy24972226;     jXdCVLiFxULTplTUQiy24972226 = jXdCVLiFxULTplTUQiy97350189;     jXdCVLiFxULTplTUQiy97350189 = jXdCVLiFxULTplTUQiy18464094;     jXdCVLiFxULTplTUQiy18464094 = jXdCVLiFxULTplTUQiy52850982;     jXdCVLiFxULTplTUQiy52850982 = jXdCVLiFxULTplTUQiy4258063;     jXdCVLiFxULTplTUQiy4258063 = jXdCVLiFxULTplTUQiy45899436;     jXdCVLiFxULTplTUQiy45899436 = jXdCVLiFxULTplTUQiy29148592;     jXdCVLiFxULTplTUQiy29148592 = jXdCVLiFxULTplTUQiy46779282;     jXdCVLiFxULTplTUQiy46779282 = jXdCVLiFxULTplTUQiy98346408;     jXdCVLiFxULTplTUQiy98346408 = jXdCVLiFxULTplTUQiy27899497;     jXdCVLiFxULTplTUQiy27899497 = jXdCVLiFxULTplTUQiy21258590;     jXdCVLiFxULTplTUQiy21258590 = jXdCVLiFxULTplTUQiy65951105;     jXdCVLiFxULTplTUQiy65951105 = jXdCVLiFxULTplTUQiy40799953;     jXdCVLiFxULTplTUQiy40799953 = jXdCVLiFxULTplTUQiy50706851;     jXdCVLiFxULTplTUQiy50706851 = jXdCVLiFxULTplTUQiy62987634;     jXdCVLiFxULTplTUQiy62987634 = jXdCVLiFxULTplTUQiy98531382;     jXdCVLiFxULTplTUQiy98531382 = jXdCVLiFxULTplTUQiy23149439;     jXdCVLiFxULTplTUQiy23149439 = jXdCVLiFxULTplTUQiy70117912;     jXdCVLiFxULTplTUQiy70117912 = jXdCVLiFxULTplTUQiy2642870;     jXdCVLiFxULTplTUQiy2642870 = jXdCVLiFxULTplTUQiy79561865;     jXdCVLiFxULTplTUQiy79561865 = jXdCVLiFxULTplTUQiy99498048;     jXdCVLiFxULTplTUQiy99498048 = jXdCVLiFxULTplTUQiy26709072;     jXdCVLiFxULTplTUQiy26709072 = jXdCVLiFxULTplTUQiy68349075;     jXdCVLiFxULTplTUQiy68349075 = jXdCVLiFxULTplTUQiy39925162;     jXdCVLiFxULTplTUQiy39925162 = jXdCVLiFxULTplTUQiy93690117;     jXdCVLiFxULTplTUQiy93690117 = jXdCVLiFxULTplTUQiy18021924;     jXdCVLiFxULTplTUQiy18021924 = jXdCVLiFxULTplTUQiy91569532;     jXdCVLiFxULTplTUQiy91569532 = jXdCVLiFxULTplTUQiy82130319;     jXdCVLiFxULTplTUQiy82130319 = jXdCVLiFxULTplTUQiy95672574;     jXdCVLiFxULTplTUQiy95672574 = jXdCVLiFxULTplTUQiy61484067;     jXdCVLiFxULTplTUQiy61484067 = jXdCVLiFxULTplTUQiy97847342;     jXdCVLiFxULTplTUQiy97847342 = jXdCVLiFxULTplTUQiy81445232;     jXdCVLiFxULTplTUQiy81445232 = jXdCVLiFxULTplTUQiy61486101;     jXdCVLiFxULTplTUQiy61486101 = jXdCVLiFxULTplTUQiy20457689;     jXdCVLiFxULTplTUQiy20457689 = jXdCVLiFxULTplTUQiy8365422;     jXdCVLiFxULTplTUQiy8365422 = jXdCVLiFxULTplTUQiy92455811;     jXdCVLiFxULTplTUQiy92455811 = jXdCVLiFxULTplTUQiy41501274;     jXdCVLiFxULTplTUQiy41501274 = jXdCVLiFxULTplTUQiy22958820;     jXdCVLiFxULTplTUQiy22958820 = jXdCVLiFxULTplTUQiy26610647;     jXdCVLiFxULTplTUQiy26610647 = jXdCVLiFxULTplTUQiy51046487;     jXdCVLiFxULTplTUQiy51046487 = jXdCVLiFxULTplTUQiy55095918;     jXdCVLiFxULTplTUQiy55095918 = jXdCVLiFxULTplTUQiy65531961;     jXdCVLiFxULTplTUQiy65531961 = jXdCVLiFxULTplTUQiy61683164;     jXdCVLiFxULTplTUQiy61683164 = jXdCVLiFxULTplTUQiy78720514;     jXdCVLiFxULTplTUQiy78720514 = jXdCVLiFxULTplTUQiy80309784;     jXdCVLiFxULTplTUQiy80309784 = jXdCVLiFxULTplTUQiy11710871;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void eQUBRqofGINbjsjoYRQ17927988() {     int DNVaNlNAmDoCahSgLLh66365268 = -319773699;    int DNVaNlNAmDoCahSgLLh19316895 = -707798354;    int DNVaNlNAmDoCahSgLLh20690276 = -810294298;    int DNVaNlNAmDoCahSgLLh85541136 = -406327130;    int DNVaNlNAmDoCahSgLLh16783106 = -797298886;    int DNVaNlNAmDoCahSgLLh54631154 = -262837233;    int DNVaNlNAmDoCahSgLLh49892275 = -895687372;    int DNVaNlNAmDoCahSgLLh58807101 = -87412778;    int DNVaNlNAmDoCahSgLLh49510107 = -993549348;    int DNVaNlNAmDoCahSgLLh15424491 = -175588171;    int DNVaNlNAmDoCahSgLLh12426664 = -544461876;    int DNVaNlNAmDoCahSgLLh74609605 = -867411828;    int DNVaNlNAmDoCahSgLLh24865105 = 60387947;    int DNVaNlNAmDoCahSgLLh77010929 = 38665934;    int DNVaNlNAmDoCahSgLLh83017708 = 41475889;    int DNVaNlNAmDoCahSgLLh48264285 = -32530627;    int DNVaNlNAmDoCahSgLLh98791004 = -956398839;    int DNVaNlNAmDoCahSgLLh68583207 = -501390677;    int DNVaNlNAmDoCahSgLLh809394 = -880325800;    int DNVaNlNAmDoCahSgLLh81440930 = 85207551;    int DNVaNlNAmDoCahSgLLh45983679 = -30136216;    int DNVaNlNAmDoCahSgLLh37991233 = -17329058;    int DNVaNlNAmDoCahSgLLh11438918 = -262978523;    int DNVaNlNAmDoCahSgLLh42921905 = -233285085;    int DNVaNlNAmDoCahSgLLh57007828 = -597063399;    int DNVaNlNAmDoCahSgLLh79314320 = -376377596;    int DNVaNlNAmDoCahSgLLh96547245 = -452747462;    int DNVaNlNAmDoCahSgLLh52891980 = -529471944;    int DNVaNlNAmDoCahSgLLh22750393 = -812684677;    int DNVaNlNAmDoCahSgLLh57824698 = 78367448;    int DNVaNlNAmDoCahSgLLh56598538 = -75245562;    int DNVaNlNAmDoCahSgLLh43548389 = -696211543;    int DNVaNlNAmDoCahSgLLh13549663 = -570603453;    int DNVaNlNAmDoCahSgLLh14903730 = -24351667;    int DNVaNlNAmDoCahSgLLh67841804 = -205025853;    int DNVaNlNAmDoCahSgLLh77132542 = -821520895;    int DNVaNlNAmDoCahSgLLh34669855 = -418252082;    int DNVaNlNAmDoCahSgLLh88787040 = -570270785;    int DNVaNlNAmDoCahSgLLh81638357 = -204686642;    int DNVaNlNAmDoCahSgLLh20932318 = -848297461;    int DNVaNlNAmDoCahSgLLh40203911 = -442434693;    int DNVaNlNAmDoCahSgLLh48985901 = 75210011;    int DNVaNlNAmDoCahSgLLh51029755 = -217462234;    int DNVaNlNAmDoCahSgLLh15614411 = -251858187;    int DNVaNlNAmDoCahSgLLh61552438 = 78607338;    int DNVaNlNAmDoCahSgLLh22898697 = -370787956;    int DNVaNlNAmDoCahSgLLh36525161 = -334471623;    int DNVaNlNAmDoCahSgLLh26415098 = -275874874;    int DNVaNlNAmDoCahSgLLh59855426 = -455610598;    int DNVaNlNAmDoCahSgLLh32021804 = -176136870;    int DNVaNlNAmDoCahSgLLh77018760 = -568361391;    int DNVaNlNAmDoCahSgLLh96427816 = -256388205;    int DNVaNlNAmDoCahSgLLh62839550 = -466886402;    int DNVaNlNAmDoCahSgLLh41823443 = -360534523;    int DNVaNlNAmDoCahSgLLh71944308 = -950447984;    int DNVaNlNAmDoCahSgLLh28374035 = -202444641;    int DNVaNlNAmDoCahSgLLh7877978 = -344819832;    int DNVaNlNAmDoCahSgLLh77768371 = -477009214;    int DNVaNlNAmDoCahSgLLh28533308 = -809263732;    int DNVaNlNAmDoCahSgLLh37468786 = -320921290;    int DNVaNlNAmDoCahSgLLh58083908 = -810089772;    int DNVaNlNAmDoCahSgLLh97000295 = -266215428;    int DNVaNlNAmDoCahSgLLh36056709 = -274728101;    int DNVaNlNAmDoCahSgLLh91685409 = -971916797;    int DNVaNlNAmDoCahSgLLh58825953 = -342610;    int DNVaNlNAmDoCahSgLLh68878274 = -848250334;    int DNVaNlNAmDoCahSgLLh61059942 = -196808375;    int DNVaNlNAmDoCahSgLLh9961375 = -915260387;    int DNVaNlNAmDoCahSgLLh9169126 = -756308213;    int DNVaNlNAmDoCahSgLLh5885166 = -137003216;    int DNVaNlNAmDoCahSgLLh13594430 = -614278546;    int DNVaNlNAmDoCahSgLLh10003964 = -286128054;    int DNVaNlNAmDoCahSgLLh86944850 = -196704036;    int DNVaNlNAmDoCahSgLLh79877075 = 67971660;    int DNVaNlNAmDoCahSgLLh41237020 = -472357757;    int DNVaNlNAmDoCahSgLLh96997777 = -5346228;    int DNVaNlNAmDoCahSgLLh86961478 = -799866825;    int DNVaNlNAmDoCahSgLLh95824507 = 88879664;    int DNVaNlNAmDoCahSgLLh81369466 = -211892423;    int DNVaNlNAmDoCahSgLLh34109132 = -126275444;    int DNVaNlNAmDoCahSgLLh42789159 = 58094026;    int DNVaNlNAmDoCahSgLLh70132147 = -76872588;    int DNVaNlNAmDoCahSgLLh93036553 = 26138653;    int DNVaNlNAmDoCahSgLLh90728588 = -536547808;    int DNVaNlNAmDoCahSgLLh80805937 = -353271161;    int DNVaNlNAmDoCahSgLLh60170721 = -818857357;    int DNVaNlNAmDoCahSgLLh80708839 = -129325141;    int DNVaNlNAmDoCahSgLLh71726220 = -110068931;    int DNVaNlNAmDoCahSgLLh42959422 = -73903683;    int DNVaNlNAmDoCahSgLLh39467769 = 97418787;    int DNVaNlNAmDoCahSgLLh69254565 = -376701064;    int DNVaNlNAmDoCahSgLLh56901484 = -941242868;    int DNVaNlNAmDoCahSgLLh60253733 = -761007054;    int DNVaNlNAmDoCahSgLLh44169572 = -883765353;    int DNVaNlNAmDoCahSgLLh62848409 = 61792311;    int DNVaNlNAmDoCahSgLLh43203616 = -76219265;    int DNVaNlNAmDoCahSgLLh12929193 = -650061888;    int DNVaNlNAmDoCahSgLLh59344345 = -245545438;    int DNVaNlNAmDoCahSgLLh56788457 = -151515578;    int DNVaNlNAmDoCahSgLLh92674163 = -319773699;     DNVaNlNAmDoCahSgLLh66365268 = DNVaNlNAmDoCahSgLLh19316895;     DNVaNlNAmDoCahSgLLh19316895 = DNVaNlNAmDoCahSgLLh20690276;     DNVaNlNAmDoCahSgLLh20690276 = DNVaNlNAmDoCahSgLLh85541136;     DNVaNlNAmDoCahSgLLh85541136 = DNVaNlNAmDoCahSgLLh16783106;     DNVaNlNAmDoCahSgLLh16783106 = DNVaNlNAmDoCahSgLLh54631154;     DNVaNlNAmDoCahSgLLh54631154 = DNVaNlNAmDoCahSgLLh49892275;     DNVaNlNAmDoCahSgLLh49892275 = DNVaNlNAmDoCahSgLLh58807101;     DNVaNlNAmDoCahSgLLh58807101 = DNVaNlNAmDoCahSgLLh49510107;     DNVaNlNAmDoCahSgLLh49510107 = DNVaNlNAmDoCahSgLLh15424491;     DNVaNlNAmDoCahSgLLh15424491 = DNVaNlNAmDoCahSgLLh12426664;     DNVaNlNAmDoCahSgLLh12426664 = DNVaNlNAmDoCahSgLLh74609605;     DNVaNlNAmDoCahSgLLh74609605 = DNVaNlNAmDoCahSgLLh24865105;     DNVaNlNAmDoCahSgLLh24865105 = DNVaNlNAmDoCahSgLLh77010929;     DNVaNlNAmDoCahSgLLh77010929 = DNVaNlNAmDoCahSgLLh83017708;     DNVaNlNAmDoCahSgLLh83017708 = DNVaNlNAmDoCahSgLLh48264285;     DNVaNlNAmDoCahSgLLh48264285 = DNVaNlNAmDoCahSgLLh98791004;     DNVaNlNAmDoCahSgLLh98791004 = DNVaNlNAmDoCahSgLLh68583207;     DNVaNlNAmDoCahSgLLh68583207 = DNVaNlNAmDoCahSgLLh809394;     DNVaNlNAmDoCahSgLLh809394 = DNVaNlNAmDoCahSgLLh81440930;     DNVaNlNAmDoCahSgLLh81440930 = DNVaNlNAmDoCahSgLLh45983679;     DNVaNlNAmDoCahSgLLh45983679 = DNVaNlNAmDoCahSgLLh37991233;     DNVaNlNAmDoCahSgLLh37991233 = DNVaNlNAmDoCahSgLLh11438918;     DNVaNlNAmDoCahSgLLh11438918 = DNVaNlNAmDoCahSgLLh42921905;     DNVaNlNAmDoCahSgLLh42921905 = DNVaNlNAmDoCahSgLLh57007828;     DNVaNlNAmDoCahSgLLh57007828 = DNVaNlNAmDoCahSgLLh79314320;     DNVaNlNAmDoCahSgLLh79314320 = DNVaNlNAmDoCahSgLLh96547245;     DNVaNlNAmDoCahSgLLh96547245 = DNVaNlNAmDoCahSgLLh52891980;     DNVaNlNAmDoCahSgLLh52891980 = DNVaNlNAmDoCahSgLLh22750393;     DNVaNlNAmDoCahSgLLh22750393 = DNVaNlNAmDoCahSgLLh57824698;     DNVaNlNAmDoCahSgLLh57824698 = DNVaNlNAmDoCahSgLLh56598538;     DNVaNlNAmDoCahSgLLh56598538 = DNVaNlNAmDoCahSgLLh43548389;     DNVaNlNAmDoCahSgLLh43548389 = DNVaNlNAmDoCahSgLLh13549663;     DNVaNlNAmDoCahSgLLh13549663 = DNVaNlNAmDoCahSgLLh14903730;     DNVaNlNAmDoCahSgLLh14903730 = DNVaNlNAmDoCahSgLLh67841804;     DNVaNlNAmDoCahSgLLh67841804 = DNVaNlNAmDoCahSgLLh77132542;     DNVaNlNAmDoCahSgLLh77132542 = DNVaNlNAmDoCahSgLLh34669855;     DNVaNlNAmDoCahSgLLh34669855 = DNVaNlNAmDoCahSgLLh88787040;     DNVaNlNAmDoCahSgLLh88787040 = DNVaNlNAmDoCahSgLLh81638357;     DNVaNlNAmDoCahSgLLh81638357 = DNVaNlNAmDoCahSgLLh20932318;     DNVaNlNAmDoCahSgLLh20932318 = DNVaNlNAmDoCahSgLLh40203911;     DNVaNlNAmDoCahSgLLh40203911 = DNVaNlNAmDoCahSgLLh48985901;     DNVaNlNAmDoCahSgLLh48985901 = DNVaNlNAmDoCahSgLLh51029755;     DNVaNlNAmDoCahSgLLh51029755 = DNVaNlNAmDoCahSgLLh15614411;     DNVaNlNAmDoCahSgLLh15614411 = DNVaNlNAmDoCahSgLLh61552438;     DNVaNlNAmDoCahSgLLh61552438 = DNVaNlNAmDoCahSgLLh22898697;     DNVaNlNAmDoCahSgLLh22898697 = DNVaNlNAmDoCahSgLLh36525161;     DNVaNlNAmDoCahSgLLh36525161 = DNVaNlNAmDoCahSgLLh26415098;     DNVaNlNAmDoCahSgLLh26415098 = DNVaNlNAmDoCahSgLLh59855426;     DNVaNlNAmDoCahSgLLh59855426 = DNVaNlNAmDoCahSgLLh32021804;     DNVaNlNAmDoCahSgLLh32021804 = DNVaNlNAmDoCahSgLLh77018760;     DNVaNlNAmDoCahSgLLh77018760 = DNVaNlNAmDoCahSgLLh96427816;     DNVaNlNAmDoCahSgLLh96427816 = DNVaNlNAmDoCahSgLLh62839550;     DNVaNlNAmDoCahSgLLh62839550 = DNVaNlNAmDoCahSgLLh41823443;     DNVaNlNAmDoCahSgLLh41823443 = DNVaNlNAmDoCahSgLLh71944308;     DNVaNlNAmDoCahSgLLh71944308 = DNVaNlNAmDoCahSgLLh28374035;     DNVaNlNAmDoCahSgLLh28374035 = DNVaNlNAmDoCahSgLLh7877978;     DNVaNlNAmDoCahSgLLh7877978 = DNVaNlNAmDoCahSgLLh77768371;     DNVaNlNAmDoCahSgLLh77768371 = DNVaNlNAmDoCahSgLLh28533308;     DNVaNlNAmDoCahSgLLh28533308 = DNVaNlNAmDoCahSgLLh37468786;     DNVaNlNAmDoCahSgLLh37468786 = DNVaNlNAmDoCahSgLLh58083908;     DNVaNlNAmDoCahSgLLh58083908 = DNVaNlNAmDoCahSgLLh97000295;     DNVaNlNAmDoCahSgLLh97000295 = DNVaNlNAmDoCahSgLLh36056709;     DNVaNlNAmDoCahSgLLh36056709 = DNVaNlNAmDoCahSgLLh91685409;     DNVaNlNAmDoCahSgLLh91685409 = DNVaNlNAmDoCahSgLLh58825953;     DNVaNlNAmDoCahSgLLh58825953 = DNVaNlNAmDoCahSgLLh68878274;     DNVaNlNAmDoCahSgLLh68878274 = DNVaNlNAmDoCahSgLLh61059942;     DNVaNlNAmDoCahSgLLh61059942 = DNVaNlNAmDoCahSgLLh9961375;     DNVaNlNAmDoCahSgLLh9961375 = DNVaNlNAmDoCahSgLLh9169126;     DNVaNlNAmDoCahSgLLh9169126 = DNVaNlNAmDoCahSgLLh5885166;     DNVaNlNAmDoCahSgLLh5885166 = DNVaNlNAmDoCahSgLLh13594430;     DNVaNlNAmDoCahSgLLh13594430 = DNVaNlNAmDoCahSgLLh10003964;     DNVaNlNAmDoCahSgLLh10003964 = DNVaNlNAmDoCahSgLLh86944850;     DNVaNlNAmDoCahSgLLh86944850 = DNVaNlNAmDoCahSgLLh79877075;     DNVaNlNAmDoCahSgLLh79877075 = DNVaNlNAmDoCahSgLLh41237020;     DNVaNlNAmDoCahSgLLh41237020 = DNVaNlNAmDoCahSgLLh96997777;     DNVaNlNAmDoCahSgLLh96997777 = DNVaNlNAmDoCahSgLLh86961478;     DNVaNlNAmDoCahSgLLh86961478 = DNVaNlNAmDoCahSgLLh95824507;     DNVaNlNAmDoCahSgLLh95824507 = DNVaNlNAmDoCahSgLLh81369466;     DNVaNlNAmDoCahSgLLh81369466 = DNVaNlNAmDoCahSgLLh34109132;     DNVaNlNAmDoCahSgLLh34109132 = DNVaNlNAmDoCahSgLLh42789159;     DNVaNlNAmDoCahSgLLh42789159 = DNVaNlNAmDoCahSgLLh70132147;     DNVaNlNAmDoCahSgLLh70132147 = DNVaNlNAmDoCahSgLLh93036553;     DNVaNlNAmDoCahSgLLh93036553 = DNVaNlNAmDoCahSgLLh90728588;     DNVaNlNAmDoCahSgLLh90728588 = DNVaNlNAmDoCahSgLLh80805937;     DNVaNlNAmDoCahSgLLh80805937 = DNVaNlNAmDoCahSgLLh60170721;     DNVaNlNAmDoCahSgLLh60170721 = DNVaNlNAmDoCahSgLLh80708839;     DNVaNlNAmDoCahSgLLh80708839 = DNVaNlNAmDoCahSgLLh71726220;     DNVaNlNAmDoCahSgLLh71726220 = DNVaNlNAmDoCahSgLLh42959422;     DNVaNlNAmDoCahSgLLh42959422 = DNVaNlNAmDoCahSgLLh39467769;     DNVaNlNAmDoCahSgLLh39467769 = DNVaNlNAmDoCahSgLLh69254565;     DNVaNlNAmDoCahSgLLh69254565 = DNVaNlNAmDoCahSgLLh56901484;     DNVaNlNAmDoCahSgLLh56901484 = DNVaNlNAmDoCahSgLLh60253733;     DNVaNlNAmDoCahSgLLh60253733 = DNVaNlNAmDoCahSgLLh44169572;     DNVaNlNAmDoCahSgLLh44169572 = DNVaNlNAmDoCahSgLLh62848409;     DNVaNlNAmDoCahSgLLh62848409 = DNVaNlNAmDoCahSgLLh43203616;     DNVaNlNAmDoCahSgLLh43203616 = DNVaNlNAmDoCahSgLLh12929193;     DNVaNlNAmDoCahSgLLh12929193 = DNVaNlNAmDoCahSgLLh59344345;     DNVaNlNAmDoCahSgLLh59344345 = DNVaNlNAmDoCahSgLLh56788457;     DNVaNlNAmDoCahSgLLh56788457 = DNVaNlNAmDoCahSgLLh92674163;     DNVaNlNAmDoCahSgLLh92674163 = DNVaNlNAmDoCahSgLLh66365268;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void rbMFYQLHNilumMWyZsO24256535() {     int cCNRKcxKxUwnPqjVmpW21019666 = -757301283;    int cCNRKcxKxUwnPqjVmpW66314514 = -187363168;    int cCNRKcxKxUwnPqjVmpW81422922 = -95678912;    int cCNRKcxKxUwnPqjVmpW56976077 = -412429541;    int cCNRKcxKxUwnPqjVmpW91234776 = -469734125;    int cCNRKcxKxUwnPqjVmpW68805551 = -391988069;    int cCNRKcxKxUwnPqjVmpW70992978 = -97580044;    int cCNRKcxKxUwnPqjVmpW87982204 = -587981011;    int cCNRKcxKxUwnPqjVmpW37284518 = 59597281;    int cCNRKcxKxUwnPqjVmpW98056476 = -454389441;    int cCNRKcxKxUwnPqjVmpW91037958 = -69818448;    int cCNRKcxKxUwnPqjVmpW37374318 = 46164084;    int cCNRKcxKxUwnPqjVmpW88682419 = -843152358;    int cCNRKcxKxUwnPqjVmpW69977360 = -673437644;    int cCNRKcxKxUwnPqjVmpW13241782 = -965645742;    int cCNRKcxKxUwnPqjVmpW38031821 = -762690192;    int cCNRKcxKxUwnPqjVmpW98622767 = -329998667;    int cCNRKcxKxUwnPqjVmpW36179795 = -564955144;    int cCNRKcxKxUwnPqjVmpW2029994 = -66137348;    int cCNRKcxKxUwnPqjVmpW99075486 = -260158595;    int cCNRKcxKxUwnPqjVmpW80158067 = -598219367;    int cCNRKcxKxUwnPqjVmpW89243822 = -183773166;    int cCNRKcxKxUwnPqjVmpW47908749 = -849721944;    int cCNRKcxKxUwnPqjVmpW44350274 = 67674099;    int cCNRKcxKxUwnPqjVmpW52760444 = -969976851;    int cCNRKcxKxUwnPqjVmpW20555267 = -380086381;    int cCNRKcxKxUwnPqjVmpW98537169 = 92408260;    int cCNRKcxKxUwnPqjVmpW6140980 = -537523805;    int cCNRKcxKxUwnPqjVmpW62648069 = -92929553;    int cCNRKcxKxUwnPqjVmpW52260107 = -212390520;    int cCNRKcxKxUwnPqjVmpW8304067 = -624118088;    int cCNRKcxKxUwnPqjVmpW74540000 = -7708071;    int cCNRKcxKxUwnPqjVmpW81205539 = -27121067;    int cCNRKcxKxUwnPqjVmpW9559623 = -804472476;    int cCNRKcxKxUwnPqjVmpW2345961 = -422889113;    int cCNRKcxKxUwnPqjVmpW64459084 = 30483509;    int cCNRKcxKxUwnPqjVmpW9374343 = -268678702;    int cCNRKcxKxUwnPqjVmpW1764280 = -444199806;    int cCNRKcxKxUwnPqjVmpW32408007 = -586635244;    int cCNRKcxKxUwnPqjVmpW44918713 = -506606060;    int cCNRKcxKxUwnPqjVmpW96163311 = -554984851;    int cCNRKcxKxUwnPqjVmpW85660559 = -532322076;    int cCNRKcxKxUwnPqjVmpW42029938 = -57967552;    int cCNRKcxKxUwnPqjVmpW24608810 = -825537853;    int cCNRKcxKxUwnPqjVmpW21536502 = -53910260;    int cCNRKcxKxUwnPqjVmpW78232298 = -439577570;    int cCNRKcxKxUwnPqjVmpW52998872 = -361529006;    int cCNRKcxKxUwnPqjVmpW49842407 = -253527246;    int cCNRKcxKxUwnPqjVmpW2198194 = -355340787;    int cCNRKcxKxUwnPqjVmpW76863466 = -416156164;    int cCNRKcxKxUwnPqjVmpW52132300 = -225576893;    int cCNRKcxKxUwnPqjVmpW85809965 = -771454188;    int cCNRKcxKxUwnPqjVmpW94567553 = -206801860;    int cCNRKcxKxUwnPqjVmpW99239200 = -256421007;    int cCNRKcxKxUwnPqjVmpW44098467 = -246356666;    int cCNRKcxKxUwnPqjVmpW31775843 = -473528117;    int cCNRKcxKxUwnPqjVmpW18405765 = -337641225;    int cCNRKcxKxUwnPqjVmpW37072649 = -63353011;    int cCNRKcxKxUwnPqjVmpW4215633 = -442452691;    int cCNRKcxKxUwnPqjVmpW70679509 = 10352255;    int cCNRKcxKxUwnPqjVmpW70268381 = -384396329;    int cCNRKcxKxUwnPqjVmpW64851999 = -560056240;    int cCNRKcxKxUwnPqjVmpW25334136 = -395051458;    int cCNRKcxKxUwnPqjVmpW85024411 = -728012199;    int cCNRKcxKxUwnPqjVmpW89752410 = -830271354;    int cCNRKcxKxUwnPqjVmpW16497959 = 37889622;    int cCNRKcxKxUwnPqjVmpW56168779 = -926714850;    int cCNRKcxKxUwnPqjVmpW79122796 = 61320118;    int cCNRKcxKxUwnPqjVmpW67631399 = -150548531;    int cCNRKcxKxUwnPqjVmpW48782697 = -896129251;    int cCNRKcxKxUwnPqjVmpW28657478 = -394011490;    int cCNRKcxKxUwnPqjVmpW96858488 = -885798862;    int cCNRKcxKxUwnPqjVmpW3771788 = -978319901;    int cCNRKcxKxUwnPqjVmpW57111281 = -559531288;    int cCNRKcxKxUwnPqjVmpW2912175 = -705173745;    int cCNRKcxKxUwnPqjVmpW94497507 = 34102708;    int cCNRKcxKxUwnPqjVmpW47213884 = -25805615;    int cCNRKcxKxUwnPqjVmpW23299940 = 75815909;    int cCNRKcxKxUwnPqjVmpW22813772 = -878415642;    int cCNRKcxKxUwnPqjVmpW74528146 = -430399281;    int cCNRKcxKxUwnPqjVmpW67556395 = 81442625;    int cCNRKcxKxUwnPqjVmpW48694762 = -654064495;    int cCNRKcxKxUwnPqjVmpW3942787 = -82183018;    int cCNRKcxKxUwnPqjVmpW85784603 = -676773389;    int cCNRKcxKxUwnPqjVmpW127807 = -986813627;    int cCNRKcxKxUwnPqjVmpW22494101 = -852663900;    int cCNRKcxKxUwnPqjVmpW79972446 = -800906212;    int cCNRKcxKxUwnPqjVmpW81966339 = -770700060;    int cCNRKcxKxUwnPqjVmpW65461155 = -458115811;    int cCNRKcxKxUwnPqjVmpW70570117 = -949360996;    int cCNRKcxKxUwnPqjVmpW46053320 = -631875267;    int cCNRKcxKxUwnPqjVmpW72301694 = -105325692;    int cCNRKcxKxUwnPqjVmpW97548646 = 98252884;    int cCNRKcxKxUwnPqjVmpW61728497 = -496987500;    int cCNRKcxKxUwnPqjVmpW74650331 = -22209731;    int cCNRKcxKxUwnPqjVmpW31311313 = -994928611;    int cCNRKcxKxUwnPqjVmpW60326424 = -37270618;    int cCNRKcxKxUwnPqjVmpW57005527 = -329955353;    int cCNRKcxKxUwnPqjVmpW34856400 = -995266500;    int cCNRKcxKxUwnPqjVmpW5038543 = -757301283;     cCNRKcxKxUwnPqjVmpW21019666 = cCNRKcxKxUwnPqjVmpW66314514;     cCNRKcxKxUwnPqjVmpW66314514 = cCNRKcxKxUwnPqjVmpW81422922;     cCNRKcxKxUwnPqjVmpW81422922 = cCNRKcxKxUwnPqjVmpW56976077;     cCNRKcxKxUwnPqjVmpW56976077 = cCNRKcxKxUwnPqjVmpW91234776;     cCNRKcxKxUwnPqjVmpW91234776 = cCNRKcxKxUwnPqjVmpW68805551;     cCNRKcxKxUwnPqjVmpW68805551 = cCNRKcxKxUwnPqjVmpW70992978;     cCNRKcxKxUwnPqjVmpW70992978 = cCNRKcxKxUwnPqjVmpW87982204;     cCNRKcxKxUwnPqjVmpW87982204 = cCNRKcxKxUwnPqjVmpW37284518;     cCNRKcxKxUwnPqjVmpW37284518 = cCNRKcxKxUwnPqjVmpW98056476;     cCNRKcxKxUwnPqjVmpW98056476 = cCNRKcxKxUwnPqjVmpW91037958;     cCNRKcxKxUwnPqjVmpW91037958 = cCNRKcxKxUwnPqjVmpW37374318;     cCNRKcxKxUwnPqjVmpW37374318 = cCNRKcxKxUwnPqjVmpW88682419;     cCNRKcxKxUwnPqjVmpW88682419 = cCNRKcxKxUwnPqjVmpW69977360;     cCNRKcxKxUwnPqjVmpW69977360 = cCNRKcxKxUwnPqjVmpW13241782;     cCNRKcxKxUwnPqjVmpW13241782 = cCNRKcxKxUwnPqjVmpW38031821;     cCNRKcxKxUwnPqjVmpW38031821 = cCNRKcxKxUwnPqjVmpW98622767;     cCNRKcxKxUwnPqjVmpW98622767 = cCNRKcxKxUwnPqjVmpW36179795;     cCNRKcxKxUwnPqjVmpW36179795 = cCNRKcxKxUwnPqjVmpW2029994;     cCNRKcxKxUwnPqjVmpW2029994 = cCNRKcxKxUwnPqjVmpW99075486;     cCNRKcxKxUwnPqjVmpW99075486 = cCNRKcxKxUwnPqjVmpW80158067;     cCNRKcxKxUwnPqjVmpW80158067 = cCNRKcxKxUwnPqjVmpW89243822;     cCNRKcxKxUwnPqjVmpW89243822 = cCNRKcxKxUwnPqjVmpW47908749;     cCNRKcxKxUwnPqjVmpW47908749 = cCNRKcxKxUwnPqjVmpW44350274;     cCNRKcxKxUwnPqjVmpW44350274 = cCNRKcxKxUwnPqjVmpW52760444;     cCNRKcxKxUwnPqjVmpW52760444 = cCNRKcxKxUwnPqjVmpW20555267;     cCNRKcxKxUwnPqjVmpW20555267 = cCNRKcxKxUwnPqjVmpW98537169;     cCNRKcxKxUwnPqjVmpW98537169 = cCNRKcxKxUwnPqjVmpW6140980;     cCNRKcxKxUwnPqjVmpW6140980 = cCNRKcxKxUwnPqjVmpW62648069;     cCNRKcxKxUwnPqjVmpW62648069 = cCNRKcxKxUwnPqjVmpW52260107;     cCNRKcxKxUwnPqjVmpW52260107 = cCNRKcxKxUwnPqjVmpW8304067;     cCNRKcxKxUwnPqjVmpW8304067 = cCNRKcxKxUwnPqjVmpW74540000;     cCNRKcxKxUwnPqjVmpW74540000 = cCNRKcxKxUwnPqjVmpW81205539;     cCNRKcxKxUwnPqjVmpW81205539 = cCNRKcxKxUwnPqjVmpW9559623;     cCNRKcxKxUwnPqjVmpW9559623 = cCNRKcxKxUwnPqjVmpW2345961;     cCNRKcxKxUwnPqjVmpW2345961 = cCNRKcxKxUwnPqjVmpW64459084;     cCNRKcxKxUwnPqjVmpW64459084 = cCNRKcxKxUwnPqjVmpW9374343;     cCNRKcxKxUwnPqjVmpW9374343 = cCNRKcxKxUwnPqjVmpW1764280;     cCNRKcxKxUwnPqjVmpW1764280 = cCNRKcxKxUwnPqjVmpW32408007;     cCNRKcxKxUwnPqjVmpW32408007 = cCNRKcxKxUwnPqjVmpW44918713;     cCNRKcxKxUwnPqjVmpW44918713 = cCNRKcxKxUwnPqjVmpW96163311;     cCNRKcxKxUwnPqjVmpW96163311 = cCNRKcxKxUwnPqjVmpW85660559;     cCNRKcxKxUwnPqjVmpW85660559 = cCNRKcxKxUwnPqjVmpW42029938;     cCNRKcxKxUwnPqjVmpW42029938 = cCNRKcxKxUwnPqjVmpW24608810;     cCNRKcxKxUwnPqjVmpW24608810 = cCNRKcxKxUwnPqjVmpW21536502;     cCNRKcxKxUwnPqjVmpW21536502 = cCNRKcxKxUwnPqjVmpW78232298;     cCNRKcxKxUwnPqjVmpW78232298 = cCNRKcxKxUwnPqjVmpW52998872;     cCNRKcxKxUwnPqjVmpW52998872 = cCNRKcxKxUwnPqjVmpW49842407;     cCNRKcxKxUwnPqjVmpW49842407 = cCNRKcxKxUwnPqjVmpW2198194;     cCNRKcxKxUwnPqjVmpW2198194 = cCNRKcxKxUwnPqjVmpW76863466;     cCNRKcxKxUwnPqjVmpW76863466 = cCNRKcxKxUwnPqjVmpW52132300;     cCNRKcxKxUwnPqjVmpW52132300 = cCNRKcxKxUwnPqjVmpW85809965;     cCNRKcxKxUwnPqjVmpW85809965 = cCNRKcxKxUwnPqjVmpW94567553;     cCNRKcxKxUwnPqjVmpW94567553 = cCNRKcxKxUwnPqjVmpW99239200;     cCNRKcxKxUwnPqjVmpW99239200 = cCNRKcxKxUwnPqjVmpW44098467;     cCNRKcxKxUwnPqjVmpW44098467 = cCNRKcxKxUwnPqjVmpW31775843;     cCNRKcxKxUwnPqjVmpW31775843 = cCNRKcxKxUwnPqjVmpW18405765;     cCNRKcxKxUwnPqjVmpW18405765 = cCNRKcxKxUwnPqjVmpW37072649;     cCNRKcxKxUwnPqjVmpW37072649 = cCNRKcxKxUwnPqjVmpW4215633;     cCNRKcxKxUwnPqjVmpW4215633 = cCNRKcxKxUwnPqjVmpW70679509;     cCNRKcxKxUwnPqjVmpW70679509 = cCNRKcxKxUwnPqjVmpW70268381;     cCNRKcxKxUwnPqjVmpW70268381 = cCNRKcxKxUwnPqjVmpW64851999;     cCNRKcxKxUwnPqjVmpW64851999 = cCNRKcxKxUwnPqjVmpW25334136;     cCNRKcxKxUwnPqjVmpW25334136 = cCNRKcxKxUwnPqjVmpW85024411;     cCNRKcxKxUwnPqjVmpW85024411 = cCNRKcxKxUwnPqjVmpW89752410;     cCNRKcxKxUwnPqjVmpW89752410 = cCNRKcxKxUwnPqjVmpW16497959;     cCNRKcxKxUwnPqjVmpW16497959 = cCNRKcxKxUwnPqjVmpW56168779;     cCNRKcxKxUwnPqjVmpW56168779 = cCNRKcxKxUwnPqjVmpW79122796;     cCNRKcxKxUwnPqjVmpW79122796 = cCNRKcxKxUwnPqjVmpW67631399;     cCNRKcxKxUwnPqjVmpW67631399 = cCNRKcxKxUwnPqjVmpW48782697;     cCNRKcxKxUwnPqjVmpW48782697 = cCNRKcxKxUwnPqjVmpW28657478;     cCNRKcxKxUwnPqjVmpW28657478 = cCNRKcxKxUwnPqjVmpW96858488;     cCNRKcxKxUwnPqjVmpW96858488 = cCNRKcxKxUwnPqjVmpW3771788;     cCNRKcxKxUwnPqjVmpW3771788 = cCNRKcxKxUwnPqjVmpW57111281;     cCNRKcxKxUwnPqjVmpW57111281 = cCNRKcxKxUwnPqjVmpW2912175;     cCNRKcxKxUwnPqjVmpW2912175 = cCNRKcxKxUwnPqjVmpW94497507;     cCNRKcxKxUwnPqjVmpW94497507 = cCNRKcxKxUwnPqjVmpW47213884;     cCNRKcxKxUwnPqjVmpW47213884 = cCNRKcxKxUwnPqjVmpW23299940;     cCNRKcxKxUwnPqjVmpW23299940 = cCNRKcxKxUwnPqjVmpW22813772;     cCNRKcxKxUwnPqjVmpW22813772 = cCNRKcxKxUwnPqjVmpW74528146;     cCNRKcxKxUwnPqjVmpW74528146 = cCNRKcxKxUwnPqjVmpW67556395;     cCNRKcxKxUwnPqjVmpW67556395 = cCNRKcxKxUwnPqjVmpW48694762;     cCNRKcxKxUwnPqjVmpW48694762 = cCNRKcxKxUwnPqjVmpW3942787;     cCNRKcxKxUwnPqjVmpW3942787 = cCNRKcxKxUwnPqjVmpW85784603;     cCNRKcxKxUwnPqjVmpW85784603 = cCNRKcxKxUwnPqjVmpW127807;     cCNRKcxKxUwnPqjVmpW127807 = cCNRKcxKxUwnPqjVmpW22494101;     cCNRKcxKxUwnPqjVmpW22494101 = cCNRKcxKxUwnPqjVmpW79972446;     cCNRKcxKxUwnPqjVmpW79972446 = cCNRKcxKxUwnPqjVmpW81966339;     cCNRKcxKxUwnPqjVmpW81966339 = cCNRKcxKxUwnPqjVmpW65461155;     cCNRKcxKxUwnPqjVmpW65461155 = cCNRKcxKxUwnPqjVmpW70570117;     cCNRKcxKxUwnPqjVmpW70570117 = cCNRKcxKxUwnPqjVmpW46053320;     cCNRKcxKxUwnPqjVmpW46053320 = cCNRKcxKxUwnPqjVmpW72301694;     cCNRKcxKxUwnPqjVmpW72301694 = cCNRKcxKxUwnPqjVmpW97548646;     cCNRKcxKxUwnPqjVmpW97548646 = cCNRKcxKxUwnPqjVmpW61728497;     cCNRKcxKxUwnPqjVmpW61728497 = cCNRKcxKxUwnPqjVmpW74650331;     cCNRKcxKxUwnPqjVmpW74650331 = cCNRKcxKxUwnPqjVmpW31311313;     cCNRKcxKxUwnPqjVmpW31311313 = cCNRKcxKxUwnPqjVmpW60326424;     cCNRKcxKxUwnPqjVmpW60326424 = cCNRKcxKxUwnPqjVmpW57005527;     cCNRKcxKxUwnPqjVmpW57005527 = cCNRKcxKxUwnPqjVmpW34856400;     cCNRKcxKxUwnPqjVmpW34856400 = cCNRKcxKxUwnPqjVmpW5038543;     cCNRKcxKxUwnPqjVmpW5038543 = cCNRKcxKxUwnPqjVmpW21019666;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void MEVQDdHNkyhlsuXlbYu30585082() {     int yCGupdmssVjVIjRJlRP75674063 = -94828866;    int yCGupdmssVjVIjRJlRP13312134 = -766927982;    int yCGupdmssVjVIjRJlRP42155569 = -481063525;    int yCGupdmssVjVIjRJlRP28411019 = -418531952;    int yCGupdmssVjVIjRJlRP65686447 = -142169364;    int yCGupdmssVjVIjRJlRP82979948 = -521138905;    int yCGupdmssVjVIjRJlRP92093682 = -399472717;    int yCGupdmssVjVIjRJlRP17157309 = 11450757;    int yCGupdmssVjVIjRJlRP25058929 = 12743911;    int yCGupdmssVjVIjRJlRP80688461 = -733190710;    int yCGupdmssVjVIjRJlRP69649253 = -695175020;    int yCGupdmssVjVIjRJlRP139032 = -140260005;    int yCGupdmssVjVIjRJlRP52499734 = -646692662;    int yCGupdmssVjVIjRJlRP62943791 = -285541222;    int yCGupdmssVjVIjRJlRP43465855 = -872767374;    int yCGupdmssVjVIjRJlRP27799357 = -392849756;    int yCGupdmssVjVIjRJlRP98454531 = -803598496;    int yCGupdmssVjVIjRJlRP3776382 = -628519612;    int yCGupdmssVjVIjRJlRP3250595 = -351948896;    int yCGupdmssVjVIjRJlRP16710042 = -605524742;    int yCGupdmssVjVIjRJlRP14332455 = -66302518;    int yCGupdmssVjVIjRJlRP40496411 = -350217274;    int yCGupdmssVjVIjRJlRP84378580 = -336465365;    int yCGupdmssVjVIjRJlRP45778642 = -731366718;    int yCGupdmssVjVIjRJlRP48513060 = -242890303;    int yCGupdmssVjVIjRJlRP61796214 = -383795166;    int yCGupdmssVjVIjRJlRP527094 = -462436019;    int yCGupdmssVjVIjRJlRP59389980 = -545575665;    int yCGupdmssVjVIjRJlRP2545747 = -473174428;    int yCGupdmssVjVIjRJlRP46695516 = -503148488;    int yCGupdmssVjVIjRJlRP60009595 = -72990613;    int yCGupdmssVjVIjRJlRP5531611 = -419204599;    int yCGupdmssVjVIjRJlRP48861416 = -583638681;    int yCGupdmssVjVIjRJlRP4215516 = -484593286;    int yCGupdmssVjVIjRJlRP36850118 = -640752372;    int yCGupdmssVjVIjRJlRP51785627 = -217512088;    int yCGupdmssVjVIjRJlRP84078830 = -119105323;    int yCGupdmssVjVIjRJlRP14741519 = -318128827;    int yCGupdmssVjVIjRJlRP83177655 = -968583845;    int yCGupdmssVjVIjRJlRP68905107 = -164914659;    int yCGupdmssVjVIjRJlRP52122712 = -667535009;    int yCGupdmssVjVIjRJlRP22335218 = -39854162;    int yCGupdmssVjVIjRJlRP33030121 = -998472870;    int yCGupdmssVjVIjRJlRP33603209 = -299217519;    int yCGupdmssVjVIjRJlRP81520565 = -186427858;    int yCGupdmssVjVIjRJlRP33565900 = -508367185;    int yCGupdmssVjVIjRJlRP69472584 = -388586390;    int yCGupdmssVjVIjRJlRP73269716 = -231179618;    int yCGupdmssVjVIjRJlRP44540960 = -255070975;    int yCGupdmssVjVIjRJlRP21705129 = -656175458;    int yCGupdmssVjVIjRJlRP27245840 = -982792395;    int yCGupdmssVjVIjRJlRP75192115 = -186520171;    int yCGupdmssVjVIjRJlRP26295556 = 53282683;    int yCGupdmssVjVIjRJlRP56654958 = -152307492;    int yCGupdmssVjVIjRJlRP16252627 = -642265347;    int yCGupdmssVjVIjRJlRP35177652 = -744611593;    int yCGupdmssVjVIjRJlRP28933553 = -330462618;    int yCGupdmssVjVIjRJlRP96376926 = -749696808;    int yCGupdmssVjVIjRJlRP79897958 = -75641650;    int yCGupdmssVjVIjRJlRP3890233 = -758374199;    int yCGupdmssVjVIjRJlRP82452854 = 41297113;    int yCGupdmssVjVIjRJlRP32703703 = -853897052;    int yCGupdmssVjVIjRJlRP14611562 = -515374816;    int yCGupdmssVjVIjRJlRP78363413 = -484107602;    int yCGupdmssVjVIjRJlRP20678867 = -560200097;    int yCGupdmssVjVIjRJlRP64117643 = -175970422;    int yCGupdmssVjVIjRJlRP51277615 = -556621325;    int yCGupdmssVjVIjRJlRP48284219 = -62099376;    int yCGupdmssVjVIjRJlRP26093673 = -644788850;    int yCGupdmssVjVIjRJlRP91680228 = -555255286;    int yCGupdmssVjVIjRJlRP43720526 = -173744433;    int yCGupdmssVjVIjRJlRP83713013 = -385469669;    int yCGupdmssVjVIjRJlRP20598726 = -659935767;    int yCGupdmssVjVIjRJlRP34345487 = -87034237;    int yCGupdmssVjVIjRJlRP64587329 = -937989733;    int yCGupdmssVjVIjRJlRP91997236 = 73551644;    int yCGupdmssVjVIjRJlRP7466290 = -351744405;    int yCGupdmssVjVIjRJlRP50775372 = 62752154;    int yCGupdmssVjVIjRJlRP64258077 = -444938860;    int yCGupdmssVjVIjRJlRP14947161 = -734523118;    int yCGupdmssVjVIjRJlRP92323630 = -995208776;    int yCGupdmssVjVIjRJlRP27257378 = -131256402;    int yCGupdmssVjVIjRJlRP14849021 = -190504690;    int yCGupdmssVjVIjRJlRP80840617 = -816998970;    int yCGupdmssVjVIjRJlRP19449676 = -520356093;    int yCGupdmssVjVIjRJlRP84817479 = -886470443;    int yCGupdmssVjVIjRJlRP79236054 = -372487283;    int yCGupdmssVjVIjRJlRP92206458 = -331331190;    int yCGupdmssVjVIjRJlRP87962888 = -842327940;    int yCGupdmssVjVIjRJlRP1672466 = -896140780;    int yCGupdmssVjVIjRJlRP22852074 = -887049471;    int yCGupdmssVjVIjRJlRP87701904 = -369408515;    int yCGupdmssVjVIjRJlRP34843560 = -142487177;    int yCGupdmssVjVIjRJlRP79287423 = -110209647;    int yCGupdmssVjVIjRJlRP86452253 = -106211773;    int yCGupdmssVjVIjRJlRP19419010 = -813637957;    int yCGupdmssVjVIjRJlRP7723657 = -524479347;    int yCGupdmssVjVIjRJlRP54666708 = -414365269;    int yCGupdmssVjVIjRJlRP12924343 = -739017422;    int yCGupdmssVjVIjRJlRP17402922 = -94828866;     yCGupdmssVjVIjRJlRP75674063 = yCGupdmssVjVIjRJlRP13312134;     yCGupdmssVjVIjRJlRP13312134 = yCGupdmssVjVIjRJlRP42155569;     yCGupdmssVjVIjRJlRP42155569 = yCGupdmssVjVIjRJlRP28411019;     yCGupdmssVjVIjRJlRP28411019 = yCGupdmssVjVIjRJlRP65686447;     yCGupdmssVjVIjRJlRP65686447 = yCGupdmssVjVIjRJlRP82979948;     yCGupdmssVjVIjRJlRP82979948 = yCGupdmssVjVIjRJlRP92093682;     yCGupdmssVjVIjRJlRP92093682 = yCGupdmssVjVIjRJlRP17157309;     yCGupdmssVjVIjRJlRP17157309 = yCGupdmssVjVIjRJlRP25058929;     yCGupdmssVjVIjRJlRP25058929 = yCGupdmssVjVIjRJlRP80688461;     yCGupdmssVjVIjRJlRP80688461 = yCGupdmssVjVIjRJlRP69649253;     yCGupdmssVjVIjRJlRP69649253 = yCGupdmssVjVIjRJlRP139032;     yCGupdmssVjVIjRJlRP139032 = yCGupdmssVjVIjRJlRP52499734;     yCGupdmssVjVIjRJlRP52499734 = yCGupdmssVjVIjRJlRP62943791;     yCGupdmssVjVIjRJlRP62943791 = yCGupdmssVjVIjRJlRP43465855;     yCGupdmssVjVIjRJlRP43465855 = yCGupdmssVjVIjRJlRP27799357;     yCGupdmssVjVIjRJlRP27799357 = yCGupdmssVjVIjRJlRP98454531;     yCGupdmssVjVIjRJlRP98454531 = yCGupdmssVjVIjRJlRP3776382;     yCGupdmssVjVIjRJlRP3776382 = yCGupdmssVjVIjRJlRP3250595;     yCGupdmssVjVIjRJlRP3250595 = yCGupdmssVjVIjRJlRP16710042;     yCGupdmssVjVIjRJlRP16710042 = yCGupdmssVjVIjRJlRP14332455;     yCGupdmssVjVIjRJlRP14332455 = yCGupdmssVjVIjRJlRP40496411;     yCGupdmssVjVIjRJlRP40496411 = yCGupdmssVjVIjRJlRP84378580;     yCGupdmssVjVIjRJlRP84378580 = yCGupdmssVjVIjRJlRP45778642;     yCGupdmssVjVIjRJlRP45778642 = yCGupdmssVjVIjRJlRP48513060;     yCGupdmssVjVIjRJlRP48513060 = yCGupdmssVjVIjRJlRP61796214;     yCGupdmssVjVIjRJlRP61796214 = yCGupdmssVjVIjRJlRP527094;     yCGupdmssVjVIjRJlRP527094 = yCGupdmssVjVIjRJlRP59389980;     yCGupdmssVjVIjRJlRP59389980 = yCGupdmssVjVIjRJlRP2545747;     yCGupdmssVjVIjRJlRP2545747 = yCGupdmssVjVIjRJlRP46695516;     yCGupdmssVjVIjRJlRP46695516 = yCGupdmssVjVIjRJlRP60009595;     yCGupdmssVjVIjRJlRP60009595 = yCGupdmssVjVIjRJlRP5531611;     yCGupdmssVjVIjRJlRP5531611 = yCGupdmssVjVIjRJlRP48861416;     yCGupdmssVjVIjRJlRP48861416 = yCGupdmssVjVIjRJlRP4215516;     yCGupdmssVjVIjRJlRP4215516 = yCGupdmssVjVIjRJlRP36850118;     yCGupdmssVjVIjRJlRP36850118 = yCGupdmssVjVIjRJlRP51785627;     yCGupdmssVjVIjRJlRP51785627 = yCGupdmssVjVIjRJlRP84078830;     yCGupdmssVjVIjRJlRP84078830 = yCGupdmssVjVIjRJlRP14741519;     yCGupdmssVjVIjRJlRP14741519 = yCGupdmssVjVIjRJlRP83177655;     yCGupdmssVjVIjRJlRP83177655 = yCGupdmssVjVIjRJlRP68905107;     yCGupdmssVjVIjRJlRP68905107 = yCGupdmssVjVIjRJlRP52122712;     yCGupdmssVjVIjRJlRP52122712 = yCGupdmssVjVIjRJlRP22335218;     yCGupdmssVjVIjRJlRP22335218 = yCGupdmssVjVIjRJlRP33030121;     yCGupdmssVjVIjRJlRP33030121 = yCGupdmssVjVIjRJlRP33603209;     yCGupdmssVjVIjRJlRP33603209 = yCGupdmssVjVIjRJlRP81520565;     yCGupdmssVjVIjRJlRP81520565 = yCGupdmssVjVIjRJlRP33565900;     yCGupdmssVjVIjRJlRP33565900 = yCGupdmssVjVIjRJlRP69472584;     yCGupdmssVjVIjRJlRP69472584 = yCGupdmssVjVIjRJlRP73269716;     yCGupdmssVjVIjRJlRP73269716 = yCGupdmssVjVIjRJlRP44540960;     yCGupdmssVjVIjRJlRP44540960 = yCGupdmssVjVIjRJlRP21705129;     yCGupdmssVjVIjRJlRP21705129 = yCGupdmssVjVIjRJlRP27245840;     yCGupdmssVjVIjRJlRP27245840 = yCGupdmssVjVIjRJlRP75192115;     yCGupdmssVjVIjRJlRP75192115 = yCGupdmssVjVIjRJlRP26295556;     yCGupdmssVjVIjRJlRP26295556 = yCGupdmssVjVIjRJlRP56654958;     yCGupdmssVjVIjRJlRP56654958 = yCGupdmssVjVIjRJlRP16252627;     yCGupdmssVjVIjRJlRP16252627 = yCGupdmssVjVIjRJlRP35177652;     yCGupdmssVjVIjRJlRP35177652 = yCGupdmssVjVIjRJlRP28933553;     yCGupdmssVjVIjRJlRP28933553 = yCGupdmssVjVIjRJlRP96376926;     yCGupdmssVjVIjRJlRP96376926 = yCGupdmssVjVIjRJlRP79897958;     yCGupdmssVjVIjRJlRP79897958 = yCGupdmssVjVIjRJlRP3890233;     yCGupdmssVjVIjRJlRP3890233 = yCGupdmssVjVIjRJlRP82452854;     yCGupdmssVjVIjRJlRP82452854 = yCGupdmssVjVIjRJlRP32703703;     yCGupdmssVjVIjRJlRP32703703 = yCGupdmssVjVIjRJlRP14611562;     yCGupdmssVjVIjRJlRP14611562 = yCGupdmssVjVIjRJlRP78363413;     yCGupdmssVjVIjRJlRP78363413 = yCGupdmssVjVIjRJlRP20678867;     yCGupdmssVjVIjRJlRP20678867 = yCGupdmssVjVIjRJlRP64117643;     yCGupdmssVjVIjRJlRP64117643 = yCGupdmssVjVIjRJlRP51277615;     yCGupdmssVjVIjRJlRP51277615 = yCGupdmssVjVIjRJlRP48284219;     yCGupdmssVjVIjRJlRP48284219 = yCGupdmssVjVIjRJlRP26093673;     yCGupdmssVjVIjRJlRP26093673 = yCGupdmssVjVIjRJlRP91680228;     yCGupdmssVjVIjRJlRP91680228 = yCGupdmssVjVIjRJlRP43720526;     yCGupdmssVjVIjRJlRP43720526 = yCGupdmssVjVIjRJlRP83713013;     yCGupdmssVjVIjRJlRP83713013 = yCGupdmssVjVIjRJlRP20598726;     yCGupdmssVjVIjRJlRP20598726 = yCGupdmssVjVIjRJlRP34345487;     yCGupdmssVjVIjRJlRP34345487 = yCGupdmssVjVIjRJlRP64587329;     yCGupdmssVjVIjRJlRP64587329 = yCGupdmssVjVIjRJlRP91997236;     yCGupdmssVjVIjRJlRP91997236 = yCGupdmssVjVIjRJlRP7466290;     yCGupdmssVjVIjRJlRP7466290 = yCGupdmssVjVIjRJlRP50775372;     yCGupdmssVjVIjRJlRP50775372 = yCGupdmssVjVIjRJlRP64258077;     yCGupdmssVjVIjRJlRP64258077 = yCGupdmssVjVIjRJlRP14947161;     yCGupdmssVjVIjRJlRP14947161 = yCGupdmssVjVIjRJlRP92323630;     yCGupdmssVjVIjRJlRP92323630 = yCGupdmssVjVIjRJlRP27257378;     yCGupdmssVjVIjRJlRP27257378 = yCGupdmssVjVIjRJlRP14849021;     yCGupdmssVjVIjRJlRP14849021 = yCGupdmssVjVIjRJlRP80840617;     yCGupdmssVjVIjRJlRP80840617 = yCGupdmssVjVIjRJlRP19449676;     yCGupdmssVjVIjRJlRP19449676 = yCGupdmssVjVIjRJlRP84817479;     yCGupdmssVjVIjRJlRP84817479 = yCGupdmssVjVIjRJlRP79236054;     yCGupdmssVjVIjRJlRP79236054 = yCGupdmssVjVIjRJlRP92206458;     yCGupdmssVjVIjRJlRP92206458 = yCGupdmssVjVIjRJlRP87962888;     yCGupdmssVjVIjRJlRP87962888 = yCGupdmssVjVIjRJlRP1672466;     yCGupdmssVjVIjRJlRP1672466 = yCGupdmssVjVIjRJlRP22852074;     yCGupdmssVjVIjRJlRP22852074 = yCGupdmssVjVIjRJlRP87701904;     yCGupdmssVjVIjRJlRP87701904 = yCGupdmssVjVIjRJlRP34843560;     yCGupdmssVjVIjRJlRP34843560 = yCGupdmssVjVIjRJlRP79287423;     yCGupdmssVjVIjRJlRP79287423 = yCGupdmssVjVIjRJlRP86452253;     yCGupdmssVjVIjRJlRP86452253 = yCGupdmssVjVIjRJlRP19419010;     yCGupdmssVjVIjRJlRP19419010 = yCGupdmssVjVIjRJlRP7723657;     yCGupdmssVjVIjRJlRP7723657 = yCGupdmssVjVIjRJlRP54666708;     yCGupdmssVjVIjRJlRP54666708 = yCGupdmssVjVIjRJlRP12924343;     yCGupdmssVjVIjRJlRP12924343 = yCGupdmssVjVIjRJlRP17402922;     yCGupdmssVjVIjRJlRP17402922 = yCGupdmssVjVIjRJlRP75674063;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void PQnUtCyFPxdsTMOwHto36913629() {     int YQLRyEAosAZZbukANBA30328460 = -532356450;    int YQLRyEAosAZZbukANBA60309753 = -246492796;    int YQLRyEAosAZZbukANBA2888215 = -866448139;    int YQLRyEAosAZZbukANBA99845960 = -424634363;    int YQLRyEAosAZZbukANBA40138118 = -914604604;    int YQLRyEAosAZZbukANBA97154345 = -650289742;    int YQLRyEAosAZZbukANBA13194386 = -701365389;    int YQLRyEAosAZZbukANBA46332412 = -489117476;    int YQLRyEAosAZZbukANBA12833340 = -34109460;    int YQLRyEAosAZZbukANBA63320447 = 88008020;    int YQLRyEAosAZZbukANBA48260549 = -220531592;    int YQLRyEAosAZZbukANBA62903745 = -326684094;    int YQLRyEAosAZZbukANBA16317049 = -450232966;    int YQLRyEAosAZZbukANBA55910222 = -997644800;    int YQLRyEAosAZZbukANBA73689928 = -779889005;    int YQLRyEAosAZZbukANBA17566893 = -23009320;    int YQLRyEAosAZZbukANBA98286294 = -177198324;    int YQLRyEAosAZZbukANBA71372968 = -692084079;    int YQLRyEAosAZZbukANBA4471196 = -637760443;    int YQLRyEAosAZZbukANBA34344598 = -950890888;    int YQLRyEAosAZZbukANBA48506843 = -634385669;    int YQLRyEAosAZZbukANBA91748999 = -516661382;    int YQLRyEAosAZZbukANBA20848413 = -923208786;    int YQLRyEAosAZZbukANBA47207011 = -430407534;    int YQLRyEAosAZZbukANBA44265677 = -615803755;    int YQLRyEAosAZZbukANBA3037162 = -387503950;    int YQLRyEAosAZZbukANBA2517019 = 82719702;    int YQLRyEAosAZZbukANBA12638980 = -553627526;    int YQLRyEAosAZZbukANBA42443424 = -853419303;    int YQLRyEAosAZZbukANBA41130925 = -793906456;    int YQLRyEAosAZZbukANBA11715124 = -621863139;    int YQLRyEAosAZZbukANBA36523221 = -830701127;    int YQLRyEAosAZZbukANBA16517293 = -40156295;    int YQLRyEAosAZZbukANBA98871407 = -164714096;    int YQLRyEAosAZZbukANBA71354274 = -858615632;    int YQLRyEAosAZZbukANBA39112169 = -465507685;    int YQLRyEAosAZZbukANBA58783318 = 30468057;    int YQLRyEAosAZZbukANBA27718758 = -192057848;    int YQLRyEAosAZZbukANBA33947304 = -250532447;    int YQLRyEAosAZZbukANBA92891502 = -923223259;    int YQLRyEAosAZZbukANBA8082114 = -780085167;    int YQLRyEAosAZZbukANBA59009876 = -647386249;    int YQLRyEAosAZZbukANBA24030304 = -838978188;    int YQLRyEAosAZZbukANBA42597609 = -872897184;    int YQLRyEAosAZZbukANBA41504628 = -318945456;    int YQLRyEAosAZZbukANBA88899502 = -577156800;    int YQLRyEAosAZZbukANBA85946296 = -415643774;    int YQLRyEAosAZZbukANBA96697025 = -208831990;    int YQLRyEAosAZZbukANBA86883726 = -154801164;    int YQLRyEAosAZZbukANBA66546791 = -896194753;    int YQLRyEAosAZZbukANBA2359380 = -640007897;    int YQLRyEAosAZZbukANBA64574265 = -701586154;    int YQLRyEAosAZZbukANBA58023559 = -786632774;    int YQLRyEAosAZZbukANBA14070715 = -48193976;    int YQLRyEAosAZZbukANBA88406786 = 61825972;    int YQLRyEAosAZZbukANBA38579461 = 84304931;    int YQLRyEAosAZZbukANBA39461341 = -323284011;    int YQLRyEAosAZZbukANBA55681204 = -336040605;    int YQLRyEAosAZZbukANBA55580284 = -808830609;    int YQLRyEAosAZZbukANBA37100956 = -427100654;    int YQLRyEAosAZZbukANBA94637327 = -633009444;    int YQLRyEAosAZZbukANBA555407 = -47737864;    int YQLRyEAosAZZbukANBA3888989 = -635698173;    int YQLRyEAosAZZbukANBA71702414 = -240203004;    int YQLRyEAosAZZbukANBA51605323 = -290128841;    int YQLRyEAosAZZbukANBA11737328 = -389830466;    int YQLRyEAosAZZbukANBA46386452 = -186527800;    int YQLRyEAosAZZbukANBA17445641 = -185518871;    int YQLRyEAosAZZbukANBA84555947 = -39029168;    int YQLRyEAosAZZbukANBA34577760 = -214381321;    int YQLRyEAosAZZbukANBA58783574 = 46522623;    int YQLRyEAosAZZbukANBA70567537 = -985140477;    int YQLRyEAosAZZbukANBA37425664 = -341551633;    int YQLRyEAosAZZbukANBA11579694 = -714537185;    int YQLRyEAosAZZbukANBA26262484 = -70805721;    int YQLRyEAosAZZbukANBA89496966 = -986999420;    int YQLRyEAosAZZbukANBA67718696 = -677683195;    int YQLRyEAosAZZbukANBA78250804 = 49688398;    int YQLRyEAosAZZbukANBA5702383 = -11462079;    int YQLRyEAosAZZbukANBA55366174 = 61353044;    int YQLRyEAosAZZbukANBA17090866 = -971860177;    int YQLRyEAosAZZbukANBA5819993 = -708448308;    int YQLRyEAosAZZbukANBA25755254 = -298826362;    int YQLRyEAosAZZbukANBA75896632 = -957224551;    int YQLRyEAosAZZbukANBA38771546 = -53898560;    int YQLRyEAosAZZbukANBA47140859 = -920276986;    int YQLRyEAosAZZbukANBA78499661 = 55931646;    int YQLRyEAosAZZbukANBA2446578 = -991962319;    int YQLRyEAosAZZbukANBA10464622 = -126540068;    int YQLRyEAosAZZbukANBA32774814 = -842920563;    int YQLRyEAosAZZbukANBA99650827 = -42223675;    int YQLRyEAosAZZbukANBA3102115 = -633491339;    int YQLRyEAosAZZbukANBA72138473 = -383227239;    int YQLRyEAosAZZbukANBA96846348 = -823431794;    int YQLRyEAosAZZbukANBA98254175 = -190213815;    int YQLRyEAosAZZbukANBA7526708 = -632347303;    int YQLRyEAosAZZbukANBA55120888 = 88311923;    int YQLRyEAosAZZbukANBA52327889 = -498775184;    int YQLRyEAosAZZbukANBA90992285 = -482768344;    int YQLRyEAosAZZbukANBA29767301 = -532356450;     YQLRyEAosAZZbukANBA30328460 = YQLRyEAosAZZbukANBA60309753;     YQLRyEAosAZZbukANBA60309753 = YQLRyEAosAZZbukANBA2888215;     YQLRyEAosAZZbukANBA2888215 = YQLRyEAosAZZbukANBA99845960;     YQLRyEAosAZZbukANBA99845960 = YQLRyEAosAZZbukANBA40138118;     YQLRyEAosAZZbukANBA40138118 = YQLRyEAosAZZbukANBA97154345;     YQLRyEAosAZZbukANBA97154345 = YQLRyEAosAZZbukANBA13194386;     YQLRyEAosAZZbukANBA13194386 = YQLRyEAosAZZbukANBA46332412;     YQLRyEAosAZZbukANBA46332412 = YQLRyEAosAZZbukANBA12833340;     YQLRyEAosAZZbukANBA12833340 = YQLRyEAosAZZbukANBA63320447;     YQLRyEAosAZZbukANBA63320447 = YQLRyEAosAZZbukANBA48260549;     YQLRyEAosAZZbukANBA48260549 = YQLRyEAosAZZbukANBA62903745;     YQLRyEAosAZZbukANBA62903745 = YQLRyEAosAZZbukANBA16317049;     YQLRyEAosAZZbukANBA16317049 = YQLRyEAosAZZbukANBA55910222;     YQLRyEAosAZZbukANBA55910222 = YQLRyEAosAZZbukANBA73689928;     YQLRyEAosAZZbukANBA73689928 = YQLRyEAosAZZbukANBA17566893;     YQLRyEAosAZZbukANBA17566893 = YQLRyEAosAZZbukANBA98286294;     YQLRyEAosAZZbukANBA98286294 = YQLRyEAosAZZbukANBA71372968;     YQLRyEAosAZZbukANBA71372968 = YQLRyEAosAZZbukANBA4471196;     YQLRyEAosAZZbukANBA4471196 = YQLRyEAosAZZbukANBA34344598;     YQLRyEAosAZZbukANBA34344598 = YQLRyEAosAZZbukANBA48506843;     YQLRyEAosAZZbukANBA48506843 = YQLRyEAosAZZbukANBA91748999;     YQLRyEAosAZZbukANBA91748999 = YQLRyEAosAZZbukANBA20848413;     YQLRyEAosAZZbukANBA20848413 = YQLRyEAosAZZbukANBA47207011;     YQLRyEAosAZZbukANBA47207011 = YQLRyEAosAZZbukANBA44265677;     YQLRyEAosAZZbukANBA44265677 = YQLRyEAosAZZbukANBA3037162;     YQLRyEAosAZZbukANBA3037162 = YQLRyEAosAZZbukANBA2517019;     YQLRyEAosAZZbukANBA2517019 = YQLRyEAosAZZbukANBA12638980;     YQLRyEAosAZZbukANBA12638980 = YQLRyEAosAZZbukANBA42443424;     YQLRyEAosAZZbukANBA42443424 = YQLRyEAosAZZbukANBA41130925;     YQLRyEAosAZZbukANBA41130925 = YQLRyEAosAZZbukANBA11715124;     YQLRyEAosAZZbukANBA11715124 = YQLRyEAosAZZbukANBA36523221;     YQLRyEAosAZZbukANBA36523221 = YQLRyEAosAZZbukANBA16517293;     YQLRyEAosAZZbukANBA16517293 = YQLRyEAosAZZbukANBA98871407;     YQLRyEAosAZZbukANBA98871407 = YQLRyEAosAZZbukANBA71354274;     YQLRyEAosAZZbukANBA71354274 = YQLRyEAosAZZbukANBA39112169;     YQLRyEAosAZZbukANBA39112169 = YQLRyEAosAZZbukANBA58783318;     YQLRyEAosAZZbukANBA58783318 = YQLRyEAosAZZbukANBA27718758;     YQLRyEAosAZZbukANBA27718758 = YQLRyEAosAZZbukANBA33947304;     YQLRyEAosAZZbukANBA33947304 = YQLRyEAosAZZbukANBA92891502;     YQLRyEAosAZZbukANBA92891502 = YQLRyEAosAZZbukANBA8082114;     YQLRyEAosAZZbukANBA8082114 = YQLRyEAosAZZbukANBA59009876;     YQLRyEAosAZZbukANBA59009876 = YQLRyEAosAZZbukANBA24030304;     YQLRyEAosAZZbukANBA24030304 = YQLRyEAosAZZbukANBA42597609;     YQLRyEAosAZZbukANBA42597609 = YQLRyEAosAZZbukANBA41504628;     YQLRyEAosAZZbukANBA41504628 = YQLRyEAosAZZbukANBA88899502;     YQLRyEAosAZZbukANBA88899502 = YQLRyEAosAZZbukANBA85946296;     YQLRyEAosAZZbukANBA85946296 = YQLRyEAosAZZbukANBA96697025;     YQLRyEAosAZZbukANBA96697025 = YQLRyEAosAZZbukANBA86883726;     YQLRyEAosAZZbukANBA86883726 = YQLRyEAosAZZbukANBA66546791;     YQLRyEAosAZZbukANBA66546791 = YQLRyEAosAZZbukANBA2359380;     YQLRyEAosAZZbukANBA2359380 = YQLRyEAosAZZbukANBA64574265;     YQLRyEAosAZZbukANBA64574265 = YQLRyEAosAZZbukANBA58023559;     YQLRyEAosAZZbukANBA58023559 = YQLRyEAosAZZbukANBA14070715;     YQLRyEAosAZZbukANBA14070715 = YQLRyEAosAZZbukANBA88406786;     YQLRyEAosAZZbukANBA88406786 = YQLRyEAosAZZbukANBA38579461;     YQLRyEAosAZZbukANBA38579461 = YQLRyEAosAZZbukANBA39461341;     YQLRyEAosAZZbukANBA39461341 = YQLRyEAosAZZbukANBA55681204;     YQLRyEAosAZZbukANBA55681204 = YQLRyEAosAZZbukANBA55580284;     YQLRyEAosAZZbukANBA55580284 = YQLRyEAosAZZbukANBA37100956;     YQLRyEAosAZZbukANBA37100956 = YQLRyEAosAZZbukANBA94637327;     YQLRyEAosAZZbukANBA94637327 = YQLRyEAosAZZbukANBA555407;     YQLRyEAosAZZbukANBA555407 = YQLRyEAosAZZbukANBA3888989;     YQLRyEAosAZZbukANBA3888989 = YQLRyEAosAZZbukANBA71702414;     YQLRyEAosAZZbukANBA71702414 = YQLRyEAosAZZbukANBA51605323;     YQLRyEAosAZZbukANBA51605323 = YQLRyEAosAZZbukANBA11737328;     YQLRyEAosAZZbukANBA11737328 = YQLRyEAosAZZbukANBA46386452;     YQLRyEAosAZZbukANBA46386452 = YQLRyEAosAZZbukANBA17445641;     YQLRyEAosAZZbukANBA17445641 = YQLRyEAosAZZbukANBA84555947;     YQLRyEAosAZZbukANBA84555947 = YQLRyEAosAZZbukANBA34577760;     YQLRyEAosAZZbukANBA34577760 = YQLRyEAosAZZbukANBA58783574;     YQLRyEAosAZZbukANBA58783574 = YQLRyEAosAZZbukANBA70567537;     YQLRyEAosAZZbukANBA70567537 = YQLRyEAosAZZbukANBA37425664;     YQLRyEAosAZZbukANBA37425664 = YQLRyEAosAZZbukANBA11579694;     YQLRyEAosAZZbukANBA11579694 = YQLRyEAosAZZbukANBA26262484;     YQLRyEAosAZZbukANBA26262484 = YQLRyEAosAZZbukANBA89496966;     YQLRyEAosAZZbukANBA89496966 = YQLRyEAosAZZbukANBA67718696;     YQLRyEAosAZZbukANBA67718696 = YQLRyEAosAZZbukANBA78250804;     YQLRyEAosAZZbukANBA78250804 = YQLRyEAosAZZbukANBA5702383;     YQLRyEAosAZZbukANBA5702383 = YQLRyEAosAZZbukANBA55366174;     YQLRyEAosAZZbukANBA55366174 = YQLRyEAosAZZbukANBA17090866;     YQLRyEAosAZZbukANBA17090866 = YQLRyEAosAZZbukANBA5819993;     YQLRyEAosAZZbukANBA5819993 = YQLRyEAosAZZbukANBA25755254;     YQLRyEAosAZZbukANBA25755254 = YQLRyEAosAZZbukANBA75896632;     YQLRyEAosAZZbukANBA75896632 = YQLRyEAosAZZbukANBA38771546;     YQLRyEAosAZZbukANBA38771546 = YQLRyEAosAZZbukANBA47140859;     YQLRyEAosAZZbukANBA47140859 = YQLRyEAosAZZbukANBA78499661;     YQLRyEAosAZZbukANBA78499661 = YQLRyEAosAZZbukANBA2446578;     YQLRyEAosAZZbukANBA2446578 = YQLRyEAosAZZbukANBA10464622;     YQLRyEAosAZZbukANBA10464622 = YQLRyEAosAZZbukANBA32774814;     YQLRyEAosAZZbukANBA32774814 = YQLRyEAosAZZbukANBA99650827;     YQLRyEAosAZZbukANBA99650827 = YQLRyEAosAZZbukANBA3102115;     YQLRyEAosAZZbukANBA3102115 = YQLRyEAosAZZbukANBA72138473;     YQLRyEAosAZZbukANBA72138473 = YQLRyEAosAZZbukANBA96846348;     YQLRyEAosAZZbukANBA96846348 = YQLRyEAosAZZbukANBA98254175;     YQLRyEAosAZZbukANBA98254175 = YQLRyEAosAZZbukANBA7526708;     YQLRyEAosAZZbukANBA7526708 = YQLRyEAosAZZbukANBA55120888;     YQLRyEAosAZZbukANBA55120888 = YQLRyEAosAZZbukANBA52327889;     YQLRyEAosAZZbukANBA52327889 = YQLRyEAosAZZbukANBA90992285;     YQLRyEAosAZZbukANBA90992285 = YQLRyEAosAZZbukANBA29767301;     YQLRyEAosAZZbukANBA29767301 = YQLRyEAosAZZbukANBA30328460;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void jCHLFiuAXyRoaaqYDrk40520006() {     int VbmoMulcIoCGiFbhoUV42835415 = -98040756;    int VbmoMulcIoCGiFbhoUV66354635 = -612557146;    int VbmoMulcIoCGiFbhoUV28463405 = -100025058;    int VbmoMulcIoCGiFbhoUV73431084 = -437754547;    int VbmoMulcIoCGiFbhoUV60209209 = -815340368;    int VbmoMulcIoCGiFbhoUV27629299 = -102964039;    int VbmoMulcIoCGiFbhoUV68560899 = -965434635;    int VbmoMulcIoCGiFbhoUV44058884 = -300339176;    int VbmoMulcIoCGiFbhoUV16548322 = -739844206;    int VbmoMulcIoCGiFbhoUV55979216 = 38585291;    int VbmoMulcIoCGiFbhoUV82274832 = -685048223;    int VbmoMulcIoCGiFbhoUV67847878 = -892495885;    int VbmoMulcIoCGiFbhoUV53524276 = -302844621;    int VbmoMulcIoCGiFbhoUV90788047 = -768667493;    int VbmoMulcIoCGiFbhoUV53671686 = -855200513;    int VbmoMulcIoCGiFbhoUV60567094 = -437852383;    int VbmoMulcIoCGiFbhoUV47924587 = -535437955;    int VbmoMulcIoCGiFbhoUV21705631 = -883747684;    int VbmoMulcIoCGiFbhoUV27095488 = -757255271;    int VbmoMulcIoCGiFbhoUV52258892 = -263428102;    int VbmoMulcIoCGiFbhoUV16981777 = -40764443;    int VbmoMulcIoCGiFbhoUV31942066 = -764516214;    int VbmoMulcIoCGiFbhoUV94258550 = -864707141;    int VbmoMulcIoCGiFbhoUV25278004 = -223345289;    int VbmoMulcIoCGiFbhoUV55133801 = -207567676;    int VbmoMulcIoCGiFbhoUV26705198 = -615477837;    int VbmoMulcIoCGiFbhoUV41795355 = -835195498;    int VbmoMulcIoCGiFbhoUV77124330 = 89060974;    int VbmoMulcIoCGiFbhoUV23223429 = -405945786;    int VbmoMulcIoCGiFbhoUV74167054 = -264036088;    int VbmoMulcIoCGiFbhoUV92882010 = -316939070;    int VbmoMulcIoCGiFbhoUV78155183 = -175418663;    int VbmoMulcIoCGiFbhoUV91977427 = 28330834;    int VbmoMulcIoCGiFbhoUV82381577 = -356973836;    int VbmoMulcIoCGiFbhoUV65538211 = -832021640;    int VbmoMulcIoCGiFbhoUV76864234 = -63698218;    int VbmoMulcIoCGiFbhoUV64397967 = -417949177;    int VbmoMulcIoCGiFbhoUV75619821 = 78994757;    int VbmoMulcIoCGiFbhoUV28102050 = 28278060;    int VbmoMulcIoCGiFbhoUV29462252 = -573586747;    int VbmoMulcIoCGiFbhoUV38394825 = 22931993;    int VbmoMulcIoCGiFbhoUV87860391 = -413580236;    int VbmoMulcIoCGiFbhoUV49680697 = -661064621;    int VbmoMulcIoCGiFbhoUV31935567 = -291308466;    int VbmoMulcIoCGiFbhoUV85470364 = -713858291;    int VbmoMulcIoCGiFbhoUV57866746 = 44945529;    int VbmoMulcIoCGiFbhoUV6364777 = 76182851;    int VbmoMulcIoCGiFbhoUV7065741 = -600784591;    int VbmoMulcIoCGiFbhoUV27920675 = -104221070;    int VbmoMulcIoCGiFbhoUV12956366 = 17763765;    int VbmoMulcIoCGiFbhoUV53853489 = -948021226;    int VbmoMulcIoCGiFbhoUV96745887 = -378978017;    int VbmoMulcIoCGiFbhoUV61238766 = -62451007;    int VbmoMulcIoCGiFbhoUV37514593 = -979349918;    int VbmoMulcIoCGiFbhoUV23538230 = 35622308;    int VbmoMulcIoCGiFbhoUV10893349 = -333524542;    int VbmoMulcIoCGiFbhoUV72096084 = -747850005;    int VbmoMulcIoCGiFbhoUV3185401 = -876679769;    int VbmoMulcIoCGiFbhoUV18297283 = -130186871;    int VbmoMulcIoCGiFbhoUV33504012 = -99862531;    int VbmoMulcIoCGiFbhoUV85833944 = -267768542;    int VbmoMulcIoCGiFbhoUV91436568 = -954495610;    int VbmoMulcIoCGiFbhoUV20835456 = -894393391;    int VbmoMulcIoCGiFbhoUV42381268 = -375808119;    int VbmoMulcIoCGiFbhoUV63097205 = -644475640;    int VbmoMulcIoCGiFbhoUV4119650 = -409629560;    int VbmoMulcIoCGiFbhoUV75870451 = -820826720;    int VbmoMulcIoCGiFbhoUV71142699 = -945870785;    int VbmoMulcIoCGiFbhoUV25249836 = -936645853;    int VbmoMulcIoCGiFbhoUV76807451 = -691502296;    int VbmoMulcIoCGiFbhoUV96169126 = 80096794;    int VbmoMulcIoCGiFbhoUV72304765 = -514432713;    int VbmoMulcIoCGiFbhoUV93603581 = -812025744;    int VbmoMulcIoCGiFbhoUV97633236 = -83668525;    int VbmoMulcIoCGiFbhoUV13864067 = -186360096;    int VbmoMulcIoCGiFbhoUV29121385 = -627184208;    int VbmoMulcIoCGiFbhoUV82261369 = -3451593;    int VbmoMulcIoCGiFbhoUV62322983 = -473398676;    int VbmoMulcIoCGiFbhoUV39807639 = -509486999;    int VbmoMulcIoCGiFbhoUV97267055 = -152513206;    int VbmoMulcIoCGiFbhoUV20340422 = -591660689;    int VbmoMulcIoCGiFbhoUV34729615 = -134410908;    int VbmoMulcIoCGiFbhoUV49203656 = -806717956;    int VbmoMulcIoCGiFbhoUV10267063 = -323709551;    int VbmoMulcIoCGiFbhoUV20313565 = -316014862;    int VbmoMulcIoCGiFbhoUV96136123 = -937961053;    int VbmoMulcIoCGiFbhoUV16916418 = -12967656;    int VbmoMulcIoCGiFbhoUV54462834 = 7680752;    int VbmoMulcIoCGiFbhoUV58843348 = -292596144;    int VbmoMulcIoCGiFbhoUV54644862 = -398497098;    int VbmoMulcIoCGiFbhoUV4768150 = -315848213;    int VbmoMulcIoCGiFbhoUV61212566 = -541269409;    int VbmoMulcIoCGiFbhoUV57322538 = -790818372;    int VbmoMulcIoCGiFbhoUV94598038 = -871859410;    int VbmoMulcIoCGiFbhoUV43628308 = -205818206;    int VbmoMulcIoCGiFbhoUV46958256 = -22572398;    int VbmoMulcIoCGiFbhoUV67024936 = -519186845;    int VbmoMulcIoCGiFbhoUV7299430 = -185256502;    int VbmoMulcIoCGiFbhoUV68838362 = -646832826;    int VbmoMulcIoCGiFbhoUV81350715 = -98040756;     VbmoMulcIoCGiFbhoUV42835415 = VbmoMulcIoCGiFbhoUV66354635;     VbmoMulcIoCGiFbhoUV66354635 = VbmoMulcIoCGiFbhoUV28463405;     VbmoMulcIoCGiFbhoUV28463405 = VbmoMulcIoCGiFbhoUV73431084;     VbmoMulcIoCGiFbhoUV73431084 = VbmoMulcIoCGiFbhoUV60209209;     VbmoMulcIoCGiFbhoUV60209209 = VbmoMulcIoCGiFbhoUV27629299;     VbmoMulcIoCGiFbhoUV27629299 = VbmoMulcIoCGiFbhoUV68560899;     VbmoMulcIoCGiFbhoUV68560899 = VbmoMulcIoCGiFbhoUV44058884;     VbmoMulcIoCGiFbhoUV44058884 = VbmoMulcIoCGiFbhoUV16548322;     VbmoMulcIoCGiFbhoUV16548322 = VbmoMulcIoCGiFbhoUV55979216;     VbmoMulcIoCGiFbhoUV55979216 = VbmoMulcIoCGiFbhoUV82274832;     VbmoMulcIoCGiFbhoUV82274832 = VbmoMulcIoCGiFbhoUV67847878;     VbmoMulcIoCGiFbhoUV67847878 = VbmoMulcIoCGiFbhoUV53524276;     VbmoMulcIoCGiFbhoUV53524276 = VbmoMulcIoCGiFbhoUV90788047;     VbmoMulcIoCGiFbhoUV90788047 = VbmoMulcIoCGiFbhoUV53671686;     VbmoMulcIoCGiFbhoUV53671686 = VbmoMulcIoCGiFbhoUV60567094;     VbmoMulcIoCGiFbhoUV60567094 = VbmoMulcIoCGiFbhoUV47924587;     VbmoMulcIoCGiFbhoUV47924587 = VbmoMulcIoCGiFbhoUV21705631;     VbmoMulcIoCGiFbhoUV21705631 = VbmoMulcIoCGiFbhoUV27095488;     VbmoMulcIoCGiFbhoUV27095488 = VbmoMulcIoCGiFbhoUV52258892;     VbmoMulcIoCGiFbhoUV52258892 = VbmoMulcIoCGiFbhoUV16981777;     VbmoMulcIoCGiFbhoUV16981777 = VbmoMulcIoCGiFbhoUV31942066;     VbmoMulcIoCGiFbhoUV31942066 = VbmoMulcIoCGiFbhoUV94258550;     VbmoMulcIoCGiFbhoUV94258550 = VbmoMulcIoCGiFbhoUV25278004;     VbmoMulcIoCGiFbhoUV25278004 = VbmoMulcIoCGiFbhoUV55133801;     VbmoMulcIoCGiFbhoUV55133801 = VbmoMulcIoCGiFbhoUV26705198;     VbmoMulcIoCGiFbhoUV26705198 = VbmoMulcIoCGiFbhoUV41795355;     VbmoMulcIoCGiFbhoUV41795355 = VbmoMulcIoCGiFbhoUV77124330;     VbmoMulcIoCGiFbhoUV77124330 = VbmoMulcIoCGiFbhoUV23223429;     VbmoMulcIoCGiFbhoUV23223429 = VbmoMulcIoCGiFbhoUV74167054;     VbmoMulcIoCGiFbhoUV74167054 = VbmoMulcIoCGiFbhoUV92882010;     VbmoMulcIoCGiFbhoUV92882010 = VbmoMulcIoCGiFbhoUV78155183;     VbmoMulcIoCGiFbhoUV78155183 = VbmoMulcIoCGiFbhoUV91977427;     VbmoMulcIoCGiFbhoUV91977427 = VbmoMulcIoCGiFbhoUV82381577;     VbmoMulcIoCGiFbhoUV82381577 = VbmoMulcIoCGiFbhoUV65538211;     VbmoMulcIoCGiFbhoUV65538211 = VbmoMulcIoCGiFbhoUV76864234;     VbmoMulcIoCGiFbhoUV76864234 = VbmoMulcIoCGiFbhoUV64397967;     VbmoMulcIoCGiFbhoUV64397967 = VbmoMulcIoCGiFbhoUV75619821;     VbmoMulcIoCGiFbhoUV75619821 = VbmoMulcIoCGiFbhoUV28102050;     VbmoMulcIoCGiFbhoUV28102050 = VbmoMulcIoCGiFbhoUV29462252;     VbmoMulcIoCGiFbhoUV29462252 = VbmoMulcIoCGiFbhoUV38394825;     VbmoMulcIoCGiFbhoUV38394825 = VbmoMulcIoCGiFbhoUV87860391;     VbmoMulcIoCGiFbhoUV87860391 = VbmoMulcIoCGiFbhoUV49680697;     VbmoMulcIoCGiFbhoUV49680697 = VbmoMulcIoCGiFbhoUV31935567;     VbmoMulcIoCGiFbhoUV31935567 = VbmoMulcIoCGiFbhoUV85470364;     VbmoMulcIoCGiFbhoUV85470364 = VbmoMulcIoCGiFbhoUV57866746;     VbmoMulcIoCGiFbhoUV57866746 = VbmoMulcIoCGiFbhoUV6364777;     VbmoMulcIoCGiFbhoUV6364777 = VbmoMulcIoCGiFbhoUV7065741;     VbmoMulcIoCGiFbhoUV7065741 = VbmoMulcIoCGiFbhoUV27920675;     VbmoMulcIoCGiFbhoUV27920675 = VbmoMulcIoCGiFbhoUV12956366;     VbmoMulcIoCGiFbhoUV12956366 = VbmoMulcIoCGiFbhoUV53853489;     VbmoMulcIoCGiFbhoUV53853489 = VbmoMulcIoCGiFbhoUV96745887;     VbmoMulcIoCGiFbhoUV96745887 = VbmoMulcIoCGiFbhoUV61238766;     VbmoMulcIoCGiFbhoUV61238766 = VbmoMulcIoCGiFbhoUV37514593;     VbmoMulcIoCGiFbhoUV37514593 = VbmoMulcIoCGiFbhoUV23538230;     VbmoMulcIoCGiFbhoUV23538230 = VbmoMulcIoCGiFbhoUV10893349;     VbmoMulcIoCGiFbhoUV10893349 = VbmoMulcIoCGiFbhoUV72096084;     VbmoMulcIoCGiFbhoUV72096084 = VbmoMulcIoCGiFbhoUV3185401;     VbmoMulcIoCGiFbhoUV3185401 = VbmoMulcIoCGiFbhoUV18297283;     VbmoMulcIoCGiFbhoUV18297283 = VbmoMulcIoCGiFbhoUV33504012;     VbmoMulcIoCGiFbhoUV33504012 = VbmoMulcIoCGiFbhoUV85833944;     VbmoMulcIoCGiFbhoUV85833944 = VbmoMulcIoCGiFbhoUV91436568;     VbmoMulcIoCGiFbhoUV91436568 = VbmoMulcIoCGiFbhoUV20835456;     VbmoMulcIoCGiFbhoUV20835456 = VbmoMulcIoCGiFbhoUV42381268;     VbmoMulcIoCGiFbhoUV42381268 = VbmoMulcIoCGiFbhoUV63097205;     VbmoMulcIoCGiFbhoUV63097205 = VbmoMulcIoCGiFbhoUV4119650;     VbmoMulcIoCGiFbhoUV4119650 = VbmoMulcIoCGiFbhoUV75870451;     VbmoMulcIoCGiFbhoUV75870451 = VbmoMulcIoCGiFbhoUV71142699;     VbmoMulcIoCGiFbhoUV71142699 = VbmoMulcIoCGiFbhoUV25249836;     VbmoMulcIoCGiFbhoUV25249836 = VbmoMulcIoCGiFbhoUV76807451;     VbmoMulcIoCGiFbhoUV76807451 = VbmoMulcIoCGiFbhoUV96169126;     VbmoMulcIoCGiFbhoUV96169126 = VbmoMulcIoCGiFbhoUV72304765;     VbmoMulcIoCGiFbhoUV72304765 = VbmoMulcIoCGiFbhoUV93603581;     VbmoMulcIoCGiFbhoUV93603581 = VbmoMulcIoCGiFbhoUV97633236;     VbmoMulcIoCGiFbhoUV97633236 = VbmoMulcIoCGiFbhoUV13864067;     VbmoMulcIoCGiFbhoUV13864067 = VbmoMulcIoCGiFbhoUV29121385;     VbmoMulcIoCGiFbhoUV29121385 = VbmoMulcIoCGiFbhoUV82261369;     VbmoMulcIoCGiFbhoUV82261369 = VbmoMulcIoCGiFbhoUV62322983;     VbmoMulcIoCGiFbhoUV62322983 = VbmoMulcIoCGiFbhoUV39807639;     VbmoMulcIoCGiFbhoUV39807639 = VbmoMulcIoCGiFbhoUV97267055;     VbmoMulcIoCGiFbhoUV97267055 = VbmoMulcIoCGiFbhoUV20340422;     VbmoMulcIoCGiFbhoUV20340422 = VbmoMulcIoCGiFbhoUV34729615;     VbmoMulcIoCGiFbhoUV34729615 = VbmoMulcIoCGiFbhoUV49203656;     VbmoMulcIoCGiFbhoUV49203656 = VbmoMulcIoCGiFbhoUV10267063;     VbmoMulcIoCGiFbhoUV10267063 = VbmoMulcIoCGiFbhoUV20313565;     VbmoMulcIoCGiFbhoUV20313565 = VbmoMulcIoCGiFbhoUV96136123;     VbmoMulcIoCGiFbhoUV96136123 = VbmoMulcIoCGiFbhoUV16916418;     VbmoMulcIoCGiFbhoUV16916418 = VbmoMulcIoCGiFbhoUV54462834;     VbmoMulcIoCGiFbhoUV54462834 = VbmoMulcIoCGiFbhoUV58843348;     VbmoMulcIoCGiFbhoUV58843348 = VbmoMulcIoCGiFbhoUV54644862;     VbmoMulcIoCGiFbhoUV54644862 = VbmoMulcIoCGiFbhoUV4768150;     VbmoMulcIoCGiFbhoUV4768150 = VbmoMulcIoCGiFbhoUV61212566;     VbmoMulcIoCGiFbhoUV61212566 = VbmoMulcIoCGiFbhoUV57322538;     VbmoMulcIoCGiFbhoUV57322538 = VbmoMulcIoCGiFbhoUV94598038;     VbmoMulcIoCGiFbhoUV94598038 = VbmoMulcIoCGiFbhoUV43628308;     VbmoMulcIoCGiFbhoUV43628308 = VbmoMulcIoCGiFbhoUV46958256;     VbmoMulcIoCGiFbhoUV46958256 = VbmoMulcIoCGiFbhoUV67024936;     VbmoMulcIoCGiFbhoUV67024936 = VbmoMulcIoCGiFbhoUV7299430;     VbmoMulcIoCGiFbhoUV7299430 = VbmoMulcIoCGiFbhoUV68838362;     VbmoMulcIoCGiFbhoUV68838362 = VbmoMulcIoCGiFbhoUV81350715;     VbmoMulcIoCGiFbhoUV81350715 = VbmoMulcIoCGiFbhoUV42835415;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void BjFKIIbPguCiAQuHEpQ46848553() {     int ivwFjZbkIQYaSuPWTRZ97489812 = -535568340;    int ivwFjZbkIQYaSuPWTRZ13352255 = -92121960;    int ivwFjZbkIQYaSuPWTRZ89196051 = -485409671;    int ivwFjZbkIQYaSuPWTRZ44866025 = -443856958;    int ivwFjZbkIQYaSuPWTRZ34660880 = -487775607;    int ivwFjZbkIQYaSuPWTRZ41803696 = -232114875;    int ivwFjZbkIQYaSuPWTRZ89661602 = -167327308;    int ivwFjZbkIQYaSuPWTRZ73233988 = -800907408;    int ivwFjZbkIQYaSuPWTRZ4322733 = -786697577;    int ivwFjZbkIQYaSuPWTRZ38611201 = -240215979;    int ivwFjZbkIQYaSuPWTRZ60886127 = -210404795;    int ivwFjZbkIQYaSuPWTRZ30612592 = 21080026;    int ivwFjZbkIQYaSuPWTRZ17341591 = -106384925;    int ivwFjZbkIQYaSuPWTRZ83754478 = -380771071;    int ivwFjZbkIQYaSuPWTRZ83895759 = -762322144;    int ivwFjZbkIQYaSuPWTRZ50334630 = -68011947;    int ivwFjZbkIQYaSuPWTRZ47756350 = 90962216;    int ivwFjZbkIQYaSuPWTRZ89302217 = -947312151;    int ivwFjZbkIQYaSuPWTRZ28316089 = 56933181;    int ivwFjZbkIQYaSuPWTRZ69893447 = -608794249;    int ivwFjZbkIQYaSuPWTRZ51156164 = -608847594;    int ivwFjZbkIQYaSuPWTRZ83194655 = -930960322;    int ivwFjZbkIQYaSuPWTRZ30728382 = -351450562;    int ivwFjZbkIQYaSuPWTRZ26706373 = 77613894;    int ivwFjZbkIQYaSuPWTRZ50886417 = -580481128;    int ivwFjZbkIQYaSuPWTRZ67946145 = -619186622;    int ivwFjZbkIQYaSuPWTRZ43785280 = -290039777;    int ivwFjZbkIQYaSuPWTRZ30373331 = 81009114;    int ivwFjZbkIQYaSuPWTRZ63121106 = -786190661;    int ivwFjZbkIQYaSuPWTRZ68602463 = -554794056;    int ivwFjZbkIQYaSuPWTRZ44587539 = -865811595;    int ivwFjZbkIQYaSuPWTRZ9146794 = -586915191;    int ivwFjZbkIQYaSuPWTRZ59633304 = -528186780;    int ivwFjZbkIQYaSuPWTRZ77037470 = -37094646;    int ivwFjZbkIQYaSuPWTRZ42369 = 50115101;    int ivwFjZbkIQYaSuPWTRZ64190776 = -311693814;    int ivwFjZbkIQYaSuPWTRZ39102455 = -268375798;    int ivwFjZbkIQYaSuPWTRZ88597060 = -894934263;    int ivwFjZbkIQYaSuPWTRZ78871698 = -353670542;    int ivwFjZbkIQYaSuPWTRZ53448646 = -231895346;    int ivwFjZbkIQYaSuPWTRZ94354226 = -89618165;    int ivwFjZbkIQYaSuPWTRZ24535050 = 78887678;    int ivwFjZbkIQYaSuPWTRZ40680880 = -501569939;    int ivwFjZbkIQYaSuPWTRZ40929966 = -864988131;    int ivwFjZbkIQYaSuPWTRZ45454428 = -846375889;    int ivwFjZbkIQYaSuPWTRZ13200348 = -23844086;    int ivwFjZbkIQYaSuPWTRZ22838489 = 49125468;    int ivwFjZbkIQYaSuPWTRZ30493049 = -578436963;    int ivwFjZbkIQYaSuPWTRZ70263441 = -3951259;    int ivwFjZbkIQYaSuPWTRZ57798029 = -222255530;    int ivwFjZbkIQYaSuPWTRZ28967029 = -605236728;    int ivwFjZbkIQYaSuPWTRZ86128036 = -894044000;    int ivwFjZbkIQYaSuPWTRZ92966768 = -902366465;    int ivwFjZbkIQYaSuPWTRZ94930350 = -875236402;    int ivwFjZbkIQYaSuPWTRZ95692388 = -360286374;    int ivwFjZbkIQYaSuPWTRZ14295158 = -604608018;    int ivwFjZbkIQYaSuPWTRZ82623872 = -740671398;    int ivwFjZbkIQYaSuPWTRZ62489678 = -463023566;    int ivwFjZbkIQYaSuPWTRZ93979608 = -863375830;    int ivwFjZbkIQYaSuPWTRZ66714735 = -868588986;    int ivwFjZbkIQYaSuPWTRZ98018416 = -942075099;    int ivwFjZbkIQYaSuPWTRZ59288272 = -148336422;    int ivwFjZbkIQYaSuPWTRZ10112882 = 85283252;    int ivwFjZbkIQYaSuPWTRZ35720269 = -131903522;    int ivwFjZbkIQYaSuPWTRZ94023661 = -374404384;    int ivwFjZbkIQYaSuPWTRZ51739334 = -623489604;    int ivwFjZbkIQYaSuPWTRZ70979287 = -450733195;    int ivwFjZbkIQYaSuPWTRZ40304121 = 30709720;    int ivwFjZbkIQYaSuPWTRZ83712110 = -330886172;    int ivwFjZbkIQYaSuPWTRZ19704983 = -350628331;    int ivwFjZbkIQYaSuPWTRZ11232175 = -799636150;    int ivwFjZbkIQYaSuPWTRZ59159290 = -14103521;    int ivwFjZbkIQYaSuPWTRZ10430520 = -493641610;    int ivwFjZbkIQYaSuPWTRZ74867442 = -711171473;    int ivwFjZbkIQYaSuPWTRZ75539221 = -419176084;    int ivwFjZbkIQYaSuPWTRZ26621114 = -587735273;    int ivwFjZbkIQYaSuPWTRZ42513775 = -329390383;    int ivwFjZbkIQYaSuPWTRZ89798415 = -486462431;    int ivwFjZbkIQYaSuPWTRZ81251944 = -76010218;    int ivwFjZbkIQYaSuPWTRZ37686069 = -456637043;    int ivwFjZbkIQYaSuPWTRZ45107657 = -568312090;    int ivwFjZbkIQYaSuPWTRZ13292231 = -711602814;    int ivwFjZbkIQYaSuPWTRZ60109889 = -915039628;    int ivwFjZbkIQYaSuPWTRZ5323078 = -463935132;    int ivwFjZbkIQYaSuPWTRZ39635435 = -949557328;    int ivwFjZbkIQYaSuPWTRZ58459502 = -971767596;    int ivwFjZbkIQYaSuPWTRZ16180025 = -684548727;    int ivwFjZbkIQYaSuPWTRZ64702953 = -652950378;    int ivwFjZbkIQYaSuPWTRZ81345081 = -676808273;    int ivwFjZbkIQYaSuPWTRZ85747210 = -345276881;    int ivwFjZbkIQYaSuPWTRZ81566903 = -571022416;    int ivwFjZbkIQYaSuPWTRZ76612776 = -805352233;    int ivwFjZbkIQYaSuPWTRZ94617451 = 68441566;    int ivwFjZbkIQYaSuPWTRZ12156964 = -485081557;    int ivwFjZbkIQYaSuPWTRZ55430229 = -289820248;    int ivwFjZbkIQYaSuPWTRZ35065954 = -941281744;    int ivwFjZbkIQYaSuPWTRZ14422169 = 93604425;    int ivwFjZbkIQYaSuPWTRZ4960611 = -269666418;    int ivwFjZbkIQYaSuPWTRZ46906305 = -390583748;    int ivwFjZbkIQYaSuPWTRZ93715093 = -535568340;     ivwFjZbkIQYaSuPWTRZ97489812 = ivwFjZbkIQYaSuPWTRZ13352255;     ivwFjZbkIQYaSuPWTRZ13352255 = ivwFjZbkIQYaSuPWTRZ89196051;     ivwFjZbkIQYaSuPWTRZ89196051 = ivwFjZbkIQYaSuPWTRZ44866025;     ivwFjZbkIQYaSuPWTRZ44866025 = ivwFjZbkIQYaSuPWTRZ34660880;     ivwFjZbkIQYaSuPWTRZ34660880 = ivwFjZbkIQYaSuPWTRZ41803696;     ivwFjZbkIQYaSuPWTRZ41803696 = ivwFjZbkIQYaSuPWTRZ89661602;     ivwFjZbkIQYaSuPWTRZ89661602 = ivwFjZbkIQYaSuPWTRZ73233988;     ivwFjZbkIQYaSuPWTRZ73233988 = ivwFjZbkIQYaSuPWTRZ4322733;     ivwFjZbkIQYaSuPWTRZ4322733 = ivwFjZbkIQYaSuPWTRZ38611201;     ivwFjZbkIQYaSuPWTRZ38611201 = ivwFjZbkIQYaSuPWTRZ60886127;     ivwFjZbkIQYaSuPWTRZ60886127 = ivwFjZbkIQYaSuPWTRZ30612592;     ivwFjZbkIQYaSuPWTRZ30612592 = ivwFjZbkIQYaSuPWTRZ17341591;     ivwFjZbkIQYaSuPWTRZ17341591 = ivwFjZbkIQYaSuPWTRZ83754478;     ivwFjZbkIQYaSuPWTRZ83754478 = ivwFjZbkIQYaSuPWTRZ83895759;     ivwFjZbkIQYaSuPWTRZ83895759 = ivwFjZbkIQYaSuPWTRZ50334630;     ivwFjZbkIQYaSuPWTRZ50334630 = ivwFjZbkIQYaSuPWTRZ47756350;     ivwFjZbkIQYaSuPWTRZ47756350 = ivwFjZbkIQYaSuPWTRZ89302217;     ivwFjZbkIQYaSuPWTRZ89302217 = ivwFjZbkIQYaSuPWTRZ28316089;     ivwFjZbkIQYaSuPWTRZ28316089 = ivwFjZbkIQYaSuPWTRZ69893447;     ivwFjZbkIQYaSuPWTRZ69893447 = ivwFjZbkIQYaSuPWTRZ51156164;     ivwFjZbkIQYaSuPWTRZ51156164 = ivwFjZbkIQYaSuPWTRZ83194655;     ivwFjZbkIQYaSuPWTRZ83194655 = ivwFjZbkIQYaSuPWTRZ30728382;     ivwFjZbkIQYaSuPWTRZ30728382 = ivwFjZbkIQYaSuPWTRZ26706373;     ivwFjZbkIQYaSuPWTRZ26706373 = ivwFjZbkIQYaSuPWTRZ50886417;     ivwFjZbkIQYaSuPWTRZ50886417 = ivwFjZbkIQYaSuPWTRZ67946145;     ivwFjZbkIQYaSuPWTRZ67946145 = ivwFjZbkIQYaSuPWTRZ43785280;     ivwFjZbkIQYaSuPWTRZ43785280 = ivwFjZbkIQYaSuPWTRZ30373331;     ivwFjZbkIQYaSuPWTRZ30373331 = ivwFjZbkIQYaSuPWTRZ63121106;     ivwFjZbkIQYaSuPWTRZ63121106 = ivwFjZbkIQYaSuPWTRZ68602463;     ivwFjZbkIQYaSuPWTRZ68602463 = ivwFjZbkIQYaSuPWTRZ44587539;     ivwFjZbkIQYaSuPWTRZ44587539 = ivwFjZbkIQYaSuPWTRZ9146794;     ivwFjZbkIQYaSuPWTRZ9146794 = ivwFjZbkIQYaSuPWTRZ59633304;     ivwFjZbkIQYaSuPWTRZ59633304 = ivwFjZbkIQYaSuPWTRZ77037470;     ivwFjZbkIQYaSuPWTRZ77037470 = ivwFjZbkIQYaSuPWTRZ42369;     ivwFjZbkIQYaSuPWTRZ42369 = ivwFjZbkIQYaSuPWTRZ64190776;     ivwFjZbkIQYaSuPWTRZ64190776 = ivwFjZbkIQYaSuPWTRZ39102455;     ivwFjZbkIQYaSuPWTRZ39102455 = ivwFjZbkIQYaSuPWTRZ88597060;     ivwFjZbkIQYaSuPWTRZ88597060 = ivwFjZbkIQYaSuPWTRZ78871698;     ivwFjZbkIQYaSuPWTRZ78871698 = ivwFjZbkIQYaSuPWTRZ53448646;     ivwFjZbkIQYaSuPWTRZ53448646 = ivwFjZbkIQYaSuPWTRZ94354226;     ivwFjZbkIQYaSuPWTRZ94354226 = ivwFjZbkIQYaSuPWTRZ24535050;     ivwFjZbkIQYaSuPWTRZ24535050 = ivwFjZbkIQYaSuPWTRZ40680880;     ivwFjZbkIQYaSuPWTRZ40680880 = ivwFjZbkIQYaSuPWTRZ40929966;     ivwFjZbkIQYaSuPWTRZ40929966 = ivwFjZbkIQYaSuPWTRZ45454428;     ivwFjZbkIQYaSuPWTRZ45454428 = ivwFjZbkIQYaSuPWTRZ13200348;     ivwFjZbkIQYaSuPWTRZ13200348 = ivwFjZbkIQYaSuPWTRZ22838489;     ivwFjZbkIQYaSuPWTRZ22838489 = ivwFjZbkIQYaSuPWTRZ30493049;     ivwFjZbkIQYaSuPWTRZ30493049 = ivwFjZbkIQYaSuPWTRZ70263441;     ivwFjZbkIQYaSuPWTRZ70263441 = ivwFjZbkIQYaSuPWTRZ57798029;     ivwFjZbkIQYaSuPWTRZ57798029 = ivwFjZbkIQYaSuPWTRZ28967029;     ivwFjZbkIQYaSuPWTRZ28967029 = ivwFjZbkIQYaSuPWTRZ86128036;     ivwFjZbkIQYaSuPWTRZ86128036 = ivwFjZbkIQYaSuPWTRZ92966768;     ivwFjZbkIQYaSuPWTRZ92966768 = ivwFjZbkIQYaSuPWTRZ94930350;     ivwFjZbkIQYaSuPWTRZ94930350 = ivwFjZbkIQYaSuPWTRZ95692388;     ivwFjZbkIQYaSuPWTRZ95692388 = ivwFjZbkIQYaSuPWTRZ14295158;     ivwFjZbkIQYaSuPWTRZ14295158 = ivwFjZbkIQYaSuPWTRZ82623872;     ivwFjZbkIQYaSuPWTRZ82623872 = ivwFjZbkIQYaSuPWTRZ62489678;     ivwFjZbkIQYaSuPWTRZ62489678 = ivwFjZbkIQYaSuPWTRZ93979608;     ivwFjZbkIQYaSuPWTRZ93979608 = ivwFjZbkIQYaSuPWTRZ66714735;     ivwFjZbkIQYaSuPWTRZ66714735 = ivwFjZbkIQYaSuPWTRZ98018416;     ivwFjZbkIQYaSuPWTRZ98018416 = ivwFjZbkIQYaSuPWTRZ59288272;     ivwFjZbkIQYaSuPWTRZ59288272 = ivwFjZbkIQYaSuPWTRZ10112882;     ivwFjZbkIQYaSuPWTRZ10112882 = ivwFjZbkIQYaSuPWTRZ35720269;     ivwFjZbkIQYaSuPWTRZ35720269 = ivwFjZbkIQYaSuPWTRZ94023661;     ivwFjZbkIQYaSuPWTRZ94023661 = ivwFjZbkIQYaSuPWTRZ51739334;     ivwFjZbkIQYaSuPWTRZ51739334 = ivwFjZbkIQYaSuPWTRZ70979287;     ivwFjZbkIQYaSuPWTRZ70979287 = ivwFjZbkIQYaSuPWTRZ40304121;     ivwFjZbkIQYaSuPWTRZ40304121 = ivwFjZbkIQYaSuPWTRZ83712110;     ivwFjZbkIQYaSuPWTRZ83712110 = ivwFjZbkIQYaSuPWTRZ19704983;     ivwFjZbkIQYaSuPWTRZ19704983 = ivwFjZbkIQYaSuPWTRZ11232175;     ivwFjZbkIQYaSuPWTRZ11232175 = ivwFjZbkIQYaSuPWTRZ59159290;     ivwFjZbkIQYaSuPWTRZ59159290 = ivwFjZbkIQYaSuPWTRZ10430520;     ivwFjZbkIQYaSuPWTRZ10430520 = ivwFjZbkIQYaSuPWTRZ74867442;     ivwFjZbkIQYaSuPWTRZ74867442 = ivwFjZbkIQYaSuPWTRZ75539221;     ivwFjZbkIQYaSuPWTRZ75539221 = ivwFjZbkIQYaSuPWTRZ26621114;     ivwFjZbkIQYaSuPWTRZ26621114 = ivwFjZbkIQYaSuPWTRZ42513775;     ivwFjZbkIQYaSuPWTRZ42513775 = ivwFjZbkIQYaSuPWTRZ89798415;     ivwFjZbkIQYaSuPWTRZ89798415 = ivwFjZbkIQYaSuPWTRZ81251944;     ivwFjZbkIQYaSuPWTRZ81251944 = ivwFjZbkIQYaSuPWTRZ37686069;     ivwFjZbkIQYaSuPWTRZ37686069 = ivwFjZbkIQYaSuPWTRZ45107657;     ivwFjZbkIQYaSuPWTRZ45107657 = ivwFjZbkIQYaSuPWTRZ13292231;     ivwFjZbkIQYaSuPWTRZ13292231 = ivwFjZbkIQYaSuPWTRZ60109889;     ivwFjZbkIQYaSuPWTRZ60109889 = ivwFjZbkIQYaSuPWTRZ5323078;     ivwFjZbkIQYaSuPWTRZ5323078 = ivwFjZbkIQYaSuPWTRZ39635435;     ivwFjZbkIQYaSuPWTRZ39635435 = ivwFjZbkIQYaSuPWTRZ58459502;     ivwFjZbkIQYaSuPWTRZ58459502 = ivwFjZbkIQYaSuPWTRZ16180025;     ivwFjZbkIQYaSuPWTRZ16180025 = ivwFjZbkIQYaSuPWTRZ64702953;     ivwFjZbkIQYaSuPWTRZ64702953 = ivwFjZbkIQYaSuPWTRZ81345081;     ivwFjZbkIQYaSuPWTRZ81345081 = ivwFjZbkIQYaSuPWTRZ85747210;     ivwFjZbkIQYaSuPWTRZ85747210 = ivwFjZbkIQYaSuPWTRZ81566903;     ivwFjZbkIQYaSuPWTRZ81566903 = ivwFjZbkIQYaSuPWTRZ76612776;     ivwFjZbkIQYaSuPWTRZ76612776 = ivwFjZbkIQYaSuPWTRZ94617451;     ivwFjZbkIQYaSuPWTRZ94617451 = ivwFjZbkIQYaSuPWTRZ12156964;     ivwFjZbkIQYaSuPWTRZ12156964 = ivwFjZbkIQYaSuPWTRZ55430229;     ivwFjZbkIQYaSuPWTRZ55430229 = ivwFjZbkIQYaSuPWTRZ35065954;     ivwFjZbkIQYaSuPWTRZ35065954 = ivwFjZbkIQYaSuPWTRZ14422169;     ivwFjZbkIQYaSuPWTRZ14422169 = ivwFjZbkIQYaSuPWTRZ4960611;     ivwFjZbkIQYaSuPWTRZ4960611 = ivwFjZbkIQYaSuPWTRZ46906305;     ivwFjZbkIQYaSuPWTRZ46906305 = ivwFjZbkIQYaSuPWTRZ93715093;     ivwFjZbkIQYaSuPWTRZ93715093 = ivwFjZbkIQYaSuPWTRZ97489812;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void qVkzZuarTHSXsZnPdkL53177100() {     int vAtLTjUjjZYIdQdTVge52144210 = -973095923;    int vAtLTjUjjZYIdQdTVge60349874 = -671686774;    int vAtLTjUjjZYIdQdTVge49928697 = -870794284;    int vAtLTjUjjZYIdQdTVge16300967 = -449959369;    int vAtLTjUjjZYIdQdTVge9112551 = -160210847;    int vAtLTjUjjZYIdQdTVge55978093 = -361265711;    int vAtLTjUjjZYIdQdTVge10762307 = -469219980;    int vAtLTjUjjZYIdQdTVge2409092 = -201475641;    int vAtLTjUjjZYIdQdTVge92097143 = -833550948;    int vAtLTjUjjZYIdQdTVge21243187 = -519017248;    int vAtLTjUjjZYIdQdTVge39497423 = -835761367;    int vAtLTjUjjZYIdQdTVge93377304 = -165344063;    int vAtLTjUjjZYIdQdTVge81158905 = 90074770;    int vAtLTjUjjZYIdQdTVge76720909 = 7125351;    int vAtLTjUjjZYIdQdTVge14119833 = -669443776;    int vAtLTjUjjZYIdQdTVge40102166 = -798171512;    int vAtLTjUjjZYIdQdTVge47588114 = -382637612;    int vAtLTjUjjZYIdQdTVge56898804 = 89123381;    int vAtLTjUjjZYIdQdTVge29536690 = -228878367;    int vAtLTjUjjZYIdQdTVge87528002 = -954160395;    int vAtLTjUjjZYIdQdTVge85330552 = -76930745;    int vAtLTjUjjZYIdQdTVge34447244 = 2595571;    int vAtLTjUjjZYIdQdTVge67198213 = -938193983;    int vAtLTjUjjZYIdQdTVge28134741 = -721426922;    int vAtLTjUjjZYIdQdTVge46639033 = -953394580;    int vAtLTjUjjZYIdQdTVge9187093 = -622895407;    int vAtLTjUjjZYIdQdTVge45775204 = -844884055;    int vAtLTjUjjZYIdQdTVge83622330 = 72957253;    int vAtLTjUjjZYIdQdTVge3018784 = -66435536;    int vAtLTjUjjZYIdQdTVge63037872 = -845552024;    int vAtLTjUjjZYIdQdTVge96293068 = -314684121;    int vAtLTjUjjZYIdQdTVge40138404 = -998411720;    int vAtLTjUjjZYIdQdTVge27289181 = 15295606;    int vAtLTjUjjZYIdQdTVge71693362 = -817215455;    int vAtLTjUjjZYIdQdTVge34546525 = -167748159;    int vAtLTjUjjZYIdQdTVge51517318 = -559689411;    int vAtLTjUjjZYIdQdTVge13806943 = -118802418;    int vAtLTjUjjZYIdQdTVge1574299 = -768863284;    int vAtLTjUjjZYIdQdTVge29641347 = -735619144;    int vAtLTjUjjZYIdQdTVge77435041 = -990203946;    int vAtLTjUjjZYIdQdTVge50313627 = -202168324;    int vAtLTjUjjZYIdQdTVge61209708 = -528644409;    int vAtLTjUjjZYIdQdTVge31681063 = -342075257;    int vAtLTjUjjZYIdQdTVge49924366 = -338667797;    int vAtLTjUjjZYIdQdTVge5438492 = -978893486;    int vAtLTjUjjZYIdQdTVge68533949 = -92633700;    int vAtLTjUjjZYIdQdTVge39312200 = 22068084;    int vAtLTjUjjZYIdQdTVge53920358 = -556089335;    int vAtLTjUjjZYIdQdTVge12606208 = 96318552;    int vAtLTjUjjZYIdQdTVge2639692 = -462274824;    int vAtLTjUjjZYIdQdTVge4080569 = -262452230;    int vAtLTjUjjZYIdQdTVge75510186 = -309109983;    int vAtLTjUjjZYIdQdTVge24694772 = -642281922;    int vAtLTjUjjZYIdQdTVge52346108 = -771122887;    int vAtLTjUjjZYIdQdTVge67846548 = -756195055;    int vAtLTjUjjZYIdQdTVge17696966 = -875691495;    int vAtLTjUjjZYIdQdTVge93151660 = -733492791;    int vAtLTjUjjZYIdQdTVge21793956 = -49367363;    int vAtLTjUjjZYIdQdTVge69661933 = -496564790;    int vAtLTjUjjZYIdQdTVge99925458 = -537315441;    int vAtLTjUjjZYIdQdTVge10202890 = -516381656;    int vAtLTjUjjZYIdQdTVge27139976 = -442177234;    int vAtLTjUjjZYIdQdTVge99390308 = -35040105;    int vAtLTjUjjZYIdQdTVge29059271 = -987998924;    int vAtLTjUjjZYIdQdTVge24950119 = -104333128;    int vAtLTjUjjZYIdQdTVge99359018 = -837349648;    int vAtLTjUjjZYIdQdTVge66088124 = -80639670;    int vAtLTjUjjZYIdQdTVge9465543 = -92709775;    int vAtLTjUjjZYIdQdTVge42174384 = -825126490;    int vAtLTjUjjZYIdQdTVge62602514 = -9754366;    int vAtLTjUjjZYIdQdTVge26295223 = -579369094;    int vAtLTjUjjZYIdQdTVge46013815 = -613774328;    int vAtLTjUjjZYIdQdTVge27257458 = -175257475;    int vAtLTjUjjZYIdQdTVge52101648 = -238674422;    int vAtLTjUjjZYIdQdTVge37214376 = -651992072;    int vAtLTjUjjZYIdQdTVge24120844 = -548286337;    int vAtLTjUjjZYIdQdTVge2766182 = -655329173;    int vAtLTjUjjZYIdQdTVge17273848 = -499526186;    int vAtLTjUjjZYIdQdTVge22696250 = -742533436;    int vAtLTjUjjZYIdQdTVge78105083 = -760760880;    int vAtLTjUjjZYIdQdTVge69874892 = -544963491;    int vAtLTjUjjZYIdQdTVge91854845 = -188794721;    int vAtLTjUjjZYIdQdTVge71016122 = 76638701;    int vAtLTjUjjZYIdQdTVge379092 = -604160713;    int vAtLTjUjjZYIdQdTVge58957304 = -483099795;    int vAtLTjUjjZYIdQdTVge20782882 = 94425861;    int vAtLTjUjjZYIdQdTVge15443632 = -256129798;    int vAtLTjUjjZYIdQdTVge74943072 = -213581507;    int vAtLTjUjjZYIdQdTVge3846815 = 38979599;    int vAtLTjUjjZYIdQdTVge16849559 = -292056665;    int vAtLTjUjjZYIdQdTVge58365658 = -826196620;    int vAtLTjUjjZYIdQdTVge92012986 = 30564944;    int vAtLTjUjjZYIdQdTVge31912365 = -172298495;    int vAtLTjUjjZYIdQdTVge29715889 = -98303703;    int vAtLTjUjjZYIdQdTVge67232151 = -373822290;    int vAtLTjUjjZYIdQdTVge23173651 = -759991090;    int vAtLTjUjjZYIdQdTVge61819400 = -393604304;    int vAtLTjUjjZYIdQdTVge2621792 = -354076333;    int vAtLTjUjjZYIdQdTVge24974247 = -134334670;    int vAtLTjUjjZYIdQdTVge6079473 = -973095923;     vAtLTjUjjZYIdQdTVge52144210 = vAtLTjUjjZYIdQdTVge60349874;     vAtLTjUjjZYIdQdTVge60349874 = vAtLTjUjjZYIdQdTVge49928697;     vAtLTjUjjZYIdQdTVge49928697 = vAtLTjUjjZYIdQdTVge16300967;     vAtLTjUjjZYIdQdTVge16300967 = vAtLTjUjjZYIdQdTVge9112551;     vAtLTjUjjZYIdQdTVge9112551 = vAtLTjUjjZYIdQdTVge55978093;     vAtLTjUjjZYIdQdTVge55978093 = vAtLTjUjjZYIdQdTVge10762307;     vAtLTjUjjZYIdQdTVge10762307 = vAtLTjUjjZYIdQdTVge2409092;     vAtLTjUjjZYIdQdTVge2409092 = vAtLTjUjjZYIdQdTVge92097143;     vAtLTjUjjZYIdQdTVge92097143 = vAtLTjUjjZYIdQdTVge21243187;     vAtLTjUjjZYIdQdTVge21243187 = vAtLTjUjjZYIdQdTVge39497423;     vAtLTjUjjZYIdQdTVge39497423 = vAtLTjUjjZYIdQdTVge93377304;     vAtLTjUjjZYIdQdTVge93377304 = vAtLTjUjjZYIdQdTVge81158905;     vAtLTjUjjZYIdQdTVge81158905 = vAtLTjUjjZYIdQdTVge76720909;     vAtLTjUjjZYIdQdTVge76720909 = vAtLTjUjjZYIdQdTVge14119833;     vAtLTjUjjZYIdQdTVge14119833 = vAtLTjUjjZYIdQdTVge40102166;     vAtLTjUjjZYIdQdTVge40102166 = vAtLTjUjjZYIdQdTVge47588114;     vAtLTjUjjZYIdQdTVge47588114 = vAtLTjUjjZYIdQdTVge56898804;     vAtLTjUjjZYIdQdTVge56898804 = vAtLTjUjjZYIdQdTVge29536690;     vAtLTjUjjZYIdQdTVge29536690 = vAtLTjUjjZYIdQdTVge87528002;     vAtLTjUjjZYIdQdTVge87528002 = vAtLTjUjjZYIdQdTVge85330552;     vAtLTjUjjZYIdQdTVge85330552 = vAtLTjUjjZYIdQdTVge34447244;     vAtLTjUjjZYIdQdTVge34447244 = vAtLTjUjjZYIdQdTVge67198213;     vAtLTjUjjZYIdQdTVge67198213 = vAtLTjUjjZYIdQdTVge28134741;     vAtLTjUjjZYIdQdTVge28134741 = vAtLTjUjjZYIdQdTVge46639033;     vAtLTjUjjZYIdQdTVge46639033 = vAtLTjUjjZYIdQdTVge9187093;     vAtLTjUjjZYIdQdTVge9187093 = vAtLTjUjjZYIdQdTVge45775204;     vAtLTjUjjZYIdQdTVge45775204 = vAtLTjUjjZYIdQdTVge83622330;     vAtLTjUjjZYIdQdTVge83622330 = vAtLTjUjjZYIdQdTVge3018784;     vAtLTjUjjZYIdQdTVge3018784 = vAtLTjUjjZYIdQdTVge63037872;     vAtLTjUjjZYIdQdTVge63037872 = vAtLTjUjjZYIdQdTVge96293068;     vAtLTjUjjZYIdQdTVge96293068 = vAtLTjUjjZYIdQdTVge40138404;     vAtLTjUjjZYIdQdTVge40138404 = vAtLTjUjjZYIdQdTVge27289181;     vAtLTjUjjZYIdQdTVge27289181 = vAtLTjUjjZYIdQdTVge71693362;     vAtLTjUjjZYIdQdTVge71693362 = vAtLTjUjjZYIdQdTVge34546525;     vAtLTjUjjZYIdQdTVge34546525 = vAtLTjUjjZYIdQdTVge51517318;     vAtLTjUjjZYIdQdTVge51517318 = vAtLTjUjjZYIdQdTVge13806943;     vAtLTjUjjZYIdQdTVge13806943 = vAtLTjUjjZYIdQdTVge1574299;     vAtLTjUjjZYIdQdTVge1574299 = vAtLTjUjjZYIdQdTVge29641347;     vAtLTjUjjZYIdQdTVge29641347 = vAtLTjUjjZYIdQdTVge77435041;     vAtLTjUjjZYIdQdTVge77435041 = vAtLTjUjjZYIdQdTVge50313627;     vAtLTjUjjZYIdQdTVge50313627 = vAtLTjUjjZYIdQdTVge61209708;     vAtLTjUjjZYIdQdTVge61209708 = vAtLTjUjjZYIdQdTVge31681063;     vAtLTjUjjZYIdQdTVge31681063 = vAtLTjUjjZYIdQdTVge49924366;     vAtLTjUjjZYIdQdTVge49924366 = vAtLTjUjjZYIdQdTVge5438492;     vAtLTjUjjZYIdQdTVge5438492 = vAtLTjUjjZYIdQdTVge68533949;     vAtLTjUjjZYIdQdTVge68533949 = vAtLTjUjjZYIdQdTVge39312200;     vAtLTjUjjZYIdQdTVge39312200 = vAtLTjUjjZYIdQdTVge53920358;     vAtLTjUjjZYIdQdTVge53920358 = vAtLTjUjjZYIdQdTVge12606208;     vAtLTjUjjZYIdQdTVge12606208 = vAtLTjUjjZYIdQdTVge2639692;     vAtLTjUjjZYIdQdTVge2639692 = vAtLTjUjjZYIdQdTVge4080569;     vAtLTjUjjZYIdQdTVge4080569 = vAtLTjUjjZYIdQdTVge75510186;     vAtLTjUjjZYIdQdTVge75510186 = vAtLTjUjjZYIdQdTVge24694772;     vAtLTjUjjZYIdQdTVge24694772 = vAtLTjUjjZYIdQdTVge52346108;     vAtLTjUjjZYIdQdTVge52346108 = vAtLTjUjjZYIdQdTVge67846548;     vAtLTjUjjZYIdQdTVge67846548 = vAtLTjUjjZYIdQdTVge17696966;     vAtLTjUjjZYIdQdTVge17696966 = vAtLTjUjjZYIdQdTVge93151660;     vAtLTjUjjZYIdQdTVge93151660 = vAtLTjUjjZYIdQdTVge21793956;     vAtLTjUjjZYIdQdTVge21793956 = vAtLTjUjjZYIdQdTVge69661933;     vAtLTjUjjZYIdQdTVge69661933 = vAtLTjUjjZYIdQdTVge99925458;     vAtLTjUjjZYIdQdTVge99925458 = vAtLTjUjjZYIdQdTVge10202890;     vAtLTjUjjZYIdQdTVge10202890 = vAtLTjUjjZYIdQdTVge27139976;     vAtLTjUjjZYIdQdTVge27139976 = vAtLTjUjjZYIdQdTVge99390308;     vAtLTjUjjZYIdQdTVge99390308 = vAtLTjUjjZYIdQdTVge29059271;     vAtLTjUjjZYIdQdTVge29059271 = vAtLTjUjjZYIdQdTVge24950119;     vAtLTjUjjZYIdQdTVge24950119 = vAtLTjUjjZYIdQdTVge99359018;     vAtLTjUjjZYIdQdTVge99359018 = vAtLTjUjjZYIdQdTVge66088124;     vAtLTjUjjZYIdQdTVge66088124 = vAtLTjUjjZYIdQdTVge9465543;     vAtLTjUjjZYIdQdTVge9465543 = vAtLTjUjjZYIdQdTVge42174384;     vAtLTjUjjZYIdQdTVge42174384 = vAtLTjUjjZYIdQdTVge62602514;     vAtLTjUjjZYIdQdTVge62602514 = vAtLTjUjjZYIdQdTVge26295223;     vAtLTjUjjZYIdQdTVge26295223 = vAtLTjUjjZYIdQdTVge46013815;     vAtLTjUjjZYIdQdTVge46013815 = vAtLTjUjjZYIdQdTVge27257458;     vAtLTjUjjZYIdQdTVge27257458 = vAtLTjUjjZYIdQdTVge52101648;     vAtLTjUjjZYIdQdTVge52101648 = vAtLTjUjjZYIdQdTVge37214376;     vAtLTjUjjZYIdQdTVge37214376 = vAtLTjUjjZYIdQdTVge24120844;     vAtLTjUjjZYIdQdTVge24120844 = vAtLTjUjjZYIdQdTVge2766182;     vAtLTjUjjZYIdQdTVge2766182 = vAtLTjUjjZYIdQdTVge17273848;     vAtLTjUjjZYIdQdTVge17273848 = vAtLTjUjjZYIdQdTVge22696250;     vAtLTjUjjZYIdQdTVge22696250 = vAtLTjUjjZYIdQdTVge78105083;     vAtLTjUjjZYIdQdTVge78105083 = vAtLTjUjjZYIdQdTVge69874892;     vAtLTjUjjZYIdQdTVge69874892 = vAtLTjUjjZYIdQdTVge91854845;     vAtLTjUjjZYIdQdTVge91854845 = vAtLTjUjjZYIdQdTVge71016122;     vAtLTjUjjZYIdQdTVge71016122 = vAtLTjUjjZYIdQdTVge379092;     vAtLTjUjjZYIdQdTVge379092 = vAtLTjUjjZYIdQdTVge58957304;     vAtLTjUjjZYIdQdTVge58957304 = vAtLTjUjjZYIdQdTVge20782882;     vAtLTjUjjZYIdQdTVge20782882 = vAtLTjUjjZYIdQdTVge15443632;     vAtLTjUjjZYIdQdTVge15443632 = vAtLTjUjjZYIdQdTVge74943072;     vAtLTjUjjZYIdQdTVge74943072 = vAtLTjUjjZYIdQdTVge3846815;     vAtLTjUjjZYIdQdTVge3846815 = vAtLTjUjjZYIdQdTVge16849559;     vAtLTjUjjZYIdQdTVge16849559 = vAtLTjUjjZYIdQdTVge58365658;     vAtLTjUjjZYIdQdTVge58365658 = vAtLTjUjjZYIdQdTVge92012986;     vAtLTjUjjZYIdQdTVge92012986 = vAtLTjUjjZYIdQdTVge31912365;     vAtLTjUjjZYIdQdTVge31912365 = vAtLTjUjjZYIdQdTVge29715889;     vAtLTjUjjZYIdQdTVge29715889 = vAtLTjUjjZYIdQdTVge67232151;     vAtLTjUjjZYIdQdTVge67232151 = vAtLTjUjjZYIdQdTVge23173651;     vAtLTjUjjZYIdQdTVge23173651 = vAtLTjUjjZYIdQdTVge61819400;     vAtLTjUjjZYIdQdTVge61819400 = vAtLTjUjjZYIdQdTVge2621792;     vAtLTjUjjZYIdQdTVge2621792 = vAtLTjUjjZYIdQdTVge24974247;     vAtLTjUjjZYIdQdTVge24974247 = vAtLTjUjjZYIdQdTVge6079473;     vAtLTjUjjZYIdQdTVge6079473 = vAtLTjUjjZYIdQdTVge52144210;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void uskSSYXrIINJXEqJFsC59505647() {     int jGEvZtvlAOScVuaORLS6798608 = -310623507;    int jGEvZtvlAOScVuaORLS7347493 = -151251588;    int jGEvZtvlAOScVuaORLS10661344 = -156178898;    int jGEvZtvlAOScVuaORLS87735908 = -456061780;    int jGEvZtvlAOScVuaORLS83564221 = -932646086;    int jGEvZtvlAOScVuaORLS70152490 = -490416547;    int jGEvZtvlAOScVuaORLS31863010 = -771112653;    int jGEvZtvlAOScVuaORLS31584195 = -702043874;    int jGEvZtvlAOScVuaORLS79871553 = -880404318;    int jGEvZtvlAOScVuaORLS3875172 = -797818518;    int jGEvZtvlAOScVuaORLS18108718 = -361117939;    int jGEvZtvlAOScVuaORLS56142018 = -351768152;    int jGEvZtvlAOScVuaORLS44976220 = -813465534;    int jGEvZtvlAOScVuaORLS69687340 = -704978227;    int jGEvZtvlAOScVuaORLS44343906 = -576565407;    int jGEvZtvlAOScVuaORLS29869701 = -428331076;    int jGEvZtvlAOScVuaORLS47419877 = -856237440;    int jGEvZtvlAOScVuaORLS24495392 = 25558914;    int jGEvZtvlAOScVuaORLS30757290 = -514689915;    int jGEvZtvlAOScVuaORLS5162559 = -199526541;    int jGEvZtvlAOScVuaORLS19504940 = -645013896;    int jGEvZtvlAOScVuaORLS85699832 = -163848537;    int jGEvZtvlAOScVuaORLS3668045 = -424937404;    int jGEvZtvlAOScVuaORLS29563110 = -420467739;    int jGEvZtvlAOScVuaORLS42391649 = -226308032;    int jGEvZtvlAOScVuaORLS50428040 = -626604191;    int jGEvZtvlAOScVuaORLS47765128 = -299728334;    int jGEvZtvlAOScVuaORLS36871331 = 64905393;    int jGEvZtvlAOScVuaORLS42916460 = -446680412;    int jGEvZtvlAOScVuaORLS57473281 = -36309992;    int jGEvZtvlAOScVuaORLS47998597 = -863556647;    int jGEvZtvlAOScVuaORLS71130014 = -309908248;    int jGEvZtvlAOScVuaORLS94945057 = -541222008;    int jGEvZtvlAOScVuaORLS66349255 = -497336265;    int jGEvZtvlAOScVuaORLS69050681 = -385611418;    int jGEvZtvlAOScVuaORLS38843860 = -807685007;    int jGEvZtvlAOScVuaORLS88511430 = 30770961;    int jGEvZtvlAOScVuaORLS14551538 = -642792305;    int jGEvZtvlAOScVuaORLS80410996 = -17567745;    int jGEvZtvlAOScVuaORLS1421437 = -648512545;    int jGEvZtvlAOScVuaORLS6273028 = -314718482;    int jGEvZtvlAOScVuaORLS97884366 = -36176496;    int jGEvZtvlAOScVuaORLS22681246 = -182580575;    int jGEvZtvlAOScVuaORLS58918765 = -912347463;    int jGEvZtvlAOScVuaORLS65422555 = -11411084;    int jGEvZtvlAOScVuaORLS23867552 = -161423315;    int jGEvZtvlAOScVuaORLS55785912 = -4989300;    int jGEvZtvlAOScVuaORLS77347667 = -533741707;    int jGEvZtvlAOScVuaORLS54948975 = -903411637;    int jGEvZtvlAOScVuaORLS47481354 = -702294118;    int jGEvZtvlAOScVuaORLS79194108 = 80332268;    int jGEvZtvlAOScVuaORLS64892336 = -824175966;    int jGEvZtvlAOScVuaORLS56422775 = -382197379;    int jGEvZtvlAOScVuaORLS9761866 = -667009372;    int jGEvZtvlAOScVuaORLS40000708 = -52103736;    int jGEvZtvlAOScVuaORLS21098775 = -46774971;    int jGEvZtvlAOScVuaORLS3679449 = -726314184;    int jGEvZtvlAOScVuaORLS81098233 = -735711160;    int jGEvZtvlAOScVuaORLS45344259 = -129753749;    int jGEvZtvlAOScVuaORLS33136182 = -206041895;    int jGEvZtvlAOScVuaORLS22387363 = -90688214;    int jGEvZtvlAOScVuaORLS94991679 = -736018046;    int jGEvZtvlAOScVuaORLS88667735 = -155363462;    int jGEvZtvlAOScVuaORLS22398272 = -744094326;    int jGEvZtvlAOScVuaORLS55876575 = -934261872;    int jGEvZtvlAOScVuaORLS46978703 = 48790308;    int jGEvZtvlAOScVuaORLS61196961 = -810546144;    int jGEvZtvlAOScVuaORLS78626965 = -216129270;    int jGEvZtvlAOScVuaORLS636659 = -219366809;    int jGEvZtvlAOScVuaORLS5500046 = -768880400;    int jGEvZtvlAOScVuaORLS41358271 = -359102038;    int jGEvZtvlAOScVuaORLS32868340 = -113445136;    int jGEvZtvlAOScVuaORLS44084396 = -956873341;    int jGEvZtvlAOScVuaORLS29335854 = -866177370;    int jGEvZtvlAOScVuaORLS98889530 = -884808060;    int jGEvZtvlAOScVuaORLS21620573 = -508837401;    int jGEvZtvlAOScVuaORLS63018587 = -981267963;    int jGEvZtvlAOScVuaORLS44749280 = -512589942;    int jGEvZtvlAOScVuaORLS64140555 = -309056655;    int jGEvZtvlAOScVuaORLS18524098 = 35115282;    int jGEvZtvlAOScVuaORLS94642127 = -521614892;    int jGEvZtvlAOScVuaORLS70417460 = -765986627;    int jGEvZtvlAOScVuaORLS81922356 = -31682971;    int jGEvZtvlAOScVuaORLS95435106 = -744386294;    int jGEvZtvlAOScVuaORLS78279173 = -16642261;    int jGEvZtvlAOScVuaORLS83106260 = 60619319;    int jGEvZtvlAOScVuaORLS14707240 = -927710869;    int jGEvZtvlAOScVuaORLS85183191 = -874212637;    int jGEvZtvlAOScVuaORLS26348548 = -345232530;    int jGEvZtvlAOScVuaORLS47951907 = -238836448;    int jGEvZtvlAOScVuaORLS35164412 = 18629176;    int jGEvZtvlAOScVuaORLS7413197 = -233517879;    int jGEvZtvlAOScVuaORLS69207279 = -413038557;    int jGEvZtvlAOScVuaORLS47274814 = -811525850;    int jGEvZtvlAOScVuaORLS79034073 = -457824332;    int jGEvZtvlAOScVuaORLS11281348 = -578700436;    int jGEvZtvlAOScVuaORLS9216632 = -880813034;    int jGEvZtvlAOScVuaORLS282974 = -438486249;    int jGEvZtvlAOScVuaORLS3042190 = -978085592;    int jGEvZtvlAOScVuaORLS18443852 = -310623507;     jGEvZtvlAOScVuaORLS6798608 = jGEvZtvlAOScVuaORLS7347493;     jGEvZtvlAOScVuaORLS7347493 = jGEvZtvlAOScVuaORLS10661344;     jGEvZtvlAOScVuaORLS10661344 = jGEvZtvlAOScVuaORLS87735908;     jGEvZtvlAOScVuaORLS87735908 = jGEvZtvlAOScVuaORLS83564221;     jGEvZtvlAOScVuaORLS83564221 = jGEvZtvlAOScVuaORLS70152490;     jGEvZtvlAOScVuaORLS70152490 = jGEvZtvlAOScVuaORLS31863010;     jGEvZtvlAOScVuaORLS31863010 = jGEvZtvlAOScVuaORLS31584195;     jGEvZtvlAOScVuaORLS31584195 = jGEvZtvlAOScVuaORLS79871553;     jGEvZtvlAOScVuaORLS79871553 = jGEvZtvlAOScVuaORLS3875172;     jGEvZtvlAOScVuaORLS3875172 = jGEvZtvlAOScVuaORLS18108718;     jGEvZtvlAOScVuaORLS18108718 = jGEvZtvlAOScVuaORLS56142018;     jGEvZtvlAOScVuaORLS56142018 = jGEvZtvlAOScVuaORLS44976220;     jGEvZtvlAOScVuaORLS44976220 = jGEvZtvlAOScVuaORLS69687340;     jGEvZtvlAOScVuaORLS69687340 = jGEvZtvlAOScVuaORLS44343906;     jGEvZtvlAOScVuaORLS44343906 = jGEvZtvlAOScVuaORLS29869701;     jGEvZtvlAOScVuaORLS29869701 = jGEvZtvlAOScVuaORLS47419877;     jGEvZtvlAOScVuaORLS47419877 = jGEvZtvlAOScVuaORLS24495392;     jGEvZtvlAOScVuaORLS24495392 = jGEvZtvlAOScVuaORLS30757290;     jGEvZtvlAOScVuaORLS30757290 = jGEvZtvlAOScVuaORLS5162559;     jGEvZtvlAOScVuaORLS5162559 = jGEvZtvlAOScVuaORLS19504940;     jGEvZtvlAOScVuaORLS19504940 = jGEvZtvlAOScVuaORLS85699832;     jGEvZtvlAOScVuaORLS85699832 = jGEvZtvlAOScVuaORLS3668045;     jGEvZtvlAOScVuaORLS3668045 = jGEvZtvlAOScVuaORLS29563110;     jGEvZtvlAOScVuaORLS29563110 = jGEvZtvlAOScVuaORLS42391649;     jGEvZtvlAOScVuaORLS42391649 = jGEvZtvlAOScVuaORLS50428040;     jGEvZtvlAOScVuaORLS50428040 = jGEvZtvlAOScVuaORLS47765128;     jGEvZtvlAOScVuaORLS47765128 = jGEvZtvlAOScVuaORLS36871331;     jGEvZtvlAOScVuaORLS36871331 = jGEvZtvlAOScVuaORLS42916460;     jGEvZtvlAOScVuaORLS42916460 = jGEvZtvlAOScVuaORLS57473281;     jGEvZtvlAOScVuaORLS57473281 = jGEvZtvlAOScVuaORLS47998597;     jGEvZtvlAOScVuaORLS47998597 = jGEvZtvlAOScVuaORLS71130014;     jGEvZtvlAOScVuaORLS71130014 = jGEvZtvlAOScVuaORLS94945057;     jGEvZtvlAOScVuaORLS94945057 = jGEvZtvlAOScVuaORLS66349255;     jGEvZtvlAOScVuaORLS66349255 = jGEvZtvlAOScVuaORLS69050681;     jGEvZtvlAOScVuaORLS69050681 = jGEvZtvlAOScVuaORLS38843860;     jGEvZtvlAOScVuaORLS38843860 = jGEvZtvlAOScVuaORLS88511430;     jGEvZtvlAOScVuaORLS88511430 = jGEvZtvlAOScVuaORLS14551538;     jGEvZtvlAOScVuaORLS14551538 = jGEvZtvlAOScVuaORLS80410996;     jGEvZtvlAOScVuaORLS80410996 = jGEvZtvlAOScVuaORLS1421437;     jGEvZtvlAOScVuaORLS1421437 = jGEvZtvlAOScVuaORLS6273028;     jGEvZtvlAOScVuaORLS6273028 = jGEvZtvlAOScVuaORLS97884366;     jGEvZtvlAOScVuaORLS97884366 = jGEvZtvlAOScVuaORLS22681246;     jGEvZtvlAOScVuaORLS22681246 = jGEvZtvlAOScVuaORLS58918765;     jGEvZtvlAOScVuaORLS58918765 = jGEvZtvlAOScVuaORLS65422555;     jGEvZtvlAOScVuaORLS65422555 = jGEvZtvlAOScVuaORLS23867552;     jGEvZtvlAOScVuaORLS23867552 = jGEvZtvlAOScVuaORLS55785912;     jGEvZtvlAOScVuaORLS55785912 = jGEvZtvlAOScVuaORLS77347667;     jGEvZtvlAOScVuaORLS77347667 = jGEvZtvlAOScVuaORLS54948975;     jGEvZtvlAOScVuaORLS54948975 = jGEvZtvlAOScVuaORLS47481354;     jGEvZtvlAOScVuaORLS47481354 = jGEvZtvlAOScVuaORLS79194108;     jGEvZtvlAOScVuaORLS79194108 = jGEvZtvlAOScVuaORLS64892336;     jGEvZtvlAOScVuaORLS64892336 = jGEvZtvlAOScVuaORLS56422775;     jGEvZtvlAOScVuaORLS56422775 = jGEvZtvlAOScVuaORLS9761866;     jGEvZtvlAOScVuaORLS9761866 = jGEvZtvlAOScVuaORLS40000708;     jGEvZtvlAOScVuaORLS40000708 = jGEvZtvlAOScVuaORLS21098775;     jGEvZtvlAOScVuaORLS21098775 = jGEvZtvlAOScVuaORLS3679449;     jGEvZtvlAOScVuaORLS3679449 = jGEvZtvlAOScVuaORLS81098233;     jGEvZtvlAOScVuaORLS81098233 = jGEvZtvlAOScVuaORLS45344259;     jGEvZtvlAOScVuaORLS45344259 = jGEvZtvlAOScVuaORLS33136182;     jGEvZtvlAOScVuaORLS33136182 = jGEvZtvlAOScVuaORLS22387363;     jGEvZtvlAOScVuaORLS22387363 = jGEvZtvlAOScVuaORLS94991679;     jGEvZtvlAOScVuaORLS94991679 = jGEvZtvlAOScVuaORLS88667735;     jGEvZtvlAOScVuaORLS88667735 = jGEvZtvlAOScVuaORLS22398272;     jGEvZtvlAOScVuaORLS22398272 = jGEvZtvlAOScVuaORLS55876575;     jGEvZtvlAOScVuaORLS55876575 = jGEvZtvlAOScVuaORLS46978703;     jGEvZtvlAOScVuaORLS46978703 = jGEvZtvlAOScVuaORLS61196961;     jGEvZtvlAOScVuaORLS61196961 = jGEvZtvlAOScVuaORLS78626965;     jGEvZtvlAOScVuaORLS78626965 = jGEvZtvlAOScVuaORLS636659;     jGEvZtvlAOScVuaORLS636659 = jGEvZtvlAOScVuaORLS5500046;     jGEvZtvlAOScVuaORLS5500046 = jGEvZtvlAOScVuaORLS41358271;     jGEvZtvlAOScVuaORLS41358271 = jGEvZtvlAOScVuaORLS32868340;     jGEvZtvlAOScVuaORLS32868340 = jGEvZtvlAOScVuaORLS44084396;     jGEvZtvlAOScVuaORLS44084396 = jGEvZtvlAOScVuaORLS29335854;     jGEvZtvlAOScVuaORLS29335854 = jGEvZtvlAOScVuaORLS98889530;     jGEvZtvlAOScVuaORLS98889530 = jGEvZtvlAOScVuaORLS21620573;     jGEvZtvlAOScVuaORLS21620573 = jGEvZtvlAOScVuaORLS63018587;     jGEvZtvlAOScVuaORLS63018587 = jGEvZtvlAOScVuaORLS44749280;     jGEvZtvlAOScVuaORLS44749280 = jGEvZtvlAOScVuaORLS64140555;     jGEvZtvlAOScVuaORLS64140555 = jGEvZtvlAOScVuaORLS18524098;     jGEvZtvlAOScVuaORLS18524098 = jGEvZtvlAOScVuaORLS94642127;     jGEvZtvlAOScVuaORLS94642127 = jGEvZtvlAOScVuaORLS70417460;     jGEvZtvlAOScVuaORLS70417460 = jGEvZtvlAOScVuaORLS81922356;     jGEvZtvlAOScVuaORLS81922356 = jGEvZtvlAOScVuaORLS95435106;     jGEvZtvlAOScVuaORLS95435106 = jGEvZtvlAOScVuaORLS78279173;     jGEvZtvlAOScVuaORLS78279173 = jGEvZtvlAOScVuaORLS83106260;     jGEvZtvlAOScVuaORLS83106260 = jGEvZtvlAOScVuaORLS14707240;     jGEvZtvlAOScVuaORLS14707240 = jGEvZtvlAOScVuaORLS85183191;     jGEvZtvlAOScVuaORLS85183191 = jGEvZtvlAOScVuaORLS26348548;     jGEvZtvlAOScVuaORLS26348548 = jGEvZtvlAOScVuaORLS47951907;     jGEvZtvlAOScVuaORLS47951907 = jGEvZtvlAOScVuaORLS35164412;     jGEvZtvlAOScVuaORLS35164412 = jGEvZtvlAOScVuaORLS7413197;     jGEvZtvlAOScVuaORLS7413197 = jGEvZtvlAOScVuaORLS69207279;     jGEvZtvlAOScVuaORLS69207279 = jGEvZtvlAOScVuaORLS47274814;     jGEvZtvlAOScVuaORLS47274814 = jGEvZtvlAOScVuaORLS79034073;     jGEvZtvlAOScVuaORLS79034073 = jGEvZtvlAOScVuaORLS11281348;     jGEvZtvlAOScVuaORLS11281348 = jGEvZtvlAOScVuaORLS9216632;     jGEvZtvlAOScVuaORLS9216632 = jGEvZtvlAOScVuaORLS282974;     jGEvZtvlAOScVuaORLS282974 = jGEvZtvlAOScVuaORLS3042190;     jGEvZtvlAOScVuaORLS3042190 = jGEvZtvlAOScVuaORLS18443852;     jGEvZtvlAOScVuaORLS18443852 = jGEvZtvlAOScVuaORLS6798608;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ToVmTVWTdhpIRboqEil65834195() {     int AUrvmOAfxusAUhVCjzp61453005 = -748151091;    int AUrvmOAfxusAUhVCjzp54345112 = -730816402;    int AUrvmOAfxusAUhVCjzp71393990 = -541563511;    int AUrvmOAfxusAUhVCjzp59170849 = -462164191;    int AUrvmOAfxusAUhVCjzp58015892 = -605081325;    int AUrvmOAfxusAUhVCjzp84326887 = -619567384;    int AUrvmOAfxusAUhVCjzp52963714 = 26994675;    int AUrvmOAfxusAUhVCjzp60759298 = -102612106;    int AUrvmOAfxusAUhVCjzp67645964 = -927257689;    int AUrvmOAfxusAUhVCjzp86507157 = 23380213;    int AUrvmOAfxusAUhVCjzp96720012 = -986474512;    int AUrvmOAfxusAUhVCjzp18906732 = -538192241;    int AUrvmOAfxusAUhVCjzp8793536 = -617005839;    int AUrvmOAfxusAUhVCjzp62653770 = -317081805;    int AUrvmOAfxusAUhVCjzp74567979 = -483687039;    int AUrvmOAfxusAUhVCjzp19637237 = -58490640;    int AUrvmOAfxusAUhVCjzp47251641 = -229837269;    int AUrvmOAfxusAUhVCjzp92091978 = -38005553;    int AUrvmOAfxusAUhVCjzp31977891 = -800501463;    int AUrvmOAfxusAUhVCjzp22797114 = -544892688;    int AUrvmOAfxusAUhVCjzp53679327 = -113097047;    int AUrvmOAfxusAUhVCjzp36952422 = -330292645;    int AUrvmOAfxusAUhVCjzp40137877 = 88319175;    int AUrvmOAfxusAUhVCjzp30991479 = -119508555;    int AUrvmOAfxusAUhVCjzp38144265 = -599221484;    int AUrvmOAfxusAUhVCjzp91668986 = -630312976;    int AUrvmOAfxusAUhVCjzp49755052 = -854572613;    int AUrvmOAfxusAUhVCjzp90120330 = 56853532;    int AUrvmOAfxusAUhVCjzp82814137 = -826925287;    int AUrvmOAfxusAUhVCjzp51908690 = -327067960;    int AUrvmOAfxusAUhVCjzp99704125 = -312429172;    int AUrvmOAfxusAUhVCjzp2121625 = -721404776;    int AUrvmOAfxusAUhVCjzp62600934 = 2260378;    int AUrvmOAfxusAUhVCjzp61005148 = -177457075;    int AUrvmOAfxusAUhVCjzp3554839 = -603474678;    int AUrvmOAfxusAUhVCjzp26170403 = 44319396;    int AUrvmOAfxusAUhVCjzp63215918 = -919655659;    int AUrvmOAfxusAUhVCjzp27528777 = -516721326;    int AUrvmOAfxusAUhVCjzp31180645 = -399516347;    int AUrvmOAfxusAUhVCjzp25407831 = -306821144;    int AUrvmOAfxusAUhVCjzp62232428 = -427268640;    int AUrvmOAfxusAUhVCjzp34559025 = -643708582;    int AUrvmOAfxusAUhVCjzp13681429 = -23085892;    int AUrvmOAfxusAUhVCjzp67913164 = -386027128;    int AUrvmOAfxusAUhVCjzp25406619 = -143928682;    int AUrvmOAfxusAUhVCjzp79201153 = -230212930;    int AUrvmOAfxusAUhVCjzp72259623 = -32046684;    int AUrvmOAfxusAUhVCjzp774977 = -511394080;    int AUrvmOAfxusAUhVCjzp97291741 = -803141826;    int AUrvmOAfxusAUhVCjzp92323016 = -942313412;    int AUrvmOAfxusAUhVCjzp54307647 = -676883234;    int AUrvmOAfxusAUhVCjzp54274486 = -239241949;    int AUrvmOAfxusAUhVCjzp88150777 = -122112836;    int AUrvmOAfxusAUhVCjzp67177623 = -562895856;    int AUrvmOAfxusAUhVCjzp12154868 = -448012417;    int AUrvmOAfxusAUhVCjzp24500583 = -317858447;    int AUrvmOAfxusAUhVCjzp14207236 = -719135577;    int AUrvmOAfxusAUhVCjzp40402511 = -322054957;    int AUrvmOAfxusAUhVCjzp21026585 = -862942708;    int AUrvmOAfxusAUhVCjzp66346905 = -974768350;    int AUrvmOAfxusAUhVCjzp34571836 = -764994771;    int AUrvmOAfxusAUhVCjzp62843383 = 70141142;    int AUrvmOAfxusAUhVCjzp77945161 = -275686820;    int AUrvmOAfxusAUhVCjzp15737274 = -500189729;    int AUrvmOAfxusAUhVCjzp86803031 = -664190615;    int AUrvmOAfxusAUhVCjzp94598387 = -165069736;    int AUrvmOAfxusAUhVCjzp56305798 = -440452619;    int AUrvmOAfxusAUhVCjzp47788387 = -339548765;    int AUrvmOAfxusAUhVCjzp59098932 = -713607127;    int AUrvmOAfxusAUhVCjzp48397577 = -428006435;    int AUrvmOAfxusAUhVCjzp56421318 = -138834981;    int AUrvmOAfxusAUhVCjzp19722864 = -713115943;    int AUrvmOAfxusAUhVCjzp60911333 = -638489207;    int AUrvmOAfxusAUhVCjzp6570061 = -393680319;    int AUrvmOAfxusAUhVCjzp60564685 = -17624048;    int AUrvmOAfxusAUhVCjzp19120303 = -469388465;    int AUrvmOAfxusAUhVCjzp23270994 = -207206753;    int AUrvmOAfxusAUhVCjzp72224712 = -525653697;    int AUrvmOAfxusAUhVCjzp5584861 = -975579873;    int AUrvmOAfxusAUhVCjzp58943112 = -269008555;    int AUrvmOAfxusAUhVCjzp19409364 = -498266293;    int AUrvmOAfxusAUhVCjzp48980076 = -243178534;    int AUrvmOAfxusAUhVCjzp92828589 = -140004643;    int AUrvmOAfxusAUhVCjzp90491120 = -884611875;    int AUrvmOAfxusAUhVCjzp97601043 = -650184727;    int AUrvmOAfxusAUhVCjzp45429640 = 26812776;    int AUrvmOAfxusAUhVCjzp13970847 = -499291940;    int AUrvmOAfxusAUhVCjzp95423310 = -434843767;    int AUrvmOAfxusAUhVCjzp48850280 = -729444658;    int AUrvmOAfxusAUhVCjzp79054255 = -185616232;    int AUrvmOAfxusAUhVCjzp11963167 = -236545027;    int AUrvmOAfxusAUhVCjzp22813407 = -497600703;    int AUrvmOAfxusAUhVCjzp6502193 = -653778619;    int AUrvmOAfxusAUhVCjzp64833740 = -424747997;    int AUrvmOAfxusAUhVCjzp90835995 = -541826374;    int AUrvmOAfxusAUhVCjzp99389045 = -397409782;    int AUrvmOAfxusAUhVCjzp56613863 = -268021763;    int AUrvmOAfxusAUhVCjzp97944154 = -522896164;    int AUrvmOAfxusAUhVCjzp81110132 = -721836514;    int AUrvmOAfxusAUhVCjzp30808231 = -748151091;     AUrvmOAfxusAUhVCjzp61453005 = AUrvmOAfxusAUhVCjzp54345112;     AUrvmOAfxusAUhVCjzp54345112 = AUrvmOAfxusAUhVCjzp71393990;     AUrvmOAfxusAUhVCjzp71393990 = AUrvmOAfxusAUhVCjzp59170849;     AUrvmOAfxusAUhVCjzp59170849 = AUrvmOAfxusAUhVCjzp58015892;     AUrvmOAfxusAUhVCjzp58015892 = AUrvmOAfxusAUhVCjzp84326887;     AUrvmOAfxusAUhVCjzp84326887 = AUrvmOAfxusAUhVCjzp52963714;     AUrvmOAfxusAUhVCjzp52963714 = AUrvmOAfxusAUhVCjzp60759298;     AUrvmOAfxusAUhVCjzp60759298 = AUrvmOAfxusAUhVCjzp67645964;     AUrvmOAfxusAUhVCjzp67645964 = AUrvmOAfxusAUhVCjzp86507157;     AUrvmOAfxusAUhVCjzp86507157 = AUrvmOAfxusAUhVCjzp96720012;     AUrvmOAfxusAUhVCjzp96720012 = AUrvmOAfxusAUhVCjzp18906732;     AUrvmOAfxusAUhVCjzp18906732 = AUrvmOAfxusAUhVCjzp8793536;     AUrvmOAfxusAUhVCjzp8793536 = AUrvmOAfxusAUhVCjzp62653770;     AUrvmOAfxusAUhVCjzp62653770 = AUrvmOAfxusAUhVCjzp74567979;     AUrvmOAfxusAUhVCjzp74567979 = AUrvmOAfxusAUhVCjzp19637237;     AUrvmOAfxusAUhVCjzp19637237 = AUrvmOAfxusAUhVCjzp47251641;     AUrvmOAfxusAUhVCjzp47251641 = AUrvmOAfxusAUhVCjzp92091978;     AUrvmOAfxusAUhVCjzp92091978 = AUrvmOAfxusAUhVCjzp31977891;     AUrvmOAfxusAUhVCjzp31977891 = AUrvmOAfxusAUhVCjzp22797114;     AUrvmOAfxusAUhVCjzp22797114 = AUrvmOAfxusAUhVCjzp53679327;     AUrvmOAfxusAUhVCjzp53679327 = AUrvmOAfxusAUhVCjzp36952422;     AUrvmOAfxusAUhVCjzp36952422 = AUrvmOAfxusAUhVCjzp40137877;     AUrvmOAfxusAUhVCjzp40137877 = AUrvmOAfxusAUhVCjzp30991479;     AUrvmOAfxusAUhVCjzp30991479 = AUrvmOAfxusAUhVCjzp38144265;     AUrvmOAfxusAUhVCjzp38144265 = AUrvmOAfxusAUhVCjzp91668986;     AUrvmOAfxusAUhVCjzp91668986 = AUrvmOAfxusAUhVCjzp49755052;     AUrvmOAfxusAUhVCjzp49755052 = AUrvmOAfxusAUhVCjzp90120330;     AUrvmOAfxusAUhVCjzp90120330 = AUrvmOAfxusAUhVCjzp82814137;     AUrvmOAfxusAUhVCjzp82814137 = AUrvmOAfxusAUhVCjzp51908690;     AUrvmOAfxusAUhVCjzp51908690 = AUrvmOAfxusAUhVCjzp99704125;     AUrvmOAfxusAUhVCjzp99704125 = AUrvmOAfxusAUhVCjzp2121625;     AUrvmOAfxusAUhVCjzp2121625 = AUrvmOAfxusAUhVCjzp62600934;     AUrvmOAfxusAUhVCjzp62600934 = AUrvmOAfxusAUhVCjzp61005148;     AUrvmOAfxusAUhVCjzp61005148 = AUrvmOAfxusAUhVCjzp3554839;     AUrvmOAfxusAUhVCjzp3554839 = AUrvmOAfxusAUhVCjzp26170403;     AUrvmOAfxusAUhVCjzp26170403 = AUrvmOAfxusAUhVCjzp63215918;     AUrvmOAfxusAUhVCjzp63215918 = AUrvmOAfxusAUhVCjzp27528777;     AUrvmOAfxusAUhVCjzp27528777 = AUrvmOAfxusAUhVCjzp31180645;     AUrvmOAfxusAUhVCjzp31180645 = AUrvmOAfxusAUhVCjzp25407831;     AUrvmOAfxusAUhVCjzp25407831 = AUrvmOAfxusAUhVCjzp62232428;     AUrvmOAfxusAUhVCjzp62232428 = AUrvmOAfxusAUhVCjzp34559025;     AUrvmOAfxusAUhVCjzp34559025 = AUrvmOAfxusAUhVCjzp13681429;     AUrvmOAfxusAUhVCjzp13681429 = AUrvmOAfxusAUhVCjzp67913164;     AUrvmOAfxusAUhVCjzp67913164 = AUrvmOAfxusAUhVCjzp25406619;     AUrvmOAfxusAUhVCjzp25406619 = AUrvmOAfxusAUhVCjzp79201153;     AUrvmOAfxusAUhVCjzp79201153 = AUrvmOAfxusAUhVCjzp72259623;     AUrvmOAfxusAUhVCjzp72259623 = AUrvmOAfxusAUhVCjzp774977;     AUrvmOAfxusAUhVCjzp774977 = AUrvmOAfxusAUhVCjzp97291741;     AUrvmOAfxusAUhVCjzp97291741 = AUrvmOAfxusAUhVCjzp92323016;     AUrvmOAfxusAUhVCjzp92323016 = AUrvmOAfxusAUhVCjzp54307647;     AUrvmOAfxusAUhVCjzp54307647 = AUrvmOAfxusAUhVCjzp54274486;     AUrvmOAfxusAUhVCjzp54274486 = AUrvmOAfxusAUhVCjzp88150777;     AUrvmOAfxusAUhVCjzp88150777 = AUrvmOAfxusAUhVCjzp67177623;     AUrvmOAfxusAUhVCjzp67177623 = AUrvmOAfxusAUhVCjzp12154868;     AUrvmOAfxusAUhVCjzp12154868 = AUrvmOAfxusAUhVCjzp24500583;     AUrvmOAfxusAUhVCjzp24500583 = AUrvmOAfxusAUhVCjzp14207236;     AUrvmOAfxusAUhVCjzp14207236 = AUrvmOAfxusAUhVCjzp40402511;     AUrvmOAfxusAUhVCjzp40402511 = AUrvmOAfxusAUhVCjzp21026585;     AUrvmOAfxusAUhVCjzp21026585 = AUrvmOAfxusAUhVCjzp66346905;     AUrvmOAfxusAUhVCjzp66346905 = AUrvmOAfxusAUhVCjzp34571836;     AUrvmOAfxusAUhVCjzp34571836 = AUrvmOAfxusAUhVCjzp62843383;     AUrvmOAfxusAUhVCjzp62843383 = AUrvmOAfxusAUhVCjzp77945161;     AUrvmOAfxusAUhVCjzp77945161 = AUrvmOAfxusAUhVCjzp15737274;     AUrvmOAfxusAUhVCjzp15737274 = AUrvmOAfxusAUhVCjzp86803031;     AUrvmOAfxusAUhVCjzp86803031 = AUrvmOAfxusAUhVCjzp94598387;     AUrvmOAfxusAUhVCjzp94598387 = AUrvmOAfxusAUhVCjzp56305798;     AUrvmOAfxusAUhVCjzp56305798 = AUrvmOAfxusAUhVCjzp47788387;     AUrvmOAfxusAUhVCjzp47788387 = AUrvmOAfxusAUhVCjzp59098932;     AUrvmOAfxusAUhVCjzp59098932 = AUrvmOAfxusAUhVCjzp48397577;     AUrvmOAfxusAUhVCjzp48397577 = AUrvmOAfxusAUhVCjzp56421318;     AUrvmOAfxusAUhVCjzp56421318 = AUrvmOAfxusAUhVCjzp19722864;     AUrvmOAfxusAUhVCjzp19722864 = AUrvmOAfxusAUhVCjzp60911333;     AUrvmOAfxusAUhVCjzp60911333 = AUrvmOAfxusAUhVCjzp6570061;     AUrvmOAfxusAUhVCjzp6570061 = AUrvmOAfxusAUhVCjzp60564685;     AUrvmOAfxusAUhVCjzp60564685 = AUrvmOAfxusAUhVCjzp19120303;     AUrvmOAfxusAUhVCjzp19120303 = AUrvmOAfxusAUhVCjzp23270994;     AUrvmOAfxusAUhVCjzp23270994 = AUrvmOAfxusAUhVCjzp72224712;     AUrvmOAfxusAUhVCjzp72224712 = AUrvmOAfxusAUhVCjzp5584861;     AUrvmOAfxusAUhVCjzp5584861 = AUrvmOAfxusAUhVCjzp58943112;     AUrvmOAfxusAUhVCjzp58943112 = AUrvmOAfxusAUhVCjzp19409364;     AUrvmOAfxusAUhVCjzp19409364 = AUrvmOAfxusAUhVCjzp48980076;     AUrvmOAfxusAUhVCjzp48980076 = AUrvmOAfxusAUhVCjzp92828589;     AUrvmOAfxusAUhVCjzp92828589 = AUrvmOAfxusAUhVCjzp90491120;     AUrvmOAfxusAUhVCjzp90491120 = AUrvmOAfxusAUhVCjzp97601043;     AUrvmOAfxusAUhVCjzp97601043 = AUrvmOAfxusAUhVCjzp45429640;     AUrvmOAfxusAUhVCjzp45429640 = AUrvmOAfxusAUhVCjzp13970847;     AUrvmOAfxusAUhVCjzp13970847 = AUrvmOAfxusAUhVCjzp95423310;     AUrvmOAfxusAUhVCjzp95423310 = AUrvmOAfxusAUhVCjzp48850280;     AUrvmOAfxusAUhVCjzp48850280 = AUrvmOAfxusAUhVCjzp79054255;     AUrvmOAfxusAUhVCjzp79054255 = AUrvmOAfxusAUhVCjzp11963167;     AUrvmOAfxusAUhVCjzp11963167 = AUrvmOAfxusAUhVCjzp22813407;     AUrvmOAfxusAUhVCjzp22813407 = AUrvmOAfxusAUhVCjzp6502193;     AUrvmOAfxusAUhVCjzp6502193 = AUrvmOAfxusAUhVCjzp64833740;     AUrvmOAfxusAUhVCjzp64833740 = AUrvmOAfxusAUhVCjzp90835995;     AUrvmOAfxusAUhVCjzp90835995 = AUrvmOAfxusAUhVCjzp99389045;     AUrvmOAfxusAUhVCjzp99389045 = AUrvmOAfxusAUhVCjzp56613863;     AUrvmOAfxusAUhVCjzp56613863 = AUrvmOAfxusAUhVCjzp97944154;     AUrvmOAfxusAUhVCjzp97944154 = AUrvmOAfxusAUhVCjzp81110132;     AUrvmOAfxusAUhVCjzp81110132 = AUrvmOAfxusAUhVCjzp30808231;     AUrvmOAfxusAUhVCjzp30808231 = AUrvmOAfxusAUhVCjzp61453005;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void GRSYrMYfkrkqqPLUjBH72162742() {     int SdrZzmNrYMSJHeAmnIn16107403 = -85678675;    int SdrZzmNrYMSJHeAmnIn1342732 = -210381216;    int SdrZzmNrYMSJHeAmnIn32126637 = -926948125;    int SdrZzmNrYMSJHeAmnIn30605791 = -468266603;    int SdrZzmNrYMSJHeAmnIn32467563 = -277516565;    int SdrZzmNrYMSJHeAmnIn98501284 = -748718220;    int SdrZzmNrYMSJHeAmnIn74064417 = -274897998;    int SdrZzmNrYMSJHeAmnIn89934402 = -603180339;    int SdrZzmNrYMSJHeAmnIn55420375 = -974111059;    int SdrZzmNrYMSJHeAmnIn69139142 = -255421057;    int SdrZzmNrYMSJHeAmnIn75331307 = -511831084;    int SdrZzmNrYMSJHeAmnIn81671444 = -724616330;    int SdrZzmNrYMSJHeAmnIn72610850 = -420546143;    int SdrZzmNrYMSJHeAmnIn55620201 = 70814617;    int SdrZzmNrYMSJHeAmnIn4792053 = -390808670;    int SdrZzmNrYMSJHeAmnIn9404773 = -788650204;    int SdrZzmNrYMSJHeAmnIn47083404 = -703437097;    int SdrZzmNrYMSJHeAmnIn59688565 = -101570020;    int SdrZzmNrYMSJHeAmnIn33198492 = 13686990;    int SdrZzmNrYMSJHeAmnIn40431669 = -890258834;    int SdrZzmNrYMSJHeAmnIn87853715 = -681180198;    int SdrZzmNrYMSJHeAmnIn88205010 = -496736753;    int SdrZzmNrYMSJHeAmnIn76607708 = -498424246;    int SdrZzmNrYMSJHeAmnIn32419848 = -918549371;    int SdrZzmNrYMSJHeAmnIn33896881 = -972134936;    int SdrZzmNrYMSJHeAmnIn32909934 = -634021760;    int SdrZzmNrYMSJHeAmnIn51744976 = -309416892;    int SdrZzmNrYMSJHeAmnIn43369331 = 48801672;    int SdrZzmNrYMSJHeAmnIn22711814 = -107170162;    int SdrZzmNrYMSJHeAmnIn46344099 = -617825929;    int SdrZzmNrYMSJHeAmnIn51409654 = -861301698;    int SdrZzmNrYMSJHeAmnIn33113235 = -32901304;    int SdrZzmNrYMSJHeAmnIn30256810 = -554257236;    int SdrZzmNrYMSJHeAmnIn55661040 = -957577884;    int SdrZzmNrYMSJHeAmnIn38058995 = -821337937;    int SdrZzmNrYMSJHeAmnIn13496945 = -203676201;    int SdrZzmNrYMSJHeAmnIn37920406 = -770082280;    int SdrZzmNrYMSJHeAmnIn40506016 = -390650347;    int SdrZzmNrYMSJHeAmnIn81950293 = -781464949;    int SdrZzmNrYMSJHeAmnIn49394226 = 34870256;    int SdrZzmNrYMSJHeAmnIn18191830 = -539818798;    int SdrZzmNrYMSJHeAmnIn71233683 = -151240669;    int SdrZzmNrYMSJHeAmnIn4681612 = -963591210;    int SdrZzmNrYMSJHeAmnIn76907563 = -959706794;    int SdrZzmNrYMSJHeAmnIn85390682 = -276446280;    int SdrZzmNrYMSJHeAmnIn34534755 = -299002544;    int SdrZzmNrYMSJHeAmnIn88733335 = -59104067;    int SdrZzmNrYMSJHeAmnIn24202286 = -489046452;    int SdrZzmNrYMSJHeAmnIn39634508 = -702872015;    int SdrZzmNrYMSJHeAmnIn37164679 = -82332707;    int SdrZzmNrYMSJHeAmnIn29421187 = -334098736;    int SdrZzmNrYMSJHeAmnIn43656636 = -754307932;    int SdrZzmNrYMSJHeAmnIn19878781 = -962028294;    int SdrZzmNrYMSJHeAmnIn24593380 = -458782341;    int SdrZzmNrYMSJHeAmnIn84309026 = -843921098;    int SdrZzmNrYMSJHeAmnIn27902392 = -588941923;    int SdrZzmNrYMSJHeAmnIn24735024 = -711956970;    int SdrZzmNrYMSJHeAmnIn99706788 = 91601246;    int SdrZzmNrYMSJHeAmnIn96708909 = -496131667;    int SdrZzmNrYMSJHeAmnIn99557628 = -643494805;    int SdrZzmNrYMSJHeAmnIn46756308 = -339301328;    int SdrZzmNrYMSJHeAmnIn30695087 = -223699670;    int SdrZzmNrYMSJHeAmnIn67222588 = -396010177;    int SdrZzmNrYMSJHeAmnIn9076276 = -256285131;    int SdrZzmNrYMSJHeAmnIn17729489 = -394119359;    int SdrZzmNrYMSJHeAmnIn42218072 = -378929780;    int SdrZzmNrYMSJHeAmnIn51414634 = -70359094;    int SdrZzmNrYMSJHeAmnIn16949810 = -462968259;    int SdrZzmNrYMSJHeAmnIn17561206 = -107847446;    int SdrZzmNrYMSJHeAmnIn91295108 = -87132470;    int SdrZzmNrYMSJHeAmnIn71484366 = 81432075;    int SdrZzmNrYMSJHeAmnIn6577389 = -212786751;    int SdrZzmNrYMSJHeAmnIn77738271 = -320105072;    int SdrZzmNrYMSJHeAmnIn83804266 = 78816733;    int SdrZzmNrYMSJHeAmnIn22239840 = -250440036;    int SdrZzmNrYMSJHeAmnIn16620032 = -429939529;    int SdrZzmNrYMSJHeAmnIn83523399 = -533145543;    int SdrZzmNrYMSJHeAmnIn99700144 = -538717452;    int SdrZzmNrYMSJHeAmnIn47029166 = -542103092;    int SdrZzmNrYMSJHeAmnIn99362126 = -573132392;    int SdrZzmNrYMSJHeAmnIn44176599 = -474917694;    int SdrZzmNrYMSJHeAmnIn27542691 = -820370441;    int SdrZzmNrYMSJHeAmnIn3734823 = -248326314;    int SdrZzmNrYMSJHeAmnIn85547135 = 75162544;    int SdrZzmNrYMSJHeAmnIn16922913 = -183727194;    int SdrZzmNrYMSJHeAmnIn7753019 = -6993767;    int SdrZzmNrYMSJHeAmnIn13234454 = -70873011;    int SdrZzmNrYMSJHeAmnIn5663431 = 4525104;    int SdrZzmNrYMSJHeAmnIn71352013 = -13656787;    int SdrZzmNrYMSJHeAmnIn10156604 = -132396015;    int SdrZzmNrYMSJHeAmnIn88761920 = -491719231;    int SdrZzmNrYMSJHeAmnIn38213617 = -761683526;    int SdrZzmNrYMSJHeAmnIn43797106 = -894518681;    int SdrZzmNrYMSJHeAmnIn82392665 = -37970144;    int SdrZzmNrYMSJHeAmnIn2637918 = -625828416;    int SdrZzmNrYMSJHeAmnIn87496742 = -216119129;    int SdrZzmNrYMSJHeAmnIn4011096 = -755230493;    int SdrZzmNrYMSJHeAmnIn95605336 = -607306080;    int SdrZzmNrYMSJHeAmnIn59178075 = -465587435;    int SdrZzmNrYMSJHeAmnIn43172610 = -85678675;     SdrZzmNrYMSJHeAmnIn16107403 = SdrZzmNrYMSJHeAmnIn1342732;     SdrZzmNrYMSJHeAmnIn1342732 = SdrZzmNrYMSJHeAmnIn32126637;     SdrZzmNrYMSJHeAmnIn32126637 = SdrZzmNrYMSJHeAmnIn30605791;     SdrZzmNrYMSJHeAmnIn30605791 = SdrZzmNrYMSJHeAmnIn32467563;     SdrZzmNrYMSJHeAmnIn32467563 = SdrZzmNrYMSJHeAmnIn98501284;     SdrZzmNrYMSJHeAmnIn98501284 = SdrZzmNrYMSJHeAmnIn74064417;     SdrZzmNrYMSJHeAmnIn74064417 = SdrZzmNrYMSJHeAmnIn89934402;     SdrZzmNrYMSJHeAmnIn89934402 = SdrZzmNrYMSJHeAmnIn55420375;     SdrZzmNrYMSJHeAmnIn55420375 = SdrZzmNrYMSJHeAmnIn69139142;     SdrZzmNrYMSJHeAmnIn69139142 = SdrZzmNrYMSJHeAmnIn75331307;     SdrZzmNrYMSJHeAmnIn75331307 = SdrZzmNrYMSJHeAmnIn81671444;     SdrZzmNrYMSJHeAmnIn81671444 = SdrZzmNrYMSJHeAmnIn72610850;     SdrZzmNrYMSJHeAmnIn72610850 = SdrZzmNrYMSJHeAmnIn55620201;     SdrZzmNrYMSJHeAmnIn55620201 = SdrZzmNrYMSJHeAmnIn4792053;     SdrZzmNrYMSJHeAmnIn4792053 = SdrZzmNrYMSJHeAmnIn9404773;     SdrZzmNrYMSJHeAmnIn9404773 = SdrZzmNrYMSJHeAmnIn47083404;     SdrZzmNrYMSJHeAmnIn47083404 = SdrZzmNrYMSJHeAmnIn59688565;     SdrZzmNrYMSJHeAmnIn59688565 = SdrZzmNrYMSJHeAmnIn33198492;     SdrZzmNrYMSJHeAmnIn33198492 = SdrZzmNrYMSJHeAmnIn40431669;     SdrZzmNrYMSJHeAmnIn40431669 = SdrZzmNrYMSJHeAmnIn87853715;     SdrZzmNrYMSJHeAmnIn87853715 = SdrZzmNrYMSJHeAmnIn88205010;     SdrZzmNrYMSJHeAmnIn88205010 = SdrZzmNrYMSJHeAmnIn76607708;     SdrZzmNrYMSJHeAmnIn76607708 = SdrZzmNrYMSJHeAmnIn32419848;     SdrZzmNrYMSJHeAmnIn32419848 = SdrZzmNrYMSJHeAmnIn33896881;     SdrZzmNrYMSJHeAmnIn33896881 = SdrZzmNrYMSJHeAmnIn32909934;     SdrZzmNrYMSJHeAmnIn32909934 = SdrZzmNrYMSJHeAmnIn51744976;     SdrZzmNrYMSJHeAmnIn51744976 = SdrZzmNrYMSJHeAmnIn43369331;     SdrZzmNrYMSJHeAmnIn43369331 = SdrZzmNrYMSJHeAmnIn22711814;     SdrZzmNrYMSJHeAmnIn22711814 = SdrZzmNrYMSJHeAmnIn46344099;     SdrZzmNrYMSJHeAmnIn46344099 = SdrZzmNrYMSJHeAmnIn51409654;     SdrZzmNrYMSJHeAmnIn51409654 = SdrZzmNrYMSJHeAmnIn33113235;     SdrZzmNrYMSJHeAmnIn33113235 = SdrZzmNrYMSJHeAmnIn30256810;     SdrZzmNrYMSJHeAmnIn30256810 = SdrZzmNrYMSJHeAmnIn55661040;     SdrZzmNrYMSJHeAmnIn55661040 = SdrZzmNrYMSJHeAmnIn38058995;     SdrZzmNrYMSJHeAmnIn38058995 = SdrZzmNrYMSJHeAmnIn13496945;     SdrZzmNrYMSJHeAmnIn13496945 = SdrZzmNrYMSJHeAmnIn37920406;     SdrZzmNrYMSJHeAmnIn37920406 = SdrZzmNrYMSJHeAmnIn40506016;     SdrZzmNrYMSJHeAmnIn40506016 = SdrZzmNrYMSJHeAmnIn81950293;     SdrZzmNrYMSJHeAmnIn81950293 = SdrZzmNrYMSJHeAmnIn49394226;     SdrZzmNrYMSJHeAmnIn49394226 = SdrZzmNrYMSJHeAmnIn18191830;     SdrZzmNrYMSJHeAmnIn18191830 = SdrZzmNrYMSJHeAmnIn71233683;     SdrZzmNrYMSJHeAmnIn71233683 = SdrZzmNrYMSJHeAmnIn4681612;     SdrZzmNrYMSJHeAmnIn4681612 = SdrZzmNrYMSJHeAmnIn76907563;     SdrZzmNrYMSJHeAmnIn76907563 = SdrZzmNrYMSJHeAmnIn85390682;     SdrZzmNrYMSJHeAmnIn85390682 = SdrZzmNrYMSJHeAmnIn34534755;     SdrZzmNrYMSJHeAmnIn34534755 = SdrZzmNrYMSJHeAmnIn88733335;     SdrZzmNrYMSJHeAmnIn88733335 = SdrZzmNrYMSJHeAmnIn24202286;     SdrZzmNrYMSJHeAmnIn24202286 = SdrZzmNrYMSJHeAmnIn39634508;     SdrZzmNrYMSJHeAmnIn39634508 = SdrZzmNrYMSJHeAmnIn37164679;     SdrZzmNrYMSJHeAmnIn37164679 = SdrZzmNrYMSJHeAmnIn29421187;     SdrZzmNrYMSJHeAmnIn29421187 = SdrZzmNrYMSJHeAmnIn43656636;     SdrZzmNrYMSJHeAmnIn43656636 = SdrZzmNrYMSJHeAmnIn19878781;     SdrZzmNrYMSJHeAmnIn19878781 = SdrZzmNrYMSJHeAmnIn24593380;     SdrZzmNrYMSJHeAmnIn24593380 = SdrZzmNrYMSJHeAmnIn84309026;     SdrZzmNrYMSJHeAmnIn84309026 = SdrZzmNrYMSJHeAmnIn27902392;     SdrZzmNrYMSJHeAmnIn27902392 = SdrZzmNrYMSJHeAmnIn24735024;     SdrZzmNrYMSJHeAmnIn24735024 = SdrZzmNrYMSJHeAmnIn99706788;     SdrZzmNrYMSJHeAmnIn99706788 = SdrZzmNrYMSJHeAmnIn96708909;     SdrZzmNrYMSJHeAmnIn96708909 = SdrZzmNrYMSJHeAmnIn99557628;     SdrZzmNrYMSJHeAmnIn99557628 = SdrZzmNrYMSJHeAmnIn46756308;     SdrZzmNrYMSJHeAmnIn46756308 = SdrZzmNrYMSJHeAmnIn30695087;     SdrZzmNrYMSJHeAmnIn30695087 = SdrZzmNrYMSJHeAmnIn67222588;     SdrZzmNrYMSJHeAmnIn67222588 = SdrZzmNrYMSJHeAmnIn9076276;     SdrZzmNrYMSJHeAmnIn9076276 = SdrZzmNrYMSJHeAmnIn17729489;     SdrZzmNrYMSJHeAmnIn17729489 = SdrZzmNrYMSJHeAmnIn42218072;     SdrZzmNrYMSJHeAmnIn42218072 = SdrZzmNrYMSJHeAmnIn51414634;     SdrZzmNrYMSJHeAmnIn51414634 = SdrZzmNrYMSJHeAmnIn16949810;     SdrZzmNrYMSJHeAmnIn16949810 = SdrZzmNrYMSJHeAmnIn17561206;     SdrZzmNrYMSJHeAmnIn17561206 = SdrZzmNrYMSJHeAmnIn91295108;     SdrZzmNrYMSJHeAmnIn91295108 = SdrZzmNrYMSJHeAmnIn71484366;     SdrZzmNrYMSJHeAmnIn71484366 = SdrZzmNrYMSJHeAmnIn6577389;     SdrZzmNrYMSJHeAmnIn6577389 = SdrZzmNrYMSJHeAmnIn77738271;     SdrZzmNrYMSJHeAmnIn77738271 = SdrZzmNrYMSJHeAmnIn83804266;     SdrZzmNrYMSJHeAmnIn83804266 = SdrZzmNrYMSJHeAmnIn22239840;     SdrZzmNrYMSJHeAmnIn22239840 = SdrZzmNrYMSJHeAmnIn16620032;     SdrZzmNrYMSJHeAmnIn16620032 = SdrZzmNrYMSJHeAmnIn83523399;     SdrZzmNrYMSJHeAmnIn83523399 = SdrZzmNrYMSJHeAmnIn99700144;     SdrZzmNrYMSJHeAmnIn99700144 = SdrZzmNrYMSJHeAmnIn47029166;     SdrZzmNrYMSJHeAmnIn47029166 = SdrZzmNrYMSJHeAmnIn99362126;     SdrZzmNrYMSJHeAmnIn99362126 = SdrZzmNrYMSJHeAmnIn44176599;     SdrZzmNrYMSJHeAmnIn44176599 = SdrZzmNrYMSJHeAmnIn27542691;     SdrZzmNrYMSJHeAmnIn27542691 = SdrZzmNrYMSJHeAmnIn3734823;     SdrZzmNrYMSJHeAmnIn3734823 = SdrZzmNrYMSJHeAmnIn85547135;     SdrZzmNrYMSJHeAmnIn85547135 = SdrZzmNrYMSJHeAmnIn16922913;     SdrZzmNrYMSJHeAmnIn16922913 = SdrZzmNrYMSJHeAmnIn7753019;     SdrZzmNrYMSJHeAmnIn7753019 = SdrZzmNrYMSJHeAmnIn13234454;     SdrZzmNrYMSJHeAmnIn13234454 = SdrZzmNrYMSJHeAmnIn5663431;     SdrZzmNrYMSJHeAmnIn5663431 = SdrZzmNrYMSJHeAmnIn71352013;     SdrZzmNrYMSJHeAmnIn71352013 = SdrZzmNrYMSJHeAmnIn10156604;     SdrZzmNrYMSJHeAmnIn10156604 = SdrZzmNrYMSJHeAmnIn88761920;     SdrZzmNrYMSJHeAmnIn88761920 = SdrZzmNrYMSJHeAmnIn38213617;     SdrZzmNrYMSJHeAmnIn38213617 = SdrZzmNrYMSJHeAmnIn43797106;     SdrZzmNrYMSJHeAmnIn43797106 = SdrZzmNrYMSJHeAmnIn82392665;     SdrZzmNrYMSJHeAmnIn82392665 = SdrZzmNrYMSJHeAmnIn2637918;     SdrZzmNrYMSJHeAmnIn2637918 = SdrZzmNrYMSJHeAmnIn87496742;     SdrZzmNrYMSJHeAmnIn87496742 = SdrZzmNrYMSJHeAmnIn4011096;     SdrZzmNrYMSJHeAmnIn4011096 = SdrZzmNrYMSJHeAmnIn95605336;     SdrZzmNrYMSJHeAmnIn95605336 = SdrZzmNrYMSJHeAmnIn59178075;     SdrZzmNrYMSJHeAmnIn59178075 = SdrZzmNrYMSJHeAmnIn43172610;     SdrZzmNrYMSJHeAmnIn43172610 = SdrZzmNrYMSJHeAmnIn16107403;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void zlewewUUvSNKnrSlItA78491289() {     int uxBuoyxcnjeSvhHDPSE70761800 = -523206259;    int uxBuoyxcnjeSvhHDPSE48340351 = -789946030;    int uxBuoyxcnjeSvhHDPSE92859282 = -212332738;    int uxBuoyxcnjeSvhHDPSE2040733 = -474369014;    int uxBuoyxcnjeSvhHDPSE6919234 = 50048196;    int uxBuoyxcnjeSvhHDPSE12675682 = -877869056;    int uxBuoyxcnjeSvhHDPSE95165121 = -576790670;    int uxBuoyxcnjeSvhHDPSE19109506 = -3748571;    int uxBuoyxcnjeSvhHDPSE43194785 = 79035570;    int uxBuoyxcnjeSvhHDPSE51771128 = -534222326;    int uxBuoyxcnjeSvhHDPSE53942602 = -37187656;    int uxBuoyxcnjeSvhHDPSE44436158 = -911040419;    int uxBuoyxcnjeSvhHDPSE36428165 = -224086448;    int uxBuoyxcnjeSvhHDPSE48586632 = -641288961;    int uxBuoyxcnjeSvhHDPSE35016126 = -297930302;    int uxBuoyxcnjeSvhHDPSE99172308 = -418809769;    int uxBuoyxcnjeSvhHDPSE46915168 = -77036926;    int uxBuoyxcnjeSvhHDPSE27285153 = -165134488;    int uxBuoyxcnjeSvhHDPSE34419093 = -272124558;    int uxBuoyxcnjeSvhHDPSE58066225 = -135624980;    int uxBuoyxcnjeSvhHDPSE22028103 = -149263349;    int uxBuoyxcnjeSvhHDPSE39457600 = -663180861;    int uxBuoyxcnjeSvhHDPSE13077540 = 14832333;    int uxBuoyxcnjeSvhHDPSE33848216 = -617590188;    int uxBuoyxcnjeSvhHDPSE29649497 = -245048388;    int uxBuoyxcnjeSvhHDPSE74150881 = -637730545;    int uxBuoyxcnjeSvhHDPSE53734900 = -864261171;    int uxBuoyxcnjeSvhHDPSE96618331 = 40749811;    int uxBuoyxcnjeSvhHDPSE62609491 = -487415038;    int uxBuoyxcnjeSvhHDPSE40779509 = -908583897;    int uxBuoyxcnjeSvhHDPSE3115183 = -310174224;    int uxBuoyxcnjeSvhHDPSE64104845 = -444397833;    int uxBuoyxcnjeSvhHDPSE97912686 = -10774851;    int uxBuoyxcnjeSvhHDPSE50316933 = -637698694;    int uxBuoyxcnjeSvhHDPSE72563152 = 60798803;    int uxBuoyxcnjeSvhHDPSE823487 = -451671797;    int uxBuoyxcnjeSvhHDPSE12624894 = -620508900;    int uxBuoyxcnjeSvhHDPSE53483255 = -264579368;    int uxBuoyxcnjeSvhHDPSE32719943 = -63413550;    int uxBuoyxcnjeSvhHDPSE73380620 = -723438343;    int uxBuoyxcnjeSvhHDPSE74151230 = -652368956;    int uxBuoyxcnjeSvhHDPSE7908342 = -758772756;    int uxBuoyxcnjeSvhHDPSE95681794 = -804096528;    int uxBuoyxcnjeSvhHDPSE85901962 = -433386460;    int uxBuoyxcnjeSvhHDPSE45374745 = -408963878;    int uxBuoyxcnjeSvhHDPSE89868356 = -367792159;    int uxBuoyxcnjeSvhHDPSE5207048 = -86161451;    int uxBuoyxcnjeSvhHDPSE47629595 = -466698824;    int uxBuoyxcnjeSvhHDPSE81977274 = -602602204;    int uxBuoyxcnjeSvhHDPSE82006341 = -322352001;    int uxBuoyxcnjeSvhHDPSE4534727 = 8685762;    int uxBuoyxcnjeSvhHDPSE33038785 = -169373914;    int uxBuoyxcnjeSvhHDPSE51606784 = -701943751;    int uxBuoyxcnjeSvhHDPSE82009137 = -354668825;    int uxBuoyxcnjeSvhHDPSE56463186 = -139829779;    int uxBuoyxcnjeSvhHDPSE31304201 = -860025399;    int uxBuoyxcnjeSvhHDPSE35262812 = -704778363;    int uxBuoyxcnjeSvhHDPSE59011067 = -594742551;    int uxBuoyxcnjeSvhHDPSE72391235 = -129320626;    int uxBuoyxcnjeSvhHDPSE32768352 = -312221259;    int uxBuoyxcnjeSvhHDPSE58940781 = 86392115;    int uxBuoyxcnjeSvhHDPSE98546790 = -517540482;    int uxBuoyxcnjeSvhHDPSE56500014 = -516333534;    int uxBuoyxcnjeSvhHDPSE2415277 = -12380534;    int uxBuoyxcnjeSvhHDPSE48655945 = -124048103;    int uxBuoyxcnjeSvhHDPSE89837756 = -592789824;    int uxBuoyxcnjeSvhHDPSE46523471 = -800265568;    int uxBuoyxcnjeSvhHDPSE86111231 = -586387754;    int uxBuoyxcnjeSvhHDPSE76023480 = -602087764;    int uxBuoyxcnjeSvhHDPSE34192640 = -846258505;    int uxBuoyxcnjeSvhHDPSE86547414 = -798300869;    int uxBuoyxcnjeSvhHDPSE93431913 = -812457558;    int uxBuoyxcnjeSvhHDPSE94565209 = -1720938;    int uxBuoyxcnjeSvhHDPSE61038472 = -548686216;    int uxBuoyxcnjeSvhHDPSE83914994 = -483256025;    int uxBuoyxcnjeSvhHDPSE14119762 = -390490594;    int uxBuoyxcnjeSvhHDPSE43775805 = -859084333;    int uxBuoyxcnjeSvhHDPSE27175577 = -551781208;    int uxBuoyxcnjeSvhHDPSE88473470 = -108626311;    int uxBuoyxcnjeSvhHDPSE39781141 = -877256229;    int uxBuoyxcnjeSvhHDPSE68943834 = -451569095;    int uxBuoyxcnjeSvhHDPSE6105306 = -297562347;    int uxBuoyxcnjeSvhHDPSE14641057 = -356647986;    int uxBuoyxcnjeSvhHDPSE80603149 = -65063037;    int uxBuoyxcnjeSvhHDPSE36244782 = -817269660;    int uxBuoyxcnjeSvhHDPSE70076397 = -40800310;    int uxBuoyxcnjeSvhHDPSE12498062 = -742454082;    int uxBuoyxcnjeSvhHDPSE15903550 = -656106026;    int uxBuoyxcnjeSvhHDPSE93853746 = -397868915;    int uxBuoyxcnjeSvhHDPSE41258952 = -79175799;    int uxBuoyxcnjeSvhHDPSE65560675 = -746893435;    int uxBuoyxcnjeSvhHDPSE53613827 = 74233650;    int uxBuoyxcnjeSvhHDPSE81092019 = -35258742;    int uxBuoyxcnjeSvhHDPSE99951590 = -751192291;    int uxBuoyxcnjeSvhHDPSE14439840 = -709830458;    int uxBuoyxcnjeSvhHDPSE75604440 = -34828475;    int uxBuoyxcnjeSvhHDPSE51408327 = -142439222;    int uxBuoyxcnjeSvhHDPSE93266517 = -691715995;    int uxBuoyxcnjeSvhHDPSE37246018 = -209338357;    int uxBuoyxcnjeSvhHDPSE55536988 = -523206259;     uxBuoyxcnjeSvhHDPSE70761800 = uxBuoyxcnjeSvhHDPSE48340351;     uxBuoyxcnjeSvhHDPSE48340351 = uxBuoyxcnjeSvhHDPSE92859282;     uxBuoyxcnjeSvhHDPSE92859282 = uxBuoyxcnjeSvhHDPSE2040733;     uxBuoyxcnjeSvhHDPSE2040733 = uxBuoyxcnjeSvhHDPSE6919234;     uxBuoyxcnjeSvhHDPSE6919234 = uxBuoyxcnjeSvhHDPSE12675682;     uxBuoyxcnjeSvhHDPSE12675682 = uxBuoyxcnjeSvhHDPSE95165121;     uxBuoyxcnjeSvhHDPSE95165121 = uxBuoyxcnjeSvhHDPSE19109506;     uxBuoyxcnjeSvhHDPSE19109506 = uxBuoyxcnjeSvhHDPSE43194785;     uxBuoyxcnjeSvhHDPSE43194785 = uxBuoyxcnjeSvhHDPSE51771128;     uxBuoyxcnjeSvhHDPSE51771128 = uxBuoyxcnjeSvhHDPSE53942602;     uxBuoyxcnjeSvhHDPSE53942602 = uxBuoyxcnjeSvhHDPSE44436158;     uxBuoyxcnjeSvhHDPSE44436158 = uxBuoyxcnjeSvhHDPSE36428165;     uxBuoyxcnjeSvhHDPSE36428165 = uxBuoyxcnjeSvhHDPSE48586632;     uxBuoyxcnjeSvhHDPSE48586632 = uxBuoyxcnjeSvhHDPSE35016126;     uxBuoyxcnjeSvhHDPSE35016126 = uxBuoyxcnjeSvhHDPSE99172308;     uxBuoyxcnjeSvhHDPSE99172308 = uxBuoyxcnjeSvhHDPSE46915168;     uxBuoyxcnjeSvhHDPSE46915168 = uxBuoyxcnjeSvhHDPSE27285153;     uxBuoyxcnjeSvhHDPSE27285153 = uxBuoyxcnjeSvhHDPSE34419093;     uxBuoyxcnjeSvhHDPSE34419093 = uxBuoyxcnjeSvhHDPSE58066225;     uxBuoyxcnjeSvhHDPSE58066225 = uxBuoyxcnjeSvhHDPSE22028103;     uxBuoyxcnjeSvhHDPSE22028103 = uxBuoyxcnjeSvhHDPSE39457600;     uxBuoyxcnjeSvhHDPSE39457600 = uxBuoyxcnjeSvhHDPSE13077540;     uxBuoyxcnjeSvhHDPSE13077540 = uxBuoyxcnjeSvhHDPSE33848216;     uxBuoyxcnjeSvhHDPSE33848216 = uxBuoyxcnjeSvhHDPSE29649497;     uxBuoyxcnjeSvhHDPSE29649497 = uxBuoyxcnjeSvhHDPSE74150881;     uxBuoyxcnjeSvhHDPSE74150881 = uxBuoyxcnjeSvhHDPSE53734900;     uxBuoyxcnjeSvhHDPSE53734900 = uxBuoyxcnjeSvhHDPSE96618331;     uxBuoyxcnjeSvhHDPSE96618331 = uxBuoyxcnjeSvhHDPSE62609491;     uxBuoyxcnjeSvhHDPSE62609491 = uxBuoyxcnjeSvhHDPSE40779509;     uxBuoyxcnjeSvhHDPSE40779509 = uxBuoyxcnjeSvhHDPSE3115183;     uxBuoyxcnjeSvhHDPSE3115183 = uxBuoyxcnjeSvhHDPSE64104845;     uxBuoyxcnjeSvhHDPSE64104845 = uxBuoyxcnjeSvhHDPSE97912686;     uxBuoyxcnjeSvhHDPSE97912686 = uxBuoyxcnjeSvhHDPSE50316933;     uxBuoyxcnjeSvhHDPSE50316933 = uxBuoyxcnjeSvhHDPSE72563152;     uxBuoyxcnjeSvhHDPSE72563152 = uxBuoyxcnjeSvhHDPSE823487;     uxBuoyxcnjeSvhHDPSE823487 = uxBuoyxcnjeSvhHDPSE12624894;     uxBuoyxcnjeSvhHDPSE12624894 = uxBuoyxcnjeSvhHDPSE53483255;     uxBuoyxcnjeSvhHDPSE53483255 = uxBuoyxcnjeSvhHDPSE32719943;     uxBuoyxcnjeSvhHDPSE32719943 = uxBuoyxcnjeSvhHDPSE73380620;     uxBuoyxcnjeSvhHDPSE73380620 = uxBuoyxcnjeSvhHDPSE74151230;     uxBuoyxcnjeSvhHDPSE74151230 = uxBuoyxcnjeSvhHDPSE7908342;     uxBuoyxcnjeSvhHDPSE7908342 = uxBuoyxcnjeSvhHDPSE95681794;     uxBuoyxcnjeSvhHDPSE95681794 = uxBuoyxcnjeSvhHDPSE85901962;     uxBuoyxcnjeSvhHDPSE85901962 = uxBuoyxcnjeSvhHDPSE45374745;     uxBuoyxcnjeSvhHDPSE45374745 = uxBuoyxcnjeSvhHDPSE89868356;     uxBuoyxcnjeSvhHDPSE89868356 = uxBuoyxcnjeSvhHDPSE5207048;     uxBuoyxcnjeSvhHDPSE5207048 = uxBuoyxcnjeSvhHDPSE47629595;     uxBuoyxcnjeSvhHDPSE47629595 = uxBuoyxcnjeSvhHDPSE81977274;     uxBuoyxcnjeSvhHDPSE81977274 = uxBuoyxcnjeSvhHDPSE82006341;     uxBuoyxcnjeSvhHDPSE82006341 = uxBuoyxcnjeSvhHDPSE4534727;     uxBuoyxcnjeSvhHDPSE4534727 = uxBuoyxcnjeSvhHDPSE33038785;     uxBuoyxcnjeSvhHDPSE33038785 = uxBuoyxcnjeSvhHDPSE51606784;     uxBuoyxcnjeSvhHDPSE51606784 = uxBuoyxcnjeSvhHDPSE82009137;     uxBuoyxcnjeSvhHDPSE82009137 = uxBuoyxcnjeSvhHDPSE56463186;     uxBuoyxcnjeSvhHDPSE56463186 = uxBuoyxcnjeSvhHDPSE31304201;     uxBuoyxcnjeSvhHDPSE31304201 = uxBuoyxcnjeSvhHDPSE35262812;     uxBuoyxcnjeSvhHDPSE35262812 = uxBuoyxcnjeSvhHDPSE59011067;     uxBuoyxcnjeSvhHDPSE59011067 = uxBuoyxcnjeSvhHDPSE72391235;     uxBuoyxcnjeSvhHDPSE72391235 = uxBuoyxcnjeSvhHDPSE32768352;     uxBuoyxcnjeSvhHDPSE32768352 = uxBuoyxcnjeSvhHDPSE58940781;     uxBuoyxcnjeSvhHDPSE58940781 = uxBuoyxcnjeSvhHDPSE98546790;     uxBuoyxcnjeSvhHDPSE98546790 = uxBuoyxcnjeSvhHDPSE56500014;     uxBuoyxcnjeSvhHDPSE56500014 = uxBuoyxcnjeSvhHDPSE2415277;     uxBuoyxcnjeSvhHDPSE2415277 = uxBuoyxcnjeSvhHDPSE48655945;     uxBuoyxcnjeSvhHDPSE48655945 = uxBuoyxcnjeSvhHDPSE89837756;     uxBuoyxcnjeSvhHDPSE89837756 = uxBuoyxcnjeSvhHDPSE46523471;     uxBuoyxcnjeSvhHDPSE46523471 = uxBuoyxcnjeSvhHDPSE86111231;     uxBuoyxcnjeSvhHDPSE86111231 = uxBuoyxcnjeSvhHDPSE76023480;     uxBuoyxcnjeSvhHDPSE76023480 = uxBuoyxcnjeSvhHDPSE34192640;     uxBuoyxcnjeSvhHDPSE34192640 = uxBuoyxcnjeSvhHDPSE86547414;     uxBuoyxcnjeSvhHDPSE86547414 = uxBuoyxcnjeSvhHDPSE93431913;     uxBuoyxcnjeSvhHDPSE93431913 = uxBuoyxcnjeSvhHDPSE94565209;     uxBuoyxcnjeSvhHDPSE94565209 = uxBuoyxcnjeSvhHDPSE61038472;     uxBuoyxcnjeSvhHDPSE61038472 = uxBuoyxcnjeSvhHDPSE83914994;     uxBuoyxcnjeSvhHDPSE83914994 = uxBuoyxcnjeSvhHDPSE14119762;     uxBuoyxcnjeSvhHDPSE14119762 = uxBuoyxcnjeSvhHDPSE43775805;     uxBuoyxcnjeSvhHDPSE43775805 = uxBuoyxcnjeSvhHDPSE27175577;     uxBuoyxcnjeSvhHDPSE27175577 = uxBuoyxcnjeSvhHDPSE88473470;     uxBuoyxcnjeSvhHDPSE88473470 = uxBuoyxcnjeSvhHDPSE39781141;     uxBuoyxcnjeSvhHDPSE39781141 = uxBuoyxcnjeSvhHDPSE68943834;     uxBuoyxcnjeSvhHDPSE68943834 = uxBuoyxcnjeSvhHDPSE6105306;     uxBuoyxcnjeSvhHDPSE6105306 = uxBuoyxcnjeSvhHDPSE14641057;     uxBuoyxcnjeSvhHDPSE14641057 = uxBuoyxcnjeSvhHDPSE80603149;     uxBuoyxcnjeSvhHDPSE80603149 = uxBuoyxcnjeSvhHDPSE36244782;     uxBuoyxcnjeSvhHDPSE36244782 = uxBuoyxcnjeSvhHDPSE70076397;     uxBuoyxcnjeSvhHDPSE70076397 = uxBuoyxcnjeSvhHDPSE12498062;     uxBuoyxcnjeSvhHDPSE12498062 = uxBuoyxcnjeSvhHDPSE15903550;     uxBuoyxcnjeSvhHDPSE15903550 = uxBuoyxcnjeSvhHDPSE93853746;     uxBuoyxcnjeSvhHDPSE93853746 = uxBuoyxcnjeSvhHDPSE41258952;     uxBuoyxcnjeSvhHDPSE41258952 = uxBuoyxcnjeSvhHDPSE65560675;     uxBuoyxcnjeSvhHDPSE65560675 = uxBuoyxcnjeSvhHDPSE53613827;     uxBuoyxcnjeSvhHDPSE53613827 = uxBuoyxcnjeSvhHDPSE81092019;     uxBuoyxcnjeSvhHDPSE81092019 = uxBuoyxcnjeSvhHDPSE99951590;     uxBuoyxcnjeSvhHDPSE99951590 = uxBuoyxcnjeSvhHDPSE14439840;     uxBuoyxcnjeSvhHDPSE14439840 = uxBuoyxcnjeSvhHDPSE75604440;     uxBuoyxcnjeSvhHDPSE75604440 = uxBuoyxcnjeSvhHDPSE51408327;     uxBuoyxcnjeSvhHDPSE51408327 = uxBuoyxcnjeSvhHDPSE93266517;     uxBuoyxcnjeSvhHDPSE93266517 = uxBuoyxcnjeSvhHDPSE37246018;     uxBuoyxcnjeSvhHDPSE37246018 = uxBuoyxcnjeSvhHDPSE55536988;     uxBuoyxcnjeSvhHDPSE55536988 = uxBuoyxcnjeSvhHDPSE70761800;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ISmAKEERJJgYJFbIBNh84819836() {     int NeNfWzrOfhNBrDkqGEz25416198 = -960733843;    int NeNfWzrOfhNBrDkqGEz95337970 = -269510844;    int NeNfWzrOfhNBrDkqGEz53591929 = -597717351;    int NeNfWzrOfhNBrDkqGEz73475673 = -480471425;    int NeNfWzrOfhNBrDkqGEz81370904 = -722387043;    int NeNfWzrOfhNBrDkqGEz26850079 = 92980108;    int NeNfWzrOfhNBrDkqGEz16265826 = -878683343;    int NeNfWzrOfhNBrDkqGEz48284609 = -504316804;    int NeNfWzrOfhNBrDkqGEz30969196 = 32182200;    int NeNfWzrOfhNBrDkqGEz34403113 = -813023596;    int NeNfWzrOfhNBrDkqGEz32553897 = -662544228;    int NeNfWzrOfhNBrDkqGEz7200872 = 2535492;    int NeNfWzrOfhNBrDkqGEz245480 = -27626752;    int NeNfWzrOfhNBrDkqGEz41553063 = -253392539;    int NeNfWzrOfhNBrDkqGEz65240199 = -205051933;    int NeNfWzrOfhNBrDkqGEz88939844 = -48969333;    int NeNfWzrOfhNBrDkqGEz46746931 = -550636754;    int NeNfWzrOfhNBrDkqGEz94881739 = -228698955;    int NeNfWzrOfhNBrDkqGEz35639694 = -557936106;    int NeNfWzrOfhNBrDkqGEz75700780 = -480991127;    int NeNfWzrOfhNBrDkqGEz56202491 = -717346500;    int NeNfWzrOfhNBrDkqGEz90710188 = -829624969;    int NeNfWzrOfhNBrDkqGEz49547371 = -571911088;    int NeNfWzrOfhNBrDkqGEz35276585 = -316631004;    int NeNfWzrOfhNBrDkqGEz25402113 = -617961840;    int NeNfWzrOfhNBrDkqGEz15391829 = -641439330;    int NeNfWzrOfhNBrDkqGEz55724825 = -319105450;    int NeNfWzrOfhNBrDkqGEz49867331 = 32697951;    int NeNfWzrOfhNBrDkqGEz2507168 = -867659913;    int NeNfWzrOfhNBrDkqGEz35214918 = -99341865;    int NeNfWzrOfhNBrDkqGEz54820712 = -859046750;    int NeNfWzrOfhNBrDkqGEz95096455 = -855894361;    int NeNfWzrOfhNBrDkqGEz65568563 = -567292465;    int NeNfWzrOfhNBrDkqGEz44972826 = -317819503;    int NeNfWzrOfhNBrDkqGEz7067309 = -157064457;    int NeNfWzrOfhNBrDkqGEz88150028 = -699667394;    int NeNfWzrOfhNBrDkqGEz87329382 = -470935521;    int NeNfWzrOfhNBrDkqGEz66460493 = -138508389;    int NeNfWzrOfhNBrDkqGEz83489591 = -445362152;    int NeNfWzrOfhNBrDkqGEz97367015 = -381746942;    int NeNfWzrOfhNBrDkqGEz30110631 = -764919114;    int NeNfWzrOfhNBrDkqGEz44583000 = -266304842;    int NeNfWzrOfhNBrDkqGEz86681977 = -644601846;    int NeNfWzrOfhNBrDkqGEz94896362 = 92933875;    int NeNfWzrOfhNBrDkqGEz5358809 = -541481475;    int NeNfWzrOfhNBrDkqGEz45201959 = -436581774;    int NeNfWzrOfhNBrDkqGEz21680759 = -113218835;    int NeNfWzrOfhNBrDkqGEz71056904 = -444351196;    int NeNfWzrOfhNBrDkqGEz24320042 = -502332392;    int NeNfWzrOfhNBrDkqGEz26848004 = -562371295;    int NeNfWzrOfhNBrDkqGEz79648266 = -748529739;    int NeNfWzrOfhNBrDkqGEz22420935 = -684439897;    int NeNfWzrOfhNBrDkqGEz83334787 = -441859208;    int NeNfWzrOfhNBrDkqGEz39424895 = -250555310;    int NeNfWzrOfhNBrDkqGEz28617346 = -535738460;    int NeNfWzrOfhNBrDkqGEz34706009 = -31108875;    int NeNfWzrOfhNBrDkqGEz45790599 = -697599756;    int NeNfWzrOfhNBrDkqGEz18315345 = -181086348;    int NeNfWzrOfhNBrDkqGEz48073560 = -862509585;    int NeNfWzrOfhNBrDkqGEz65979075 = 19052286;    int NeNfWzrOfhNBrDkqGEz71125254 = -587914442;    int NeNfWzrOfhNBrDkqGEz66398494 = -811381294;    int NeNfWzrOfhNBrDkqGEz45777441 = -636656891;    int NeNfWzrOfhNBrDkqGEz95754278 = -868475936;    int NeNfWzrOfhNBrDkqGEz79582401 = -953976847;    int NeNfWzrOfhNBrDkqGEz37457442 = -806649868;    int NeNfWzrOfhNBrDkqGEz41632308 = -430172043;    int NeNfWzrOfhNBrDkqGEz55272654 = -709807249;    int NeNfWzrOfhNBrDkqGEz34485754 = 3671917;    int NeNfWzrOfhNBrDkqGEz77090171 = -505384540;    int NeNfWzrOfhNBrDkqGEz1610463 = -578033813;    int NeNfWzrOfhNBrDkqGEz80286438 = -312128366;    int NeNfWzrOfhNBrDkqGEz11392148 = -783336804;    int NeNfWzrOfhNBrDkqGEz38272678 = -76189164;    int NeNfWzrOfhNBrDkqGEz45590149 = -716072013;    int NeNfWzrOfhNBrDkqGEz11619491 = -351041658;    int NeNfWzrOfhNBrDkqGEz4028212 = -85023123;    int NeNfWzrOfhNBrDkqGEz54651009 = -564844963;    int NeNfWzrOfhNBrDkqGEz29917776 = -775149529;    int NeNfWzrOfhNBrDkqGEz80200154 = -81380067;    int NeNfWzrOfhNBrDkqGEz93711069 = -428220496;    int NeNfWzrOfhNBrDkqGEz84667920 = -874754254;    int NeNfWzrOfhNBrDkqGEz25547290 = -464969657;    int NeNfWzrOfhNBrDkqGEz75659164 = -205288618;    int NeNfWzrOfhNBrDkqGEz55566651 = -350812126;    int NeNfWzrOfhNBrDkqGEz32399777 = -74606853;    int NeNfWzrOfhNBrDkqGEz11761669 = -314035153;    int NeNfWzrOfhNBrDkqGEz26143669 = -216737156;    int NeNfWzrOfhNBrDkqGEz16355480 = -782081043;    int NeNfWzrOfhNBrDkqGEz72361300 = -25955582;    int NeNfWzrOfhNBrDkqGEz42359429 = 97932362;    int NeNfWzrOfhNBrDkqGEz69014037 = -189849173;    int NeNfWzrOfhNBrDkqGEz18386934 = -275998804;    int NeNfWzrOfhNBrDkqGEz17510516 = -364414438;    int NeNfWzrOfhNBrDkqGEz26241761 = -793832500;    int NeNfWzrOfhNBrDkqGEz63712137 = -953537821;    int NeNfWzrOfhNBrDkqGEz98805558 = -629647951;    int NeNfWzrOfhNBrDkqGEz90927698 = -776125911;    int NeNfWzrOfhNBrDkqGEz15313961 = 46910721;    int NeNfWzrOfhNBrDkqGEz67901367 = -960733843;     NeNfWzrOfhNBrDkqGEz25416198 = NeNfWzrOfhNBrDkqGEz95337970;     NeNfWzrOfhNBrDkqGEz95337970 = NeNfWzrOfhNBrDkqGEz53591929;     NeNfWzrOfhNBrDkqGEz53591929 = NeNfWzrOfhNBrDkqGEz73475673;     NeNfWzrOfhNBrDkqGEz73475673 = NeNfWzrOfhNBrDkqGEz81370904;     NeNfWzrOfhNBrDkqGEz81370904 = NeNfWzrOfhNBrDkqGEz26850079;     NeNfWzrOfhNBrDkqGEz26850079 = NeNfWzrOfhNBrDkqGEz16265826;     NeNfWzrOfhNBrDkqGEz16265826 = NeNfWzrOfhNBrDkqGEz48284609;     NeNfWzrOfhNBrDkqGEz48284609 = NeNfWzrOfhNBrDkqGEz30969196;     NeNfWzrOfhNBrDkqGEz30969196 = NeNfWzrOfhNBrDkqGEz34403113;     NeNfWzrOfhNBrDkqGEz34403113 = NeNfWzrOfhNBrDkqGEz32553897;     NeNfWzrOfhNBrDkqGEz32553897 = NeNfWzrOfhNBrDkqGEz7200872;     NeNfWzrOfhNBrDkqGEz7200872 = NeNfWzrOfhNBrDkqGEz245480;     NeNfWzrOfhNBrDkqGEz245480 = NeNfWzrOfhNBrDkqGEz41553063;     NeNfWzrOfhNBrDkqGEz41553063 = NeNfWzrOfhNBrDkqGEz65240199;     NeNfWzrOfhNBrDkqGEz65240199 = NeNfWzrOfhNBrDkqGEz88939844;     NeNfWzrOfhNBrDkqGEz88939844 = NeNfWzrOfhNBrDkqGEz46746931;     NeNfWzrOfhNBrDkqGEz46746931 = NeNfWzrOfhNBrDkqGEz94881739;     NeNfWzrOfhNBrDkqGEz94881739 = NeNfWzrOfhNBrDkqGEz35639694;     NeNfWzrOfhNBrDkqGEz35639694 = NeNfWzrOfhNBrDkqGEz75700780;     NeNfWzrOfhNBrDkqGEz75700780 = NeNfWzrOfhNBrDkqGEz56202491;     NeNfWzrOfhNBrDkqGEz56202491 = NeNfWzrOfhNBrDkqGEz90710188;     NeNfWzrOfhNBrDkqGEz90710188 = NeNfWzrOfhNBrDkqGEz49547371;     NeNfWzrOfhNBrDkqGEz49547371 = NeNfWzrOfhNBrDkqGEz35276585;     NeNfWzrOfhNBrDkqGEz35276585 = NeNfWzrOfhNBrDkqGEz25402113;     NeNfWzrOfhNBrDkqGEz25402113 = NeNfWzrOfhNBrDkqGEz15391829;     NeNfWzrOfhNBrDkqGEz15391829 = NeNfWzrOfhNBrDkqGEz55724825;     NeNfWzrOfhNBrDkqGEz55724825 = NeNfWzrOfhNBrDkqGEz49867331;     NeNfWzrOfhNBrDkqGEz49867331 = NeNfWzrOfhNBrDkqGEz2507168;     NeNfWzrOfhNBrDkqGEz2507168 = NeNfWzrOfhNBrDkqGEz35214918;     NeNfWzrOfhNBrDkqGEz35214918 = NeNfWzrOfhNBrDkqGEz54820712;     NeNfWzrOfhNBrDkqGEz54820712 = NeNfWzrOfhNBrDkqGEz95096455;     NeNfWzrOfhNBrDkqGEz95096455 = NeNfWzrOfhNBrDkqGEz65568563;     NeNfWzrOfhNBrDkqGEz65568563 = NeNfWzrOfhNBrDkqGEz44972826;     NeNfWzrOfhNBrDkqGEz44972826 = NeNfWzrOfhNBrDkqGEz7067309;     NeNfWzrOfhNBrDkqGEz7067309 = NeNfWzrOfhNBrDkqGEz88150028;     NeNfWzrOfhNBrDkqGEz88150028 = NeNfWzrOfhNBrDkqGEz87329382;     NeNfWzrOfhNBrDkqGEz87329382 = NeNfWzrOfhNBrDkqGEz66460493;     NeNfWzrOfhNBrDkqGEz66460493 = NeNfWzrOfhNBrDkqGEz83489591;     NeNfWzrOfhNBrDkqGEz83489591 = NeNfWzrOfhNBrDkqGEz97367015;     NeNfWzrOfhNBrDkqGEz97367015 = NeNfWzrOfhNBrDkqGEz30110631;     NeNfWzrOfhNBrDkqGEz30110631 = NeNfWzrOfhNBrDkqGEz44583000;     NeNfWzrOfhNBrDkqGEz44583000 = NeNfWzrOfhNBrDkqGEz86681977;     NeNfWzrOfhNBrDkqGEz86681977 = NeNfWzrOfhNBrDkqGEz94896362;     NeNfWzrOfhNBrDkqGEz94896362 = NeNfWzrOfhNBrDkqGEz5358809;     NeNfWzrOfhNBrDkqGEz5358809 = NeNfWzrOfhNBrDkqGEz45201959;     NeNfWzrOfhNBrDkqGEz45201959 = NeNfWzrOfhNBrDkqGEz21680759;     NeNfWzrOfhNBrDkqGEz21680759 = NeNfWzrOfhNBrDkqGEz71056904;     NeNfWzrOfhNBrDkqGEz71056904 = NeNfWzrOfhNBrDkqGEz24320042;     NeNfWzrOfhNBrDkqGEz24320042 = NeNfWzrOfhNBrDkqGEz26848004;     NeNfWzrOfhNBrDkqGEz26848004 = NeNfWzrOfhNBrDkqGEz79648266;     NeNfWzrOfhNBrDkqGEz79648266 = NeNfWzrOfhNBrDkqGEz22420935;     NeNfWzrOfhNBrDkqGEz22420935 = NeNfWzrOfhNBrDkqGEz83334787;     NeNfWzrOfhNBrDkqGEz83334787 = NeNfWzrOfhNBrDkqGEz39424895;     NeNfWzrOfhNBrDkqGEz39424895 = NeNfWzrOfhNBrDkqGEz28617346;     NeNfWzrOfhNBrDkqGEz28617346 = NeNfWzrOfhNBrDkqGEz34706009;     NeNfWzrOfhNBrDkqGEz34706009 = NeNfWzrOfhNBrDkqGEz45790599;     NeNfWzrOfhNBrDkqGEz45790599 = NeNfWzrOfhNBrDkqGEz18315345;     NeNfWzrOfhNBrDkqGEz18315345 = NeNfWzrOfhNBrDkqGEz48073560;     NeNfWzrOfhNBrDkqGEz48073560 = NeNfWzrOfhNBrDkqGEz65979075;     NeNfWzrOfhNBrDkqGEz65979075 = NeNfWzrOfhNBrDkqGEz71125254;     NeNfWzrOfhNBrDkqGEz71125254 = NeNfWzrOfhNBrDkqGEz66398494;     NeNfWzrOfhNBrDkqGEz66398494 = NeNfWzrOfhNBrDkqGEz45777441;     NeNfWzrOfhNBrDkqGEz45777441 = NeNfWzrOfhNBrDkqGEz95754278;     NeNfWzrOfhNBrDkqGEz95754278 = NeNfWzrOfhNBrDkqGEz79582401;     NeNfWzrOfhNBrDkqGEz79582401 = NeNfWzrOfhNBrDkqGEz37457442;     NeNfWzrOfhNBrDkqGEz37457442 = NeNfWzrOfhNBrDkqGEz41632308;     NeNfWzrOfhNBrDkqGEz41632308 = NeNfWzrOfhNBrDkqGEz55272654;     NeNfWzrOfhNBrDkqGEz55272654 = NeNfWzrOfhNBrDkqGEz34485754;     NeNfWzrOfhNBrDkqGEz34485754 = NeNfWzrOfhNBrDkqGEz77090171;     NeNfWzrOfhNBrDkqGEz77090171 = NeNfWzrOfhNBrDkqGEz1610463;     NeNfWzrOfhNBrDkqGEz1610463 = NeNfWzrOfhNBrDkqGEz80286438;     NeNfWzrOfhNBrDkqGEz80286438 = NeNfWzrOfhNBrDkqGEz11392148;     NeNfWzrOfhNBrDkqGEz11392148 = NeNfWzrOfhNBrDkqGEz38272678;     NeNfWzrOfhNBrDkqGEz38272678 = NeNfWzrOfhNBrDkqGEz45590149;     NeNfWzrOfhNBrDkqGEz45590149 = NeNfWzrOfhNBrDkqGEz11619491;     NeNfWzrOfhNBrDkqGEz11619491 = NeNfWzrOfhNBrDkqGEz4028212;     NeNfWzrOfhNBrDkqGEz4028212 = NeNfWzrOfhNBrDkqGEz54651009;     NeNfWzrOfhNBrDkqGEz54651009 = NeNfWzrOfhNBrDkqGEz29917776;     NeNfWzrOfhNBrDkqGEz29917776 = NeNfWzrOfhNBrDkqGEz80200154;     NeNfWzrOfhNBrDkqGEz80200154 = NeNfWzrOfhNBrDkqGEz93711069;     NeNfWzrOfhNBrDkqGEz93711069 = NeNfWzrOfhNBrDkqGEz84667920;     NeNfWzrOfhNBrDkqGEz84667920 = NeNfWzrOfhNBrDkqGEz25547290;     NeNfWzrOfhNBrDkqGEz25547290 = NeNfWzrOfhNBrDkqGEz75659164;     NeNfWzrOfhNBrDkqGEz75659164 = NeNfWzrOfhNBrDkqGEz55566651;     NeNfWzrOfhNBrDkqGEz55566651 = NeNfWzrOfhNBrDkqGEz32399777;     NeNfWzrOfhNBrDkqGEz32399777 = NeNfWzrOfhNBrDkqGEz11761669;     NeNfWzrOfhNBrDkqGEz11761669 = NeNfWzrOfhNBrDkqGEz26143669;     NeNfWzrOfhNBrDkqGEz26143669 = NeNfWzrOfhNBrDkqGEz16355480;     NeNfWzrOfhNBrDkqGEz16355480 = NeNfWzrOfhNBrDkqGEz72361300;     NeNfWzrOfhNBrDkqGEz72361300 = NeNfWzrOfhNBrDkqGEz42359429;     NeNfWzrOfhNBrDkqGEz42359429 = NeNfWzrOfhNBrDkqGEz69014037;     NeNfWzrOfhNBrDkqGEz69014037 = NeNfWzrOfhNBrDkqGEz18386934;     NeNfWzrOfhNBrDkqGEz18386934 = NeNfWzrOfhNBrDkqGEz17510516;     NeNfWzrOfhNBrDkqGEz17510516 = NeNfWzrOfhNBrDkqGEz26241761;     NeNfWzrOfhNBrDkqGEz26241761 = NeNfWzrOfhNBrDkqGEz63712137;     NeNfWzrOfhNBrDkqGEz63712137 = NeNfWzrOfhNBrDkqGEz98805558;     NeNfWzrOfhNBrDkqGEz98805558 = NeNfWzrOfhNBrDkqGEz90927698;     NeNfWzrOfhNBrDkqGEz90927698 = NeNfWzrOfhNBrDkqGEz15313961;     NeNfWzrOfhNBrDkqGEz15313961 = NeNfWzrOfhNBrDkqGEz67901367;     NeNfWzrOfhNBrDkqGEz67901367 = NeNfWzrOfhNBrDkqGEz25416198;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void rbPcEUhavvgHGumNsqk91148384() {     int eerUHujdExmZycIbNCM80070595 = -298261427;    int eerUHujdExmZycIbNCM42335590 = -849075658;    int eerUHujdExmZycIbNCM14324576 = -983101965;    int eerUHujdExmZycIbNCM44910615 = -486573836;    int eerUHujdExmZycIbNCM55822575 = -394822283;    int eerUHujdExmZycIbNCM41024476 = -36170728;    int eerUHujdExmZycIbNCM37366529 = -80576015;    int eerUHujdExmZycIbNCM77459712 = 95114963;    int eerUHujdExmZycIbNCM18743607 = -14671171;    int eerUHujdExmZycIbNCM17035099 = 8175135;    int eerUHujdExmZycIbNCM11165192 = -187900801;    int eerUHujdExmZycIbNCM69965584 = -183888596;    int eerUHujdExmZycIbNCM64062794 = -931167057;    int eerUHujdExmZycIbNCM34519494 = -965496117;    int eerUHujdExmZycIbNCM95464272 = -112173565;    int eerUHujdExmZycIbNCM78707380 = -779128897;    int eerUHujdExmZycIbNCM46578695 = 75763417;    int eerUHujdExmZycIbNCM62478326 = -292263422;    int eerUHujdExmZycIbNCM36860295 = -843747654;    int eerUHujdExmZycIbNCM93335335 = -826357273;    int eerUHujdExmZycIbNCM90376878 = -185429651;    int eerUHujdExmZycIbNCM41962778 = -996069077;    int eerUHujdExmZycIbNCM86017202 = -58654509;    int eerUHujdExmZycIbNCM36704954 = -15671821;    int eerUHujdExmZycIbNCM21154730 = -990875292;    int eerUHujdExmZycIbNCM56632776 = -645148114;    int eerUHujdExmZycIbNCM57714749 = -873949729;    int eerUHujdExmZycIbNCM3116332 = 24646090;    int eerUHujdExmZycIbNCM42404845 = -147904788;    int eerUHujdExmZycIbNCM29650327 = -390099833;    int eerUHujdExmZycIbNCM6526241 = -307919275;    int eerUHujdExmZycIbNCM26088066 = -167390889;    int eerUHujdExmZycIbNCM33224440 = -23810079;    int eerUHujdExmZycIbNCM39628719 = 2059687;    int eerUHujdExmZycIbNCM41571466 = -374927716;    int eerUHujdExmZycIbNCM75476570 = -947662991;    int eerUHujdExmZycIbNCM62033870 = -321362141;    int eerUHujdExmZycIbNCM79437732 = -12437410;    int eerUHujdExmZycIbNCM34259240 = -827310753;    int eerUHujdExmZycIbNCM21353411 = -40055542;    int eerUHujdExmZycIbNCM86070031 = -877469272;    int eerUHujdExmZycIbNCM81257658 = -873836929;    int eerUHujdExmZycIbNCM77682160 = -485107164;    int eerUHujdExmZycIbNCM3890762 = -480745791;    int eerUHujdExmZycIbNCM65342872 = -673999073;    int eerUHujdExmZycIbNCM535561 = -505371389;    int eerUHujdExmZycIbNCM38154471 = -140276218;    int eerUHujdExmZycIbNCM94484213 = -422003568;    int eerUHujdExmZycIbNCM66662808 = -402062581;    int eerUHujdExmZycIbNCM71689666 = -802390590;    int eerUHujdExmZycIbNCM54761805 = -405745241;    int eerUHujdExmZycIbNCM11803085 = -99505880;    int eerUHujdExmZycIbNCM15062790 = -181774666;    int eerUHujdExmZycIbNCM96840652 = -146441794;    int eerUHujdExmZycIbNCM771506 = -931647142;    int eerUHujdExmZycIbNCM38107818 = -302192351;    int eerUHujdExmZycIbNCM56318387 = -690421149;    int eerUHujdExmZycIbNCM77619622 = -867430145;    int eerUHujdExmZycIbNCM23755886 = -495698544;    int eerUHujdExmZycIbNCM99189798 = -749674169;    int eerUHujdExmZycIbNCM83309727 = -162221000;    int eerUHujdExmZycIbNCM34250198 = -5222106;    int eerUHujdExmZycIbNCM35054868 = -756980249;    int eerUHujdExmZycIbNCM89093279 = -624571338;    int eerUHujdExmZycIbNCM10508859 = -683905590;    int eerUHujdExmZycIbNCM85077126 = 79490088;    int eerUHujdExmZycIbNCM36741145 = -60078518;    int eerUHujdExmZycIbNCM24434076 = -833226744;    int eerUHujdExmZycIbNCM92948028 = -490568401;    int eerUHujdExmZycIbNCM19987703 = -164510575;    int eerUHujdExmZycIbNCM16673511 = -357766757;    int eerUHujdExmZycIbNCM67140962 = -911799173;    int eerUHujdExmZycIbNCM28219086 = -464952669;    int eerUHujdExmZycIbNCM15506885 = -703692113;    int eerUHujdExmZycIbNCM7265304 = -948888001;    int eerUHujdExmZycIbNCM9119221 = -311592722;    int eerUHujdExmZycIbNCM64280617 = -410961913;    int eerUHujdExmZycIbNCM82126441 = -577908718;    int eerUHujdExmZycIbNCM71362081 = -341672748;    int eerUHujdExmZycIbNCM20619169 = -385503904;    int eerUHujdExmZycIbNCM18478305 = -404871897;    int eerUHujdExmZycIbNCM63230536 = -351946161;    int eerUHujdExmZycIbNCM36453523 = -573291329;    int eerUHujdExmZycIbNCM70715178 = -345514199;    int eerUHujdExmZycIbNCM74888521 = -984354592;    int eerUHujdExmZycIbNCM94723155 = -108413396;    int eerUHujdExmZycIbNCM11025276 = -985616224;    int eerUHujdExmZycIbNCM36383788 = -877368285;    int eerUHujdExmZycIbNCM38857213 = -66293172;    int eerUHujdExmZycIbNCM3463648 = 27264634;    int eerUHujdExmZycIbNCM19158184 = -157241842;    int eerUHujdExmZycIbNCM84414247 = -453931997;    int eerUHujdExmZycIbNCM55681847 = -516738866;    int eerUHujdExmZycIbNCM35069441 = 22363415;    int eerUHujdExmZycIbNCM38043683 = -877834542;    int eerUHujdExmZycIbNCM51819834 = -772247167;    int eerUHujdExmZycIbNCM46202791 = -16856681;    int eerUHujdExmZycIbNCM88588880 = -860535826;    int eerUHujdExmZycIbNCM93381903 = -796840201;    int eerUHujdExmZycIbNCM80265746 = -298261427;     eerUHujdExmZycIbNCM80070595 = eerUHujdExmZycIbNCM42335590;     eerUHujdExmZycIbNCM42335590 = eerUHujdExmZycIbNCM14324576;     eerUHujdExmZycIbNCM14324576 = eerUHujdExmZycIbNCM44910615;     eerUHujdExmZycIbNCM44910615 = eerUHujdExmZycIbNCM55822575;     eerUHujdExmZycIbNCM55822575 = eerUHujdExmZycIbNCM41024476;     eerUHujdExmZycIbNCM41024476 = eerUHujdExmZycIbNCM37366529;     eerUHujdExmZycIbNCM37366529 = eerUHujdExmZycIbNCM77459712;     eerUHujdExmZycIbNCM77459712 = eerUHujdExmZycIbNCM18743607;     eerUHujdExmZycIbNCM18743607 = eerUHujdExmZycIbNCM17035099;     eerUHujdExmZycIbNCM17035099 = eerUHujdExmZycIbNCM11165192;     eerUHujdExmZycIbNCM11165192 = eerUHujdExmZycIbNCM69965584;     eerUHujdExmZycIbNCM69965584 = eerUHujdExmZycIbNCM64062794;     eerUHujdExmZycIbNCM64062794 = eerUHujdExmZycIbNCM34519494;     eerUHujdExmZycIbNCM34519494 = eerUHujdExmZycIbNCM95464272;     eerUHujdExmZycIbNCM95464272 = eerUHujdExmZycIbNCM78707380;     eerUHujdExmZycIbNCM78707380 = eerUHujdExmZycIbNCM46578695;     eerUHujdExmZycIbNCM46578695 = eerUHujdExmZycIbNCM62478326;     eerUHujdExmZycIbNCM62478326 = eerUHujdExmZycIbNCM36860295;     eerUHujdExmZycIbNCM36860295 = eerUHujdExmZycIbNCM93335335;     eerUHujdExmZycIbNCM93335335 = eerUHujdExmZycIbNCM90376878;     eerUHujdExmZycIbNCM90376878 = eerUHujdExmZycIbNCM41962778;     eerUHujdExmZycIbNCM41962778 = eerUHujdExmZycIbNCM86017202;     eerUHujdExmZycIbNCM86017202 = eerUHujdExmZycIbNCM36704954;     eerUHujdExmZycIbNCM36704954 = eerUHujdExmZycIbNCM21154730;     eerUHujdExmZycIbNCM21154730 = eerUHujdExmZycIbNCM56632776;     eerUHujdExmZycIbNCM56632776 = eerUHujdExmZycIbNCM57714749;     eerUHujdExmZycIbNCM57714749 = eerUHujdExmZycIbNCM3116332;     eerUHujdExmZycIbNCM3116332 = eerUHujdExmZycIbNCM42404845;     eerUHujdExmZycIbNCM42404845 = eerUHujdExmZycIbNCM29650327;     eerUHujdExmZycIbNCM29650327 = eerUHujdExmZycIbNCM6526241;     eerUHujdExmZycIbNCM6526241 = eerUHujdExmZycIbNCM26088066;     eerUHujdExmZycIbNCM26088066 = eerUHujdExmZycIbNCM33224440;     eerUHujdExmZycIbNCM33224440 = eerUHujdExmZycIbNCM39628719;     eerUHujdExmZycIbNCM39628719 = eerUHujdExmZycIbNCM41571466;     eerUHujdExmZycIbNCM41571466 = eerUHujdExmZycIbNCM75476570;     eerUHujdExmZycIbNCM75476570 = eerUHujdExmZycIbNCM62033870;     eerUHujdExmZycIbNCM62033870 = eerUHujdExmZycIbNCM79437732;     eerUHujdExmZycIbNCM79437732 = eerUHujdExmZycIbNCM34259240;     eerUHujdExmZycIbNCM34259240 = eerUHujdExmZycIbNCM21353411;     eerUHujdExmZycIbNCM21353411 = eerUHujdExmZycIbNCM86070031;     eerUHujdExmZycIbNCM86070031 = eerUHujdExmZycIbNCM81257658;     eerUHujdExmZycIbNCM81257658 = eerUHujdExmZycIbNCM77682160;     eerUHujdExmZycIbNCM77682160 = eerUHujdExmZycIbNCM3890762;     eerUHujdExmZycIbNCM3890762 = eerUHujdExmZycIbNCM65342872;     eerUHujdExmZycIbNCM65342872 = eerUHujdExmZycIbNCM535561;     eerUHujdExmZycIbNCM535561 = eerUHujdExmZycIbNCM38154471;     eerUHujdExmZycIbNCM38154471 = eerUHujdExmZycIbNCM94484213;     eerUHujdExmZycIbNCM94484213 = eerUHujdExmZycIbNCM66662808;     eerUHujdExmZycIbNCM66662808 = eerUHujdExmZycIbNCM71689666;     eerUHujdExmZycIbNCM71689666 = eerUHujdExmZycIbNCM54761805;     eerUHujdExmZycIbNCM54761805 = eerUHujdExmZycIbNCM11803085;     eerUHujdExmZycIbNCM11803085 = eerUHujdExmZycIbNCM15062790;     eerUHujdExmZycIbNCM15062790 = eerUHujdExmZycIbNCM96840652;     eerUHujdExmZycIbNCM96840652 = eerUHujdExmZycIbNCM771506;     eerUHujdExmZycIbNCM771506 = eerUHujdExmZycIbNCM38107818;     eerUHujdExmZycIbNCM38107818 = eerUHujdExmZycIbNCM56318387;     eerUHujdExmZycIbNCM56318387 = eerUHujdExmZycIbNCM77619622;     eerUHujdExmZycIbNCM77619622 = eerUHujdExmZycIbNCM23755886;     eerUHujdExmZycIbNCM23755886 = eerUHujdExmZycIbNCM99189798;     eerUHujdExmZycIbNCM99189798 = eerUHujdExmZycIbNCM83309727;     eerUHujdExmZycIbNCM83309727 = eerUHujdExmZycIbNCM34250198;     eerUHujdExmZycIbNCM34250198 = eerUHujdExmZycIbNCM35054868;     eerUHujdExmZycIbNCM35054868 = eerUHujdExmZycIbNCM89093279;     eerUHujdExmZycIbNCM89093279 = eerUHujdExmZycIbNCM10508859;     eerUHujdExmZycIbNCM10508859 = eerUHujdExmZycIbNCM85077126;     eerUHujdExmZycIbNCM85077126 = eerUHujdExmZycIbNCM36741145;     eerUHujdExmZycIbNCM36741145 = eerUHujdExmZycIbNCM24434076;     eerUHujdExmZycIbNCM24434076 = eerUHujdExmZycIbNCM92948028;     eerUHujdExmZycIbNCM92948028 = eerUHujdExmZycIbNCM19987703;     eerUHujdExmZycIbNCM19987703 = eerUHujdExmZycIbNCM16673511;     eerUHujdExmZycIbNCM16673511 = eerUHujdExmZycIbNCM67140962;     eerUHujdExmZycIbNCM67140962 = eerUHujdExmZycIbNCM28219086;     eerUHujdExmZycIbNCM28219086 = eerUHujdExmZycIbNCM15506885;     eerUHujdExmZycIbNCM15506885 = eerUHujdExmZycIbNCM7265304;     eerUHujdExmZycIbNCM7265304 = eerUHujdExmZycIbNCM9119221;     eerUHujdExmZycIbNCM9119221 = eerUHujdExmZycIbNCM64280617;     eerUHujdExmZycIbNCM64280617 = eerUHujdExmZycIbNCM82126441;     eerUHujdExmZycIbNCM82126441 = eerUHujdExmZycIbNCM71362081;     eerUHujdExmZycIbNCM71362081 = eerUHujdExmZycIbNCM20619169;     eerUHujdExmZycIbNCM20619169 = eerUHujdExmZycIbNCM18478305;     eerUHujdExmZycIbNCM18478305 = eerUHujdExmZycIbNCM63230536;     eerUHujdExmZycIbNCM63230536 = eerUHujdExmZycIbNCM36453523;     eerUHujdExmZycIbNCM36453523 = eerUHujdExmZycIbNCM70715178;     eerUHujdExmZycIbNCM70715178 = eerUHujdExmZycIbNCM74888521;     eerUHujdExmZycIbNCM74888521 = eerUHujdExmZycIbNCM94723155;     eerUHujdExmZycIbNCM94723155 = eerUHujdExmZycIbNCM11025276;     eerUHujdExmZycIbNCM11025276 = eerUHujdExmZycIbNCM36383788;     eerUHujdExmZycIbNCM36383788 = eerUHujdExmZycIbNCM38857213;     eerUHujdExmZycIbNCM38857213 = eerUHujdExmZycIbNCM3463648;     eerUHujdExmZycIbNCM3463648 = eerUHujdExmZycIbNCM19158184;     eerUHujdExmZycIbNCM19158184 = eerUHujdExmZycIbNCM84414247;     eerUHujdExmZycIbNCM84414247 = eerUHujdExmZycIbNCM55681847;     eerUHujdExmZycIbNCM55681847 = eerUHujdExmZycIbNCM35069441;     eerUHujdExmZycIbNCM35069441 = eerUHujdExmZycIbNCM38043683;     eerUHujdExmZycIbNCM38043683 = eerUHujdExmZycIbNCM51819834;     eerUHujdExmZycIbNCM51819834 = eerUHujdExmZycIbNCM46202791;     eerUHujdExmZycIbNCM46202791 = eerUHujdExmZycIbNCM88588880;     eerUHujdExmZycIbNCM88588880 = eerUHujdExmZycIbNCM93381903;     eerUHujdExmZycIbNCM93381903 = eerUHujdExmZycIbNCM80265746;     eerUHujdExmZycIbNCM80265746 = eerUHujdExmZycIbNCM80070595;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void fXTTspjHOwRnfYVgPpt97476931() {     int IqaJHqRXlWFiNOtQGIp34724993 = -735789011;    int IqaJHqRXlWFiNOtQGIp89333209 = -328640471;    int IqaJHqRXlWFiNOtQGIp75057222 = -268486578;    int IqaJHqRXlWFiNOtQGIp16345557 = -492676247;    int IqaJHqRXlWFiNOtQGIp30274245 = -67257522;    int IqaJHqRXlWFiNOtQGIp55198873 = -165321564;    int IqaJHqRXlWFiNOtQGIp58467233 = -382468688;    int IqaJHqRXlWFiNOtQGIp6634816 = -405453269;    int IqaJHqRXlWFiNOtQGIp6518017 = -61524542;    int IqaJHqRXlWFiNOtQGIp99667084 = -270626135;    int IqaJHqRXlWFiNOtQGIp89776486 = -813257373;    int IqaJHqRXlWFiNOtQGIp32730298 = -370312685;    int IqaJHqRXlWFiNOtQGIp27880110 = -734707361;    int IqaJHqRXlWFiNOtQGIp27485924 = -577599695;    int IqaJHqRXlWFiNOtQGIp25688346 = -19295196;    int IqaJHqRXlWFiNOtQGIp68474915 = -409288461;    int IqaJHqRXlWFiNOtQGIp46410459 = -397836411;    int IqaJHqRXlWFiNOtQGIp30074913 = -355827890;    int IqaJHqRXlWFiNOtQGIp38080896 = -29559202;    int IqaJHqRXlWFiNOtQGIp10969892 = -71723419;    int IqaJHqRXlWFiNOtQGIp24551267 = -753512801;    int IqaJHqRXlWFiNOtQGIp93215366 = -62513185;    int IqaJHqRXlWFiNOtQGIp22487035 = -645397930;    int IqaJHqRXlWFiNOtQGIp38133323 = -814712637;    int IqaJHqRXlWFiNOtQGIp16907346 = -263788744;    int IqaJHqRXlWFiNOtQGIp97873722 = -648856899;    int IqaJHqRXlWFiNOtQGIp59704673 = -328794008;    int IqaJHqRXlWFiNOtQGIp56365331 = 16594230;    int IqaJHqRXlWFiNOtQGIp82302522 = -528149664;    int IqaJHqRXlWFiNOtQGIp24085736 = -680857801;    int IqaJHqRXlWFiNOtQGIp58231769 = -856791801;    int IqaJHqRXlWFiNOtQGIp57079676 = -578887417;    int IqaJHqRXlWFiNOtQGIp880317 = -580327693;    int IqaJHqRXlWFiNOtQGIp34284611 = -778061123;    int IqaJHqRXlWFiNOtQGIp76075622 = -592790976;    int IqaJHqRXlWFiNOtQGIp62803112 = -95658587;    int IqaJHqRXlWFiNOtQGIp36738358 = -171788761;    int IqaJHqRXlWFiNOtQGIp92414971 = -986366431;    int IqaJHqRXlWFiNOtQGIp85028889 = -109259355;    int IqaJHqRXlWFiNOtQGIp45339805 = -798364141;    int IqaJHqRXlWFiNOtQGIp42029433 = -990019431;    int IqaJHqRXlWFiNOtQGIp17932317 = -381369016;    int IqaJHqRXlWFiNOtQGIp68682343 = -325612482;    int IqaJHqRXlWFiNOtQGIp12885161 = 45574543;    int IqaJHqRXlWFiNOtQGIp25326936 = -806516671;    int IqaJHqRXlWFiNOtQGIp55869162 = -574161003;    int IqaJHqRXlWFiNOtQGIp54628183 = -167333602;    int IqaJHqRXlWFiNOtQGIp17911522 = -399655941;    int IqaJHqRXlWFiNOtQGIp9005575 = -301792770;    int IqaJHqRXlWFiNOtQGIp16531329 = 57590116;    int IqaJHqRXlWFiNOtQGIp29875345 = -62960743;    int IqaJHqRXlWFiNOtQGIp1185235 = -614571863;    int IqaJHqRXlWFiNOtQGIp46790793 = 78309877;    int IqaJHqRXlWFiNOtQGIp54256409 = -42328279;    int IqaJHqRXlWFiNOtQGIp72925665 = -227555823;    int IqaJHqRXlWFiNOtQGIp41509626 = -573275827;    int IqaJHqRXlWFiNOtQGIp66846175 = -683242542;    int IqaJHqRXlWFiNOtQGIp36923900 = -453773942;    int IqaJHqRXlWFiNOtQGIp99438210 = -128887504;    int IqaJHqRXlWFiNOtQGIp32400523 = -418400623;    int IqaJHqRXlWFiNOtQGIp95494200 = -836527557;    int IqaJHqRXlWFiNOtQGIp2101902 = -299062918;    int IqaJHqRXlWFiNOtQGIp24332294 = -877303606;    int IqaJHqRXlWFiNOtQGIp82432281 = -380666741;    int IqaJHqRXlWFiNOtQGIp41435315 = -413834334;    int IqaJHqRXlWFiNOtQGIp32696811 = -134369956;    int IqaJHqRXlWFiNOtQGIp31849981 = -789984993;    int IqaJHqRXlWFiNOtQGIp93595498 = -956646239;    int IqaJHqRXlWFiNOtQGIp51410302 = -984808720;    int IqaJHqRXlWFiNOtQGIp62885233 = -923636610;    int IqaJHqRXlWFiNOtQGIp31736558 = -137499700;    int IqaJHqRXlWFiNOtQGIp53995487 = -411469981;    int IqaJHqRXlWFiNOtQGIp45046024 = -146568535;    int IqaJHqRXlWFiNOtQGIp92741090 = -231195061;    int IqaJHqRXlWFiNOtQGIp68940459 = -81703989;    int IqaJHqRXlWFiNOtQGIp6618950 = -272143786;    int IqaJHqRXlWFiNOtQGIp24533024 = -736900703;    int IqaJHqRXlWFiNOtQGIp9601874 = -590972473;    int IqaJHqRXlWFiNOtQGIp12806387 = 91804034;    int IqaJHqRXlWFiNOtQGIp61038183 = -689627741;    int IqaJHqRXlWFiNOtQGIp43245540 = -381523298;    int IqaJHqRXlWFiNOtQGIp41793151 = -929138067;    int IqaJHqRXlWFiNOtQGIp47359757 = -681613001;    int IqaJHqRXlWFiNOtQGIp65771193 = -485739781;    int IqaJHqRXlWFiNOtQGIp94210390 = -517897059;    int IqaJHqRXlWFiNOtQGIp57046535 = -142219938;    int IqaJHqRXlWFiNOtQGIp10288884 = -557197295;    int IqaJHqRXlWFiNOtQGIp46623907 = -437999415;    int IqaJHqRXlWFiNOtQGIp61358946 = -450505300;    int IqaJHqRXlWFiNOtQGIp34565996 = 80484851;    int IqaJHqRXlWFiNOtQGIp95956937 = -412416046;    int IqaJHqRXlWFiNOtQGIp99814458 = -718014820;    int IqaJHqRXlWFiNOtQGIp92976760 = -757478928;    int IqaJHqRXlWFiNOtQGIp52628367 = -690858732;    int IqaJHqRXlWFiNOtQGIp49845605 = -961836584;    int IqaJHqRXlWFiNOtQGIp39927532 = -590956513;    int IqaJHqRXlWFiNOtQGIp93600022 = -504065410;    int IqaJHqRXlWFiNOtQGIp86250061 = -944945741;    int IqaJHqRXlWFiNOtQGIp71449846 = -540591123;    int IqaJHqRXlWFiNOtQGIp92630125 = -735789011;     IqaJHqRXlWFiNOtQGIp34724993 = IqaJHqRXlWFiNOtQGIp89333209;     IqaJHqRXlWFiNOtQGIp89333209 = IqaJHqRXlWFiNOtQGIp75057222;     IqaJHqRXlWFiNOtQGIp75057222 = IqaJHqRXlWFiNOtQGIp16345557;     IqaJHqRXlWFiNOtQGIp16345557 = IqaJHqRXlWFiNOtQGIp30274245;     IqaJHqRXlWFiNOtQGIp30274245 = IqaJHqRXlWFiNOtQGIp55198873;     IqaJHqRXlWFiNOtQGIp55198873 = IqaJHqRXlWFiNOtQGIp58467233;     IqaJHqRXlWFiNOtQGIp58467233 = IqaJHqRXlWFiNOtQGIp6634816;     IqaJHqRXlWFiNOtQGIp6634816 = IqaJHqRXlWFiNOtQGIp6518017;     IqaJHqRXlWFiNOtQGIp6518017 = IqaJHqRXlWFiNOtQGIp99667084;     IqaJHqRXlWFiNOtQGIp99667084 = IqaJHqRXlWFiNOtQGIp89776486;     IqaJHqRXlWFiNOtQGIp89776486 = IqaJHqRXlWFiNOtQGIp32730298;     IqaJHqRXlWFiNOtQGIp32730298 = IqaJHqRXlWFiNOtQGIp27880110;     IqaJHqRXlWFiNOtQGIp27880110 = IqaJHqRXlWFiNOtQGIp27485924;     IqaJHqRXlWFiNOtQGIp27485924 = IqaJHqRXlWFiNOtQGIp25688346;     IqaJHqRXlWFiNOtQGIp25688346 = IqaJHqRXlWFiNOtQGIp68474915;     IqaJHqRXlWFiNOtQGIp68474915 = IqaJHqRXlWFiNOtQGIp46410459;     IqaJHqRXlWFiNOtQGIp46410459 = IqaJHqRXlWFiNOtQGIp30074913;     IqaJHqRXlWFiNOtQGIp30074913 = IqaJHqRXlWFiNOtQGIp38080896;     IqaJHqRXlWFiNOtQGIp38080896 = IqaJHqRXlWFiNOtQGIp10969892;     IqaJHqRXlWFiNOtQGIp10969892 = IqaJHqRXlWFiNOtQGIp24551267;     IqaJHqRXlWFiNOtQGIp24551267 = IqaJHqRXlWFiNOtQGIp93215366;     IqaJHqRXlWFiNOtQGIp93215366 = IqaJHqRXlWFiNOtQGIp22487035;     IqaJHqRXlWFiNOtQGIp22487035 = IqaJHqRXlWFiNOtQGIp38133323;     IqaJHqRXlWFiNOtQGIp38133323 = IqaJHqRXlWFiNOtQGIp16907346;     IqaJHqRXlWFiNOtQGIp16907346 = IqaJHqRXlWFiNOtQGIp97873722;     IqaJHqRXlWFiNOtQGIp97873722 = IqaJHqRXlWFiNOtQGIp59704673;     IqaJHqRXlWFiNOtQGIp59704673 = IqaJHqRXlWFiNOtQGIp56365331;     IqaJHqRXlWFiNOtQGIp56365331 = IqaJHqRXlWFiNOtQGIp82302522;     IqaJHqRXlWFiNOtQGIp82302522 = IqaJHqRXlWFiNOtQGIp24085736;     IqaJHqRXlWFiNOtQGIp24085736 = IqaJHqRXlWFiNOtQGIp58231769;     IqaJHqRXlWFiNOtQGIp58231769 = IqaJHqRXlWFiNOtQGIp57079676;     IqaJHqRXlWFiNOtQGIp57079676 = IqaJHqRXlWFiNOtQGIp880317;     IqaJHqRXlWFiNOtQGIp880317 = IqaJHqRXlWFiNOtQGIp34284611;     IqaJHqRXlWFiNOtQGIp34284611 = IqaJHqRXlWFiNOtQGIp76075622;     IqaJHqRXlWFiNOtQGIp76075622 = IqaJHqRXlWFiNOtQGIp62803112;     IqaJHqRXlWFiNOtQGIp62803112 = IqaJHqRXlWFiNOtQGIp36738358;     IqaJHqRXlWFiNOtQGIp36738358 = IqaJHqRXlWFiNOtQGIp92414971;     IqaJHqRXlWFiNOtQGIp92414971 = IqaJHqRXlWFiNOtQGIp85028889;     IqaJHqRXlWFiNOtQGIp85028889 = IqaJHqRXlWFiNOtQGIp45339805;     IqaJHqRXlWFiNOtQGIp45339805 = IqaJHqRXlWFiNOtQGIp42029433;     IqaJHqRXlWFiNOtQGIp42029433 = IqaJHqRXlWFiNOtQGIp17932317;     IqaJHqRXlWFiNOtQGIp17932317 = IqaJHqRXlWFiNOtQGIp68682343;     IqaJHqRXlWFiNOtQGIp68682343 = IqaJHqRXlWFiNOtQGIp12885161;     IqaJHqRXlWFiNOtQGIp12885161 = IqaJHqRXlWFiNOtQGIp25326936;     IqaJHqRXlWFiNOtQGIp25326936 = IqaJHqRXlWFiNOtQGIp55869162;     IqaJHqRXlWFiNOtQGIp55869162 = IqaJHqRXlWFiNOtQGIp54628183;     IqaJHqRXlWFiNOtQGIp54628183 = IqaJHqRXlWFiNOtQGIp17911522;     IqaJHqRXlWFiNOtQGIp17911522 = IqaJHqRXlWFiNOtQGIp9005575;     IqaJHqRXlWFiNOtQGIp9005575 = IqaJHqRXlWFiNOtQGIp16531329;     IqaJHqRXlWFiNOtQGIp16531329 = IqaJHqRXlWFiNOtQGIp29875345;     IqaJHqRXlWFiNOtQGIp29875345 = IqaJHqRXlWFiNOtQGIp1185235;     IqaJHqRXlWFiNOtQGIp1185235 = IqaJHqRXlWFiNOtQGIp46790793;     IqaJHqRXlWFiNOtQGIp46790793 = IqaJHqRXlWFiNOtQGIp54256409;     IqaJHqRXlWFiNOtQGIp54256409 = IqaJHqRXlWFiNOtQGIp72925665;     IqaJHqRXlWFiNOtQGIp72925665 = IqaJHqRXlWFiNOtQGIp41509626;     IqaJHqRXlWFiNOtQGIp41509626 = IqaJHqRXlWFiNOtQGIp66846175;     IqaJHqRXlWFiNOtQGIp66846175 = IqaJHqRXlWFiNOtQGIp36923900;     IqaJHqRXlWFiNOtQGIp36923900 = IqaJHqRXlWFiNOtQGIp99438210;     IqaJHqRXlWFiNOtQGIp99438210 = IqaJHqRXlWFiNOtQGIp32400523;     IqaJHqRXlWFiNOtQGIp32400523 = IqaJHqRXlWFiNOtQGIp95494200;     IqaJHqRXlWFiNOtQGIp95494200 = IqaJHqRXlWFiNOtQGIp2101902;     IqaJHqRXlWFiNOtQGIp2101902 = IqaJHqRXlWFiNOtQGIp24332294;     IqaJHqRXlWFiNOtQGIp24332294 = IqaJHqRXlWFiNOtQGIp82432281;     IqaJHqRXlWFiNOtQGIp82432281 = IqaJHqRXlWFiNOtQGIp41435315;     IqaJHqRXlWFiNOtQGIp41435315 = IqaJHqRXlWFiNOtQGIp32696811;     IqaJHqRXlWFiNOtQGIp32696811 = IqaJHqRXlWFiNOtQGIp31849981;     IqaJHqRXlWFiNOtQGIp31849981 = IqaJHqRXlWFiNOtQGIp93595498;     IqaJHqRXlWFiNOtQGIp93595498 = IqaJHqRXlWFiNOtQGIp51410302;     IqaJHqRXlWFiNOtQGIp51410302 = IqaJHqRXlWFiNOtQGIp62885233;     IqaJHqRXlWFiNOtQGIp62885233 = IqaJHqRXlWFiNOtQGIp31736558;     IqaJHqRXlWFiNOtQGIp31736558 = IqaJHqRXlWFiNOtQGIp53995487;     IqaJHqRXlWFiNOtQGIp53995487 = IqaJHqRXlWFiNOtQGIp45046024;     IqaJHqRXlWFiNOtQGIp45046024 = IqaJHqRXlWFiNOtQGIp92741090;     IqaJHqRXlWFiNOtQGIp92741090 = IqaJHqRXlWFiNOtQGIp68940459;     IqaJHqRXlWFiNOtQGIp68940459 = IqaJHqRXlWFiNOtQGIp6618950;     IqaJHqRXlWFiNOtQGIp6618950 = IqaJHqRXlWFiNOtQGIp24533024;     IqaJHqRXlWFiNOtQGIp24533024 = IqaJHqRXlWFiNOtQGIp9601874;     IqaJHqRXlWFiNOtQGIp9601874 = IqaJHqRXlWFiNOtQGIp12806387;     IqaJHqRXlWFiNOtQGIp12806387 = IqaJHqRXlWFiNOtQGIp61038183;     IqaJHqRXlWFiNOtQGIp61038183 = IqaJHqRXlWFiNOtQGIp43245540;     IqaJHqRXlWFiNOtQGIp43245540 = IqaJHqRXlWFiNOtQGIp41793151;     IqaJHqRXlWFiNOtQGIp41793151 = IqaJHqRXlWFiNOtQGIp47359757;     IqaJHqRXlWFiNOtQGIp47359757 = IqaJHqRXlWFiNOtQGIp65771193;     IqaJHqRXlWFiNOtQGIp65771193 = IqaJHqRXlWFiNOtQGIp94210390;     IqaJHqRXlWFiNOtQGIp94210390 = IqaJHqRXlWFiNOtQGIp57046535;     IqaJHqRXlWFiNOtQGIp57046535 = IqaJHqRXlWFiNOtQGIp10288884;     IqaJHqRXlWFiNOtQGIp10288884 = IqaJHqRXlWFiNOtQGIp46623907;     IqaJHqRXlWFiNOtQGIp46623907 = IqaJHqRXlWFiNOtQGIp61358946;     IqaJHqRXlWFiNOtQGIp61358946 = IqaJHqRXlWFiNOtQGIp34565996;     IqaJHqRXlWFiNOtQGIp34565996 = IqaJHqRXlWFiNOtQGIp95956937;     IqaJHqRXlWFiNOtQGIp95956937 = IqaJHqRXlWFiNOtQGIp99814458;     IqaJHqRXlWFiNOtQGIp99814458 = IqaJHqRXlWFiNOtQGIp92976760;     IqaJHqRXlWFiNOtQGIp92976760 = IqaJHqRXlWFiNOtQGIp52628367;     IqaJHqRXlWFiNOtQGIp52628367 = IqaJHqRXlWFiNOtQGIp49845605;     IqaJHqRXlWFiNOtQGIp49845605 = IqaJHqRXlWFiNOtQGIp39927532;     IqaJHqRXlWFiNOtQGIp39927532 = IqaJHqRXlWFiNOtQGIp93600022;     IqaJHqRXlWFiNOtQGIp93600022 = IqaJHqRXlWFiNOtQGIp86250061;     IqaJHqRXlWFiNOtQGIp86250061 = IqaJHqRXlWFiNOtQGIp71449846;     IqaJHqRXlWFiNOtQGIp71449846 = IqaJHqRXlWFiNOtQGIp92630125;     IqaJHqRXlWFiNOtQGIp92630125 = IqaJHqRXlWFiNOtQGIp34724993;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void KwtGmKXFOBiRWPretUQ25401386() {     int XvXHrjGSTGtrwPpskLF5649401 = -695818669;    int XvXHrjGSTGtrwPpskLF77305049 = -47148559;    int XvXHrjGSTGtrwPpskLF48516963 = -742692115;    int XvXHrjGSTGtrwPpskLF75712405 = -314437559;    int XvXHrjGSTGtrwPpskLF34004682 = -910099891;    int XvXHrjGSTGtrwPpskLF92839185 = -990584543;    int XvXHrjGSTGtrwPpskLF11234710 = -367383689;    int XvXHrjGSTGtrwPpskLF61683887 = 10255767;    int XvXHrjGSTGtrwPpskLF26813063 = -224541286;    int XvXHrjGSTGtrwPpskLF32832995 = 36806740;    int XvXHrjGSTGtrwPpskLF45819351 = -457800759;    int XvXHrjGSTGtrwPpskLF19574918 = -363075866;    int XvXHrjGSTGtrwPpskLF72496486 = -717073896;    int XvXHrjGSTGtrwPpskLF79923430 = -185173462;    int XvXHrjGSTGtrwPpskLF96905269 = 36567625;    int XvXHrjGSTGtrwPpskLF60992970 = -448116025;    int XvXHrjGSTGtrwPpskLF2229571 = -532170947;    int XvXHrjGSTGtrwPpskLF6594764 = -105612405;    int XvXHrjGSTGtrwPpskLF18753286 = -44703778;    int XvXHrjGSTGtrwPpskLF26570566 = -312821100;    int XvXHrjGSTGtrwPpskLF71055568 = -357595805;    int XvXHrjGSTGtrwPpskLF21762150 = -825793889;    int XvXHrjGSTGtrwPpskLF26659397 = -561704456;    int XvXHrjGSTGtrwPpskLF82069104 = -855441323;    int XvXHrjGSTGtrwPpskLF4500559 = -985065287;    int XvXHrjGSTGtrwPpskLF2695990 = -117804584;    int XvXHrjGSTGtrwPpskLF10324240 = -740562576;    int XvXHrjGSTGtrwPpskLF2418657 = -813983131;    int XvXHrjGSTGtrwPpskLF62960504 = 69731046;    int XvXHrjGSTGtrwPpskLF59062687 = 25559231;    int XvXHrjGSTGtrwPpskLF61985553 = -473659541;    int XvXHrjGSTGtrwPpskLF48001856 = -833008484;    int XvXHrjGSTGtrwPpskLF39863915 = -673575432;    int XvXHrjGSTGtrwPpskLF93498627 = 69232983;    int XvXHrjGSTGtrwPpskLF25334492 = -235677552;    int XvXHrjGSTGtrwPpskLF23096611 = -445023453;    int XvXHrjGSTGtrwPpskLF23620623 = -901527464;    int XvXHrjGSTGtrwPpskLF24928099 = -956414914;    int XvXHrjGSTGtrwPpskLF10496416 = -898330492;    int XvXHrjGSTGtrwPpskLF2009977 = -119457547;    int XvXHrjGSTGtrwPpskLF21076981 = -440473361;    int XvXHrjGSTGtrwPpskLF10964910 = -476667515;    int XvXHrjGSTGtrwPpskLF87165739 = 27156201;    int XvXHrjGSTGtrwPpskLF33915939 = -506125833;    int XvXHrjGSTGtrwPpskLF41341801 = 13720408;    int XvXHrjGSTGtrwPpskLF7363851 = -839963597;    int XvXHrjGSTGtrwPpskLF65620717 = -654025701;    int XvXHrjGSTGtrwPpskLF77980565 = -123947771;    int XvXHrjGSTGtrwPpskLF36132518 = -65502669;    int XvXHrjGSTGtrwPpskLF45545085 = -237438629;    int XvXHrjGSTGtrwPpskLF78157422 = -232958851;    int XvXHrjGSTGtrwPpskLF53608922 = -659730808;    int XvXHrjGSTGtrwPpskLF8584742 = -641727223;    int XvXHrjGSTGtrwPpskLF75989832 = -993425427;    int XvXHrjGSTGtrwPpskLF54345817 = -63636837;    int XvXHrjGSTGtrwPpskLF83887250 = -870024780;    int XvXHrjGSTGtrwPpskLF50645653 = -485444104;    int XvXHrjGSTGtrwPpskLF66447859 = -887250792;    int XvXHrjGSTGtrwPpskLF71211847 = -329372272;    int XvXHrjGSTGtrwPpskLF31308692 = -692295307;    int XvXHrjGSTGtrwPpskLF82514945 = -150021967;    int XvXHrjGSTGtrwPpskLF8816053 = -553400559;    int XvXHrjGSTGtrwPpskLF98723383 = 40524720;    int XvXHrjGSTGtrwPpskLF67750376 = -150100517;    int XvXHrjGSTGtrwPpskLF70847441 = -489533719;    int XvXHrjGSTGtrwPpskLF97817495 = -624792275;    int XvXHrjGSTGtrwPpskLF79711002 = -689500434;    int XvXHrjGSTGtrwPpskLF78997859 = -686306880;    int XvXHrjGSTGtrwPpskLF54588939 = -949495910;    int XvXHrjGSTGtrwPpskLF73808659 = -518408922;    int XvXHrjGSTGtrwPpskLF37372347 = -546588562;    int XvXHrjGSTGtrwPpskLF77301472 = -575756033;    int XvXHrjGSTGtrwPpskLF96098347 = -207281914;    int XvXHrjGSTGtrwPpskLF16743309 = -925246232;    int XvXHrjGSTGtrwPpskLF5493585 = -872347740;    int XvXHrjGSTGtrwPpskLF60090659 = -880928290;    int XvXHrjGSTGtrwPpskLF34596411 = -752950090;    int XvXHrjGSTGtrwPpskLF92743458 = 44421377;    int XvXHrjGSTGtrwPpskLF40727304 = -769161731;    int XvXHrjGSTGtrwPpskLF97136707 = -45101691;    int XvXHrjGSTGtrwPpskLF37075272 = -463778884;    int XvXHrjGSTGtrwPpskLF32343675 = -516614805;    int XvXHrjGSTGtrwPpskLF66286139 = -648480462;    int XvXHrjGSTGtrwPpskLF17415420 = -692830325;    int XvXHrjGSTGtrwPpskLF80905264 = -741481918;    int XvXHrjGSTGtrwPpskLF8376632 = -813928733;    int XvXHrjGSTGtrwPpskLF39417114 = -91281262;    int XvXHrjGSTGtrwPpskLF63874083 = -680150006;    int XvXHrjGSTGtrwPpskLF39152810 = -867130181;    int XvXHrjGSTGtrwPpskLF41447241 = -365652773;    int XvXHrjGSTGtrwPpskLF72450958 = -959579349;    int XvXHrjGSTGtrwPpskLF57172764 = 85723328;    int XvXHrjGSTGtrwPpskLF53716252 = -527042642;    int XvXHrjGSTGtrwPpskLF79187723 = -106035185;    int XvXHrjGSTGtrwPpskLF19495032 = -969435580;    int XvXHrjGSTGtrwPpskLF12260928 = -887072803;    int XvXHrjGSTGtrwPpskLF12241527 = -417192236;    int XvXHrjGSTGtrwPpskLF19415364 = -822743283;    int XvXHrjGSTGtrwPpskLF63068498 = 83407885;    int XvXHrjGSTGtrwPpskLF43524305 = -695818669;     XvXHrjGSTGtrwPpskLF5649401 = XvXHrjGSTGtrwPpskLF77305049;     XvXHrjGSTGtrwPpskLF77305049 = XvXHrjGSTGtrwPpskLF48516963;     XvXHrjGSTGtrwPpskLF48516963 = XvXHrjGSTGtrwPpskLF75712405;     XvXHrjGSTGtrwPpskLF75712405 = XvXHrjGSTGtrwPpskLF34004682;     XvXHrjGSTGtrwPpskLF34004682 = XvXHrjGSTGtrwPpskLF92839185;     XvXHrjGSTGtrwPpskLF92839185 = XvXHrjGSTGtrwPpskLF11234710;     XvXHrjGSTGtrwPpskLF11234710 = XvXHrjGSTGtrwPpskLF61683887;     XvXHrjGSTGtrwPpskLF61683887 = XvXHrjGSTGtrwPpskLF26813063;     XvXHrjGSTGtrwPpskLF26813063 = XvXHrjGSTGtrwPpskLF32832995;     XvXHrjGSTGtrwPpskLF32832995 = XvXHrjGSTGtrwPpskLF45819351;     XvXHrjGSTGtrwPpskLF45819351 = XvXHrjGSTGtrwPpskLF19574918;     XvXHrjGSTGtrwPpskLF19574918 = XvXHrjGSTGtrwPpskLF72496486;     XvXHrjGSTGtrwPpskLF72496486 = XvXHrjGSTGtrwPpskLF79923430;     XvXHrjGSTGtrwPpskLF79923430 = XvXHrjGSTGtrwPpskLF96905269;     XvXHrjGSTGtrwPpskLF96905269 = XvXHrjGSTGtrwPpskLF60992970;     XvXHrjGSTGtrwPpskLF60992970 = XvXHrjGSTGtrwPpskLF2229571;     XvXHrjGSTGtrwPpskLF2229571 = XvXHrjGSTGtrwPpskLF6594764;     XvXHrjGSTGtrwPpskLF6594764 = XvXHrjGSTGtrwPpskLF18753286;     XvXHrjGSTGtrwPpskLF18753286 = XvXHrjGSTGtrwPpskLF26570566;     XvXHrjGSTGtrwPpskLF26570566 = XvXHrjGSTGtrwPpskLF71055568;     XvXHrjGSTGtrwPpskLF71055568 = XvXHrjGSTGtrwPpskLF21762150;     XvXHrjGSTGtrwPpskLF21762150 = XvXHrjGSTGtrwPpskLF26659397;     XvXHrjGSTGtrwPpskLF26659397 = XvXHrjGSTGtrwPpskLF82069104;     XvXHrjGSTGtrwPpskLF82069104 = XvXHrjGSTGtrwPpskLF4500559;     XvXHrjGSTGtrwPpskLF4500559 = XvXHrjGSTGtrwPpskLF2695990;     XvXHrjGSTGtrwPpskLF2695990 = XvXHrjGSTGtrwPpskLF10324240;     XvXHrjGSTGtrwPpskLF10324240 = XvXHrjGSTGtrwPpskLF2418657;     XvXHrjGSTGtrwPpskLF2418657 = XvXHrjGSTGtrwPpskLF62960504;     XvXHrjGSTGtrwPpskLF62960504 = XvXHrjGSTGtrwPpskLF59062687;     XvXHrjGSTGtrwPpskLF59062687 = XvXHrjGSTGtrwPpskLF61985553;     XvXHrjGSTGtrwPpskLF61985553 = XvXHrjGSTGtrwPpskLF48001856;     XvXHrjGSTGtrwPpskLF48001856 = XvXHrjGSTGtrwPpskLF39863915;     XvXHrjGSTGtrwPpskLF39863915 = XvXHrjGSTGtrwPpskLF93498627;     XvXHrjGSTGtrwPpskLF93498627 = XvXHrjGSTGtrwPpskLF25334492;     XvXHrjGSTGtrwPpskLF25334492 = XvXHrjGSTGtrwPpskLF23096611;     XvXHrjGSTGtrwPpskLF23096611 = XvXHrjGSTGtrwPpskLF23620623;     XvXHrjGSTGtrwPpskLF23620623 = XvXHrjGSTGtrwPpskLF24928099;     XvXHrjGSTGtrwPpskLF24928099 = XvXHrjGSTGtrwPpskLF10496416;     XvXHrjGSTGtrwPpskLF10496416 = XvXHrjGSTGtrwPpskLF2009977;     XvXHrjGSTGtrwPpskLF2009977 = XvXHrjGSTGtrwPpskLF21076981;     XvXHrjGSTGtrwPpskLF21076981 = XvXHrjGSTGtrwPpskLF10964910;     XvXHrjGSTGtrwPpskLF10964910 = XvXHrjGSTGtrwPpskLF87165739;     XvXHrjGSTGtrwPpskLF87165739 = XvXHrjGSTGtrwPpskLF33915939;     XvXHrjGSTGtrwPpskLF33915939 = XvXHrjGSTGtrwPpskLF41341801;     XvXHrjGSTGtrwPpskLF41341801 = XvXHrjGSTGtrwPpskLF7363851;     XvXHrjGSTGtrwPpskLF7363851 = XvXHrjGSTGtrwPpskLF65620717;     XvXHrjGSTGtrwPpskLF65620717 = XvXHrjGSTGtrwPpskLF77980565;     XvXHrjGSTGtrwPpskLF77980565 = XvXHrjGSTGtrwPpskLF36132518;     XvXHrjGSTGtrwPpskLF36132518 = XvXHrjGSTGtrwPpskLF45545085;     XvXHrjGSTGtrwPpskLF45545085 = XvXHrjGSTGtrwPpskLF78157422;     XvXHrjGSTGtrwPpskLF78157422 = XvXHrjGSTGtrwPpskLF53608922;     XvXHrjGSTGtrwPpskLF53608922 = XvXHrjGSTGtrwPpskLF8584742;     XvXHrjGSTGtrwPpskLF8584742 = XvXHrjGSTGtrwPpskLF75989832;     XvXHrjGSTGtrwPpskLF75989832 = XvXHrjGSTGtrwPpskLF54345817;     XvXHrjGSTGtrwPpskLF54345817 = XvXHrjGSTGtrwPpskLF83887250;     XvXHrjGSTGtrwPpskLF83887250 = XvXHrjGSTGtrwPpskLF50645653;     XvXHrjGSTGtrwPpskLF50645653 = XvXHrjGSTGtrwPpskLF66447859;     XvXHrjGSTGtrwPpskLF66447859 = XvXHrjGSTGtrwPpskLF71211847;     XvXHrjGSTGtrwPpskLF71211847 = XvXHrjGSTGtrwPpskLF31308692;     XvXHrjGSTGtrwPpskLF31308692 = XvXHrjGSTGtrwPpskLF82514945;     XvXHrjGSTGtrwPpskLF82514945 = XvXHrjGSTGtrwPpskLF8816053;     XvXHrjGSTGtrwPpskLF8816053 = XvXHrjGSTGtrwPpskLF98723383;     XvXHrjGSTGtrwPpskLF98723383 = XvXHrjGSTGtrwPpskLF67750376;     XvXHrjGSTGtrwPpskLF67750376 = XvXHrjGSTGtrwPpskLF70847441;     XvXHrjGSTGtrwPpskLF70847441 = XvXHrjGSTGtrwPpskLF97817495;     XvXHrjGSTGtrwPpskLF97817495 = XvXHrjGSTGtrwPpskLF79711002;     XvXHrjGSTGtrwPpskLF79711002 = XvXHrjGSTGtrwPpskLF78997859;     XvXHrjGSTGtrwPpskLF78997859 = XvXHrjGSTGtrwPpskLF54588939;     XvXHrjGSTGtrwPpskLF54588939 = XvXHrjGSTGtrwPpskLF73808659;     XvXHrjGSTGtrwPpskLF73808659 = XvXHrjGSTGtrwPpskLF37372347;     XvXHrjGSTGtrwPpskLF37372347 = XvXHrjGSTGtrwPpskLF77301472;     XvXHrjGSTGtrwPpskLF77301472 = XvXHrjGSTGtrwPpskLF96098347;     XvXHrjGSTGtrwPpskLF96098347 = XvXHrjGSTGtrwPpskLF16743309;     XvXHrjGSTGtrwPpskLF16743309 = XvXHrjGSTGtrwPpskLF5493585;     XvXHrjGSTGtrwPpskLF5493585 = XvXHrjGSTGtrwPpskLF60090659;     XvXHrjGSTGtrwPpskLF60090659 = XvXHrjGSTGtrwPpskLF34596411;     XvXHrjGSTGtrwPpskLF34596411 = XvXHrjGSTGtrwPpskLF92743458;     XvXHrjGSTGtrwPpskLF92743458 = XvXHrjGSTGtrwPpskLF40727304;     XvXHrjGSTGtrwPpskLF40727304 = XvXHrjGSTGtrwPpskLF97136707;     XvXHrjGSTGtrwPpskLF97136707 = XvXHrjGSTGtrwPpskLF37075272;     XvXHrjGSTGtrwPpskLF37075272 = XvXHrjGSTGtrwPpskLF32343675;     XvXHrjGSTGtrwPpskLF32343675 = XvXHrjGSTGtrwPpskLF66286139;     XvXHrjGSTGtrwPpskLF66286139 = XvXHrjGSTGtrwPpskLF17415420;     XvXHrjGSTGtrwPpskLF17415420 = XvXHrjGSTGtrwPpskLF80905264;     XvXHrjGSTGtrwPpskLF80905264 = XvXHrjGSTGtrwPpskLF8376632;     XvXHrjGSTGtrwPpskLF8376632 = XvXHrjGSTGtrwPpskLF39417114;     XvXHrjGSTGtrwPpskLF39417114 = XvXHrjGSTGtrwPpskLF63874083;     XvXHrjGSTGtrwPpskLF63874083 = XvXHrjGSTGtrwPpskLF39152810;     XvXHrjGSTGtrwPpskLF39152810 = XvXHrjGSTGtrwPpskLF41447241;     XvXHrjGSTGtrwPpskLF41447241 = XvXHrjGSTGtrwPpskLF72450958;     XvXHrjGSTGtrwPpskLF72450958 = XvXHrjGSTGtrwPpskLF57172764;     XvXHrjGSTGtrwPpskLF57172764 = XvXHrjGSTGtrwPpskLF53716252;     XvXHrjGSTGtrwPpskLF53716252 = XvXHrjGSTGtrwPpskLF79187723;     XvXHrjGSTGtrwPpskLF79187723 = XvXHrjGSTGtrwPpskLF19495032;     XvXHrjGSTGtrwPpskLF19495032 = XvXHrjGSTGtrwPpskLF12260928;     XvXHrjGSTGtrwPpskLF12260928 = XvXHrjGSTGtrwPpskLF12241527;     XvXHrjGSTGtrwPpskLF12241527 = XvXHrjGSTGtrwPpskLF19415364;     XvXHrjGSTGtrwPpskLF19415364 = XvXHrjGSTGtrwPpskLF63068498;     XvXHrjGSTGtrwPpskLF63068498 = XvXHrjGSTGtrwPpskLF43524305;     XvXHrjGSTGtrwPpskLF43524305 = XvXHrjGSTGtrwPpskLF5649401;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void iRrOpTjZjNTyLmHtabL31729933() {     int fyONlQLfRiAYzWwFrfz60303798 = -33346253;    int fyONlQLfRiAYzWwFrfz24302669 = -626713373;    int fyONlQLfRiAYzWwFrfz9249610 = -28076728;    int fyONlQLfRiAYzWwFrfz47147347 = -320539970;    int fyONlQLfRiAYzWwFrfz8456353 = -582535131;    int fyONlQLfRiAYzWwFrfz7013582 = -19735379;    int fyONlQLfRiAYzWwFrfz32335413 = -669276362;    int fyONlQLfRiAYzWwFrfz90858990 = -490312465;    int fyONlQLfRiAYzWwFrfz14587474 = -271394656;    int fyONlQLfRiAYzWwFrfz15464980 = -241994529;    int fyONlQLfRiAYzWwFrfz24430646 = 16842669;    int fyONlQLfRiAYzWwFrfz82339631 = -549499955;    int fyONlQLfRiAYzWwFrfz36313801 = -520614201;    int fyONlQLfRiAYzWwFrfz72889861 = -897277040;    int fyONlQLfRiAYzWwFrfz27129343 = -970554006;    int fyONlQLfRiAYzWwFrfz50760506 = -78275589;    int fyONlQLfRiAYzWwFrfz2061335 = 94229225;    int fyONlQLfRiAYzWwFrfz74191350 = -169176872;    int fyONlQLfRiAYzWwFrfz19973887 = -330515326;    int fyONlQLfRiAYzWwFrfz44205121 = -658187246;    int fyONlQLfRiAYzWwFrfz5229956 = -925678956;    int fyONlQLfRiAYzWwFrfz73014739 = -992237997;    int fyONlQLfRiAYzWwFrfz63129229 = -48447877;    int fyONlQLfRiAYzWwFrfz83497473 = -554482139;    int fyONlQLfRiAYzWwFrfz253175 = -257978739;    int fyONlQLfRiAYzWwFrfz43936937 = -121513369;    int fyONlQLfRiAYzWwFrfz12314164 = -195406855;    int fyONlQLfRiAYzWwFrfz55667656 = -822034991;    int fyONlQLfRiAYzWwFrfz2858182 = -310513829;    int fyONlQLfRiAYzWwFrfz53498096 = -265198737;    int fyONlQLfRiAYzWwFrfz13691083 = 77467933;    int fyONlQLfRiAYzWwFrfz78993466 = -144505013;    int fyONlQLfRiAYzWwFrfz7519792 = -130093046;    int fyONlQLfRiAYzWwFrfz88154519 = -710887827;    int fyONlQLfRiAYzWwFrfz59838648 = -453540812;    int fyONlQLfRiAYzWwFrfz10423153 = -693019049;    int fyONlQLfRiAYzWwFrfz98325110 = -751954084;    int fyONlQLfRiAYzWwFrfz37905338 = -830343935;    int fyONlQLfRiAYzWwFrfz61266064 = -180279093;    int fyONlQLfRiAYzWwFrfz25996372 = -877766146;    int fyONlQLfRiAYzWwFrfz77036381 = -553023519;    int fyONlQLfRiAYzWwFrfz47639568 = 15800398;    int fyONlQLfRiAYzWwFrfz78165922 = -913349117;    int fyONlQLfRiAYzWwFrfz42910338 = 20194501;    int fyONlQLfRiAYzWwFrfz1325865 = -118797190;    int fyONlQLfRiAYzWwFrfz62697452 = -908753212;    int fyONlQLfRiAYzWwFrfz82094429 = -681083085;    int fyONlQLfRiAYzWwFrfz1407874 = -101600144;    int fyONlQLfRiAYzWwFrfz78475284 = 34767142;    int fyONlQLfRiAYzWwFrfz90386747 = -477457923;    int fyONlQLfRiAYzWwFrfz53270962 = -990174353;    int fyONlQLfRiAYzWwFrfz42991071 = -74796791;    int fyONlQLfRiAYzWwFrfz40312745 = -381642680;    int fyONlQLfRiAYzWwFrfz33405589 = -889311911;    int fyONlQLfRiAYzWwFrfz26499977 = -459545518;    int fyONlQLfRiAYzWwFrfz87289059 = -41108256;    int fyONlQLfRiAYzWwFrfz61173440 = -478265497;    int fyONlQLfRiAYzWwFrfz25752137 = -473594589;    int fyONlQLfRiAYzWwFrfz46894172 = 37438769;    int fyONlQLfRiAYzWwFrfz64519416 = -361021762;    int fyONlQLfRiAYzWwFrfz94699418 = -824328524;    int fyONlQLfRiAYzWwFrfz76667756 = -847241371;    int fyONlQLfRiAYzWwFrfz88000809 = -79798637;    int fyONlQLfRiAYzWwFrfz61089377 = 93804080;    int fyONlQLfRiAYzWwFrfz1773898 = -219462463;    int fyONlQLfRiAYzWwFrfz45437180 = -838652319;    int fyONlQLfRiAYzWwFrfz74819839 = -319406909;    int fyONlQLfRiAYzWwFrfz48159281 = -809726375;    int fyONlQLfRiAYzWwFrfz13051213 = -343736229;    int fyONlQLfRiAYzWwFrfz16706191 = -177534957;    int fyONlQLfRiAYzWwFrfz52435395 = -326321505;    int fyONlQLfRiAYzWwFrfz64155996 = -75426841;    int fyONlQLfRiAYzWwFrfz12925286 = -988897780;    int fyONlQLfRiAYzWwFrfz93977514 = -452749180;    int fyONlQLfRiAYzWwFrfz67168740 = -5163728;    int fyONlQLfRiAYzWwFrfz57590388 = -841479355;    int fyONlQLfRiAYzWwFrfz94848816 = 21111120;    int fyONlQLfRiAYzWwFrfz20218891 = 31357622;    int fyONlQLfRiAYzWwFrfz82171609 = -335684950;    int fyONlQLfRiAYzWwFrfz37555722 = -349225528;    int fyONlQLfRiAYzWwFrfz61842507 = -440430285;    int fyONlQLfRiAYzWwFrfz10906290 = 6193288;    int fyONlQLfRiAYzWwFrfz77192372 = -756802134;    int fyONlQLfRiAYzWwFrfz12471435 = -833055906;    int fyONlQLfRiAYzWwFrfz227135 = -275024385;    int fyONlQLfRiAYzWwFrfz70700011 = -847735276;    int fyONlQLfRiAYzWwFrfz38680721 = -762862333;    int fyONlQLfRiAYzWwFrfz74114202 = -240781135;    int fyONlQLfRiAYzWwFrfz61654543 = -151342309;    int fyONlQLfRiAYzWwFrfz72549589 = -312432556;    int fyONlQLfRiAYzWwFrfz49249712 = -114753553;    int fyONlQLfRiAYzWwFrfz72572974 = -178359495;    int fyONlQLfRiAYzWwFrfz91011165 = -767782704;    int fyONlQLfRiAYzWwFrfz96746648 = -819257332;    int fyONlQLfRiAYzWwFrfz31296954 = 46562378;    int fyONlQLfRiAYzWwFrfz368625 = -705782149;    int fyONlQLfRiAYzWwFrfz59638758 = -904400966;    int fyONlQLfRiAYzWwFrfz17076545 = -907153198;    int fyONlQLfRiAYzWwFrfz41136440 = -760343036;    int fyONlQLfRiAYzWwFrfz55888684 = -33346253;     fyONlQLfRiAYzWwFrfz60303798 = fyONlQLfRiAYzWwFrfz24302669;     fyONlQLfRiAYzWwFrfz24302669 = fyONlQLfRiAYzWwFrfz9249610;     fyONlQLfRiAYzWwFrfz9249610 = fyONlQLfRiAYzWwFrfz47147347;     fyONlQLfRiAYzWwFrfz47147347 = fyONlQLfRiAYzWwFrfz8456353;     fyONlQLfRiAYzWwFrfz8456353 = fyONlQLfRiAYzWwFrfz7013582;     fyONlQLfRiAYzWwFrfz7013582 = fyONlQLfRiAYzWwFrfz32335413;     fyONlQLfRiAYzWwFrfz32335413 = fyONlQLfRiAYzWwFrfz90858990;     fyONlQLfRiAYzWwFrfz90858990 = fyONlQLfRiAYzWwFrfz14587474;     fyONlQLfRiAYzWwFrfz14587474 = fyONlQLfRiAYzWwFrfz15464980;     fyONlQLfRiAYzWwFrfz15464980 = fyONlQLfRiAYzWwFrfz24430646;     fyONlQLfRiAYzWwFrfz24430646 = fyONlQLfRiAYzWwFrfz82339631;     fyONlQLfRiAYzWwFrfz82339631 = fyONlQLfRiAYzWwFrfz36313801;     fyONlQLfRiAYzWwFrfz36313801 = fyONlQLfRiAYzWwFrfz72889861;     fyONlQLfRiAYzWwFrfz72889861 = fyONlQLfRiAYzWwFrfz27129343;     fyONlQLfRiAYzWwFrfz27129343 = fyONlQLfRiAYzWwFrfz50760506;     fyONlQLfRiAYzWwFrfz50760506 = fyONlQLfRiAYzWwFrfz2061335;     fyONlQLfRiAYzWwFrfz2061335 = fyONlQLfRiAYzWwFrfz74191350;     fyONlQLfRiAYzWwFrfz74191350 = fyONlQLfRiAYzWwFrfz19973887;     fyONlQLfRiAYzWwFrfz19973887 = fyONlQLfRiAYzWwFrfz44205121;     fyONlQLfRiAYzWwFrfz44205121 = fyONlQLfRiAYzWwFrfz5229956;     fyONlQLfRiAYzWwFrfz5229956 = fyONlQLfRiAYzWwFrfz73014739;     fyONlQLfRiAYzWwFrfz73014739 = fyONlQLfRiAYzWwFrfz63129229;     fyONlQLfRiAYzWwFrfz63129229 = fyONlQLfRiAYzWwFrfz83497473;     fyONlQLfRiAYzWwFrfz83497473 = fyONlQLfRiAYzWwFrfz253175;     fyONlQLfRiAYzWwFrfz253175 = fyONlQLfRiAYzWwFrfz43936937;     fyONlQLfRiAYzWwFrfz43936937 = fyONlQLfRiAYzWwFrfz12314164;     fyONlQLfRiAYzWwFrfz12314164 = fyONlQLfRiAYzWwFrfz55667656;     fyONlQLfRiAYzWwFrfz55667656 = fyONlQLfRiAYzWwFrfz2858182;     fyONlQLfRiAYzWwFrfz2858182 = fyONlQLfRiAYzWwFrfz53498096;     fyONlQLfRiAYzWwFrfz53498096 = fyONlQLfRiAYzWwFrfz13691083;     fyONlQLfRiAYzWwFrfz13691083 = fyONlQLfRiAYzWwFrfz78993466;     fyONlQLfRiAYzWwFrfz78993466 = fyONlQLfRiAYzWwFrfz7519792;     fyONlQLfRiAYzWwFrfz7519792 = fyONlQLfRiAYzWwFrfz88154519;     fyONlQLfRiAYzWwFrfz88154519 = fyONlQLfRiAYzWwFrfz59838648;     fyONlQLfRiAYzWwFrfz59838648 = fyONlQLfRiAYzWwFrfz10423153;     fyONlQLfRiAYzWwFrfz10423153 = fyONlQLfRiAYzWwFrfz98325110;     fyONlQLfRiAYzWwFrfz98325110 = fyONlQLfRiAYzWwFrfz37905338;     fyONlQLfRiAYzWwFrfz37905338 = fyONlQLfRiAYzWwFrfz61266064;     fyONlQLfRiAYzWwFrfz61266064 = fyONlQLfRiAYzWwFrfz25996372;     fyONlQLfRiAYzWwFrfz25996372 = fyONlQLfRiAYzWwFrfz77036381;     fyONlQLfRiAYzWwFrfz77036381 = fyONlQLfRiAYzWwFrfz47639568;     fyONlQLfRiAYzWwFrfz47639568 = fyONlQLfRiAYzWwFrfz78165922;     fyONlQLfRiAYzWwFrfz78165922 = fyONlQLfRiAYzWwFrfz42910338;     fyONlQLfRiAYzWwFrfz42910338 = fyONlQLfRiAYzWwFrfz1325865;     fyONlQLfRiAYzWwFrfz1325865 = fyONlQLfRiAYzWwFrfz62697452;     fyONlQLfRiAYzWwFrfz62697452 = fyONlQLfRiAYzWwFrfz82094429;     fyONlQLfRiAYzWwFrfz82094429 = fyONlQLfRiAYzWwFrfz1407874;     fyONlQLfRiAYzWwFrfz1407874 = fyONlQLfRiAYzWwFrfz78475284;     fyONlQLfRiAYzWwFrfz78475284 = fyONlQLfRiAYzWwFrfz90386747;     fyONlQLfRiAYzWwFrfz90386747 = fyONlQLfRiAYzWwFrfz53270962;     fyONlQLfRiAYzWwFrfz53270962 = fyONlQLfRiAYzWwFrfz42991071;     fyONlQLfRiAYzWwFrfz42991071 = fyONlQLfRiAYzWwFrfz40312745;     fyONlQLfRiAYzWwFrfz40312745 = fyONlQLfRiAYzWwFrfz33405589;     fyONlQLfRiAYzWwFrfz33405589 = fyONlQLfRiAYzWwFrfz26499977;     fyONlQLfRiAYzWwFrfz26499977 = fyONlQLfRiAYzWwFrfz87289059;     fyONlQLfRiAYzWwFrfz87289059 = fyONlQLfRiAYzWwFrfz61173440;     fyONlQLfRiAYzWwFrfz61173440 = fyONlQLfRiAYzWwFrfz25752137;     fyONlQLfRiAYzWwFrfz25752137 = fyONlQLfRiAYzWwFrfz46894172;     fyONlQLfRiAYzWwFrfz46894172 = fyONlQLfRiAYzWwFrfz64519416;     fyONlQLfRiAYzWwFrfz64519416 = fyONlQLfRiAYzWwFrfz94699418;     fyONlQLfRiAYzWwFrfz94699418 = fyONlQLfRiAYzWwFrfz76667756;     fyONlQLfRiAYzWwFrfz76667756 = fyONlQLfRiAYzWwFrfz88000809;     fyONlQLfRiAYzWwFrfz88000809 = fyONlQLfRiAYzWwFrfz61089377;     fyONlQLfRiAYzWwFrfz61089377 = fyONlQLfRiAYzWwFrfz1773898;     fyONlQLfRiAYzWwFrfz1773898 = fyONlQLfRiAYzWwFrfz45437180;     fyONlQLfRiAYzWwFrfz45437180 = fyONlQLfRiAYzWwFrfz74819839;     fyONlQLfRiAYzWwFrfz74819839 = fyONlQLfRiAYzWwFrfz48159281;     fyONlQLfRiAYzWwFrfz48159281 = fyONlQLfRiAYzWwFrfz13051213;     fyONlQLfRiAYzWwFrfz13051213 = fyONlQLfRiAYzWwFrfz16706191;     fyONlQLfRiAYzWwFrfz16706191 = fyONlQLfRiAYzWwFrfz52435395;     fyONlQLfRiAYzWwFrfz52435395 = fyONlQLfRiAYzWwFrfz64155996;     fyONlQLfRiAYzWwFrfz64155996 = fyONlQLfRiAYzWwFrfz12925286;     fyONlQLfRiAYzWwFrfz12925286 = fyONlQLfRiAYzWwFrfz93977514;     fyONlQLfRiAYzWwFrfz93977514 = fyONlQLfRiAYzWwFrfz67168740;     fyONlQLfRiAYzWwFrfz67168740 = fyONlQLfRiAYzWwFrfz57590388;     fyONlQLfRiAYzWwFrfz57590388 = fyONlQLfRiAYzWwFrfz94848816;     fyONlQLfRiAYzWwFrfz94848816 = fyONlQLfRiAYzWwFrfz20218891;     fyONlQLfRiAYzWwFrfz20218891 = fyONlQLfRiAYzWwFrfz82171609;     fyONlQLfRiAYzWwFrfz82171609 = fyONlQLfRiAYzWwFrfz37555722;     fyONlQLfRiAYzWwFrfz37555722 = fyONlQLfRiAYzWwFrfz61842507;     fyONlQLfRiAYzWwFrfz61842507 = fyONlQLfRiAYzWwFrfz10906290;     fyONlQLfRiAYzWwFrfz10906290 = fyONlQLfRiAYzWwFrfz77192372;     fyONlQLfRiAYzWwFrfz77192372 = fyONlQLfRiAYzWwFrfz12471435;     fyONlQLfRiAYzWwFrfz12471435 = fyONlQLfRiAYzWwFrfz227135;     fyONlQLfRiAYzWwFrfz227135 = fyONlQLfRiAYzWwFrfz70700011;     fyONlQLfRiAYzWwFrfz70700011 = fyONlQLfRiAYzWwFrfz38680721;     fyONlQLfRiAYzWwFrfz38680721 = fyONlQLfRiAYzWwFrfz74114202;     fyONlQLfRiAYzWwFrfz74114202 = fyONlQLfRiAYzWwFrfz61654543;     fyONlQLfRiAYzWwFrfz61654543 = fyONlQLfRiAYzWwFrfz72549589;     fyONlQLfRiAYzWwFrfz72549589 = fyONlQLfRiAYzWwFrfz49249712;     fyONlQLfRiAYzWwFrfz49249712 = fyONlQLfRiAYzWwFrfz72572974;     fyONlQLfRiAYzWwFrfz72572974 = fyONlQLfRiAYzWwFrfz91011165;     fyONlQLfRiAYzWwFrfz91011165 = fyONlQLfRiAYzWwFrfz96746648;     fyONlQLfRiAYzWwFrfz96746648 = fyONlQLfRiAYzWwFrfz31296954;     fyONlQLfRiAYzWwFrfz31296954 = fyONlQLfRiAYzWwFrfz368625;     fyONlQLfRiAYzWwFrfz368625 = fyONlQLfRiAYzWwFrfz59638758;     fyONlQLfRiAYzWwFrfz59638758 = fyONlQLfRiAYzWwFrfz17076545;     fyONlQLfRiAYzWwFrfz17076545 = fyONlQLfRiAYzWwFrfz41136440;     fyONlQLfRiAYzWwFrfz41136440 = fyONlQLfRiAYzWwFrfz55888684;     fyONlQLfRiAYzWwFrfz55888684 = fyONlQLfRiAYzWwFrfz60303798;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ZzdqoBhSBZTlzWdGVpU38058480() {     int OkGZYNbVAQsFzmNyNdU14958196 = -470873837;    int OkGZYNbVAQsFzmNyNdU71300288 = -106278187;    int OkGZYNbVAQsFzmNyNdU69982256 = -413461341;    int OkGZYNbVAQsFzmNyNdU18582288 = -326642381;    int OkGZYNbVAQsFzmNyNdU82908022 = -254970370;    int OkGZYNbVAQsFzmNyNdU21187979 = -148886215;    int OkGZYNbVAQsFzmNyNdU53436117 = -971169034;    int OkGZYNbVAQsFzmNyNdU20034095 = -990880698;    int OkGZYNbVAQsFzmNyNdU2361885 = -318248027;    int OkGZYNbVAQsFzmNyNdU98096965 = -520795799;    int OkGZYNbVAQsFzmNyNdU3041941 = -608513904;    int OkGZYNbVAQsFzmNyNdU45104344 = -735924043;    int OkGZYNbVAQsFzmNyNdU131116 = -324154505;    int OkGZYNbVAQsFzmNyNdU65856292 = -509380618;    int OkGZYNbVAQsFzmNyNdU57353416 = -877675638;    int OkGZYNbVAQsFzmNyNdU40528042 = -808435153;    int OkGZYNbVAQsFzmNyNdU1893098 = -379370604;    int OkGZYNbVAQsFzmNyNdU41787938 = -232741340;    int OkGZYNbVAQsFzmNyNdU21194487 = -616326874;    int OkGZYNbVAQsFzmNyNdU61839676 = 96446608;    int OkGZYNbVAQsFzmNyNdU39404344 = -393762107;    int OkGZYNbVAQsFzmNyNdU24267328 = -58682105;    int OkGZYNbVAQsFzmNyNdU99599060 = -635191298;    int OkGZYNbVAQsFzmNyNdU84925842 = -253522956;    int OkGZYNbVAQsFzmNyNdU96005790 = -630892191;    int OkGZYNbVAQsFzmNyNdU85177883 = -125222154;    int OkGZYNbVAQsFzmNyNdU14304088 = -750251134;    int OkGZYNbVAQsFzmNyNdU8916657 = -830086852;    int OkGZYNbVAQsFzmNyNdU42755858 = -690758705;    int OkGZYNbVAQsFzmNyNdU47933505 = -555956705;    int OkGZYNbVAQsFzmNyNdU65396611 = -471404592;    int OkGZYNbVAQsFzmNyNdU9985077 = -556001541;    int OkGZYNbVAQsFzmNyNdU75175668 = -686610660;    int OkGZYNbVAQsFzmNyNdU82810412 = -391008636;    int OkGZYNbVAQsFzmNyNdU94342805 = -671404071;    int OkGZYNbVAQsFzmNyNdU97749694 = -941014646;    int OkGZYNbVAQsFzmNyNdU73029598 = -602380705;    int OkGZYNbVAQsFzmNyNdU50882577 = -704272956;    int OkGZYNbVAQsFzmNyNdU12035714 = -562227695;    int OkGZYNbVAQsFzmNyNdU49982767 = -536074745;    int OkGZYNbVAQsFzmNyNdU32995782 = -665573677;    int OkGZYNbVAQsFzmNyNdU84314226 = -591731689;    int OkGZYNbVAQsFzmNyNdU69166105 = -753854435;    int OkGZYNbVAQsFzmNyNdU51904737 = -553485165;    int OkGZYNbVAQsFzmNyNdU61309927 = -251314788;    int OkGZYNbVAQsFzmNyNdU18031055 = -977542826;    int OkGZYNbVAQsFzmNyNdU98568141 = -708140468;    int OkGZYNbVAQsFzmNyNdU24835183 = -79252516;    int OkGZYNbVAQsFzmNyNdU20818051 = -964963047;    int OkGZYNbVAQsFzmNyNdU35228410 = -717477217;    int OkGZYNbVAQsFzmNyNdU28384502 = -647389855;    int OkGZYNbVAQsFzmNyNdU32373221 = -589862774;    int OkGZYNbVAQsFzmNyNdU72040748 = -121558137;    int OkGZYNbVAQsFzmNyNdU90821346 = -785198396;    int OkGZYNbVAQsFzmNyNdU98654136 = -855454199;    int OkGZYNbVAQsFzmNyNdU90690867 = -312191732;    int OkGZYNbVAQsFzmNyNdU71701228 = -471086890;    int OkGZYNbVAQsFzmNyNdU85056414 = -59938386;    int OkGZYNbVAQsFzmNyNdU22576498 = -695750191;    int OkGZYNbVAQsFzmNyNdU97730139 = -29748217;    int OkGZYNbVAQsFzmNyNdU6883892 = -398635082;    int OkGZYNbVAQsFzmNyNdU44519460 = -41082183;    int OkGZYNbVAQsFzmNyNdU77278236 = -200121994;    int OkGZYNbVAQsFzmNyNdU54428379 = -762291322;    int OkGZYNbVAQsFzmNyNdU32700355 = 50608793;    int OkGZYNbVAQsFzmNyNdU93056864 = 47487637;    int OkGZYNbVAQsFzmNyNdU69928676 = 50686616;    int OkGZYNbVAQsFzmNyNdU17320704 = -933145869;    int OkGZYNbVAQsFzmNyNdU71513487 = -837976547;    int OkGZYNbVAQsFzmNyNdU59603722 = -936660992;    int OkGZYNbVAQsFzmNyNdU67498443 = -106054449;    int OkGZYNbVAQsFzmNyNdU51010521 = -675097648;    int OkGZYNbVAQsFzmNyNdU29752224 = -670513645;    int OkGZYNbVAQsFzmNyNdU71211720 = 19747871;    int OkGZYNbVAQsFzmNyNdU28843895 = -237979716;    int OkGZYNbVAQsFzmNyNdU55090118 = -802030419;    int OkGZYNbVAQsFzmNyNdU55101223 = -304827670;    int OkGZYNbVAQsFzmNyNdU47694323 = 18293866;    int OkGZYNbVAQsFzmNyNdU23615915 = 97791832;    int OkGZYNbVAQsFzmNyNdU77974735 = -653349366;    int OkGZYNbVAQsFzmNyNdU86609742 = -417081686;    int OkGZYNbVAQsFzmNyNdU89468905 = -570998619;    int OkGZYNbVAQsFzmNyNdU88098605 = -865123805;    int OkGZYNbVAQsFzmNyNdU7527449 = -973281488;    int OkGZYNbVAQsFzmNyNdU19549004 = -908566851;    int OkGZYNbVAQsFzmNyNdU33023390 = -881541819;    int OkGZYNbVAQsFzmNyNdU37944329 = -334443404;    int OkGZYNbVAQsFzmNyNdU84354321 = -901412265;    int OkGZYNbVAQsFzmNyNdU84156276 = -535554438;    int OkGZYNbVAQsFzmNyNdU3651938 = -259212340;    int OkGZYNbVAQsFzmNyNdU26048467 = -369927757;    int OkGZYNbVAQsFzmNyNdU87973184 = -442442319;    int OkGZYNbVAQsFzmNyNdU28306079 = 91477234;    int OkGZYNbVAQsFzmNyNdU14305575 = -432479479;    int OkGZYNbVAQsFzmNyNdU43098876 = -37439664;    int OkGZYNbVAQsFzmNyNdU88476322 = -524491495;    int OkGZYNbVAQsFzmNyNdU7035990 = -291609695;    int OkGZYNbVAQsFzmNyNdU14737727 = -991563113;    int OkGZYNbVAQsFzmNyNdU19204383 = -504093958;    int OkGZYNbVAQsFzmNyNdU68253063 = -470873837;     OkGZYNbVAQsFzmNyNdU14958196 = OkGZYNbVAQsFzmNyNdU71300288;     OkGZYNbVAQsFzmNyNdU71300288 = OkGZYNbVAQsFzmNyNdU69982256;     OkGZYNbVAQsFzmNyNdU69982256 = OkGZYNbVAQsFzmNyNdU18582288;     OkGZYNbVAQsFzmNyNdU18582288 = OkGZYNbVAQsFzmNyNdU82908022;     OkGZYNbVAQsFzmNyNdU82908022 = OkGZYNbVAQsFzmNyNdU21187979;     OkGZYNbVAQsFzmNyNdU21187979 = OkGZYNbVAQsFzmNyNdU53436117;     OkGZYNbVAQsFzmNyNdU53436117 = OkGZYNbVAQsFzmNyNdU20034095;     OkGZYNbVAQsFzmNyNdU20034095 = OkGZYNbVAQsFzmNyNdU2361885;     OkGZYNbVAQsFzmNyNdU2361885 = OkGZYNbVAQsFzmNyNdU98096965;     OkGZYNbVAQsFzmNyNdU98096965 = OkGZYNbVAQsFzmNyNdU3041941;     OkGZYNbVAQsFzmNyNdU3041941 = OkGZYNbVAQsFzmNyNdU45104344;     OkGZYNbVAQsFzmNyNdU45104344 = OkGZYNbVAQsFzmNyNdU131116;     OkGZYNbVAQsFzmNyNdU131116 = OkGZYNbVAQsFzmNyNdU65856292;     OkGZYNbVAQsFzmNyNdU65856292 = OkGZYNbVAQsFzmNyNdU57353416;     OkGZYNbVAQsFzmNyNdU57353416 = OkGZYNbVAQsFzmNyNdU40528042;     OkGZYNbVAQsFzmNyNdU40528042 = OkGZYNbVAQsFzmNyNdU1893098;     OkGZYNbVAQsFzmNyNdU1893098 = OkGZYNbVAQsFzmNyNdU41787938;     OkGZYNbVAQsFzmNyNdU41787938 = OkGZYNbVAQsFzmNyNdU21194487;     OkGZYNbVAQsFzmNyNdU21194487 = OkGZYNbVAQsFzmNyNdU61839676;     OkGZYNbVAQsFzmNyNdU61839676 = OkGZYNbVAQsFzmNyNdU39404344;     OkGZYNbVAQsFzmNyNdU39404344 = OkGZYNbVAQsFzmNyNdU24267328;     OkGZYNbVAQsFzmNyNdU24267328 = OkGZYNbVAQsFzmNyNdU99599060;     OkGZYNbVAQsFzmNyNdU99599060 = OkGZYNbVAQsFzmNyNdU84925842;     OkGZYNbVAQsFzmNyNdU84925842 = OkGZYNbVAQsFzmNyNdU96005790;     OkGZYNbVAQsFzmNyNdU96005790 = OkGZYNbVAQsFzmNyNdU85177883;     OkGZYNbVAQsFzmNyNdU85177883 = OkGZYNbVAQsFzmNyNdU14304088;     OkGZYNbVAQsFzmNyNdU14304088 = OkGZYNbVAQsFzmNyNdU8916657;     OkGZYNbVAQsFzmNyNdU8916657 = OkGZYNbVAQsFzmNyNdU42755858;     OkGZYNbVAQsFzmNyNdU42755858 = OkGZYNbVAQsFzmNyNdU47933505;     OkGZYNbVAQsFzmNyNdU47933505 = OkGZYNbVAQsFzmNyNdU65396611;     OkGZYNbVAQsFzmNyNdU65396611 = OkGZYNbVAQsFzmNyNdU9985077;     OkGZYNbVAQsFzmNyNdU9985077 = OkGZYNbVAQsFzmNyNdU75175668;     OkGZYNbVAQsFzmNyNdU75175668 = OkGZYNbVAQsFzmNyNdU82810412;     OkGZYNbVAQsFzmNyNdU82810412 = OkGZYNbVAQsFzmNyNdU94342805;     OkGZYNbVAQsFzmNyNdU94342805 = OkGZYNbVAQsFzmNyNdU97749694;     OkGZYNbVAQsFzmNyNdU97749694 = OkGZYNbVAQsFzmNyNdU73029598;     OkGZYNbVAQsFzmNyNdU73029598 = OkGZYNbVAQsFzmNyNdU50882577;     OkGZYNbVAQsFzmNyNdU50882577 = OkGZYNbVAQsFzmNyNdU12035714;     OkGZYNbVAQsFzmNyNdU12035714 = OkGZYNbVAQsFzmNyNdU49982767;     OkGZYNbVAQsFzmNyNdU49982767 = OkGZYNbVAQsFzmNyNdU32995782;     OkGZYNbVAQsFzmNyNdU32995782 = OkGZYNbVAQsFzmNyNdU84314226;     OkGZYNbVAQsFzmNyNdU84314226 = OkGZYNbVAQsFzmNyNdU69166105;     OkGZYNbVAQsFzmNyNdU69166105 = OkGZYNbVAQsFzmNyNdU51904737;     OkGZYNbVAQsFzmNyNdU51904737 = OkGZYNbVAQsFzmNyNdU61309927;     OkGZYNbVAQsFzmNyNdU61309927 = OkGZYNbVAQsFzmNyNdU18031055;     OkGZYNbVAQsFzmNyNdU18031055 = OkGZYNbVAQsFzmNyNdU98568141;     OkGZYNbVAQsFzmNyNdU98568141 = OkGZYNbVAQsFzmNyNdU24835183;     OkGZYNbVAQsFzmNyNdU24835183 = OkGZYNbVAQsFzmNyNdU20818051;     OkGZYNbVAQsFzmNyNdU20818051 = OkGZYNbVAQsFzmNyNdU35228410;     OkGZYNbVAQsFzmNyNdU35228410 = OkGZYNbVAQsFzmNyNdU28384502;     OkGZYNbVAQsFzmNyNdU28384502 = OkGZYNbVAQsFzmNyNdU32373221;     OkGZYNbVAQsFzmNyNdU32373221 = OkGZYNbVAQsFzmNyNdU72040748;     OkGZYNbVAQsFzmNyNdU72040748 = OkGZYNbVAQsFzmNyNdU90821346;     OkGZYNbVAQsFzmNyNdU90821346 = OkGZYNbVAQsFzmNyNdU98654136;     OkGZYNbVAQsFzmNyNdU98654136 = OkGZYNbVAQsFzmNyNdU90690867;     OkGZYNbVAQsFzmNyNdU90690867 = OkGZYNbVAQsFzmNyNdU71701228;     OkGZYNbVAQsFzmNyNdU71701228 = OkGZYNbVAQsFzmNyNdU85056414;     OkGZYNbVAQsFzmNyNdU85056414 = OkGZYNbVAQsFzmNyNdU22576498;     OkGZYNbVAQsFzmNyNdU22576498 = OkGZYNbVAQsFzmNyNdU97730139;     OkGZYNbVAQsFzmNyNdU97730139 = OkGZYNbVAQsFzmNyNdU6883892;     OkGZYNbVAQsFzmNyNdU6883892 = OkGZYNbVAQsFzmNyNdU44519460;     OkGZYNbVAQsFzmNyNdU44519460 = OkGZYNbVAQsFzmNyNdU77278236;     OkGZYNbVAQsFzmNyNdU77278236 = OkGZYNbVAQsFzmNyNdU54428379;     OkGZYNbVAQsFzmNyNdU54428379 = OkGZYNbVAQsFzmNyNdU32700355;     OkGZYNbVAQsFzmNyNdU32700355 = OkGZYNbVAQsFzmNyNdU93056864;     OkGZYNbVAQsFzmNyNdU93056864 = OkGZYNbVAQsFzmNyNdU69928676;     OkGZYNbVAQsFzmNyNdU69928676 = OkGZYNbVAQsFzmNyNdU17320704;     OkGZYNbVAQsFzmNyNdU17320704 = OkGZYNbVAQsFzmNyNdU71513487;     OkGZYNbVAQsFzmNyNdU71513487 = OkGZYNbVAQsFzmNyNdU59603722;     OkGZYNbVAQsFzmNyNdU59603722 = OkGZYNbVAQsFzmNyNdU67498443;     OkGZYNbVAQsFzmNyNdU67498443 = OkGZYNbVAQsFzmNyNdU51010521;     OkGZYNbVAQsFzmNyNdU51010521 = OkGZYNbVAQsFzmNyNdU29752224;     OkGZYNbVAQsFzmNyNdU29752224 = OkGZYNbVAQsFzmNyNdU71211720;     OkGZYNbVAQsFzmNyNdU71211720 = OkGZYNbVAQsFzmNyNdU28843895;     OkGZYNbVAQsFzmNyNdU28843895 = OkGZYNbVAQsFzmNyNdU55090118;     OkGZYNbVAQsFzmNyNdU55090118 = OkGZYNbVAQsFzmNyNdU55101223;     OkGZYNbVAQsFzmNyNdU55101223 = OkGZYNbVAQsFzmNyNdU47694323;     OkGZYNbVAQsFzmNyNdU47694323 = OkGZYNbVAQsFzmNyNdU23615915;     OkGZYNbVAQsFzmNyNdU23615915 = OkGZYNbVAQsFzmNyNdU77974735;     OkGZYNbVAQsFzmNyNdU77974735 = OkGZYNbVAQsFzmNyNdU86609742;     OkGZYNbVAQsFzmNyNdU86609742 = OkGZYNbVAQsFzmNyNdU89468905;     OkGZYNbVAQsFzmNyNdU89468905 = OkGZYNbVAQsFzmNyNdU88098605;     OkGZYNbVAQsFzmNyNdU88098605 = OkGZYNbVAQsFzmNyNdU7527449;     OkGZYNbVAQsFzmNyNdU7527449 = OkGZYNbVAQsFzmNyNdU19549004;     OkGZYNbVAQsFzmNyNdU19549004 = OkGZYNbVAQsFzmNyNdU33023390;     OkGZYNbVAQsFzmNyNdU33023390 = OkGZYNbVAQsFzmNyNdU37944329;     OkGZYNbVAQsFzmNyNdU37944329 = OkGZYNbVAQsFzmNyNdU84354321;     OkGZYNbVAQsFzmNyNdU84354321 = OkGZYNbVAQsFzmNyNdU84156276;     OkGZYNbVAQsFzmNyNdU84156276 = OkGZYNbVAQsFzmNyNdU3651938;     OkGZYNbVAQsFzmNyNdU3651938 = OkGZYNbVAQsFzmNyNdU26048467;     OkGZYNbVAQsFzmNyNdU26048467 = OkGZYNbVAQsFzmNyNdU87973184;     OkGZYNbVAQsFzmNyNdU87973184 = OkGZYNbVAQsFzmNyNdU28306079;     OkGZYNbVAQsFzmNyNdU28306079 = OkGZYNbVAQsFzmNyNdU14305575;     OkGZYNbVAQsFzmNyNdU14305575 = OkGZYNbVAQsFzmNyNdU43098876;     OkGZYNbVAQsFzmNyNdU43098876 = OkGZYNbVAQsFzmNyNdU88476322;     OkGZYNbVAQsFzmNyNdU88476322 = OkGZYNbVAQsFzmNyNdU7035990;     OkGZYNbVAQsFzmNyNdU7035990 = OkGZYNbVAQsFzmNyNdU14737727;     OkGZYNbVAQsFzmNyNdU14737727 = OkGZYNbVAQsFzmNyNdU19204383;     OkGZYNbVAQsFzmNyNdU19204383 = OkGZYNbVAQsFzmNyNdU68253063;     OkGZYNbVAQsFzmNyNdU68253063 = OkGZYNbVAQsFzmNyNdU14958196;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void LnMljbGQyduCyutfHHy95969163() {     int UZxvbcsFdXKTPdERMra8276193 = -192783316;    int UZxvbcsFdXKTPdERMra5047313 = -830734205;    int UZxvbcsFdXKTPdERMra70898064 = -70192108;    int UZxvbcsFdXKTPdERMra7875965 = -334270395;    int UZxvbcsFdXKTPdERMra75972611 = -120514419;    int UZxvbcsFdXKTPdERMra38905976 = -35324760;    int UZxvbcsFdXKTPdERMra29811997 = 26465125;    int UZxvbcsFdXKTPdERMra81502973 = -241590989;    int UZxvbcsFdXKTPdERMra37079898 = -651814740;    int UZxvbcsFdXKTPdERMra26386947 = -319297386;    int UZxvbcsFdXKTPdERMra76306059 = -290209619;    int UZxvbcsFdXKTPdERMra73560236 = -143954155;    int UZxvbcsFdXKTPdERMra79902759 = -903579886;    int UZxvbcsFdXKTPdERMra7064331 = -299510091;    int UZxvbcsFdXKTPdERMra20133509 = -486577677;    int UZxvbcsFdXKTPdERMra2737462 = -896134609;    int UZxvbcsFdXKTPdERMra51682802 = -971370389;    int UZxvbcsFdXKTPdERMra1283672 = -37196924;    int UZxvbcsFdXKTPdERMra22720239 = -148591308;    int UZxvbcsFdXKTPdERMra83882871 = -885261075;    int UZxvbcsFdXKTPdERMra7122329 = -278866046;    int UZxvbcsFdXKTPdERMra38333064 = -816737240;    int UZxvbcsFdXKTPdERMra70186350 = -268620574;    int UZxvbcsFdXKTPdERMra11711303 = -977323976;    int UZxvbcsFdXKTPdERMra90696560 = -547034006;    int UZxvbcsFdXKTPdERMra61729068 = -129858135;    int UZxvbcsFdXKTPdERMra41791493 = -618806483;    int UZxvbcsFdXKTPdERMra25477907 = -840151678;    int UZxvbcsFdXKTPdERMra17627955 = -891064799;    int UZxvbcsFdXKTPdERMra15977767 = -94404165;    int UZxvbcsFdXKTPdERMra80028522 = -882495249;    int UZxvbcsFdXKTPdERMra73724589 = 29627799;    int UZxvbcsFdXKTPdERMra9745514 = -7257678;    int UZxvbcsFdXKTPdERMra1130279 = 8840352;    int UZxvbcsFdXKTPdERMra37473001 = -118733146;    int UZxvbcsFdXKTPdERMra56907872 = -426009142;    int UZxvbcsFdXKTPdERMra41410208 = -965413980;    int UZxvbcsFdXKTPdERMra67104125 = -546684232;    int UZxvbcsFdXKTPdERMra50497774 = 60336553;    int UZxvbcsFdXKTPdERMra54965760 = -383960495;    int UZxvbcsFdXKTPdERMra52945033 = -531261375;    int UZxvbcsFdXKTPdERMra80157548 = -251146797;    int UZxvbcsFdXKTPdERMra32916334 = -829486082;    int UZxvbcsFdXKTPdERMra13147737 = -445584747;    int UZxvbcsFdXKTPdERMra61290007 = -966961785;    int UZxvbcsFdXKTPdERMra37198057 = -513529845;    int UZxvbcsFdXKTPdERMra94160280 = -191962198;    int UZxvbcsFdXKTPdERMra54119319 = -51317981;    int UZxvbcsFdXKTPdERMra23746509 = -14625783;    int UZxvbcsFdXKTPdERMra41280488 = -467501335;    int UZxvbcsFdXKTPdERMra72276426 = -493909232;    int UZxvbcsFdXKTPdERMra44100908 = -683695252;    int UZxvbcsFdXKTPdERMra36700752 = -621452459;    int UZxvbcsFdXKTPdERMra62591043 = -380056502;    int UZxvbcsFdXKTPdERMra88846835 = 24659949;    int UZxvbcsFdXKTPdERMra69943128 = -376046077;    int UZxvbcsFdXKTPdERMra34860963 = -462113631;    int UZxvbcsFdXKTPdERMra59186761 = -92868133;    int UZxvbcsFdXKTPdERMra17179405 = -787236390;    int UZxvbcsFdXKTPdERMra14243544 = -990656285;    int UZxvbcsFdXKTPdERMra97114482 = -416518278;    int UZxvbcsFdXKTPdERMra4334090 = -133383198;    int UZxvbcsFdXKTPdERMra63875019 = -350526191;    int UZxvbcsFdXKTPdERMra21102131 = -457410575;    int UZxvbcsFdXKTPdERMra46358425 = -436802137;    int UZxvbcsFdXKTPdERMra2581470 = -219837418;    int UZxvbcsFdXKTPdERMra63814722 = -36696477;    int UZxvbcsFdXKTPdERMra78772481 = -812420238;    int UZxvbcsFdXKTPdERMra69591329 = -80776946;    int UZxvbcsFdXKTPdERMra63225636 = 39431464;    int UZxvbcsFdXKTPdERMra61327253 = -930720629;    int UZxvbcsFdXKTPdERMra84578677 = -324686158;    int UZxvbcsFdXKTPdERMra50785897 = 2466523;    int UZxvbcsFdXKTPdERMra67754478 = -764630814;    int UZxvbcsFdXKTPdERMra30937838 = -253999701;    int UZxvbcsFdXKTPdERMra26964780 = 72280751;    int UZxvbcsFdXKTPdERMra5416731 = -987251158;    int UZxvbcsFdXKTPdERMra57038613 = -823035828;    int UZxvbcsFdXKTPdERMra50421296 = 89637808;    int UZxvbcsFdXKTPdERMra53498504 = 66495838;    int UZxvbcsFdXKTPdERMra67568787 = -937895937;    int UZxvbcsFdXKTPdERMra87672174 = -467488502;    int UZxvbcsFdXKTPdERMra1731398 = -725525895;    int UZxvbcsFdXKTPdERMra76347467 = -323563464;    int UZxvbcsFdXKTPdERMra43701341 = -600494934;    int UZxvbcsFdXKTPdERMra35927614 = -98799998;    int UZxvbcsFdXKTPdERMra37023838 = -348919743;    int UZxvbcsFdXKTPdERMra47154471 = -627201177;    int UZxvbcsFdXKTPdERMra12283443 = 84180402;    int UZxvbcsFdXKTPdERMra67529872 = -742687069;    int UZxvbcsFdXKTPdERMra22046910 = -963895511;    int UZxvbcsFdXKTPdERMra82223447 = -772545848;    int UZxvbcsFdXKTPdERMra49924721 = -759447843;    int UZxvbcsFdXKTPdERMra36254231 = 50992838;    int UZxvbcsFdXKTPdERMra57851278 = -967442217;    int UZxvbcsFdXKTPdERMra48610944 = -297878178;    int UZxvbcsFdXKTPdERMra16282530 = -900620607;    int UZxvbcsFdXKTPdERMra11814203 = -272075508;    int UZxvbcsFdXKTPdERMra66789311 = 91217389;    int UZxvbcsFdXKTPdERMra58708537 = -192783316;     UZxvbcsFdXKTPdERMra8276193 = UZxvbcsFdXKTPdERMra5047313;     UZxvbcsFdXKTPdERMra5047313 = UZxvbcsFdXKTPdERMra70898064;     UZxvbcsFdXKTPdERMra70898064 = UZxvbcsFdXKTPdERMra7875965;     UZxvbcsFdXKTPdERMra7875965 = UZxvbcsFdXKTPdERMra75972611;     UZxvbcsFdXKTPdERMra75972611 = UZxvbcsFdXKTPdERMra38905976;     UZxvbcsFdXKTPdERMra38905976 = UZxvbcsFdXKTPdERMra29811997;     UZxvbcsFdXKTPdERMra29811997 = UZxvbcsFdXKTPdERMra81502973;     UZxvbcsFdXKTPdERMra81502973 = UZxvbcsFdXKTPdERMra37079898;     UZxvbcsFdXKTPdERMra37079898 = UZxvbcsFdXKTPdERMra26386947;     UZxvbcsFdXKTPdERMra26386947 = UZxvbcsFdXKTPdERMra76306059;     UZxvbcsFdXKTPdERMra76306059 = UZxvbcsFdXKTPdERMra73560236;     UZxvbcsFdXKTPdERMra73560236 = UZxvbcsFdXKTPdERMra79902759;     UZxvbcsFdXKTPdERMra79902759 = UZxvbcsFdXKTPdERMra7064331;     UZxvbcsFdXKTPdERMra7064331 = UZxvbcsFdXKTPdERMra20133509;     UZxvbcsFdXKTPdERMra20133509 = UZxvbcsFdXKTPdERMra2737462;     UZxvbcsFdXKTPdERMra2737462 = UZxvbcsFdXKTPdERMra51682802;     UZxvbcsFdXKTPdERMra51682802 = UZxvbcsFdXKTPdERMra1283672;     UZxvbcsFdXKTPdERMra1283672 = UZxvbcsFdXKTPdERMra22720239;     UZxvbcsFdXKTPdERMra22720239 = UZxvbcsFdXKTPdERMra83882871;     UZxvbcsFdXKTPdERMra83882871 = UZxvbcsFdXKTPdERMra7122329;     UZxvbcsFdXKTPdERMra7122329 = UZxvbcsFdXKTPdERMra38333064;     UZxvbcsFdXKTPdERMra38333064 = UZxvbcsFdXKTPdERMra70186350;     UZxvbcsFdXKTPdERMra70186350 = UZxvbcsFdXKTPdERMra11711303;     UZxvbcsFdXKTPdERMra11711303 = UZxvbcsFdXKTPdERMra90696560;     UZxvbcsFdXKTPdERMra90696560 = UZxvbcsFdXKTPdERMra61729068;     UZxvbcsFdXKTPdERMra61729068 = UZxvbcsFdXKTPdERMra41791493;     UZxvbcsFdXKTPdERMra41791493 = UZxvbcsFdXKTPdERMra25477907;     UZxvbcsFdXKTPdERMra25477907 = UZxvbcsFdXKTPdERMra17627955;     UZxvbcsFdXKTPdERMra17627955 = UZxvbcsFdXKTPdERMra15977767;     UZxvbcsFdXKTPdERMra15977767 = UZxvbcsFdXKTPdERMra80028522;     UZxvbcsFdXKTPdERMra80028522 = UZxvbcsFdXKTPdERMra73724589;     UZxvbcsFdXKTPdERMra73724589 = UZxvbcsFdXKTPdERMra9745514;     UZxvbcsFdXKTPdERMra9745514 = UZxvbcsFdXKTPdERMra1130279;     UZxvbcsFdXKTPdERMra1130279 = UZxvbcsFdXKTPdERMra37473001;     UZxvbcsFdXKTPdERMra37473001 = UZxvbcsFdXKTPdERMra56907872;     UZxvbcsFdXKTPdERMra56907872 = UZxvbcsFdXKTPdERMra41410208;     UZxvbcsFdXKTPdERMra41410208 = UZxvbcsFdXKTPdERMra67104125;     UZxvbcsFdXKTPdERMra67104125 = UZxvbcsFdXKTPdERMra50497774;     UZxvbcsFdXKTPdERMra50497774 = UZxvbcsFdXKTPdERMra54965760;     UZxvbcsFdXKTPdERMra54965760 = UZxvbcsFdXKTPdERMra52945033;     UZxvbcsFdXKTPdERMra52945033 = UZxvbcsFdXKTPdERMra80157548;     UZxvbcsFdXKTPdERMra80157548 = UZxvbcsFdXKTPdERMra32916334;     UZxvbcsFdXKTPdERMra32916334 = UZxvbcsFdXKTPdERMra13147737;     UZxvbcsFdXKTPdERMra13147737 = UZxvbcsFdXKTPdERMra61290007;     UZxvbcsFdXKTPdERMra61290007 = UZxvbcsFdXKTPdERMra37198057;     UZxvbcsFdXKTPdERMra37198057 = UZxvbcsFdXKTPdERMra94160280;     UZxvbcsFdXKTPdERMra94160280 = UZxvbcsFdXKTPdERMra54119319;     UZxvbcsFdXKTPdERMra54119319 = UZxvbcsFdXKTPdERMra23746509;     UZxvbcsFdXKTPdERMra23746509 = UZxvbcsFdXKTPdERMra41280488;     UZxvbcsFdXKTPdERMra41280488 = UZxvbcsFdXKTPdERMra72276426;     UZxvbcsFdXKTPdERMra72276426 = UZxvbcsFdXKTPdERMra44100908;     UZxvbcsFdXKTPdERMra44100908 = UZxvbcsFdXKTPdERMra36700752;     UZxvbcsFdXKTPdERMra36700752 = UZxvbcsFdXKTPdERMra62591043;     UZxvbcsFdXKTPdERMra62591043 = UZxvbcsFdXKTPdERMra88846835;     UZxvbcsFdXKTPdERMra88846835 = UZxvbcsFdXKTPdERMra69943128;     UZxvbcsFdXKTPdERMra69943128 = UZxvbcsFdXKTPdERMra34860963;     UZxvbcsFdXKTPdERMra34860963 = UZxvbcsFdXKTPdERMra59186761;     UZxvbcsFdXKTPdERMra59186761 = UZxvbcsFdXKTPdERMra17179405;     UZxvbcsFdXKTPdERMra17179405 = UZxvbcsFdXKTPdERMra14243544;     UZxvbcsFdXKTPdERMra14243544 = UZxvbcsFdXKTPdERMra97114482;     UZxvbcsFdXKTPdERMra97114482 = UZxvbcsFdXKTPdERMra4334090;     UZxvbcsFdXKTPdERMra4334090 = UZxvbcsFdXKTPdERMra63875019;     UZxvbcsFdXKTPdERMra63875019 = UZxvbcsFdXKTPdERMra21102131;     UZxvbcsFdXKTPdERMra21102131 = UZxvbcsFdXKTPdERMra46358425;     UZxvbcsFdXKTPdERMra46358425 = UZxvbcsFdXKTPdERMra2581470;     UZxvbcsFdXKTPdERMra2581470 = UZxvbcsFdXKTPdERMra63814722;     UZxvbcsFdXKTPdERMra63814722 = UZxvbcsFdXKTPdERMra78772481;     UZxvbcsFdXKTPdERMra78772481 = UZxvbcsFdXKTPdERMra69591329;     UZxvbcsFdXKTPdERMra69591329 = UZxvbcsFdXKTPdERMra63225636;     UZxvbcsFdXKTPdERMra63225636 = UZxvbcsFdXKTPdERMra61327253;     UZxvbcsFdXKTPdERMra61327253 = UZxvbcsFdXKTPdERMra84578677;     UZxvbcsFdXKTPdERMra84578677 = UZxvbcsFdXKTPdERMra50785897;     UZxvbcsFdXKTPdERMra50785897 = UZxvbcsFdXKTPdERMra67754478;     UZxvbcsFdXKTPdERMra67754478 = UZxvbcsFdXKTPdERMra30937838;     UZxvbcsFdXKTPdERMra30937838 = UZxvbcsFdXKTPdERMra26964780;     UZxvbcsFdXKTPdERMra26964780 = UZxvbcsFdXKTPdERMra5416731;     UZxvbcsFdXKTPdERMra5416731 = UZxvbcsFdXKTPdERMra57038613;     UZxvbcsFdXKTPdERMra57038613 = UZxvbcsFdXKTPdERMra50421296;     UZxvbcsFdXKTPdERMra50421296 = UZxvbcsFdXKTPdERMra53498504;     UZxvbcsFdXKTPdERMra53498504 = UZxvbcsFdXKTPdERMra67568787;     UZxvbcsFdXKTPdERMra67568787 = UZxvbcsFdXKTPdERMra87672174;     UZxvbcsFdXKTPdERMra87672174 = UZxvbcsFdXKTPdERMra1731398;     UZxvbcsFdXKTPdERMra1731398 = UZxvbcsFdXKTPdERMra76347467;     UZxvbcsFdXKTPdERMra76347467 = UZxvbcsFdXKTPdERMra43701341;     UZxvbcsFdXKTPdERMra43701341 = UZxvbcsFdXKTPdERMra35927614;     UZxvbcsFdXKTPdERMra35927614 = UZxvbcsFdXKTPdERMra37023838;     UZxvbcsFdXKTPdERMra37023838 = UZxvbcsFdXKTPdERMra47154471;     UZxvbcsFdXKTPdERMra47154471 = UZxvbcsFdXKTPdERMra12283443;     UZxvbcsFdXKTPdERMra12283443 = UZxvbcsFdXKTPdERMra67529872;     UZxvbcsFdXKTPdERMra67529872 = UZxvbcsFdXKTPdERMra22046910;     UZxvbcsFdXKTPdERMra22046910 = UZxvbcsFdXKTPdERMra82223447;     UZxvbcsFdXKTPdERMra82223447 = UZxvbcsFdXKTPdERMra49924721;     UZxvbcsFdXKTPdERMra49924721 = UZxvbcsFdXKTPdERMra36254231;     UZxvbcsFdXKTPdERMra36254231 = UZxvbcsFdXKTPdERMra57851278;     UZxvbcsFdXKTPdERMra57851278 = UZxvbcsFdXKTPdERMra48610944;     UZxvbcsFdXKTPdERMra48610944 = UZxvbcsFdXKTPdERMra16282530;     UZxvbcsFdXKTPdERMra16282530 = UZxvbcsFdXKTPdERMra11814203;     UZxvbcsFdXKTPdERMra11814203 = UZxvbcsFdXKTPdERMra66789311;     UZxvbcsFdXKTPdERMra66789311 = UZxvbcsFdXKTPdERMra58708537;     UZxvbcsFdXKTPdERMra58708537 = UZxvbcsFdXKTPdERMra8276193;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void JNZXooGUomVGzZwiMYU2297712() {     int klqKDltKTqgvkeaLUBL62930590 = -630310900;    int klqKDltKTqgvkeaLUBL52044932 = -310299019;    int klqKDltKTqgvkeaLUBL31630710 = -455576722;    int klqKDltKTqgvkeaLUBL79310906 = -340372806;    int klqKDltKTqgvkeaLUBL50424282 = -892949658;    int klqKDltKTqgvkeaLUBL53080373 = -164475596;    int klqKDltKTqgvkeaLUBL50912700 = -275427547;    int klqKDltKTqgvkeaLUBL10678078 = -742159221;    int klqKDltKTqgvkeaLUBL24854308 = -698668110;    int klqKDltKTqgvkeaLUBL9018933 = -598098655;    int klqKDltKTqgvkeaLUBL54917354 = -915566191;    int klqKDltKTqgvkeaLUBL36324949 = -330378243;    int klqKDltKTqgvkeaLUBL43720074 = -707120190;    int klqKDltKTqgvkeaLUBL30762 = 88386331;    int klqKDltKTqgvkeaLUBL50357582 = -393699309;    int klqKDltKTqgvkeaLUBL92504996 = -526294173;    int klqKDltKTqgvkeaLUBL51514566 = -344970217;    int klqKDltKTqgvkeaLUBL68880258 = -100761391;    int klqKDltKTqgvkeaLUBL23940839 = -434402856;    int klqKDltKTqgvkeaLUBL1517427 = -130627221;    int klqKDltKTqgvkeaLUBL41296716 = -846949197;    int klqKDltKTqgvkeaLUBL89585653 = -983181348;    int klqKDltKTqgvkeaLUBL6656182 = -855363995;    int klqKDltKTqgvkeaLUBL13139672 = -676364792;    int klqKDltKTqgvkeaLUBL86449176 = -919947458;    int klqKDltKTqgvkeaLUBL2970015 = -133566919;    int klqKDltKTqgvkeaLUBL43781418 = -73650761;    int klqKDltKTqgvkeaLUBL78726907 = -848203538;    int klqKDltKTqgvkeaLUBL57525631 = -171309674;    int klqKDltKTqgvkeaLUBL10413176 = -385162134;    int klqKDltKTqgvkeaLUBL31734051 = -331367775;    int klqKDltKTqgvkeaLUBL4716200 = -381868729;    int klqKDltKTqgvkeaLUBL77401390 = -563775292;    int klqKDltKTqgvkeaLUBL95786170 = -771280458;    int klqKDltKTqgvkeaLUBL71977158 = -336596405;    int klqKDltKTqgvkeaLUBL44234414 = -674004738;    int klqKDltKTqgvkeaLUBL16114696 = -815840601;    int klqKDltKTqgvkeaLUBL80081364 = -420613253;    int klqKDltKTqgvkeaLUBL1267424 = -321612049;    int klqKDltKTqgvkeaLUBL78952155 = -42269094;    int klqKDltKTqgvkeaLUBL8904434 = -643811533;    int klqKDltKTqgvkeaLUBL16832207 = -858678884;    int klqKDltKTqgvkeaLUBL23916517 = -669991400;    int klqKDltKTqgvkeaLUBL22142136 = 80735587;    int klqKDltKTqgvkeaLUBL21274071 = 520617;    int klqKDltKTqgvkeaLUBL92531658 = -582319459;    int klqKDltKTqgvkeaLUBL10633993 = -219019582;    int klqKDltKTqgvkeaLUBL77546628 = -28970353;    int klqKDltKTqgvkeaLUBL66089276 = 85644028;    int klqKDltKTqgvkeaLUBL86122150 = -707520630;    int klqKDltKTqgvkeaLUBL47389966 = -151124734;    int klqKDltKTqgvkeaLUBL33483058 = -98761235;    int klqKDltKTqgvkeaLUBL68428755 = -361367916;    int klqKDltKTqgvkeaLUBL20006801 = -275942986;    int klqKDltKTqgvkeaLUBL61000995 = -371248732;    int klqKDltKTqgvkeaLUBL73344937 = -647129553;    int klqKDltKTqgvkeaLUBL45388751 = -454935024;    int klqKDltKTqgvkeaLUBL18491039 = -779211930;    int klqKDltKTqgvkeaLUBL92861729 = -420425349;    int klqKDltKTqgvkeaLUBL47454267 = -659382740;    int klqKDltKTqgvkeaLUBL9298956 = 9175165;    int klqKDltKTqgvkeaLUBL72185793 = -427224009;    int klqKDltKTqgvkeaLUBL53152446 = -470849548;    int klqKDltKTqgvkeaLUBL14441133 = -213505977;    int klqKDltKTqgvkeaLUBL77284882 = -166730880;    int klqKDltKTqgvkeaLUBL50201155 = -433697462;    int klqKDltKTqgvkeaLUBL58923558 = -766602952;    int klqKDltKTqgvkeaLUBL47933904 = -935839733;    int klqKDltKTqgvkeaLUBL28053603 = -575017264;    int klqKDltKTqgvkeaLUBL6123168 = -719694571;    int klqKDltKTqgvkeaLUBL76390301 = -710453573;    int klqKDltKTqgvkeaLUBL71433201 = -924356965;    int klqKDltKTqgvkeaLUBL67612835 = -779149343;    int klqKDltKTqgvkeaLUBL44988684 = -292133763;    int klqKDltKTqgvkeaLUBL92612992 = -486815689;    int klqKDltKTqgvkeaLUBL24464509 = -988270313;    int klqKDltKTqgvkeaLUBL65669136 = -213189948;    int klqKDltKTqgvkeaLUBL84514045 = -836099583;    int klqKDltKTqgvkeaLUBL91865601 = -576885410;    int klqKDltKTqgvkeaLUBL93917517 = -237627999;    int klqKDltKTqgvkeaLUBL92336022 = -914547338;    int klqKDltKTqgvkeaLUBL66234789 = 55319591;    int klqKDltKTqgvkeaLUBL12637631 = -833847567;    int klqKDltKTqgvkeaLUBL71403481 = -463789045;    int klqKDltKTqgvkeaLUBL63023210 = -134037400;    int klqKDltKTqgvkeaLUBL98250992 = -132606540;    int klqKDltKTqgvkeaLUBL36287445 = 79499186;    int klqKDltKTqgvkeaLUBL57394590 = -187832306;    int klqKDltKTqgvkeaLUBL34785176 = -300031727;    int klqKDltKTqgvkeaLUBL98632220 = -689466853;    int klqKDltKTqgvkeaLUBL98845663 = -119069715;    int klqKDltKTqgvkeaLUBL97623657 = 63371328;    int klqKDltKTqgvkeaLUBL87219634 = 99812096;    int klqKDltKTqgvkeaLUBL53813156 = -662229309;    int klqKDltKTqgvkeaLUBL69653200 = 48555741;    int klqKDltKTqgvkeaLUBL36718641 = -116587524;    int klqKDltKTqgvkeaLUBL63679761 = -287829337;    int klqKDltKTqgvkeaLUBL9475385 = -356485423;    int klqKDltKTqgvkeaLUBL44857254 = -752533533;    int klqKDltKTqgvkeaLUBL71072915 = -630310900;     klqKDltKTqgvkeaLUBL62930590 = klqKDltKTqgvkeaLUBL52044932;     klqKDltKTqgvkeaLUBL52044932 = klqKDltKTqgvkeaLUBL31630710;     klqKDltKTqgvkeaLUBL31630710 = klqKDltKTqgvkeaLUBL79310906;     klqKDltKTqgvkeaLUBL79310906 = klqKDltKTqgvkeaLUBL50424282;     klqKDltKTqgvkeaLUBL50424282 = klqKDltKTqgvkeaLUBL53080373;     klqKDltKTqgvkeaLUBL53080373 = klqKDltKTqgvkeaLUBL50912700;     klqKDltKTqgvkeaLUBL50912700 = klqKDltKTqgvkeaLUBL10678078;     klqKDltKTqgvkeaLUBL10678078 = klqKDltKTqgvkeaLUBL24854308;     klqKDltKTqgvkeaLUBL24854308 = klqKDltKTqgvkeaLUBL9018933;     klqKDltKTqgvkeaLUBL9018933 = klqKDltKTqgvkeaLUBL54917354;     klqKDltKTqgvkeaLUBL54917354 = klqKDltKTqgvkeaLUBL36324949;     klqKDltKTqgvkeaLUBL36324949 = klqKDltKTqgvkeaLUBL43720074;     klqKDltKTqgvkeaLUBL43720074 = klqKDltKTqgvkeaLUBL30762;     klqKDltKTqgvkeaLUBL30762 = klqKDltKTqgvkeaLUBL50357582;     klqKDltKTqgvkeaLUBL50357582 = klqKDltKTqgvkeaLUBL92504996;     klqKDltKTqgvkeaLUBL92504996 = klqKDltKTqgvkeaLUBL51514566;     klqKDltKTqgvkeaLUBL51514566 = klqKDltKTqgvkeaLUBL68880258;     klqKDltKTqgvkeaLUBL68880258 = klqKDltKTqgvkeaLUBL23940839;     klqKDltKTqgvkeaLUBL23940839 = klqKDltKTqgvkeaLUBL1517427;     klqKDltKTqgvkeaLUBL1517427 = klqKDltKTqgvkeaLUBL41296716;     klqKDltKTqgvkeaLUBL41296716 = klqKDltKTqgvkeaLUBL89585653;     klqKDltKTqgvkeaLUBL89585653 = klqKDltKTqgvkeaLUBL6656182;     klqKDltKTqgvkeaLUBL6656182 = klqKDltKTqgvkeaLUBL13139672;     klqKDltKTqgvkeaLUBL13139672 = klqKDltKTqgvkeaLUBL86449176;     klqKDltKTqgvkeaLUBL86449176 = klqKDltKTqgvkeaLUBL2970015;     klqKDltKTqgvkeaLUBL2970015 = klqKDltKTqgvkeaLUBL43781418;     klqKDltKTqgvkeaLUBL43781418 = klqKDltKTqgvkeaLUBL78726907;     klqKDltKTqgvkeaLUBL78726907 = klqKDltKTqgvkeaLUBL57525631;     klqKDltKTqgvkeaLUBL57525631 = klqKDltKTqgvkeaLUBL10413176;     klqKDltKTqgvkeaLUBL10413176 = klqKDltKTqgvkeaLUBL31734051;     klqKDltKTqgvkeaLUBL31734051 = klqKDltKTqgvkeaLUBL4716200;     klqKDltKTqgvkeaLUBL4716200 = klqKDltKTqgvkeaLUBL77401390;     klqKDltKTqgvkeaLUBL77401390 = klqKDltKTqgvkeaLUBL95786170;     klqKDltKTqgvkeaLUBL95786170 = klqKDltKTqgvkeaLUBL71977158;     klqKDltKTqgvkeaLUBL71977158 = klqKDltKTqgvkeaLUBL44234414;     klqKDltKTqgvkeaLUBL44234414 = klqKDltKTqgvkeaLUBL16114696;     klqKDltKTqgvkeaLUBL16114696 = klqKDltKTqgvkeaLUBL80081364;     klqKDltKTqgvkeaLUBL80081364 = klqKDltKTqgvkeaLUBL1267424;     klqKDltKTqgvkeaLUBL1267424 = klqKDltKTqgvkeaLUBL78952155;     klqKDltKTqgvkeaLUBL78952155 = klqKDltKTqgvkeaLUBL8904434;     klqKDltKTqgvkeaLUBL8904434 = klqKDltKTqgvkeaLUBL16832207;     klqKDltKTqgvkeaLUBL16832207 = klqKDltKTqgvkeaLUBL23916517;     klqKDltKTqgvkeaLUBL23916517 = klqKDltKTqgvkeaLUBL22142136;     klqKDltKTqgvkeaLUBL22142136 = klqKDltKTqgvkeaLUBL21274071;     klqKDltKTqgvkeaLUBL21274071 = klqKDltKTqgvkeaLUBL92531658;     klqKDltKTqgvkeaLUBL92531658 = klqKDltKTqgvkeaLUBL10633993;     klqKDltKTqgvkeaLUBL10633993 = klqKDltKTqgvkeaLUBL77546628;     klqKDltKTqgvkeaLUBL77546628 = klqKDltKTqgvkeaLUBL66089276;     klqKDltKTqgvkeaLUBL66089276 = klqKDltKTqgvkeaLUBL86122150;     klqKDltKTqgvkeaLUBL86122150 = klqKDltKTqgvkeaLUBL47389966;     klqKDltKTqgvkeaLUBL47389966 = klqKDltKTqgvkeaLUBL33483058;     klqKDltKTqgvkeaLUBL33483058 = klqKDltKTqgvkeaLUBL68428755;     klqKDltKTqgvkeaLUBL68428755 = klqKDltKTqgvkeaLUBL20006801;     klqKDltKTqgvkeaLUBL20006801 = klqKDltKTqgvkeaLUBL61000995;     klqKDltKTqgvkeaLUBL61000995 = klqKDltKTqgvkeaLUBL73344937;     klqKDltKTqgvkeaLUBL73344937 = klqKDltKTqgvkeaLUBL45388751;     klqKDltKTqgvkeaLUBL45388751 = klqKDltKTqgvkeaLUBL18491039;     klqKDltKTqgvkeaLUBL18491039 = klqKDltKTqgvkeaLUBL92861729;     klqKDltKTqgvkeaLUBL92861729 = klqKDltKTqgvkeaLUBL47454267;     klqKDltKTqgvkeaLUBL47454267 = klqKDltKTqgvkeaLUBL9298956;     klqKDltKTqgvkeaLUBL9298956 = klqKDltKTqgvkeaLUBL72185793;     klqKDltKTqgvkeaLUBL72185793 = klqKDltKTqgvkeaLUBL53152446;     klqKDltKTqgvkeaLUBL53152446 = klqKDltKTqgvkeaLUBL14441133;     klqKDltKTqgvkeaLUBL14441133 = klqKDltKTqgvkeaLUBL77284882;     klqKDltKTqgvkeaLUBL77284882 = klqKDltKTqgvkeaLUBL50201155;     klqKDltKTqgvkeaLUBL50201155 = klqKDltKTqgvkeaLUBL58923558;     klqKDltKTqgvkeaLUBL58923558 = klqKDltKTqgvkeaLUBL47933904;     klqKDltKTqgvkeaLUBL47933904 = klqKDltKTqgvkeaLUBL28053603;     klqKDltKTqgvkeaLUBL28053603 = klqKDltKTqgvkeaLUBL6123168;     klqKDltKTqgvkeaLUBL6123168 = klqKDltKTqgvkeaLUBL76390301;     klqKDltKTqgvkeaLUBL76390301 = klqKDltKTqgvkeaLUBL71433201;     klqKDltKTqgvkeaLUBL71433201 = klqKDltKTqgvkeaLUBL67612835;     klqKDltKTqgvkeaLUBL67612835 = klqKDltKTqgvkeaLUBL44988684;     klqKDltKTqgvkeaLUBL44988684 = klqKDltKTqgvkeaLUBL92612992;     klqKDltKTqgvkeaLUBL92612992 = klqKDltKTqgvkeaLUBL24464509;     klqKDltKTqgvkeaLUBL24464509 = klqKDltKTqgvkeaLUBL65669136;     klqKDltKTqgvkeaLUBL65669136 = klqKDltKTqgvkeaLUBL84514045;     klqKDltKTqgvkeaLUBL84514045 = klqKDltKTqgvkeaLUBL91865601;     klqKDltKTqgvkeaLUBL91865601 = klqKDltKTqgvkeaLUBL93917517;     klqKDltKTqgvkeaLUBL93917517 = klqKDltKTqgvkeaLUBL92336022;     klqKDltKTqgvkeaLUBL92336022 = klqKDltKTqgvkeaLUBL66234789;     klqKDltKTqgvkeaLUBL66234789 = klqKDltKTqgvkeaLUBL12637631;     klqKDltKTqgvkeaLUBL12637631 = klqKDltKTqgvkeaLUBL71403481;     klqKDltKTqgvkeaLUBL71403481 = klqKDltKTqgvkeaLUBL63023210;     klqKDltKTqgvkeaLUBL63023210 = klqKDltKTqgvkeaLUBL98250992;     klqKDltKTqgvkeaLUBL98250992 = klqKDltKTqgvkeaLUBL36287445;     klqKDltKTqgvkeaLUBL36287445 = klqKDltKTqgvkeaLUBL57394590;     klqKDltKTqgvkeaLUBL57394590 = klqKDltKTqgvkeaLUBL34785176;     klqKDltKTqgvkeaLUBL34785176 = klqKDltKTqgvkeaLUBL98632220;     klqKDltKTqgvkeaLUBL98632220 = klqKDltKTqgvkeaLUBL98845663;     klqKDltKTqgvkeaLUBL98845663 = klqKDltKTqgvkeaLUBL97623657;     klqKDltKTqgvkeaLUBL97623657 = klqKDltKTqgvkeaLUBL87219634;     klqKDltKTqgvkeaLUBL87219634 = klqKDltKTqgvkeaLUBL53813156;     klqKDltKTqgvkeaLUBL53813156 = klqKDltKTqgvkeaLUBL69653200;     klqKDltKTqgvkeaLUBL69653200 = klqKDltKTqgvkeaLUBL36718641;     klqKDltKTqgvkeaLUBL36718641 = klqKDltKTqgvkeaLUBL63679761;     klqKDltKTqgvkeaLUBL63679761 = klqKDltKTqgvkeaLUBL9475385;     klqKDltKTqgvkeaLUBL9475385 = klqKDltKTqgvkeaLUBL44857254;     klqKDltKTqgvkeaLUBL44857254 = klqKDltKTqgvkeaLUBL71072915;     klqKDltKTqgvkeaLUBL71072915 = klqKDltKTqgvkeaLUBL62930590;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void eYEpJNBqLftSTINkGeq69259113() {     int CfFaZxbNiPkhkSEMsOD53050427 = -561591243;    int CfFaZxbNiPkhkSEMsOD73742313 = -727820314;    int CfFaZxbNiPkhkSEMsOD28436622 = -549499796;    int CfFaZxbNiPkhkSEMsOD37889342 = -347085459;    int CfFaZxbNiPkhkSEMsOD72321119 = -202628422;    int CfFaZxbNiPkhkSEMsOD68672209 = -856541516;    int CfFaZxbNiPkhkSEMsOD14123475 = -717509487;    int CfFaZxbNiPkhkSEMsOD32770691 = -82784277;    int CfFaZxbNiPkhkSEMsOD31406160 = -420206818;    int CfFaZxbNiPkhkSEMsOD9914117 = -904780051;    int CfFaZxbNiPkhkSEMsOD51389779 = -283458421;    int CfFaZxbNiPkhkSEMsOD85366133 = -645444741;    int CfFaZxbNiPkhkSEMsOD13919121 = 58985475;    int CfFaZxbNiPkhkSEMsOD92293834 = -254927605;    int CfFaZxbNiPkhkSEMsOD93604062 = -841533103;    int CfFaZxbNiPkhkSEMsOD91249286 = -559469693;    int CfFaZxbNiPkhkSEMsOD51329506 = -425930029;    int CfFaZxbNiPkhkSEMsOD13236504 = -940682305;    int CfFaZxbNiPkhkSEMsOD5283501 = -418795559;    int CfFaZxbNiPkhkSEMsOD40915438 = -290529982;    int CfFaZxbNiPkhkSEMsOD8888543 = -261840663;    int CfFaZxbNiPkhkSEMsOD65963501 = -726269866;    int CfFaZxbNiPkhkSEMsOD76772996 = -620781758;    int CfFaZxbNiPkhkSEMsOD64710877 = 94690310;    int CfFaZxbNiPkhkSEMsOD61777054 = -890152255;    int CfFaZxbNiPkhkSEMsOD38335057 = 82353418;    int CfFaZxbNiPkhkSEMsOD35970334 = -133979468;    int CfFaZxbNiPkhkSEMsOD37300807 = -417060585;    int CfFaZxbNiPkhkSEMsOD31413076 = -479579037;    int CfFaZxbNiPkhkSEMsOD34292126 = 65004101;    int CfFaZxbNiPkhkSEMsOD68610132 = 54872447;    int CfFaZxbNiPkhkSEMsOD88806971 = -174514911;    int CfFaZxbNiPkhkSEMsOD71822855 = 34055332;    int CfFaZxbNiPkhkSEMsOD19907653 = -639413348;    int CfFaZxbNiPkhkSEMsOD89931730 = -246245991;    int CfFaZxbNiPkhkSEMsOD40293611 = 43200105;    int CfFaZxbNiPkhkSEMsOD28289633 = -431309883;    int CfFaZxbNiPkhkSEMsOD74356327 = -281935176;    int CfFaZxbNiPkhkSEMsOD47114037 = -741755510;    int CfFaZxbNiPkhkSEMsOD95337189 = -656408553;    int CfFaZxbNiPkhkSEMsOD10459775 = -437616707;    int CfFaZxbNiPkhkSEMsOD57174331 = -866964179;    int CfFaZxbNiPkhkSEMsOD44016718 = -604547250;    int CfFaZxbNiPkhkSEMsOD12035975 = -440312045;    int CfFaZxbNiPkhkSEMsOD97256540 = -585248740;    int CfFaZxbNiPkhkSEMsOD53398620 = -877988035;    int CfFaZxbNiPkhkSEMsOD18755076 = -248782704;    int CfFaZxbNiPkhkSEMsOD43316669 = -664387963;    int CfFaZxbNiPkhkSEMsOD12666320 = 85940820;    int CfFaZxbNiPkhkSEMsOD35447979 = -751541853;    int CfFaZxbNiPkhkSEMsOD90014859 = -104061786;    int CfFaZxbNiPkhkSEMsOD91803422 = -445333816;    int CfFaZxbNiPkhkSEMsOD93329558 = 34725081;    int CfFaZxbNiPkhkSEMsOD83164133 = -931418119;    int CfFaZxbNiPkhkSEMsOD60370570 = -256748281;    int CfFaZxbNiPkhkSEMsOD87086926 = -835321377;    int CfFaZxbNiPkhkSEMsOD96969317 = -7038556;    int CfFaZxbNiPkhkSEMsOD63725744 = -544190106;    int CfFaZxbNiPkhkSEMsOD76112287 = -456933204;    int CfFaZxbNiPkhkSEMsOD33986063 = -184981840;    int CfFaZxbNiPkhkSEMsOD32701876 = -622562048;    int CfFaZxbNiPkhkSEMsOD76822667 = -200448903;    int CfFaZxbNiPkhkSEMsOD1357615 = -603205241;    int CfFaZxbNiPkhkSEMsOD97114033 = -385210920;    int CfFaZxbNiPkhkSEMsOD41303984 = -859652499;    int CfFaZxbNiPkhkSEMsOD62582807 = -8943511;    int CfFaZxbNiPkhkSEMsOD13543279 = -579500074;    int CfFaZxbNiPkhkSEMsOD94011467 = -301601177;    int CfFaZxbNiPkhkSEMsOD2362105 = 91318386;    int CfFaZxbNiPkhkSEMsOD53310452 = -784733209;    int CfFaZxbNiPkhkSEMsOD62959654 = -28159811;    int CfFaZxbNiPkhkSEMsOD76973178 = -43994854;    int CfFaZxbNiPkhkSEMsOD66122467 = -98926795;    int CfFaZxbNiPkhkSEMsOD9946311 = -762387006;    int CfFaZxbNiPkhkSEMsOD30455663 = -852913276;    int CfFaZxbNiPkhkSEMsOD51714211 = -394876484;    int CfFaZxbNiPkhkSEMsOD21946783 = -21722617;    int CfFaZxbNiPkhkSEMsOD64737021 = -80469714;    int CfFaZxbNiPkhkSEMsOD67454337 = -320060951;    int CfFaZxbNiPkhkSEMsOD8378434 = 87835780;    int CfFaZxbNiPkhkSEMsOD19579981 = -668863879;    int CfFaZxbNiPkhkSEMsOD92653665 = -469591506;    int CfFaZxbNiPkhkSEMsOD24634488 = -403001406;    int CfFaZxbNiPkhkSEMsOD95965097 = -728037184;    int CfFaZxbNiPkhkSEMsOD44277267 = -830934113;    int CfFaZxbNiPkhkSEMsOD76806709 = -499793738;    int CfFaZxbNiPkhkSEMsOD95477413 = -109239992;    int CfFaZxbNiPkhkSEMsOD88658721 = -34526549;    int CfFaZxbNiPkhkSEMsOD59537082 = -282665068;    int CfFaZxbNiPkhkSEMsOD2844804 = -410924614;    int CfFaZxbNiPkhkSEMsOD43324293 = -949761339;    int CfFaZxbNiPkhkSEMsOD64563888 = -887119777;    int CfFaZxbNiPkhkSEMsOD98244039 = -825001972;    int CfFaZxbNiPkhkSEMsOD13127975 = -456773671;    int CfFaZxbNiPkhkSEMsOD62635314 = 66153495;    int CfFaZxbNiPkhkSEMsOD33637108 = -137167805;    int CfFaZxbNiPkhkSEMsOD55816716 = -163758939;    int CfFaZxbNiPkhkSEMsOD46902684 = -119336330;    int CfFaZxbNiPkhkSEMsOD70731991 = -580659547;    int CfFaZxbNiPkhkSEMsOD34673733 = -561591243;     CfFaZxbNiPkhkSEMsOD53050427 = CfFaZxbNiPkhkSEMsOD73742313;     CfFaZxbNiPkhkSEMsOD73742313 = CfFaZxbNiPkhkSEMsOD28436622;     CfFaZxbNiPkhkSEMsOD28436622 = CfFaZxbNiPkhkSEMsOD37889342;     CfFaZxbNiPkhkSEMsOD37889342 = CfFaZxbNiPkhkSEMsOD72321119;     CfFaZxbNiPkhkSEMsOD72321119 = CfFaZxbNiPkhkSEMsOD68672209;     CfFaZxbNiPkhkSEMsOD68672209 = CfFaZxbNiPkhkSEMsOD14123475;     CfFaZxbNiPkhkSEMsOD14123475 = CfFaZxbNiPkhkSEMsOD32770691;     CfFaZxbNiPkhkSEMsOD32770691 = CfFaZxbNiPkhkSEMsOD31406160;     CfFaZxbNiPkhkSEMsOD31406160 = CfFaZxbNiPkhkSEMsOD9914117;     CfFaZxbNiPkhkSEMsOD9914117 = CfFaZxbNiPkhkSEMsOD51389779;     CfFaZxbNiPkhkSEMsOD51389779 = CfFaZxbNiPkhkSEMsOD85366133;     CfFaZxbNiPkhkSEMsOD85366133 = CfFaZxbNiPkhkSEMsOD13919121;     CfFaZxbNiPkhkSEMsOD13919121 = CfFaZxbNiPkhkSEMsOD92293834;     CfFaZxbNiPkhkSEMsOD92293834 = CfFaZxbNiPkhkSEMsOD93604062;     CfFaZxbNiPkhkSEMsOD93604062 = CfFaZxbNiPkhkSEMsOD91249286;     CfFaZxbNiPkhkSEMsOD91249286 = CfFaZxbNiPkhkSEMsOD51329506;     CfFaZxbNiPkhkSEMsOD51329506 = CfFaZxbNiPkhkSEMsOD13236504;     CfFaZxbNiPkhkSEMsOD13236504 = CfFaZxbNiPkhkSEMsOD5283501;     CfFaZxbNiPkhkSEMsOD5283501 = CfFaZxbNiPkhkSEMsOD40915438;     CfFaZxbNiPkhkSEMsOD40915438 = CfFaZxbNiPkhkSEMsOD8888543;     CfFaZxbNiPkhkSEMsOD8888543 = CfFaZxbNiPkhkSEMsOD65963501;     CfFaZxbNiPkhkSEMsOD65963501 = CfFaZxbNiPkhkSEMsOD76772996;     CfFaZxbNiPkhkSEMsOD76772996 = CfFaZxbNiPkhkSEMsOD64710877;     CfFaZxbNiPkhkSEMsOD64710877 = CfFaZxbNiPkhkSEMsOD61777054;     CfFaZxbNiPkhkSEMsOD61777054 = CfFaZxbNiPkhkSEMsOD38335057;     CfFaZxbNiPkhkSEMsOD38335057 = CfFaZxbNiPkhkSEMsOD35970334;     CfFaZxbNiPkhkSEMsOD35970334 = CfFaZxbNiPkhkSEMsOD37300807;     CfFaZxbNiPkhkSEMsOD37300807 = CfFaZxbNiPkhkSEMsOD31413076;     CfFaZxbNiPkhkSEMsOD31413076 = CfFaZxbNiPkhkSEMsOD34292126;     CfFaZxbNiPkhkSEMsOD34292126 = CfFaZxbNiPkhkSEMsOD68610132;     CfFaZxbNiPkhkSEMsOD68610132 = CfFaZxbNiPkhkSEMsOD88806971;     CfFaZxbNiPkhkSEMsOD88806971 = CfFaZxbNiPkhkSEMsOD71822855;     CfFaZxbNiPkhkSEMsOD71822855 = CfFaZxbNiPkhkSEMsOD19907653;     CfFaZxbNiPkhkSEMsOD19907653 = CfFaZxbNiPkhkSEMsOD89931730;     CfFaZxbNiPkhkSEMsOD89931730 = CfFaZxbNiPkhkSEMsOD40293611;     CfFaZxbNiPkhkSEMsOD40293611 = CfFaZxbNiPkhkSEMsOD28289633;     CfFaZxbNiPkhkSEMsOD28289633 = CfFaZxbNiPkhkSEMsOD74356327;     CfFaZxbNiPkhkSEMsOD74356327 = CfFaZxbNiPkhkSEMsOD47114037;     CfFaZxbNiPkhkSEMsOD47114037 = CfFaZxbNiPkhkSEMsOD95337189;     CfFaZxbNiPkhkSEMsOD95337189 = CfFaZxbNiPkhkSEMsOD10459775;     CfFaZxbNiPkhkSEMsOD10459775 = CfFaZxbNiPkhkSEMsOD57174331;     CfFaZxbNiPkhkSEMsOD57174331 = CfFaZxbNiPkhkSEMsOD44016718;     CfFaZxbNiPkhkSEMsOD44016718 = CfFaZxbNiPkhkSEMsOD12035975;     CfFaZxbNiPkhkSEMsOD12035975 = CfFaZxbNiPkhkSEMsOD97256540;     CfFaZxbNiPkhkSEMsOD97256540 = CfFaZxbNiPkhkSEMsOD53398620;     CfFaZxbNiPkhkSEMsOD53398620 = CfFaZxbNiPkhkSEMsOD18755076;     CfFaZxbNiPkhkSEMsOD18755076 = CfFaZxbNiPkhkSEMsOD43316669;     CfFaZxbNiPkhkSEMsOD43316669 = CfFaZxbNiPkhkSEMsOD12666320;     CfFaZxbNiPkhkSEMsOD12666320 = CfFaZxbNiPkhkSEMsOD35447979;     CfFaZxbNiPkhkSEMsOD35447979 = CfFaZxbNiPkhkSEMsOD90014859;     CfFaZxbNiPkhkSEMsOD90014859 = CfFaZxbNiPkhkSEMsOD91803422;     CfFaZxbNiPkhkSEMsOD91803422 = CfFaZxbNiPkhkSEMsOD93329558;     CfFaZxbNiPkhkSEMsOD93329558 = CfFaZxbNiPkhkSEMsOD83164133;     CfFaZxbNiPkhkSEMsOD83164133 = CfFaZxbNiPkhkSEMsOD60370570;     CfFaZxbNiPkhkSEMsOD60370570 = CfFaZxbNiPkhkSEMsOD87086926;     CfFaZxbNiPkhkSEMsOD87086926 = CfFaZxbNiPkhkSEMsOD96969317;     CfFaZxbNiPkhkSEMsOD96969317 = CfFaZxbNiPkhkSEMsOD63725744;     CfFaZxbNiPkhkSEMsOD63725744 = CfFaZxbNiPkhkSEMsOD76112287;     CfFaZxbNiPkhkSEMsOD76112287 = CfFaZxbNiPkhkSEMsOD33986063;     CfFaZxbNiPkhkSEMsOD33986063 = CfFaZxbNiPkhkSEMsOD32701876;     CfFaZxbNiPkhkSEMsOD32701876 = CfFaZxbNiPkhkSEMsOD76822667;     CfFaZxbNiPkhkSEMsOD76822667 = CfFaZxbNiPkhkSEMsOD1357615;     CfFaZxbNiPkhkSEMsOD1357615 = CfFaZxbNiPkhkSEMsOD97114033;     CfFaZxbNiPkhkSEMsOD97114033 = CfFaZxbNiPkhkSEMsOD41303984;     CfFaZxbNiPkhkSEMsOD41303984 = CfFaZxbNiPkhkSEMsOD62582807;     CfFaZxbNiPkhkSEMsOD62582807 = CfFaZxbNiPkhkSEMsOD13543279;     CfFaZxbNiPkhkSEMsOD13543279 = CfFaZxbNiPkhkSEMsOD94011467;     CfFaZxbNiPkhkSEMsOD94011467 = CfFaZxbNiPkhkSEMsOD2362105;     CfFaZxbNiPkhkSEMsOD2362105 = CfFaZxbNiPkhkSEMsOD53310452;     CfFaZxbNiPkhkSEMsOD53310452 = CfFaZxbNiPkhkSEMsOD62959654;     CfFaZxbNiPkhkSEMsOD62959654 = CfFaZxbNiPkhkSEMsOD76973178;     CfFaZxbNiPkhkSEMsOD76973178 = CfFaZxbNiPkhkSEMsOD66122467;     CfFaZxbNiPkhkSEMsOD66122467 = CfFaZxbNiPkhkSEMsOD9946311;     CfFaZxbNiPkhkSEMsOD9946311 = CfFaZxbNiPkhkSEMsOD30455663;     CfFaZxbNiPkhkSEMsOD30455663 = CfFaZxbNiPkhkSEMsOD51714211;     CfFaZxbNiPkhkSEMsOD51714211 = CfFaZxbNiPkhkSEMsOD21946783;     CfFaZxbNiPkhkSEMsOD21946783 = CfFaZxbNiPkhkSEMsOD64737021;     CfFaZxbNiPkhkSEMsOD64737021 = CfFaZxbNiPkhkSEMsOD67454337;     CfFaZxbNiPkhkSEMsOD67454337 = CfFaZxbNiPkhkSEMsOD8378434;     CfFaZxbNiPkhkSEMsOD8378434 = CfFaZxbNiPkhkSEMsOD19579981;     CfFaZxbNiPkhkSEMsOD19579981 = CfFaZxbNiPkhkSEMsOD92653665;     CfFaZxbNiPkhkSEMsOD92653665 = CfFaZxbNiPkhkSEMsOD24634488;     CfFaZxbNiPkhkSEMsOD24634488 = CfFaZxbNiPkhkSEMsOD95965097;     CfFaZxbNiPkhkSEMsOD95965097 = CfFaZxbNiPkhkSEMsOD44277267;     CfFaZxbNiPkhkSEMsOD44277267 = CfFaZxbNiPkhkSEMsOD76806709;     CfFaZxbNiPkhkSEMsOD76806709 = CfFaZxbNiPkhkSEMsOD95477413;     CfFaZxbNiPkhkSEMsOD95477413 = CfFaZxbNiPkhkSEMsOD88658721;     CfFaZxbNiPkhkSEMsOD88658721 = CfFaZxbNiPkhkSEMsOD59537082;     CfFaZxbNiPkhkSEMsOD59537082 = CfFaZxbNiPkhkSEMsOD2844804;     CfFaZxbNiPkhkSEMsOD2844804 = CfFaZxbNiPkhkSEMsOD43324293;     CfFaZxbNiPkhkSEMsOD43324293 = CfFaZxbNiPkhkSEMsOD64563888;     CfFaZxbNiPkhkSEMsOD64563888 = CfFaZxbNiPkhkSEMsOD98244039;     CfFaZxbNiPkhkSEMsOD98244039 = CfFaZxbNiPkhkSEMsOD13127975;     CfFaZxbNiPkhkSEMsOD13127975 = CfFaZxbNiPkhkSEMsOD62635314;     CfFaZxbNiPkhkSEMsOD62635314 = CfFaZxbNiPkhkSEMsOD33637108;     CfFaZxbNiPkhkSEMsOD33637108 = CfFaZxbNiPkhkSEMsOD55816716;     CfFaZxbNiPkhkSEMsOD55816716 = CfFaZxbNiPkhkSEMsOD46902684;     CfFaZxbNiPkhkSEMsOD46902684 = CfFaZxbNiPkhkSEMsOD70731991;     CfFaZxbNiPkhkSEMsOD70731991 = CfFaZxbNiPkhkSEMsOD34673733;     CfFaZxbNiPkhkSEMsOD34673733 = CfFaZxbNiPkhkSEMsOD53050427;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void qehwDMLLiPUAMBOYbPE5904088() {     int IqKcZzckoEYxwdDnLnh75437545 = -195995206;    int IqKcZzckoEYxwdDnLnh58089814 = -676363369;    int IqKcZzckoEYxwdDnLnh57205900 = -789153640;    int IqKcZzckoEYxwdDnLnh52896030 = -353492990;    int IqKcZzckoEYxwdDnLnh70495373 = -793685423;    int IqKcZzckoEYxwdDnLnh83555326 = -717149894;    int IqKcZzckoEYxwdDnLnh6279214 = -539496793;    int IqKcZzckoEYxwdDnLnh8404550 = -553380921;    int IqKcZzckoEYxwdDnLnh28569291 = -304402857;    int IqKcZzckoEYxwdDnLnh1677702 = -647521384;    int IqKcZzckoEYxwdDnLnh88931638 = -280082821;    int IqKcZzckoEYxwdDnLnh41269083 = -896190035;    int IqKcZzckoEYxwdDnLnh80927301 = -559731845;    int IqKcZzckoEYxwdDnLnh34908587 = -782636361;    int IqKcZzckoEYxwdDnLnh30339340 = -469010816;    int IqKcZzckoEYxwdDnLnh35505199 = -941137236;    int IqKcZzckoEYxwdDnLnh1152858 = -703209849;    int IqKcZzckoEYxwdDnLnh19212920 = -292424996;    int IqKcZzckoEYxwdDnLnh46565131 = -553897684;    int IqKcZzckoEYxwdDnLnh19431721 = -543164436;    int IqKcZzckoEYxwdDnLnh9771650 = -253327971;    int IqKcZzckoEYxwdDnLnh29778719 = -131036180;    int IqKcZzckoEYxwdDnLnh80066319 = -796862351;    int IqKcZzckoEYxwdDnLnh91210664 = -469302548;    int IqKcZzckoEYxwdDnLnh97317300 = -511711380;    int IqKcZzckoEYxwdDnLnh26638052 = -361540806;    int IqKcZzckoEYxwdDnLnh83059754 = -991565961;    int IqKcZzckoEYxwdDnLnh43212257 = -205515038;    int IqKcZzckoEYxwdDnLnh38305637 = -823836156;    int IqKcZzckoEYxwdDnLnh43449305 = -955291765;    int IqKcZzckoEYxwdDnLnh12900938 = -26443705;    int IqKcZzckoEYxwdDnLnh46348162 = -826586265;    int IqKcZzckoEYxwdDnLnh52861525 = -495288163;    int IqKcZzckoEYxwdDnLnh79296340 = -963540199;    int IqKcZzckoEYxwdDnLnh66161095 = -310002413;    int IqKcZzckoEYxwdDnLnh81986479 = -272195271;    int IqKcZzckoEYxwdDnLnh21729345 = -164257835;    int IqKcZzckoEYxwdDnLnh27982428 = -149560648;    int IqKcZzckoEYxwdDnLnh95422168 = -42801542;    int IqKcZzckoEYxwdDnLnh15522904 = -792632582;    int IqKcZzckoEYxwdDnLnh39217146 = -940794373;    int IqKcZzckoEYxwdDnLnh45682723 = -624872870;    int IqKcZzckoEYxwdDnLnh49566910 = -492077834;    int IqKcZzckoEYxwdDnLnh11480095 = -437675694;    int IqKcZzckoEYxwdDnLnh65239806 = -394392218;    int IqKcZzckoEYxwdDnLnh61498902 = 39782869;    int IqKcZzckoEYxwdDnLnh31052473 = -827192957;    int IqKcZzckoEYxwdDnLnh87915343 = -420922954;    int IqKcZzckoEYxwdDnLnh7126225 = -963775878;    int IqKcZzckoEYxwdDnLnh32531725 = -893562112;    int IqKcZzckoEYxwdDnLnh98884075 = -459138063;    int IqKcZzckoEYxwdDnLnh65654680 = -876153098;    int IqKcZzckoEYxwdDnLnh71643961 = -737186149;    int IqKcZzckoEYxwdDnLnh43450679 = -107098928;    int IqKcZzckoEYxwdDnLnh96132438 = -397452396;    int IqKcZzckoEYxwdDnLnh45658826 = 35040974;    int IqKcZzckoEYxwdDnLnh78023494 = -879501019;    int IqKcZzckoEYxwdDnLnh65995235 = -219851093;    int IqKcZzckoEYxwdDnLnh55578729 = -841781611;    int IqKcZzckoEYxwdDnLnh43857322 = -332144617;    int IqKcZzckoEYxwdDnLnh495572 = -725583933;    int IqKcZzckoEYxwdDnLnh63066956 = -233981755;    int IqKcZzckoEYxwdDnLnh70098913 = -729544766;    int IqKcZzckoEYxwdDnLnh85119985 = -349111093;    int IqKcZzckoEYxwdDnLnh88776763 = -521077679;    int IqKcZzckoEYxwdDnLnh42583476 = -453496557;    int IqKcZzckoEYxwdDnLnh88407557 = -300901872;    int IqKcZzckoEYxwdDnLnh1630962 = -596191647;    int IqKcZzckoEYxwdDnLnh68747492 = -372633949;    int IqKcZzckoEYxwdDnLnh48352860 = -96815546;    int IqKcZzckoEYxwdDnLnh13775854 = -676879402;    int IqKcZzckoEYxwdDnLnh73170429 = -453649202;    int IqKcZzckoEYxwdDnLnh23790752 = -149623454;    int IqKcZzckoEYxwdDnLnh31042227 = -761265102;    int IqKcZzckoEYxwdDnLnh80214575 = -602370064;    int IqKcZzckoEYxwdDnLnh64088927 = -628455101;    int IqKcZzckoEYxwdDnLnh80211809 = -638958347;    int IqKcZzckoEYxwdDnLnh68586225 = -259186657;    int IqKcZzckoEYxwdDnLnh25970858 = 25089670;    int IqKcZzckoEYxwdDnLnh35818399 = -451494250;    int IqKcZzckoEYxwdDnLnh95585578 = -534347850;    int IqKcZzckoEYxwdDnLnh95144411 = -470643008;    int IqKcZzckoEYxwdDnLnh36086033 = -241739161;    int IqKcZzckoEYxwdDnLnh5773913 = -930274044;    int IqKcZzckoEYxwdDnLnh44565230 = -396153703;    int IqKcZzckoEYxwdDnLnh47246258 = -150290607;    int IqKcZzckoEYxwdDnLnh74704201 = 10599884;    int IqKcZzckoEYxwdDnLnh9410847 = -288189235;    int IqKcZzckoEYxwdDnLnh83163902 = -466087803;    int IqKcZzckoEYxwdDnLnh20502270 = -245043387;    int IqKcZzckoEYxwdDnLnh3962986 = -392694253;    int IqKcZzckoEYxwdDnLnh55734109 = -944406742;    int IqKcZzckoEYxwdDnLnh72403699 = -307779037;    int IqKcZzckoEYxwdDnLnh51564846 = -710656925;    int IqKcZzckoEYxwdDnLnh15027332 = 32951351;    int IqKcZzckoEYxwdDnLnh76150190 = -606812618;    int IqKcZzckoEYxwdDnLnh75583809 = -895328105;    int IqKcZzckoEYxwdDnLnh64446924 = -42966742;    int IqKcZzckoEYxwdDnLnh22703331 = -916598015;    int IqKcZzckoEYxwdDnLnh22656331 = -195995206;     IqKcZzckoEYxwdDnLnh75437545 = IqKcZzckoEYxwdDnLnh58089814;     IqKcZzckoEYxwdDnLnh58089814 = IqKcZzckoEYxwdDnLnh57205900;     IqKcZzckoEYxwdDnLnh57205900 = IqKcZzckoEYxwdDnLnh52896030;     IqKcZzckoEYxwdDnLnh52896030 = IqKcZzckoEYxwdDnLnh70495373;     IqKcZzckoEYxwdDnLnh70495373 = IqKcZzckoEYxwdDnLnh83555326;     IqKcZzckoEYxwdDnLnh83555326 = IqKcZzckoEYxwdDnLnh6279214;     IqKcZzckoEYxwdDnLnh6279214 = IqKcZzckoEYxwdDnLnh8404550;     IqKcZzckoEYxwdDnLnh8404550 = IqKcZzckoEYxwdDnLnh28569291;     IqKcZzckoEYxwdDnLnh28569291 = IqKcZzckoEYxwdDnLnh1677702;     IqKcZzckoEYxwdDnLnh1677702 = IqKcZzckoEYxwdDnLnh88931638;     IqKcZzckoEYxwdDnLnh88931638 = IqKcZzckoEYxwdDnLnh41269083;     IqKcZzckoEYxwdDnLnh41269083 = IqKcZzckoEYxwdDnLnh80927301;     IqKcZzckoEYxwdDnLnh80927301 = IqKcZzckoEYxwdDnLnh34908587;     IqKcZzckoEYxwdDnLnh34908587 = IqKcZzckoEYxwdDnLnh30339340;     IqKcZzckoEYxwdDnLnh30339340 = IqKcZzckoEYxwdDnLnh35505199;     IqKcZzckoEYxwdDnLnh35505199 = IqKcZzckoEYxwdDnLnh1152858;     IqKcZzckoEYxwdDnLnh1152858 = IqKcZzckoEYxwdDnLnh19212920;     IqKcZzckoEYxwdDnLnh19212920 = IqKcZzckoEYxwdDnLnh46565131;     IqKcZzckoEYxwdDnLnh46565131 = IqKcZzckoEYxwdDnLnh19431721;     IqKcZzckoEYxwdDnLnh19431721 = IqKcZzckoEYxwdDnLnh9771650;     IqKcZzckoEYxwdDnLnh9771650 = IqKcZzckoEYxwdDnLnh29778719;     IqKcZzckoEYxwdDnLnh29778719 = IqKcZzckoEYxwdDnLnh80066319;     IqKcZzckoEYxwdDnLnh80066319 = IqKcZzckoEYxwdDnLnh91210664;     IqKcZzckoEYxwdDnLnh91210664 = IqKcZzckoEYxwdDnLnh97317300;     IqKcZzckoEYxwdDnLnh97317300 = IqKcZzckoEYxwdDnLnh26638052;     IqKcZzckoEYxwdDnLnh26638052 = IqKcZzckoEYxwdDnLnh83059754;     IqKcZzckoEYxwdDnLnh83059754 = IqKcZzckoEYxwdDnLnh43212257;     IqKcZzckoEYxwdDnLnh43212257 = IqKcZzckoEYxwdDnLnh38305637;     IqKcZzckoEYxwdDnLnh38305637 = IqKcZzckoEYxwdDnLnh43449305;     IqKcZzckoEYxwdDnLnh43449305 = IqKcZzckoEYxwdDnLnh12900938;     IqKcZzckoEYxwdDnLnh12900938 = IqKcZzckoEYxwdDnLnh46348162;     IqKcZzckoEYxwdDnLnh46348162 = IqKcZzckoEYxwdDnLnh52861525;     IqKcZzckoEYxwdDnLnh52861525 = IqKcZzckoEYxwdDnLnh79296340;     IqKcZzckoEYxwdDnLnh79296340 = IqKcZzckoEYxwdDnLnh66161095;     IqKcZzckoEYxwdDnLnh66161095 = IqKcZzckoEYxwdDnLnh81986479;     IqKcZzckoEYxwdDnLnh81986479 = IqKcZzckoEYxwdDnLnh21729345;     IqKcZzckoEYxwdDnLnh21729345 = IqKcZzckoEYxwdDnLnh27982428;     IqKcZzckoEYxwdDnLnh27982428 = IqKcZzckoEYxwdDnLnh95422168;     IqKcZzckoEYxwdDnLnh95422168 = IqKcZzckoEYxwdDnLnh15522904;     IqKcZzckoEYxwdDnLnh15522904 = IqKcZzckoEYxwdDnLnh39217146;     IqKcZzckoEYxwdDnLnh39217146 = IqKcZzckoEYxwdDnLnh45682723;     IqKcZzckoEYxwdDnLnh45682723 = IqKcZzckoEYxwdDnLnh49566910;     IqKcZzckoEYxwdDnLnh49566910 = IqKcZzckoEYxwdDnLnh11480095;     IqKcZzckoEYxwdDnLnh11480095 = IqKcZzckoEYxwdDnLnh65239806;     IqKcZzckoEYxwdDnLnh65239806 = IqKcZzckoEYxwdDnLnh61498902;     IqKcZzckoEYxwdDnLnh61498902 = IqKcZzckoEYxwdDnLnh31052473;     IqKcZzckoEYxwdDnLnh31052473 = IqKcZzckoEYxwdDnLnh87915343;     IqKcZzckoEYxwdDnLnh87915343 = IqKcZzckoEYxwdDnLnh7126225;     IqKcZzckoEYxwdDnLnh7126225 = IqKcZzckoEYxwdDnLnh32531725;     IqKcZzckoEYxwdDnLnh32531725 = IqKcZzckoEYxwdDnLnh98884075;     IqKcZzckoEYxwdDnLnh98884075 = IqKcZzckoEYxwdDnLnh65654680;     IqKcZzckoEYxwdDnLnh65654680 = IqKcZzckoEYxwdDnLnh71643961;     IqKcZzckoEYxwdDnLnh71643961 = IqKcZzckoEYxwdDnLnh43450679;     IqKcZzckoEYxwdDnLnh43450679 = IqKcZzckoEYxwdDnLnh96132438;     IqKcZzckoEYxwdDnLnh96132438 = IqKcZzckoEYxwdDnLnh45658826;     IqKcZzckoEYxwdDnLnh45658826 = IqKcZzckoEYxwdDnLnh78023494;     IqKcZzckoEYxwdDnLnh78023494 = IqKcZzckoEYxwdDnLnh65995235;     IqKcZzckoEYxwdDnLnh65995235 = IqKcZzckoEYxwdDnLnh55578729;     IqKcZzckoEYxwdDnLnh55578729 = IqKcZzckoEYxwdDnLnh43857322;     IqKcZzckoEYxwdDnLnh43857322 = IqKcZzckoEYxwdDnLnh495572;     IqKcZzckoEYxwdDnLnh495572 = IqKcZzckoEYxwdDnLnh63066956;     IqKcZzckoEYxwdDnLnh63066956 = IqKcZzckoEYxwdDnLnh70098913;     IqKcZzckoEYxwdDnLnh70098913 = IqKcZzckoEYxwdDnLnh85119985;     IqKcZzckoEYxwdDnLnh85119985 = IqKcZzckoEYxwdDnLnh88776763;     IqKcZzckoEYxwdDnLnh88776763 = IqKcZzckoEYxwdDnLnh42583476;     IqKcZzckoEYxwdDnLnh42583476 = IqKcZzckoEYxwdDnLnh88407557;     IqKcZzckoEYxwdDnLnh88407557 = IqKcZzckoEYxwdDnLnh1630962;     IqKcZzckoEYxwdDnLnh1630962 = IqKcZzckoEYxwdDnLnh68747492;     IqKcZzckoEYxwdDnLnh68747492 = IqKcZzckoEYxwdDnLnh48352860;     IqKcZzckoEYxwdDnLnh48352860 = IqKcZzckoEYxwdDnLnh13775854;     IqKcZzckoEYxwdDnLnh13775854 = IqKcZzckoEYxwdDnLnh73170429;     IqKcZzckoEYxwdDnLnh73170429 = IqKcZzckoEYxwdDnLnh23790752;     IqKcZzckoEYxwdDnLnh23790752 = IqKcZzckoEYxwdDnLnh31042227;     IqKcZzckoEYxwdDnLnh31042227 = IqKcZzckoEYxwdDnLnh80214575;     IqKcZzckoEYxwdDnLnh80214575 = IqKcZzckoEYxwdDnLnh64088927;     IqKcZzckoEYxwdDnLnh64088927 = IqKcZzckoEYxwdDnLnh80211809;     IqKcZzckoEYxwdDnLnh80211809 = IqKcZzckoEYxwdDnLnh68586225;     IqKcZzckoEYxwdDnLnh68586225 = IqKcZzckoEYxwdDnLnh25970858;     IqKcZzckoEYxwdDnLnh25970858 = IqKcZzckoEYxwdDnLnh35818399;     IqKcZzckoEYxwdDnLnh35818399 = IqKcZzckoEYxwdDnLnh95585578;     IqKcZzckoEYxwdDnLnh95585578 = IqKcZzckoEYxwdDnLnh95144411;     IqKcZzckoEYxwdDnLnh95144411 = IqKcZzckoEYxwdDnLnh36086033;     IqKcZzckoEYxwdDnLnh36086033 = IqKcZzckoEYxwdDnLnh5773913;     IqKcZzckoEYxwdDnLnh5773913 = IqKcZzckoEYxwdDnLnh44565230;     IqKcZzckoEYxwdDnLnh44565230 = IqKcZzckoEYxwdDnLnh47246258;     IqKcZzckoEYxwdDnLnh47246258 = IqKcZzckoEYxwdDnLnh74704201;     IqKcZzckoEYxwdDnLnh74704201 = IqKcZzckoEYxwdDnLnh9410847;     IqKcZzckoEYxwdDnLnh9410847 = IqKcZzckoEYxwdDnLnh83163902;     IqKcZzckoEYxwdDnLnh83163902 = IqKcZzckoEYxwdDnLnh20502270;     IqKcZzckoEYxwdDnLnh20502270 = IqKcZzckoEYxwdDnLnh3962986;     IqKcZzckoEYxwdDnLnh3962986 = IqKcZzckoEYxwdDnLnh55734109;     IqKcZzckoEYxwdDnLnh55734109 = IqKcZzckoEYxwdDnLnh72403699;     IqKcZzckoEYxwdDnLnh72403699 = IqKcZzckoEYxwdDnLnh51564846;     IqKcZzckoEYxwdDnLnh51564846 = IqKcZzckoEYxwdDnLnh15027332;     IqKcZzckoEYxwdDnLnh15027332 = IqKcZzckoEYxwdDnLnh76150190;     IqKcZzckoEYxwdDnLnh76150190 = IqKcZzckoEYxwdDnLnh75583809;     IqKcZzckoEYxwdDnLnh75583809 = IqKcZzckoEYxwdDnLnh64446924;     IqKcZzckoEYxwdDnLnh64446924 = IqKcZzckoEYxwdDnLnh22703331;     IqKcZzckoEYxwdDnLnh22703331 = IqKcZzckoEYxwdDnLnh22656331;     IqKcZzckoEYxwdDnLnh22656331 = IqKcZzckoEYxwdDnLnh75437545;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void kKBpEjIMAPHcuiXeaHD12232636() {     int ThccLjiKrbhZnKzeqWw30091943 = -633522790;    int ThccLjiKrbhZnKzeqWw5087434 = -155928183;    int ThccLjiKrbhZnKzeqWw17938547 = -74538254;    int ThccLjiKrbhZnKzeqWw24330972 = -359595401;    int ThccLjiKrbhZnKzeqWw44947044 = -466120662;    int ThccLjiKrbhZnKzeqWw97729723 = -846300730;    int ThccLjiKrbhZnKzeqWw27379917 = -841389465;    int ThccLjiKrbhZnKzeqWw37579654 = 46050846;    int ThccLjiKrbhZnKzeqWw16343702 = -351256228;    int ThccLjiKrbhZnKzeqWw84309686 = -926322654;    int ThccLjiKrbhZnKzeqWw67542933 = -905439394;    int ThccLjiKrbhZnKzeqWw4033796 = 17385877;    int ThccLjiKrbhZnKzeqWw44744616 = -363272149;    int ThccLjiKrbhZnKzeqWw27875018 = -394739939;    int ThccLjiKrbhZnKzeqWw60563413 = -376132448;    int ThccLjiKrbhZnKzeqWw25272735 = -571296800;    int ThccLjiKrbhZnKzeqWw984622 = -76809677;    int ThccLjiKrbhZnKzeqWw86809507 = -355989463;    int ThccLjiKrbhZnKzeqWw47785732 = -839709232;    int ThccLjiKrbhZnKzeqWw37066276 = -888530582;    int ThccLjiKrbhZnKzeqWw43946038 = -821411122;    int ThccLjiKrbhZnKzeqWw81031308 = -297480288;    int ThccLjiKrbhZnKzeqWw16536151 = -283605772;    int ThccLjiKrbhZnKzeqWw92639033 = -168343364;    int ThccLjiKrbhZnKzeqWw93069916 = -884624832;    int ThccLjiKrbhZnKzeqWw67878998 = -365249591;    int ThccLjiKrbhZnKzeqWw85049678 = -446410240;    int ThccLjiKrbhZnKzeqWw96461257 = -213566899;    int ThccLjiKrbhZnKzeqWw78203314 = -104081031;    int ThccLjiKrbhZnKzeqWw37884714 = -146049733;    int ThccLjiKrbhZnKzeqWw64606466 = -575316231;    int ThccLjiKrbhZnKzeqWw77339772 = -138082793;    int ThccLjiKrbhZnKzeqWw20517402 = 48194223;    int ThccLjiKrbhZnKzeqWw73952232 = -643661008;    int ThccLjiKrbhZnKzeqWw665252 = -527865673;    int ThccLjiKrbhZnKzeqWw69313022 = -520190868;    int ThccLjiKrbhZnKzeqWw96433832 = -14684455;    int ThccLjiKrbhZnKzeqWw40959667 = -23489668;    int ThccLjiKrbhZnKzeqWw46191817 = -424750144;    int ThccLjiKrbhZnKzeqWw39509299 = -450941182;    int ThccLjiKrbhZnKzeqWw95176546 = 46655469;    int ThccLjiKrbhZnKzeqWw82357380 = -132404957;    int ThccLjiKrbhZnKzeqWw40567093 = -332583151;    int ThccLjiKrbhZnKzeqWw20474494 = 88644640;    int ThccLjiKrbhZnKzeqWw25223870 = -526909816;    int ThccLjiKrbhZnKzeqWw16832504 = -29006745;    int ThccLjiKrbhZnKzeqWw47526185 = -854250340;    int ThccLjiKrbhZnKzeqWw11342653 = -398575326;    int ThccLjiKrbhZnKzeqWw49468991 = -863506067;    int ThccLjiKrbhZnKzeqWw77373387 = -33581407;    int ThccLjiKrbhZnKzeqWw73997615 = -116353565;    int ThccLjiKrbhZnKzeqWw55036829 = -291219081;    int ThccLjiKrbhZnKzeqWw3371965 = -477101607;    int ThccLjiKrbhZnKzeqWw866437 = -2985412;    int ThccLjiKrbhZnKzeqWw68286597 = -793361077;    int ThccLjiKrbhZnKzeqWw49060634 = -236042502;    int ThccLjiKrbhZnKzeqWw88551282 = -872322412;    int ThccLjiKrbhZnKzeqWw25299513 = -906194890;    int ThccLjiKrbhZnKzeqWw31261055 = -474970570;    int ThccLjiKrbhZnKzeqWw77068045 = -871072;    int ThccLjiKrbhZnKzeqWw12680045 = -299890491;    int ThccLjiKrbhZnKzeqWw30918660 = -527822567;    int ThccLjiKrbhZnKzeqWw59376339 = -849868123;    int ThccLjiKrbhZnKzeqWw78458987 = -105206495;    int ThccLjiKrbhZnKzeqWw19703221 = -251006423;    int ThccLjiKrbhZnKzeqWw90203160 = -667356601;    int ThccLjiKrbhZnKzeqWw83516394 = 69191653;    int ThccLjiKrbhZnKzeqWw70792383 = -719611142;    int ThccLjiKrbhZnKzeqWw27209766 = -866874267;    int ThccLjiKrbhZnKzeqWw91250391 = -855941580;    int ThccLjiKrbhZnKzeqWw28838902 = -456612345;    int ThccLjiKrbhZnKzeqWw60024954 = 46679991;    int ThccLjiKrbhZnKzeqWw40617690 = -931239320;    int ThccLjiKrbhZnKzeqWw8276433 = -288768051;    int ThccLjiKrbhZnKzeqWw41889730 = -835186052;    int ThccLjiKrbhZnKzeqWw61588657 = -589006166;    int ThccLjiKrbhZnKzeqWw40464216 = -964897137;    int ThccLjiKrbhZnKzeqWw96061657 = -272250412;    int ThccLjiKrbhZnKzeqWw67415163 = -641433549;    int ThccLjiKrbhZnKzeqWw76237412 = -755618087;    int ThccLjiKrbhZnKzeqWw20352814 = -510999251;    int ThccLjiKrbhZnKzeqWw73707026 = 52165085;    int ThccLjiKrbhZnKzeqWw46992267 = -350060832;    int ThccLjiKrbhZnKzeqWw829927 = 29500375;    int ThccLjiKrbhZnKzeqWw63887099 = 70303831;    int ThccLjiKrbhZnKzeqWw9569637 = -184097150;    int ThccLjiKrbhZnKzeqWw73967808 = -660981187;    int ThccLjiKrbhZnKzeqWw19650966 = -948820365;    int ThccLjiKrbhZnKzeqWw5665636 = -850299931;    int ThccLjiKrbhZnKzeqWw51604617 = -191823171;    int ThccLjiKrbhZnKzeqWw80761739 = -647868456;    int ThccLjiKrbhZnKzeqWw71134319 = -108489565;    int ThccLjiKrbhZnKzeqWw9698613 = -548519099;    int ThccLjiKrbhZnKzeqWw69123771 = -323879072;    int ThccLjiKrbhZnKzeqWw26829254 = -51050692;    int ThccLjiKrbhZnKzeqWw64257887 = -425521964;    int ThccLjiKrbhZnKzeqWw22981042 = -282536834;    int ThccLjiKrbhZnKzeqWw62108106 = -127376657;    int ThccLjiKrbhZnKzeqWw771274 = -660348937;    int ThccLjiKrbhZnKzeqWw35020709 = -633522790;     ThccLjiKrbhZnKzeqWw30091943 = ThccLjiKrbhZnKzeqWw5087434;     ThccLjiKrbhZnKzeqWw5087434 = ThccLjiKrbhZnKzeqWw17938547;     ThccLjiKrbhZnKzeqWw17938547 = ThccLjiKrbhZnKzeqWw24330972;     ThccLjiKrbhZnKzeqWw24330972 = ThccLjiKrbhZnKzeqWw44947044;     ThccLjiKrbhZnKzeqWw44947044 = ThccLjiKrbhZnKzeqWw97729723;     ThccLjiKrbhZnKzeqWw97729723 = ThccLjiKrbhZnKzeqWw27379917;     ThccLjiKrbhZnKzeqWw27379917 = ThccLjiKrbhZnKzeqWw37579654;     ThccLjiKrbhZnKzeqWw37579654 = ThccLjiKrbhZnKzeqWw16343702;     ThccLjiKrbhZnKzeqWw16343702 = ThccLjiKrbhZnKzeqWw84309686;     ThccLjiKrbhZnKzeqWw84309686 = ThccLjiKrbhZnKzeqWw67542933;     ThccLjiKrbhZnKzeqWw67542933 = ThccLjiKrbhZnKzeqWw4033796;     ThccLjiKrbhZnKzeqWw4033796 = ThccLjiKrbhZnKzeqWw44744616;     ThccLjiKrbhZnKzeqWw44744616 = ThccLjiKrbhZnKzeqWw27875018;     ThccLjiKrbhZnKzeqWw27875018 = ThccLjiKrbhZnKzeqWw60563413;     ThccLjiKrbhZnKzeqWw60563413 = ThccLjiKrbhZnKzeqWw25272735;     ThccLjiKrbhZnKzeqWw25272735 = ThccLjiKrbhZnKzeqWw984622;     ThccLjiKrbhZnKzeqWw984622 = ThccLjiKrbhZnKzeqWw86809507;     ThccLjiKrbhZnKzeqWw86809507 = ThccLjiKrbhZnKzeqWw47785732;     ThccLjiKrbhZnKzeqWw47785732 = ThccLjiKrbhZnKzeqWw37066276;     ThccLjiKrbhZnKzeqWw37066276 = ThccLjiKrbhZnKzeqWw43946038;     ThccLjiKrbhZnKzeqWw43946038 = ThccLjiKrbhZnKzeqWw81031308;     ThccLjiKrbhZnKzeqWw81031308 = ThccLjiKrbhZnKzeqWw16536151;     ThccLjiKrbhZnKzeqWw16536151 = ThccLjiKrbhZnKzeqWw92639033;     ThccLjiKrbhZnKzeqWw92639033 = ThccLjiKrbhZnKzeqWw93069916;     ThccLjiKrbhZnKzeqWw93069916 = ThccLjiKrbhZnKzeqWw67878998;     ThccLjiKrbhZnKzeqWw67878998 = ThccLjiKrbhZnKzeqWw85049678;     ThccLjiKrbhZnKzeqWw85049678 = ThccLjiKrbhZnKzeqWw96461257;     ThccLjiKrbhZnKzeqWw96461257 = ThccLjiKrbhZnKzeqWw78203314;     ThccLjiKrbhZnKzeqWw78203314 = ThccLjiKrbhZnKzeqWw37884714;     ThccLjiKrbhZnKzeqWw37884714 = ThccLjiKrbhZnKzeqWw64606466;     ThccLjiKrbhZnKzeqWw64606466 = ThccLjiKrbhZnKzeqWw77339772;     ThccLjiKrbhZnKzeqWw77339772 = ThccLjiKrbhZnKzeqWw20517402;     ThccLjiKrbhZnKzeqWw20517402 = ThccLjiKrbhZnKzeqWw73952232;     ThccLjiKrbhZnKzeqWw73952232 = ThccLjiKrbhZnKzeqWw665252;     ThccLjiKrbhZnKzeqWw665252 = ThccLjiKrbhZnKzeqWw69313022;     ThccLjiKrbhZnKzeqWw69313022 = ThccLjiKrbhZnKzeqWw96433832;     ThccLjiKrbhZnKzeqWw96433832 = ThccLjiKrbhZnKzeqWw40959667;     ThccLjiKrbhZnKzeqWw40959667 = ThccLjiKrbhZnKzeqWw46191817;     ThccLjiKrbhZnKzeqWw46191817 = ThccLjiKrbhZnKzeqWw39509299;     ThccLjiKrbhZnKzeqWw39509299 = ThccLjiKrbhZnKzeqWw95176546;     ThccLjiKrbhZnKzeqWw95176546 = ThccLjiKrbhZnKzeqWw82357380;     ThccLjiKrbhZnKzeqWw82357380 = ThccLjiKrbhZnKzeqWw40567093;     ThccLjiKrbhZnKzeqWw40567093 = ThccLjiKrbhZnKzeqWw20474494;     ThccLjiKrbhZnKzeqWw20474494 = ThccLjiKrbhZnKzeqWw25223870;     ThccLjiKrbhZnKzeqWw25223870 = ThccLjiKrbhZnKzeqWw16832504;     ThccLjiKrbhZnKzeqWw16832504 = ThccLjiKrbhZnKzeqWw47526185;     ThccLjiKrbhZnKzeqWw47526185 = ThccLjiKrbhZnKzeqWw11342653;     ThccLjiKrbhZnKzeqWw11342653 = ThccLjiKrbhZnKzeqWw49468991;     ThccLjiKrbhZnKzeqWw49468991 = ThccLjiKrbhZnKzeqWw77373387;     ThccLjiKrbhZnKzeqWw77373387 = ThccLjiKrbhZnKzeqWw73997615;     ThccLjiKrbhZnKzeqWw73997615 = ThccLjiKrbhZnKzeqWw55036829;     ThccLjiKrbhZnKzeqWw55036829 = ThccLjiKrbhZnKzeqWw3371965;     ThccLjiKrbhZnKzeqWw3371965 = ThccLjiKrbhZnKzeqWw866437;     ThccLjiKrbhZnKzeqWw866437 = ThccLjiKrbhZnKzeqWw68286597;     ThccLjiKrbhZnKzeqWw68286597 = ThccLjiKrbhZnKzeqWw49060634;     ThccLjiKrbhZnKzeqWw49060634 = ThccLjiKrbhZnKzeqWw88551282;     ThccLjiKrbhZnKzeqWw88551282 = ThccLjiKrbhZnKzeqWw25299513;     ThccLjiKrbhZnKzeqWw25299513 = ThccLjiKrbhZnKzeqWw31261055;     ThccLjiKrbhZnKzeqWw31261055 = ThccLjiKrbhZnKzeqWw77068045;     ThccLjiKrbhZnKzeqWw77068045 = ThccLjiKrbhZnKzeqWw12680045;     ThccLjiKrbhZnKzeqWw12680045 = ThccLjiKrbhZnKzeqWw30918660;     ThccLjiKrbhZnKzeqWw30918660 = ThccLjiKrbhZnKzeqWw59376339;     ThccLjiKrbhZnKzeqWw59376339 = ThccLjiKrbhZnKzeqWw78458987;     ThccLjiKrbhZnKzeqWw78458987 = ThccLjiKrbhZnKzeqWw19703221;     ThccLjiKrbhZnKzeqWw19703221 = ThccLjiKrbhZnKzeqWw90203160;     ThccLjiKrbhZnKzeqWw90203160 = ThccLjiKrbhZnKzeqWw83516394;     ThccLjiKrbhZnKzeqWw83516394 = ThccLjiKrbhZnKzeqWw70792383;     ThccLjiKrbhZnKzeqWw70792383 = ThccLjiKrbhZnKzeqWw27209766;     ThccLjiKrbhZnKzeqWw27209766 = ThccLjiKrbhZnKzeqWw91250391;     ThccLjiKrbhZnKzeqWw91250391 = ThccLjiKrbhZnKzeqWw28838902;     ThccLjiKrbhZnKzeqWw28838902 = ThccLjiKrbhZnKzeqWw60024954;     ThccLjiKrbhZnKzeqWw60024954 = ThccLjiKrbhZnKzeqWw40617690;     ThccLjiKrbhZnKzeqWw40617690 = ThccLjiKrbhZnKzeqWw8276433;     ThccLjiKrbhZnKzeqWw8276433 = ThccLjiKrbhZnKzeqWw41889730;     ThccLjiKrbhZnKzeqWw41889730 = ThccLjiKrbhZnKzeqWw61588657;     ThccLjiKrbhZnKzeqWw61588657 = ThccLjiKrbhZnKzeqWw40464216;     ThccLjiKrbhZnKzeqWw40464216 = ThccLjiKrbhZnKzeqWw96061657;     ThccLjiKrbhZnKzeqWw96061657 = ThccLjiKrbhZnKzeqWw67415163;     ThccLjiKrbhZnKzeqWw67415163 = ThccLjiKrbhZnKzeqWw76237412;     ThccLjiKrbhZnKzeqWw76237412 = ThccLjiKrbhZnKzeqWw20352814;     ThccLjiKrbhZnKzeqWw20352814 = ThccLjiKrbhZnKzeqWw73707026;     ThccLjiKrbhZnKzeqWw73707026 = ThccLjiKrbhZnKzeqWw46992267;     ThccLjiKrbhZnKzeqWw46992267 = ThccLjiKrbhZnKzeqWw829927;     ThccLjiKrbhZnKzeqWw829927 = ThccLjiKrbhZnKzeqWw63887099;     ThccLjiKrbhZnKzeqWw63887099 = ThccLjiKrbhZnKzeqWw9569637;     ThccLjiKrbhZnKzeqWw9569637 = ThccLjiKrbhZnKzeqWw73967808;     ThccLjiKrbhZnKzeqWw73967808 = ThccLjiKrbhZnKzeqWw19650966;     ThccLjiKrbhZnKzeqWw19650966 = ThccLjiKrbhZnKzeqWw5665636;     ThccLjiKrbhZnKzeqWw5665636 = ThccLjiKrbhZnKzeqWw51604617;     ThccLjiKrbhZnKzeqWw51604617 = ThccLjiKrbhZnKzeqWw80761739;     ThccLjiKrbhZnKzeqWw80761739 = ThccLjiKrbhZnKzeqWw71134319;     ThccLjiKrbhZnKzeqWw71134319 = ThccLjiKrbhZnKzeqWw9698613;     ThccLjiKrbhZnKzeqWw9698613 = ThccLjiKrbhZnKzeqWw69123771;     ThccLjiKrbhZnKzeqWw69123771 = ThccLjiKrbhZnKzeqWw26829254;     ThccLjiKrbhZnKzeqWw26829254 = ThccLjiKrbhZnKzeqWw64257887;     ThccLjiKrbhZnKzeqWw64257887 = ThccLjiKrbhZnKzeqWw22981042;     ThccLjiKrbhZnKzeqWw22981042 = ThccLjiKrbhZnKzeqWw62108106;     ThccLjiKrbhZnKzeqWw62108106 = ThccLjiKrbhZnKzeqWw771274;     ThccLjiKrbhZnKzeqWw771274 = ThccLjiKrbhZnKzeqWw35020709;     ThccLjiKrbhZnKzeqWw35020709 = ThccLjiKrbhZnKzeqWw30091943;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void IZPupmWujWxzMubtzaf18561183() {     int cVsYEunWjFXHJAHkghG84746340 = 28949627;    int cVsYEunWjFXHJAHkghG52085053 = -735492997;    int cVsYEunWjFXHJAHkghG78671192 = -459922867;    int cVsYEunWjFXHJAHkghG95765912 = -365697812;    int cVsYEunWjFXHJAHkghG19398715 = -138555902;    int cVsYEunWjFXHJAHkghG11904121 = -975451566;    int cVsYEunWjFXHJAHkghG48480621 = -43282138;    int cVsYEunWjFXHJAHkghG66754757 = -454517387;    int cVsYEunWjFXHJAHkghG4118112 = -398109598;    int cVsYEunWjFXHJAHkghG66941672 = -105123923;    int cVsYEunWjFXHJAHkghG46154228 = -430795966;    int cVsYEunWjFXHJAHkghG66798509 = -169038212;    int cVsYEunWjFXHJAHkghG8561931 = -166812454;    int cVsYEunWjFXHJAHkghG20841449 = -6843518;    int cVsYEunWjFXHJAHkghG90787486 = -283254079;    int cVsYEunWjFXHJAHkghG15040270 = -201456364;    int cVsYEunWjFXHJAHkghG816385 = -550409506;    int cVsYEunWjFXHJAHkghG54406094 = -419553930;    int cVsYEunWjFXHJAHkghG49006333 = -25520780;    int cVsYEunWjFXHJAHkghG54700832 = -133896729;    int cVsYEunWjFXHJAHkghG78120425 = -289494273;    int cVsYEunWjFXHJAHkghG32283897 = -463924395;    int cVsYEunWjFXHJAHkghG53005982 = -870349193;    int cVsYEunWjFXHJAHkghG94067401 = -967384180;    int cVsYEunWjFXHJAHkghG88822532 = -157538284;    int cVsYEunWjFXHJAHkghG9119946 = -368958375;    int cVsYEunWjFXHJAHkghG87039603 = 98745481;    int cVsYEunWjFXHJAHkghG49710258 = -221618759;    int cVsYEunWjFXHJAHkghG18100991 = -484325907;    int cVsYEunWjFXHJAHkghG32320123 = -436807701;    int cVsYEunWjFXHJAHkghG16311995 = -24188757;    int cVsYEunWjFXHJAHkghG8331384 = -549579322;    int cVsYEunWjFXHJAHkghG88173278 = -508323391;    int cVsYEunWjFXHJAHkghG68608125 = -323781818;    int cVsYEunWjFXHJAHkghG35169409 = -745728932;    int cVsYEunWjFXHJAHkghG56639564 = -768186464;    int cVsYEunWjFXHJAHkghG71138320 = -965111076;    int cVsYEunWjFXHJAHkghG53936906 = -997418689;    int cVsYEunWjFXHJAHkghG96961466 = -806698745;    int cVsYEunWjFXHJAHkghG63495694 = -109249781;    int cVsYEunWjFXHJAHkghG51135948 = -65894689;    int cVsYEunWjFXHJAHkghG19032039 = -739937044;    int cVsYEunWjFXHJAHkghG31567276 = -173088469;    int cVsYEunWjFXHJAHkghG29468893 = -485035025;    int cVsYEunWjFXHJAHkghG85207933 = -659427414;    int cVsYEunWjFXHJAHkghG72166106 = -97796360;    int cVsYEunWjFXHJAHkghG63999897 = -881307724;    int cVsYEunWjFXHJAHkghG34769961 = -376227698;    int cVsYEunWjFXHJAHkghG91811757 = -763236256;    int cVsYEunWjFXHJAHkghG22215050 = -273600701;    int cVsYEunWjFXHJAHkghG49111155 = -873569067;    int cVsYEunWjFXHJAHkghG44418979 = -806285064;    int cVsYEunWjFXHJAHkghG35099968 = -217017064;    int cVsYEunWjFXHJAHkghG58282194 = -998871897;    int cVsYEunWjFXHJAHkghG40440757 = -89269759;    int cVsYEunWjFXHJAHkghG52462443 = -507125978;    int cVsYEunWjFXHJAHkghG99079070 = -865143805;    int cVsYEunWjFXHJAHkghG84603790 = -492538687;    int cVsYEunWjFXHJAHkghG6943380 = -108159529;    int cVsYEunWjFXHJAHkghG10278770 = -769597527;    int cVsYEunWjFXHJAHkghG24864518 = -974197048;    int cVsYEunWjFXHJAHkghG98770363 = -821663379;    int cVsYEunWjFXHJAHkghG48653766 = -970191480;    int cVsYEunWjFXHJAHkghG71797988 = -961301897;    int cVsYEunWjFXHJAHkghG50629677 = 19064833;    int cVsYEunWjFXHJAHkghG37822845 = -881216645;    int cVsYEunWjFXHJAHkghG78625230 = -660714822;    int cVsYEunWjFXHJAHkghG39953806 = -843030636;    int cVsYEunWjFXHJAHkghG85672040 = -261114586;    int cVsYEunWjFXHJAHkghG34147922 = -515067615;    int cVsYEunWjFXHJAHkghG43901950 = -236345289;    int cVsYEunWjFXHJAHkghG46879479 = -552990817;    int cVsYEunWjFXHJAHkghG57444628 = -612855186;    int cVsYEunWjFXHJAHkghG85510639 = -916270999;    int cVsYEunWjFXHJAHkghG3564885 = 31997960;    int cVsYEunWjFXHJAHkghG59088386 = -549557230;    int cVsYEunWjFXHJAHkghG716622 = -190835927;    int cVsYEunWjFXHJAHkghG23537090 = -285314168;    int cVsYEunWjFXHJAHkghG8859469 = -207956767;    int cVsYEunWjFXHJAHkghG16656427 = 40258076;    int cVsYEunWjFXHJAHkghG45120049 = -487650652;    int cVsYEunWjFXHJAHkghG52269642 = -525026821;    int cVsYEunWjFXHJAHkghG57898500 = -458382504;    int cVsYEunWjFXHJAHkghG95885941 = -110725207;    int cVsYEunWjFXHJAHkghG83208968 = -563238635;    int cVsYEunWjFXHJAHkghG71893016 = -217903693;    int cVsYEunWjFXHJAHkghG73231415 = -232562258;    int cVsYEunWjFXHJAHkghG29891085 = -509451494;    int cVsYEunWjFXHJAHkghG28167369 = -134512060;    int cVsYEunWjFXHJAHkghG82706965 = -138602954;    int cVsYEunWjFXHJAHkghG57560493 = -903042660;    int cVsYEunWjFXHJAHkghG86534529 = -372572389;    int cVsYEunWjFXHJAHkghG46993526 = -789259161;    int cVsYEunWjFXHJAHkghG86682697 = 62898781;    int cVsYEunWjFXHJAHkghG38631176 = -135052734;    int cVsYEunWjFXHJAHkghG52365584 = -244231311;    int cVsYEunWjFXHJAHkghG70378273 = -769745564;    int cVsYEunWjFXHJAHkghG59769287 = -211786572;    int cVsYEunWjFXHJAHkghG78839216 = -404099859;    int cVsYEunWjFXHJAHkghG47385088 = 28949627;     cVsYEunWjFXHJAHkghG84746340 = cVsYEunWjFXHJAHkghG52085053;     cVsYEunWjFXHJAHkghG52085053 = cVsYEunWjFXHJAHkghG78671192;     cVsYEunWjFXHJAHkghG78671192 = cVsYEunWjFXHJAHkghG95765912;     cVsYEunWjFXHJAHkghG95765912 = cVsYEunWjFXHJAHkghG19398715;     cVsYEunWjFXHJAHkghG19398715 = cVsYEunWjFXHJAHkghG11904121;     cVsYEunWjFXHJAHkghG11904121 = cVsYEunWjFXHJAHkghG48480621;     cVsYEunWjFXHJAHkghG48480621 = cVsYEunWjFXHJAHkghG66754757;     cVsYEunWjFXHJAHkghG66754757 = cVsYEunWjFXHJAHkghG4118112;     cVsYEunWjFXHJAHkghG4118112 = cVsYEunWjFXHJAHkghG66941672;     cVsYEunWjFXHJAHkghG66941672 = cVsYEunWjFXHJAHkghG46154228;     cVsYEunWjFXHJAHkghG46154228 = cVsYEunWjFXHJAHkghG66798509;     cVsYEunWjFXHJAHkghG66798509 = cVsYEunWjFXHJAHkghG8561931;     cVsYEunWjFXHJAHkghG8561931 = cVsYEunWjFXHJAHkghG20841449;     cVsYEunWjFXHJAHkghG20841449 = cVsYEunWjFXHJAHkghG90787486;     cVsYEunWjFXHJAHkghG90787486 = cVsYEunWjFXHJAHkghG15040270;     cVsYEunWjFXHJAHkghG15040270 = cVsYEunWjFXHJAHkghG816385;     cVsYEunWjFXHJAHkghG816385 = cVsYEunWjFXHJAHkghG54406094;     cVsYEunWjFXHJAHkghG54406094 = cVsYEunWjFXHJAHkghG49006333;     cVsYEunWjFXHJAHkghG49006333 = cVsYEunWjFXHJAHkghG54700832;     cVsYEunWjFXHJAHkghG54700832 = cVsYEunWjFXHJAHkghG78120425;     cVsYEunWjFXHJAHkghG78120425 = cVsYEunWjFXHJAHkghG32283897;     cVsYEunWjFXHJAHkghG32283897 = cVsYEunWjFXHJAHkghG53005982;     cVsYEunWjFXHJAHkghG53005982 = cVsYEunWjFXHJAHkghG94067401;     cVsYEunWjFXHJAHkghG94067401 = cVsYEunWjFXHJAHkghG88822532;     cVsYEunWjFXHJAHkghG88822532 = cVsYEunWjFXHJAHkghG9119946;     cVsYEunWjFXHJAHkghG9119946 = cVsYEunWjFXHJAHkghG87039603;     cVsYEunWjFXHJAHkghG87039603 = cVsYEunWjFXHJAHkghG49710258;     cVsYEunWjFXHJAHkghG49710258 = cVsYEunWjFXHJAHkghG18100991;     cVsYEunWjFXHJAHkghG18100991 = cVsYEunWjFXHJAHkghG32320123;     cVsYEunWjFXHJAHkghG32320123 = cVsYEunWjFXHJAHkghG16311995;     cVsYEunWjFXHJAHkghG16311995 = cVsYEunWjFXHJAHkghG8331384;     cVsYEunWjFXHJAHkghG8331384 = cVsYEunWjFXHJAHkghG88173278;     cVsYEunWjFXHJAHkghG88173278 = cVsYEunWjFXHJAHkghG68608125;     cVsYEunWjFXHJAHkghG68608125 = cVsYEunWjFXHJAHkghG35169409;     cVsYEunWjFXHJAHkghG35169409 = cVsYEunWjFXHJAHkghG56639564;     cVsYEunWjFXHJAHkghG56639564 = cVsYEunWjFXHJAHkghG71138320;     cVsYEunWjFXHJAHkghG71138320 = cVsYEunWjFXHJAHkghG53936906;     cVsYEunWjFXHJAHkghG53936906 = cVsYEunWjFXHJAHkghG96961466;     cVsYEunWjFXHJAHkghG96961466 = cVsYEunWjFXHJAHkghG63495694;     cVsYEunWjFXHJAHkghG63495694 = cVsYEunWjFXHJAHkghG51135948;     cVsYEunWjFXHJAHkghG51135948 = cVsYEunWjFXHJAHkghG19032039;     cVsYEunWjFXHJAHkghG19032039 = cVsYEunWjFXHJAHkghG31567276;     cVsYEunWjFXHJAHkghG31567276 = cVsYEunWjFXHJAHkghG29468893;     cVsYEunWjFXHJAHkghG29468893 = cVsYEunWjFXHJAHkghG85207933;     cVsYEunWjFXHJAHkghG85207933 = cVsYEunWjFXHJAHkghG72166106;     cVsYEunWjFXHJAHkghG72166106 = cVsYEunWjFXHJAHkghG63999897;     cVsYEunWjFXHJAHkghG63999897 = cVsYEunWjFXHJAHkghG34769961;     cVsYEunWjFXHJAHkghG34769961 = cVsYEunWjFXHJAHkghG91811757;     cVsYEunWjFXHJAHkghG91811757 = cVsYEunWjFXHJAHkghG22215050;     cVsYEunWjFXHJAHkghG22215050 = cVsYEunWjFXHJAHkghG49111155;     cVsYEunWjFXHJAHkghG49111155 = cVsYEunWjFXHJAHkghG44418979;     cVsYEunWjFXHJAHkghG44418979 = cVsYEunWjFXHJAHkghG35099968;     cVsYEunWjFXHJAHkghG35099968 = cVsYEunWjFXHJAHkghG58282194;     cVsYEunWjFXHJAHkghG58282194 = cVsYEunWjFXHJAHkghG40440757;     cVsYEunWjFXHJAHkghG40440757 = cVsYEunWjFXHJAHkghG52462443;     cVsYEunWjFXHJAHkghG52462443 = cVsYEunWjFXHJAHkghG99079070;     cVsYEunWjFXHJAHkghG99079070 = cVsYEunWjFXHJAHkghG84603790;     cVsYEunWjFXHJAHkghG84603790 = cVsYEunWjFXHJAHkghG6943380;     cVsYEunWjFXHJAHkghG6943380 = cVsYEunWjFXHJAHkghG10278770;     cVsYEunWjFXHJAHkghG10278770 = cVsYEunWjFXHJAHkghG24864518;     cVsYEunWjFXHJAHkghG24864518 = cVsYEunWjFXHJAHkghG98770363;     cVsYEunWjFXHJAHkghG98770363 = cVsYEunWjFXHJAHkghG48653766;     cVsYEunWjFXHJAHkghG48653766 = cVsYEunWjFXHJAHkghG71797988;     cVsYEunWjFXHJAHkghG71797988 = cVsYEunWjFXHJAHkghG50629677;     cVsYEunWjFXHJAHkghG50629677 = cVsYEunWjFXHJAHkghG37822845;     cVsYEunWjFXHJAHkghG37822845 = cVsYEunWjFXHJAHkghG78625230;     cVsYEunWjFXHJAHkghG78625230 = cVsYEunWjFXHJAHkghG39953806;     cVsYEunWjFXHJAHkghG39953806 = cVsYEunWjFXHJAHkghG85672040;     cVsYEunWjFXHJAHkghG85672040 = cVsYEunWjFXHJAHkghG34147922;     cVsYEunWjFXHJAHkghG34147922 = cVsYEunWjFXHJAHkghG43901950;     cVsYEunWjFXHJAHkghG43901950 = cVsYEunWjFXHJAHkghG46879479;     cVsYEunWjFXHJAHkghG46879479 = cVsYEunWjFXHJAHkghG57444628;     cVsYEunWjFXHJAHkghG57444628 = cVsYEunWjFXHJAHkghG85510639;     cVsYEunWjFXHJAHkghG85510639 = cVsYEunWjFXHJAHkghG3564885;     cVsYEunWjFXHJAHkghG3564885 = cVsYEunWjFXHJAHkghG59088386;     cVsYEunWjFXHJAHkghG59088386 = cVsYEunWjFXHJAHkghG716622;     cVsYEunWjFXHJAHkghG716622 = cVsYEunWjFXHJAHkghG23537090;     cVsYEunWjFXHJAHkghG23537090 = cVsYEunWjFXHJAHkghG8859469;     cVsYEunWjFXHJAHkghG8859469 = cVsYEunWjFXHJAHkghG16656427;     cVsYEunWjFXHJAHkghG16656427 = cVsYEunWjFXHJAHkghG45120049;     cVsYEunWjFXHJAHkghG45120049 = cVsYEunWjFXHJAHkghG52269642;     cVsYEunWjFXHJAHkghG52269642 = cVsYEunWjFXHJAHkghG57898500;     cVsYEunWjFXHJAHkghG57898500 = cVsYEunWjFXHJAHkghG95885941;     cVsYEunWjFXHJAHkghG95885941 = cVsYEunWjFXHJAHkghG83208968;     cVsYEunWjFXHJAHkghG83208968 = cVsYEunWjFXHJAHkghG71893016;     cVsYEunWjFXHJAHkghG71893016 = cVsYEunWjFXHJAHkghG73231415;     cVsYEunWjFXHJAHkghG73231415 = cVsYEunWjFXHJAHkghG29891085;     cVsYEunWjFXHJAHkghG29891085 = cVsYEunWjFXHJAHkghG28167369;     cVsYEunWjFXHJAHkghG28167369 = cVsYEunWjFXHJAHkghG82706965;     cVsYEunWjFXHJAHkghG82706965 = cVsYEunWjFXHJAHkghG57560493;     cVsYEunWjFXHJAHkghG57560493 = cVsYEunWjFXHJAHkghG86534529;     cVsYEunWjFXHJAHkghG86534529 = cVsYEunWjFXHJAHkghG46993526;     cVsYEunWjFXHJAHkghG46993526 = cVsYEunWjFXHJAHkghG86682697;     cVsYEunWjFXHJAHkghG86682697 = cVsYEunWjFXHJAHkghG38631176;     cVsYEunWjFXHJAHkghG38631176 = cVsYEunWjFXHJAHkghG52365584;     cVsYEunWjFXHJAHkghG52365584 = cVsYEunWjFXHJAHkghG70378273;     cVsYEunWjFXHJAHkghG70378273 = cVsYEunWjFXHJAHkghG59769287;     cVsYEunWjFXHJAHkghG59769287 = cVsYEunWjFXHJAHkghG78839216;     cVsYEunWjFXHJAHkghG78839216 = cVsYEunWjFXHJAHkghG47385088;     cVsYEunWjFXHJAHkghG47385088 = cVsYEunWjFXHJAHkghG84746340;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void BwqRFXtQiqiKxeVNPqD24889730() {     int kEETBaMwZhlODcWBlND39400738 = -408577957;    int kEETBaMwZhlODcWBlND99082672 = -215057811;    int kEETBaMwZhlODcWBlND39403839 = -845307481;    int kEETBaMwZhlODcWBlND67200854 = -371800223;    int kEETBaMwZhlODcWBlND93850385 = -910991141;    int kEETBaMwZhlODcWBlND26078518 = -4602402;    int kEETBaMwZhlODcWBlND69581324 = -345174810;    int kEETBaMwZhlODcWBlND95929860 = -955085619;    int kEETBaMwZhlODcWBlND91892522 = -444962969;    int kEETBaMwZhlODcWBlND49573657 = -383925193;    int kEETBaMwZhlODcWBlND24765524 = 43847462;    int kEETBaMwZhlODcWBlND29563223 = -355462301;    int kEETBaMwZhlODcWBlND72379245 = 29647242;    int kEETBaMwZhlODcWBlND13807880 = -718947096;    int kEETBaMwZhlODcWBlND21011560 = -190375711;    int kEETBaMwZhlODcWBlND4807806 = -931615929;    int kEETBaMwZhlODcWBlND648149 = 75990666;    int kEETBaMwZhlODcWBlND22002681 = -483118398;    int kEETBaMwZhlODcWBlND50226934 = -311332328;    int kEETBaMwZhlODcWBlND72335387 = -479262875;    int kEETBaMwZhlODcWBlND12294814 = -857577424;    int kEETBaMwZhlODcWBlND83536486 = -630368503;    int kEETBaMwZhlODcWBlND89475814 = -357092614;    int kEETBaMwZhlODcWBlND95495770 = -666424997;    int kEETBaMwZhlODcWBlND84575149 = -530451736;    int kEETBaMwZhlODcWBlND50360893 = -372667160;    int kEETBaMwZhlODcWBlND89029527 = -456098798;    int kEETBaMwZhlODcWBlND2959258 = -229670620;    int kEETBaMwZhlODcWBlND57998668 = -864570782;    int kEETBaMwZhlODcWBlND26755532 = -727565670;    int kEETBaMwZhlODcWBlND68017523 = -573061283;    int kEETBaMwZhlODcWBlND39322994 = -961075850;    int kEETBaMwZhlODcWBlND55829155 = 35158995;    int kEETBaMwZhlODcWBlND63264018 = -3902627;    int kEETBaMwZhlODcWBlND69673565 = -963592192;    int kEETBaMwZhlODcWBlND43966106 = 83817939;    int kEETBaMwZhlODcWBlND45842808 = -815537696;    int kEETBaMwZhlODcWBlND66914145 = -871347710;    int kEETBaMwZhlODcWBlND47731115 = -88647347;    int kEETBaMwZhlODcWBlND87482088 = -867558380;    int kEETBaMwZhlODcWBlND7095349 = -178444847;    int kEETBaMwZhlODcWBlND55706697 = -247469130;    int kEETBaMwZhlODcWBlND22567459 = -13593787;    int kEETBaMwZhlODcWBlND38463292 = 41285309;    int kEETBaMwZhlODcWBlND45191997 = -791945011;    int kEETBaMwZhlODcWBlND27499708 = -166585975;    int kEETBaMwZhlODcWBlND80473608 = -908365108;    int kEETBaMwZhlODcWBlND58197270 = -353880070;    int kEETBaMwZhlODcWBlND34154524 = -662966445;    int kEETBaMwZhlODcWBlND67056712 = -513619995;    int kEETBaMwZhlODcWBlND24224694 = -530784569;    int kEETBaMwZhlODcWBlND33801129 = -221351047;    int kEETBaMwZhlODcWBlND66827970 = 43067479;    int kEETBaMwZhlODcWBlND15697951 = -894758381;    int kEETBaMwZhlODcWBlND12594917 = -485178440;    int kEETBaMwZhlODcWBlND55864251 = -778209454;    int kEETBaMwZhlODcWBlND9606859 = -857965198;    int kEETBaMwZhlODcWBlND43908069 = -78882484;    int kEETBaMwZhlODcWBlND82625705 = -841348488;    int kEETBaMwZhlODcWBlND43489493 = -438323981;    int kEETBaMwZhlODcWBlND37048991 = -548503605;    int kEETBaMwZhlODcWBlND66622067 = -15504191;    int kEETBaMwZhlODcWBlND37931192 = 9485163;    int kEETBaMwZhlODcWBlND65136990 = -717397300;    int kEETBaMwZhlODcWBlND81556133 = -810863911;    int kEETBaMwZhlODcWBlND85442529 = 4923311;    int kEETBaMwZhlODcWBlND73734067 = -290621297;    int kEETBaMwZhlODcWBlND9115228 = -966450131;    int kEETBaMwZhlODcWBlND44134314 = -755354904;    int kEETBaMwZhlODcWBlND77045453 = -174193650;    int kEETBaMwZhlODcWBlND58964998 = -16078233;    int kEETBaMwZhlODcWBlND33734004 = -52661624;    int kEETBaMwZhlODcWBlND74271566 = -294471051;    int kEETBaMwZhlODcWBlND62744845 = -443773948;    int kEETBaMwZhlODcWBlND65240039 = -200818028;    int kEETBaMwZhlODcWBlND56588116 = -510108294;    int kEETBaMwZhlODcWBlND60969027 = -516774717;    int kEETBaMwZhlODcWBlND51012522 = -298377923;    int kEETBaMwZhlODcWBlND50303774 = -874479986;    int kEETBaMwZhlODcWBlND57075441 = -263865761;    int kEETBaMwZhlODcWBlND69887284 = -464302053;    int kEETBaMwZhlODcWBlND30832257 = -2218728;    int kEETBaMwZhlODcWBlND68804733 = -566704176;    int kEETBaMwZhlODcWBlND90941955 = -250950788;    int kEETBaMwZhlODcWBlND2530839 = -96781101;    int kEETBaMwZhlODcWBlND34216395 = -251710236;    int kEETBaMwZhlODcWBlND72495023 = -904143329;    int kEETBaMwZhlODcWBlND40131204 = -70082624;    int kEETBaMwZhlODcWBlND50669102 = -518724188;    int kEETBaMwZhlODcWBlND13809314 = -85382738;    int kEETBaMwZhlODcWBlND34359248 = -58216864;    int kEETBaMwZhlODcWBlND1934740 = -636655212;    int kEETBaMwZhlODcWBlND84288439 = 70000777;    int kEETBaMwZhlODcWBlND4241623 = -650323366;    int kEETBaMwZhlODcWBlND50433098 = -219054776;    int kEETBaMwZhlODcWBlND40473282 = -62940657;    int kEETBaMwZhlODcWBlND17775505 = -156954293;    int kEETBaMwZhlODcWBlND57430468 = -296196488;    int kEETBaMwZhlODcWBlND56907159 = -147850781;    int kEETBaMwZhlODcWBlND59749467 = -408577957;     kEETBaMwZhlODcWBlND39400738 = kEETBaMwZhlODcWBlND99082672;     kEETBaMwZhlODcWBlND99082672 = kEETBaMwZhlODcWBlND39403839;     kEETBaMwZhlODcWBlND39403839 = kEETBaMwZhlODcWBlND67200854;     kEETBaMwZhlODcWBlND67200854 = kEETBaMwZhlODcWBlND93850385;     kEETBaMwZhlODcWBlND93850385 = kEETBaMwZhlODcWBlND26078518;     kEETBaMwZhlODcWBlND26078518 = kEETBaMwZhlODcWBlND69581324;     kEETBaMwZhlODcWBlND69581324 = kEETBaMwZhlODcWBlND95929860;     kEETBaMwZhlODcWBlND95929860 = kEETBaMwZhlODcWBlND91892522;     kEETBaMwZhlODcWBlND91892522 = kEETBaMwZhlODcWBlND49573657;     kEETBaMwZhlODcWBlND49573657 = kEETBaMwZhlODcWBlND24765524;     kEETBaMwZhlODcWBlND24765524 = kEETBaMwZhlODcWBlND29563223;     kEETBaMwZhlODcWBlND29563223 = kEETBaMwZhlODcWBlND72379245;     kEETBaMwZhlODcWBlND72379245 = kEETBaMwZhlODcWBlND13807880;     kEETBaMwZhlODcWBlND13807880 = kEETBaMwZhlODcWBlND21011560;     kEETBaMwZhlODcWBlND21011560 = kEETBaMwZhlODcWBlND4807806;     kEETBaMwZhlODcWBlND4807806 = kEETBaMwZhlODcWBlND648149;     kEETBaMwZhlODcWBlND648149 = kEETBaMwZhlODcWBlND22002681;     kEETBaMwZhlODcWBlND22002681 = kEETBaMwZhlODcWBlND50226934;     kEETBaMwZhlODcWBlND50226934 = kEETBaMwZhlODcWBlND72335387;     kEETBaMwZhlODcWBlND72335387 = kEETBaMwZhlODcWBlND12294814;     kEETBaMwZhlODcWBlND12294814 = kEETBaMwZhlODcWBlND83536486;     kEETBaMwZhlODcWBlND83536486 = kEETBaMwZhlODcWBlND89475814;     kEETBaMwZhlODcWBlND89475814 = kEETBaMwZhlODcWBlND95495770;     kEETBaMwZhlODcWBlND95495770 = kEETBaMwZhlODcWBlND84575149;     kEETBaMwZhlODcWBlND84575149 = kEETBaMwZhlODcWBlND50360893;     kEETBaMwZhlODcWBlND50360893 = kEETBaMwZhlODcWBlND89029527;     kEETBaMwZhlODcWBlND89029527 = kEETBaMwZhlODcWBlND2959258;     kEETBaMwZhlODcWBlND2959258 = kEETBaMwZhlODcWBlND57998668;     kEETBaMwZhlODcWBlND57998668 = kEETBaMwZhlODcWBlND26755532;     kEETBaMwZhlODcWBlND26755532 = kEETBaMwZhlODcWBlND68017523;     kEETBaMwZhlODcWBlND68017523 = kEETBaMwZhlODcWBlND39322994;     kEETBaMwZhlODcWBlND39322994 = kEETBaMwZhlODcWBlND55829155;     kEETBaMwZhlODcWBlND55829155 = kEETBaMwZhlODcWBlND63264018;     kEETBaMwZhlODcWBlND63264018 = kEETBaMwZhlODcWBlND69673565;     kEETBaMwZhlODcWBlND69673565 = kEETBaMwZhlODcWBlND43966106;     kEETBaMwZhlODcWBlND43966106 = kEETBaMwZhlODcWBlND45842808;     kEETBaMwZhlODcWBlND45842808 = kEETBaMwZhlODcWBlND66914145;     kEETBaMwZhlODcWBlND66914145 = kEETBaMwZhlODcWBlND47731115;     kEETBaMwZhlODcWBlND47731115 = kEETBaMwZhlODcWBlND87482088;     kEETBaMwZhlODcWBlND87482088 = kEETBaMwZhlODcWBlND7095349;     kEETBaMwZhlODcWBlND7095349 = kEETBaMwZhlODcWBlND55706697;     kEETBaMwZhlODcWBlND55706697 = kEETBaMwZhlODcWBlND22567459;     kEETBaMwZhlODcWBlND22567459 = kEETBaMwZhlODcWBlND38463292;     kEETBaMwZhlODcWBlND38463292 = kEETBaMwZhlODcWBlND45191997;     kEETBaMwZhlODcWBlND45191997 = kEETBaMwZhlODcWBlND27499708;     kEETBaMwZhlODcWBlND27499708 = kEETBaMwZhlODcWBlND80473608;     kEETBaMwZhlODcWBlND80473608 = kEETBaMwZhlODcWBlND58197270;     kEETBaMwZhlODcWBlND58197270 = kEETBaMwZhlODcWBlND34154524;     kEETBaMwZhlODcWBlND34154524 = kEETBaMwZhlODcWBlND67056712;     kEETBaMwZhlODcWBlND67056712 = kEETBaMwZhlODcWBlND24224694;     kEETBaMwZhlODcWBlND24224694 = kEETBaMwZhlODcWBlND33801129;     kEETBaMwZhlODcWBlND33801129 = kEETBaMwZhlODcWBlND66827970;     kEETBaMwZhlODcWBlND66827970 = kEETBaMwZhlODcWBlND15697951;     kEETBaMwZhlODcWBlND15697951 = kEETBaMwZhlODcWBlND12594917;     kEETBaMwZhlODcWBlND12594917 = kEETBaMwZhlODcWBlND55864251;     kEETBaMwZhlODcWBlND55864251 = kEETBaMwZhlODcWBlND9606859;     kEETBaMwZhlODcWBlND9606859 = kEETBaMwZhlODcWBlND43908069;     kEETBaMwZhlODcWBlND43908069 = kEETBaMwZhlODcWBlND82625705;     kEETBaMwZhlODcWBlND82625705 = kEETBaMwZhlODcWBlND43489493;     kEETBaMwZhlODcWBlND43489493 = kEETBaMwZhlODcWBlND37048991;     kEETBaMwZhlODcWBlND37048991 = kEETBaMwZhlODcWBlND66622067;     kEETBaMwZhlODcWBlND66622067 = kEETBaMwZhlODcWBlND37931192;     kEETBaMwZhlODcWBlND37931192 = kEETBaMwZhlODcWBlND65136990;     kEETBaMwZhlODcWBlND65136990 = kEETBaMwZhlODcWBlND81556133;     kEETBaMwZhlODcWBlND81556133 = kEETBaMwZhlODcWBlND85442529;     kEETBaMwZhlODcWBlND85442529 = kEETBaMwZhlODcWBlND73734067;     kEETBaMwZhlODcWBlND73734067 = kEETBaMwZhlODcWBlND9115228;     kEETBaMwZhlODcWBlND9115228 = kEETBaMwZhlODcWBlND44134314;     kEETBaMwZhlODcWBlND44134314 = kEETBaMwZhlODcWBlND77045453;     kEETBaMwZhlODcWBlND77045453 = kEETBaMwZhlODcWBlND58964998;     kEETBaMwZhlODcWBlND58964998 = kEETBaMwZhlODcWBlND33734004;     kEETBaMwZhlODcWBlND33734004 = kEETBaMwZhlODcWBlND74271566;     kEETBaMwZhlODcWBlND74271566 = kEETBaMwZhlODcWBlND62744845;     kEETBaMwZhlODcWBlND62744845 = kEETBaMwZhlODcWBlND65240039;     kEETBaMwZhlODcWBlND65240039 = kEETBaMwZhlODcWBlND56588116;     kEETBaMwZhlODcWBlND56588116 = kEETBaMwZhlODcWBlND60969027;     kEETBaMwZhlODcWBlND60969027 = kEETBaMwZhlODcWBlND51012522;     kEETBaMwZhlODcWBlND51012522 = kEETBaMwZhlODcWBlND50303774;     kEETBaMwZhlODcWBlND50303774 = kEETBaMwZhlODcWBlND57075441;     kEETBaMwZhlODcWBlND57075441 = kEETBaMwZhlODcWBlND69887284;     kEETBaMwZhlODcWBlND69887284 = kEETBaMwZhlODcWBlND30832257;     kEETBaMwZhlODcWBlND30832257 = kEETBaMwZhlODcWBlND68804733;     kEETBaMwZhlODcWBlND68804733 = kEETBaMwZhlODcWBlND90941955;     kEETBaMwZhlODcWBlND90941955 = kEETBaMwZhlODcWBlND2530839;     kEETBaMwZhlODcWBlND2530839 = kEETBaMwZhlODcWBlND34216395;     kEETBaMwZhlODcWBlND34216395 = kEETBaMwZhlODcWBlND72495023;     kEETBaMwZhlODcWBlND72495023 = kEETBaMwZhlODcWBlND40131204;     kEETBaMwZhlODcWBlND40131204 = kEETBaMwZhlODcWBlND50669102;     kEETBaMwZhlODcWBlND50669102 = kEETBaMwZhlODcWBlND13809314;     kEETBaMwZhlODcWBlND13809314 = kEETBaMwZhlODcWBlND34359248;     kEETBaMwZhlODcWBlND34359248 = kEETBaMwZhlODcWBlND1934740;     kEETBaMwZhlODcWBlND1934740 = kEETBaMwZhlODcWBlND84288439;     kEETBaMwZhlODcWBlND84288439 = kEETBaMwZhlODcWBlND4241623;     kEETBaMwZhlODcWBlND4241623 = kEETBaMwZhlODcWBlND50433098;     kEETBaMwZhlODcWBlND50433098 = kEETBaMwZhlODcWBlND40473282;     kEETBaMwZhlODcWBlND40473282 = kEETBaMwZhlODcWBlND17775505;     kEETBaMwZhlODcWBlND17775505 = kEETBaMwZhlODcWBlND57430468;     kEETBaMwZhlODcWBlND57430468 = kEETBaMwZhlODcWBlND56907159;     kEETBaMwZhlODcWBlND56907159 = kEETBaMwZhlODcWBlND59749467;     kEETBaMwZhlODcWBlND59749467 = kEETBaMwZhlODcWBlND39400738;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void eyRsFfkPIZJrhuhqMny61534704() {     int NVsVEAbZPFQJCTcbiWh61787855 = -42981920;    int NVsVEAbZPFQJCTcbiWh83430172 = -163600866;    int NVsVEAbZPFQJCTcbiWh68173118 = 15038675;    int NVsVEAbZPFQJCTcbiWh82207542 = -378207755;    int NVsVEAbZPFQJCTcbiWh92024639 = -402048142;    int NVsVEAbZPFQJCTcbiWh40961635 = -965210780;    int NVsVEAbZPFQJCTcbiWh61737063 = -167162116;    int NVsVEAbZPFQJCTcbiWh71563719 = -325682263;    int NVsVEAbZPFQJCTcbiWh89055653 = -329159008;    int NVsVEAbZPFQJCTcbiWh41337242 = -126666526;    int NVsVEAbZPFQJCTcbiWh62307383 = 47223061;    int NVsVEAbZPFQJCTcbiWh85466171 = -606207595;    int NVsVEAbZPFQJCTcbiWh39387426 = -589070078;    int NVsVEAbZPFQJCTcbiWh56422631 = -146655852;    int NVsVEAbZPFQJCTcbiWh57746836 = -917853424;    int NVsVEAbZPFQJCTcbiWh49063718 = -213283471;    int NVsVEAbZPFQJCTcbiWh50471500 = -201289154;    int NVsVEAbZPFQJCTcbiWh27979098 = -934861089;    int NVsVEAbZPFQJCTcbiWh91508564 = -446434453;    int NVsVEAbZPFQJCTcbiWh50851671 = -731897328;    int NVsVEAbZPFQJCTcbiWh13177921 = -849064732;    int NVsVEAbZPFQJCTcbiWh47351704 = -35134817;    int NVsVEAbZPFQJCTcbiWh92769137 = -533173206;    int NVsVEAbZPFQJCTcbiWh21995558 = -130417854;    int NVsVEAbZPFQJCTcbiWh20115396 = -152010860;    int NVsVEAbZPFQJCTcbiWh38663888 = -816561384;    int NVsVEAbZPFQJCTcbiWh36118948 = -213685290;    int NVsVEAbZPFQJCTcbiWh8870708 = -18125073;    int NVsVEAbZPFQJCTcbiWh64891229 = -108827901;    int NVsVEAbZPFQJCTcbiWh35912712 = -647861536;    int NVsVEAbZPFQJCTcbiWh12308329 = -654377435;    int NVsVEAbZPFQJCTcbiWh96864184 = -513147205;    int NVsVEAbZPFQJCTcbiWh36867826 = -494184500;    int NVsVEAbZPFQJCTcbiWh22652706 = -328029477;    int NVsVEAbZPFQJCTcbiWh45902930 = 72651386;    int NVsVEAbZPFQJCTcbiWh85658975 = -231577438;    int NVsVEAbZPFQJCTcbiWh39282520 = -548485647;    int NVsVEAbZPFQJCTcbiWh20540246 = -738973182;    int NVsVEAbZPFQJCTcbiWh96039246 = -489693379;    int NVsVEAbZPFQJCTcbiWh7667804 = 96217590;    int NVsVEAbZPFQJCTcbiWh35852719 = -681622513;    int NVsVEAbZPFQJCTcbiWh44215089 = -5377821;    int NVsVEAbZPFQJCTcbiWh28117651 = 98875629;    int NVsVEAbZPFQJCTcbiWh37907412 = 43921660;    int NVsVEAbZPFQJCTcbiWh13175264 = -601088489;    int NVsVEAbZPFQJCTcbiWh35599990 = -348815070;    int NVsVEAbZPFQJCTcbiWh92771005 = -386775360;    int NVsVEAbZPFQJCTcbiWh2795945 = -110415061;    int NVsVEAbZPFQJCTcbiWh28614429 = -612683143;    int NVsVEAbZPFQJCTcbiWh64140458 = -655640254;    int NVsVEAbZPFQJCTcbiWh33093911 = -885860846;    int NVsVEAbZPFQJCTcbiWh7652386 = -652170329;    int NVsVEAbZPFQJCTcbiWh45142374 = -728843751;    int NVsVEAbZPFQJCTcbiWh75984496 = -70439190;    int NVsVEAbZPFQJCTcbiWh48356784 = -625882555;    int NVsVEAbZPFQJCTcbiWh14436151 = 92152896;    int NVsVEAbZPFQJCTcbiWh90661035 = -630427660;    int NVsVEAbZPFQJCTcbiWh46177560 = -854543471;    int NVsVEAbZPFQJCTcbiWh62092147 = -126196895;    int NVsVEAbZPFQJCTcbiWh53360752 = -585486759;    int NVsVEAbZPFQJCTcbiWh4842688 = -651525490;    int NVsVEAbZPFQJCTcbiWh52866355 = -49037044;    int NVsVEAbZPFQJCTcbiWh6672491 = -116854363;    int NVsVEAbZPFQJCTcbiWh53142942 = -681297472;    int NVsVEAbZPFQJCTcbiWh29028913 = -472289092;    int NVsVEAbZPFQJCTcbiWh65443198 = -439629735;    int NVsVEAbZPFQJCTcbiWh48598346 = -12023095;    int NVsVEAbZPFQJCTcbiWh16734721 = -161040601;    int NVsVEAbZPFQJCTcbiWh10519702 = -119307239;    int NVsVEAbZPFQJCTcbiWh72087861 = -586275987;    int NVsVEAbZPFQJCTcbiWh9781199 = -664797824;    int NVsVEAbZPFQJCTcbiWh29931255 = -462315972;    int NVsVEAbZPFQJCTcbiWh31939851 = -345167710;    int NVsVEAbZPFQJCTcbiWh83840761 = -442652044;    int NVsVEAbZPFQJCTcbiWh14998952 = 49725184;    int NVsVEAbZPFQJCTcbiWh68962832 = -743686911;    int NVsVEAbZPFQJCTcbiWh19234054 = -34010446;    int NVsVEAbZPFQJCTcbiWh54861726 = -477094866;    int NVsVEAbZPFQJCTcbiWh8820295 = -529329366;    int NVsVEAbZPFQJCTcbiWh84515406 = -803195791;    int NVsVEAbZPFQJCTcbiWh45892882 = -329786024;    int NVsVEAbZPFQJCTcbiWh33323003 = -3270230;    int NVsVEAbZPFQJCTcbiWh80256278 = -405441931;    int NVsVEAbZPFQJCTcbiWh750771 = -453187648;    int NVsVEAbZPFQJCTcbiWh2818801 = -762000691;    int NVsVEAbZPFQJCTcbiWh4655943 = 97792894;    int NVsVEAbZPFQJCTcbiWh51721811 = -784303454;    int NVsVEAbZPFQJCTcbiWh60883329 = -323745310;    int NVsVEAbZPFQJCTcbiWh74295921 = -702146923;    int NVsVEAbZPFQJCTcbiWh31466780 = 80498490;    int NVsVEAbZPFQJCTcbiWh94997939 = -601149778;    int NVsVEAbZPFQJCTcbiWh93104960 = -693942177;    int NVsVEAbZPFQJCTcbiWh58448099 = -512776287;    int NVsVEAbZPFQJCTcbiWh42678494 = -904206621;    int NVsVEAbZPFQJCTcbiWh2825116 = -252256920;    int NVsVEAbZPFQJCTcbiWh82986363 = -532585470;    int NVsVEAbZPFQJCTcbiWh37542599 = -888523459;    int NVsVEAbZPFQJCTcbiWh74974709 = -219826899;    int NVsVEAbZPFQJCTcbiWh8878499 = -483789249;    int NVsVEAbZPFQJCTcbiWh47732065 = -42981920;     NVsVEAbZPFQJCTcbiWh61787855 = NVsVEAbZPFQJCTcbiWh83430172;     NVsVEAbZPFQJCTcbiWh83430172 = NVsVEAbZPFQJCTcbiWh68173118;     NVsVEAbZPFQJCTcbiWh68173118 = NVsVEAbZPFQJCTcbiWh82207542;     NVsVEAbZPFQJCTcbiWh82207542 = NVsVEAbZPFQJCTcbiWh92024639;     NVsVEAbZPFQJCTcbiWh92024639 = NVsVEAbZPFQJCTcbiWh40961635;     NVsVEAbZPFQJCTcbiWh40961635 = NVsVEAbZPFQJCTcbiWh61737063;     NVsVEAbZPFQJCTcbiWh61737063 = NVsVEAbZPFQJCTcbiWh71563719;     NVsVEAbZPFQJCTcbiWh71563719 = NVsVEAbZPFQJCTcbiWh89055653;     NVsVEAbZPFQJCTcbiWh89055653 = NVsVEAbZPFQJCTcbiWh41337242;     NVsVEAbZPFQJCTcbiWh41337242 = NVsVEAbZPFQJCTcbiWh62307383;     NVsVEAbZPFQJCTcbiWh62307383 = NVsVEAbZPFQJCTcbiWh85466171;     NVsVEAbZPFQJCTcbiWh85466171 = NVsVEAbZPFQJCTcbiWh39387426;     NVsVEAbZPFQJCTcbiWh39387426 = NVsVEAbZPFQJCTcbiWh56422631;     NVsVEAbZPFQJCTcbiWh56422631 = NVsVEAbZPFQJCTcbiWh57746836;     NVsVEAbZPFQJCTcbiWh57746836 = NVsVEAbZPFQJCTcbiWh49063718;     NVsVEAbZPFQJCTcbiWh49063718 = NVsVEAbZPFQJCTcbiWh50471500;     NVsVEAbZPFQJCTcbiWh50471500 = NVsVEAbZPFQJCTcbiWh27979098;     NVsVEAbZPFQJCTcbiWh27979098 = NVsVEAbZPFQJCTcbiWh91508564;     NVsVEAbZPFQJCTcbiWh91508564 = NVsVEAbZPFQJCTcbiWh50851671;     NVsVEAbZPFQJCTcbiWh50851671 = NVsVEAbZPFQJCTcbiWh13177921;     NVsVEAbZPFQJCTcbiWh13177921 = NVsVEAbZPFQJCTcbiWh47351704;     NVsVEAbZPFQJCTcbiWh47351704 = NVsVEAbZPFQJCTcbiWh92769137;     NVsVEAbZPFQJCTcbiWh92769137 = NVsVEAbZPFQJCTcbiWh21995558;     NVsVEAbZPFQJCTcbiWh21995558 = NVsVEAbZPFQJCTcbiWh20115396;     NVsVEAbZPFQJCTcbiWh20115396 = NVsVEAbZPFQJCTcbiWh38663888;     NVsVEAbZPFQJCTcbiWh38663888 = NVsVEAbZPFQJCTcbiWh36118948;     NVsVEAbZPFQJCTcbiWh36118948 = NVsVEAbZPFQJCTcbiWh8870708;     NVsVEAbZPFQJCTcbiWh8870708 = NVsVEAbZPFQJCTcbiWh64891229;     NVsVEAbZPFQJCTcbiWh64891229 = NVsVEAbZPFQJCTcbiWh35912712;     NVsVEAbZPFQJCTcbiWh35912712 = NVsVEAbZPFQJCTcbiWh12308329;     NVsVEAbZPFQJCTcbiWh12308329 = NVsVEAbZPFQJCTcbiWh96864184;     NVsVEAbZPFQJCTcbiWh96864184 = NVsVEAbZPFQJCTcbiWh36867826;     NVsVEAbZPFQJCTcbiWh36867826 = NVsVEAbZPFQJCTcbiWh22652706;     NVsVEAbZPFQJCTcbiWh22652706 = NVsVEAbZPFQJCTcbiWh45902930;     NVsVEAbZPFQJCTcbiWh45902930 = NVsVEAbZPFQJCTcbiWh85658975;     NVsVEAbZPFQJCTcbiWh85658975 = NVsVEAbZPFQJCTcbiWh39282520;     NVsVEAbZPFQJCTcbiWh39282520 = NVsVEAbZPFQJCTcbiWh20540246;     NVsVEAbZPFQJCTcbiWh20540246 = NVsVEAbZPFQJCTcbiWh96039246;     NVsVEAbZPFQJCTcbiWh96039246 = NVsVEAbZPFQJCTcbiWh7667804;     NVsVEAbZPFQJCTcbiWh7667804 = NVsVEAbZPFQJCTcbiWh35852719;     NVsVEAbZPFQJCTcbiWh35852719 = NVsVEAbZPFQJCTcbiWh44215089;     NVsVEAbZPFQJCTcbiWh44215089 = NVsVEAbZPFQJCTcbiWh28117651;     NVsVEAbZPFQJCTcbiWh28117651 = NVsVEAbZPFQJCTcbiWh37907412;     NVsVEAbZPFQJCTcbiWh37907412 = NVsVEAbZPFQJCTcbiWh13175264;     NVsVEAbZPFQJCTcbiWh13175264 = NVsVEAbZPFQJCTcbiWh35599990;     NVsVEAbZPFQJCTcbiWh35599990 = NVsVEAbZPFQJCTcbiWh92771005;     NVsVEAbZPFQJCTcbiWh92771005 = NVsVEAbZPFQJCTcbiWh2795945;     NVsVEAbZPFQJCTcbiWh2795945 = NVsVEAbZPFQJCTcbiWh28614429;     NVsVEAbZPFQJCTcbiWh28614429 = NVsVEAbZPFQJCTcbiWh64140458;     NVsVEAbZPFQJCTcbiWh64140458 = NVsVEAbZPFQJCTcbiWh33093911;     NVsVEAbZPFQJCTcbiWh33093911 = NVsVEAbZPFQJCTcbiWh7652386;     NVsVEAbZPFQJCTcbiWh7652386 = NVsVEAbZPFQJCTcbiWh45142374;     NVsVEAbZPFQJCTcbiWh45142374 = NVsVEAbZPFQJCTcbiWh75984496;     NVsVEAbZPFQJCTcbiWh75984496 = NVsVEAbZPFQJCTcbiWh48356784;     NVsVEAbZPFQJCTcbiWh48356784 = NVsVEAbZPFQJCTcbiWh14436151;     NVsVEAbZPFQJCTcbiWh14436151 = NVsVEAbZPFQJCTcbiWh90661035;     NVsVEAbZPFQJCTcbiWh90661035 = NVsVEAbZPFQJCTcbiWh46177560;     NVsVEAbZPFQJCTcbiWh46177560 = NVsVEAbZPFQJCTcbiWh62092147;     NVsVEAbZPFQJCTcbiWh62092147 = NVsVEAbZPFQJCTcbiWh53360752;     NVsVEAbZPFQJCTcbiWh53360752 = NVsVEAbZPFQJCTcbiWh4842688;     NVsVEAbZPFQJCTcbiWh4842688 = NVsVEAbZPFQJCTcbiWh52866355;     NVsVEAbZPFQJCTcbiWh52866355 = NVsVEAbZPFQJCTcbiWh6672491;     NVsVEAbZPFQJCTcbiWh6672491 = NVsVEAbZPFQJCTcbiWh53142942;     NVsVEAbZPFQJCTcbiWh53142942 = NVsVEAbZPFQJCTcbiWh29028913;     NVsVEAbZPFQJCTcbiWh29028913 = NVsVEAbZPFQJCTcbiWh65443198;     NVsVEAbZPFQJCTcbiWh65443198 = NVsVEAbZPFQJCTcbiWh48598346;     NVsVEAbZPFQJCTcbiWh48598346 = NVsVEAbZPFQJCTcbiWh16734721;     NVsVEAbZPFQJCTcbiWh16734721 = NVsVEAbZPFQJCTcbiWh10519702;     NVsVEAbZPFQJCTcbiWh10519702 = NVsVEAbZPFQJCTcbiWh72087861;     NVsVEAbZPFQJCTcbiWh72087861 = NVsVEAbZPFQJCTcbiWh9781199;     NVsVEAbZPFQJCTcbiWh9781199 = NVsVEAbZPFQJCTcbiWh29931255;     NVsVEAbZPFQJCTcbiWh29931255 = NVsVEAbZPFQJCTcbiWh31939851;     NVsVEAbZPFQJCTcbiWh31939851 = NVsVEAbZPFQJCTcbiWh83840761;     NVsVEAbZPFQJCTcbiWh83840761 = NVsVEAbZPFQJCTcbiWh14998952;     NVsVEAbZPFQJCTcbiWh14998952 = NVsVEAbZPFQJCTcbiWh68962832;     NVsVEAbZPFQJCTcbiWh68962832 = NVsVEAbZPFQJCTcbiWh19234054;     NVsVEAbZPFQJCTcbiWh19234054 = NVsVEAbZPFQJCTcbiWh54861726;     NVsVEAbZPFQJCTcbiWh54861726 = NVsVEAbZPFQJCTcbiWh8820295;     NVsVEAbZPFQJCTcbiWh8820295 = NVsVEAbZPFQJCTcbiWh84515406;     NVsVEAbZPFQJCTcbiWh84515406 = NVsVEAbZPFQJCTcbiWh45892882;     NVsVEAbZPFQJCTcbiWh45892882 = NVsVEAbZPFQJCTcbiWh33323003;     NVsVEAbZPFQJCTcbiWh33323003 = NVsVEAbZPFQJCTcbiWh80256278;     NVsVEAbZPFQJCTcbiWh80256278 = NVsVEAbZPFQJCTcbiWh750771;     NVsVEAbZPFQJCTcbiWh750771 = NVsVEAbZPFQJCTcbiWh2818801;     NVsVEAbZPFQJCTcbiWh2818801 = NVsVEAbZPFQJCTcbiWh4655943;     NVsVEAbZPFQJCTcbiWh4655943 = NVsVEAbZPFQJCTcbiWh51721811;     NVsVEAbZPFQJCTcbiWh51721811 = NVsVEAbZPFQJCTcbiWh60883329;     NVsVEAbZPFQJCTcbiWh60883329 = NVsVEAbZPFQJCTcbiWh74295921;     NVsVEAbZPFQJCTcbiWh74295921 = NVsVEAbZPFQJCTcbiWh31466780;     NVsVEAbZPFQJCTcbiWh31466780 = NVsVEAbZPFQJCTcbiWh94997939;     NVsVEAbZPFQJCTcbiWh94997939 = NVsVEAbZPFQJCTcbiWh93104960;     NVsVEAbZPFQJCTcbiWh93104960 = NVsVEAbZPFQJCTcbiWh58448099;     NVsVEAbZPFQJCTcbiWh58448099 = NVsVEAbZPFQJCTcbiWh42678494;     NVsVEAbZPFQJCTcbiWh42678494 = NVsVEAbZPFQJCTcbiWh2825116;     NVsVEAbZPFQJCTcbiWh2825116 = NVsVEAbZPFQJCTcbiWh82986363;     NVsVEAbZPFQJCTcbiWh82986363 = NVsVEAbZPFQJCTcbiWh37542599;     NVsVEAbZPFQJCTcbiWh37542599 = NVsVEAbZPFQJCTcbiWh74974709;     NVsVEAbZPFQJCTcbiWh74974709 = NVsVEAbZPFQJCTcbiWh8878499;     NVsVEAbZPFQJCTcbiWh8878499 = NVsVEAbZPFQJCTcbiWh47732065;     NVsVEAbZPFQJCTcbiWh47732065 = NVsVEAbZPFQJCTcbiWh61787855;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void dGpQWmtaidvSgRJOYsB67863251() {     int WMdVMSziyXhxfADXxln16442253 = -480509504;    int WMdVMSziyXhxfADXxln30427792 = -743165680;    int WMdVMSziyXhxfADXxln28905764 = -370345938;    int WMdVMSziyXhxfADXxln53642484 = -384310166;    int WMdVMSziyXhxfADXxln66476310 = -74483381;    int WMdVMSziyXhxfADXxln55136032 = 5638384;    int WMdVMSziyXhxfADXxln82837767 = -469054789;    int WMdVMSziyXhxfADXxln738823 = -826250496;    int WMdVMSziyXhxfADXxln76830064 = -376012379;    int WMdVMSziyXhxfADXxln23969227 = -405467795;    int WMdVMSziyXhxfADXxln40918678 = -578133511;    int WMdVMSziyXhxfADXxln48230885 = -792631683;    int WMdVMSziyXhxfADXxln3204742 = -392610382;    int WMdVMSziyXhxfADXxln49389062 = -858759431;    int WMdVMSziyXhxfADXxln87970909 = -824975055;    int WMdVMSziyXhxfADXxln38831254 = -943443035;    int WMdVMSziyXhxfADXxln50303264 = -674888982;    int WMdVMSziyXhxfADXxln95575684 = -998425556;    int WMdVMSziyXhxfADXxln92729165 = -732246001;    int WMdVMSziyXhxfADXxln68486226 = 22736525;    int WMdVMSziyXhxfADXxln47352308 = -317147883;    int WMdVMSziyXhxfADXxln98604293 = -201578924;    int WMdVMSziyXhxfADXxln29238969 = -19916627;    int WMdVMSziyXhxfADXxln23423927 = -929458671;    int WMdVMSziyXhxfADXxln15868012 = -524924312;    int WMdVMSziyXhxfADXxln79904834 = -820270169;    int WMdVMSziyXhxfADXxln38108872 = -768529569;    int WMdVMSziyXhxfADXxln62119708 = -26176934;    int WMdVMSziyXhxfADXxln4788906 = -489072777;    int WMdVMSziyXhxfADXxln30348121 = -938619504;    int WMdVMSziyXhxfADXxln64013857 = -103249960;    int WMdVMSziyXhxfADXxln27855795 = -924643733;    int WMdVMSziyXhxfADXxln4523703 = 49297886;    int WMdVMSziyXhxfADXxln17308598 = -8150287;    int WMdVMSziyXhxfADXxln80407086 = -145211874;    int WMdVMSziyXhxfADXxln72985517 = -479573034;    int WMdVMSziyXhxfADXxln13987008 = -398912268;    int WMdVMSziyXhxfADXxln33517485 = -612902203;    int WMdVMSziyXhxfADXxln46808895 = -871641980;    int WMdVMSziyXhxfADXxln31654198 = -662091009;    int WMdVMSziyXhxfADXxln91812120 = -794172672;    int WMdVMSziyXhxfADXxln80889747 = -612909908;    int WMdVMSziyXhxfADXxln19117834 = -841629689;    int WMdVMSziyXhxfADXxln46901811 = -529758006;    int WMdVMSziyXhxfADXxln73159327 = -733606087;    int WMdVMSziyXhxfADXxln90933591 = -417604685;    int WMdVMSziyXhxfADXxln9244718 = -413832744;    int WMdVMSziyXhxfADXxln26223254 = -88067433;    int WMdVMSziyXhxfADXxln70957196 = -512413332;    int WMdVMSziyXhxfADXxln8982121 = -895659548;    int WMdVMSziyXhxfADXxln8207451 = -543076348;    int WMdVMSziyXhxfADXxln97034535 = -67236312;    int WMdVMSziyXhxfADXxln76870377 = -468759209;    int WMdVMSziyXhxfADXxln33400254 = 33674325;    int WMdVMSziyXhxfADXxln20510944 = 78208764;    int WMdVMSziyXhxfADXxln17837959 = -178930580;    int WMdVMSziyXhxfADXxln1188824 = -623249053;    int WMdVMSziyXhxfADXxln5481838 = -440887268;    int WMdVMSziyXhxfADXxln37774472 = -859385854;    int WMdVMSziyXhxfADXxln86571475 = -254213213;    int WMdVMSziyXhxfADXxln17027160 = -225832047;    int WMdVMSziyXhxfADXxln20718059 = -342877856;    int WMdVMSziyXhxfADXxln95949916 = -237177720;    int WMdVMSziyXhxfADXxln46481943 = -437392875;    int WMdVMSziyXhxfADXxln59955370 = -202217835;    int WMdVMSziyXhxfADXxln13062883 = -653489779;    int WMdVMSziyXhxfADXxln43707183 = -741929570;    int WMdVMSziyXhxfADXxln85896143 = -284460096;    int WMdVMSziyXhxfADXxln68981976 = -613547557;    int WMdVMSziyXhxfADXxln14985393 = -245402022;    int WMdVMSziyXhxfADXxln24844246 = -444530768;    int WMdVMSziyXhxfADXxln16785779 = 38013220;    int WMdVMSziyXhxfADXxln48766789 = -26783576;    int WMdVMSziyXhxfADXxln61074967 = 29845008;    int WMdVMSziyXhxfADXxln76674106 = -183090804;    int WMdVMSziyXhxfADXxln66462561 = -704237976;    int WMdVMSziyXhxfADXxln79486460 = -359949236;    int WMdVMSziyXhxfADXxln82337158 = -490158621;    int WMdVMSziyXhxfADXxln50264600 = -95852584;    int WMdVMSziyXhxfADXxln24934421 = -7319628;    int WMdVMSziyXhxfADXxln70660117 = -306437425;    int WMdVMSziyXhxfADXxln11885618 = -580462136;    int WMdVMSziyXhxfADXxln91162512 = -513763603;    int WMdVMSziyXhxfADXxln95806785 = -593413229;    int WMdVMSziyXhxfADXxln22140671 = -295543157;    int WMdVMSziyXhxfADXxln66979322 = 63986351;    int WMdVMSziyXhxfADXxln50985418 = -355884525;    int WMdVMSziyXhxfADXxln71123448 = -984376440;    int WMdVMSziyXhxfADXxln96797654 = 13640949;    int WMdVMSziyXhxfADXxln62569127 = -966281294;    int WMdVMSziyXhxfADXxln71796694 = -856323981;    int WMdVMSziyXhxfADXxln8505171 = -958025000;    int WMdVMSziyXhxfADXxln95743012 = -753516349;    int WMdVMSziyXhxfADXxln60237419 = -517428768;    int WMdVMSziyXhxfADXxln14627038 = -336258962;    int WMdVMSziyXhxfADXxln71094061 = -351294816;    int WMdVMSziyXhxfADXxln84939830 = -275732189;    int WMdVMSziyXhxfADXxln72635890 = -304236815;    int WMdVMSziyXhxfADXxln86946441 = -227540171;    int WMdVMSziyXhxfADXxln60096444 = -480509504;     WMdVMSziyXhxfADXxln16442253 = WMdVMSziyXhxfADXxln30427792;     WMdVMSziyXhxfADXxln30427792 = WMdVMSziyXhxfADXxln28905764;     WMdVMSziyXhxfADXxln28905764 = WMdVMSziyXhxfADXxln53642484;     WMdVMSziyXhxfADXxln53642484 = WMdVMSziyXhxfADXxln66476310;     WMdVMSziyXhxfADXxln66476310 = WMdVMSziyXhxfADXxln55136032;     WMdVMSziyXhxfADXxln55136032 = WMdVMSziyXhxfADXxln82837767;     WMdVMSziyXhxfADXxln82837767 = WMdVMSziyXhxfADXxln738823;     WMdVMSziyXhxfADXxln738823 = WMdVMSziyXhxfADXxln76830064;     WMdVMSziyXhxfADXxln76830064 = WMdVMSziyXhxfADXxln23969227;     WMdVMSziyXhxfADXxln23969227 = WMdVMSziyXhxfADXxln40918678;     WMdVMSziyXhxfADXxln40918678 = WMdVMSziyXhxfADXxln48230885;     WMdVMSziyXhxfADXxln48230885 = WMdVMSziyXhxfADXxln3204742;     WMdVMSziyXhxfADXxln3204742 = WMdVMSziyXhxfADXxln49389062;     WMdVMSziyXhxfADXxln49389062 = WMdVMSziyXhxfADXxln87970909;     WMdVMSziyXhxfADXxln87970909 = WMdVMSziyXhxfADXxln38831254;     WMdVMSziyXhxfADXxln38831254 = WMdVMSziyXhxfADXxln50303264;     WMdVMSziyXhxfADXxln50303264 = WMdVMSziyXhxfADXxln95575684;     WMdVMSziyXhxfADXxln95575684 = WMdVMSziyXhxfADXxln92729165;     WMdVMSziyXhxfADXxln92729165 = WMdVMSziyXhxfADXxln68486226;     WMdVMSziyXhxfADXxln68486226 = WMdVMSziyXhxfADXxln47352308;     WMdVMSziyXhxfADXxln47352308 = WMdVMSziyXhxfADXxln98604293;     WMdVMSziyXhxfADXxln98604293 = WMdVMSziyXhxfADXxln29238969;     WMdVMSziyXhxfADXxln29238969 = WMdVMSziyXhxfADXxln23423927;     WMdVMSziyXhxfADXxln23423927 = WMdVMSziyXhxfADXxln15868012;     WMdVMSziyXhxfADXxln15868012 = WMdVMSziyXhxfADXxln79904834;     WMdVMSziyXhxfADXxln79904834 = WMdVMSziyXhxfADXxln38108872;     WMdVMSziyXhxfADXxln38108872 = WMdVMSziyXhxfADXxln62119708;     WMdVMSziyXhxfADXxln62119708 = WMdVMSziyXhxfADXxln4788906;     WMdVMSziyXhxfADXxln4788906 = WMdVMSziyXhxfADXxln30348121;     WMdVMSziyXhxfADXxln30348121 = WMdVMSziyXhxfADXxln64013857;     WMdVMSziyXhxfADXxln64013857 = WMdVMSziyXhxfADXxln27855795;     WMdVMSziyXhxfADXxln27855795 = WMdVMSziyXhxfADXxln4523703;     WMdVMSziyXhxfADXxln4523703 = WMdVMSziyXhxfADXxln17308598;     WMdVMSziyXhxfADXxln17308598 = WMdVMSziyXhxfADXxln80407086;     WMdVMSziyXhxfADXxln80407086 = WMdVMSziyXhxfADXxln72985517;     WMdVMSziyXhxfADXxln72985517 = WMdVMSziyXhxfADXxln13987008;     WMdVMSziyXhxfADXxln13987008 = WMdVMSziyXhxfADXxln33517485;     WMdVMSziyXhxfADXxln33517485 = WMdVMSziyXhxfADXxln46808895;     WMdVMSziyXhxfADXxln46808895 = WMdVMSziyXhxfADXxln31654198;     WMdVMSziyXhxfADXxln31654198 = WMdVMSziyXhxfADXxln91812120;     WMdVMSziyXhxfADXxln91812120 = WMdVMSziyXhxfADXxln80889747;     WMdVMSziyXhxfADXxln80889747 = WMdVMSziyXhxfADXxln19117834;     WMdVMSziyXhxfADXxln19117834 = WMdVMSziyXhxfADXxln46901811;     WMdVMSziyXhxfADXxln46901811 = WMdVMSziyXhxfADXxln73159327;     WMdVMSziyXhxfADXxln73159327 = WMdVMSziyXhxfADXxln90933591;     WMdVMSziyXhxfADXxln90933591 = WMdVMSziyXhxfADXxln9244718;     WMdVMSziyXhxfADXxln9244718 = WMdVMSziyXhxfADXxln26223254;     WMdVMSziyXhxfADXxln26223254 = WMdVMSziyXhxfADXxln70957196;     WMdVMSziyXhxfADXxln70957196 = WMdVMSziyXhxfADXxln8982121;     WMdVMSziyXhxfADXxln8982121 = WMdVMSziyXhxfADXxln8207451;     WMdVMSziyXhxfADXxln8207451 = WMdVMSziyXhxfADXxln97034535;     WMdVMSziyXhxfADXxln97034535 = WMdVMSziyXhxfADXxln76870377;     WMdVMSziyXhxfADXxln76870377 = WMdVMSziyXhxfADXxln33400254;     WMdVMSziyXhxfADXxln33400254 = WMdVMSziyXhxfADXxln20510944;     WMdVMSziyXhxfADXxln20510944 = WMdVMSziyXhxfADXxln17837959;     WMdVMSziyXhxfADXxln17837959 = WMdVMSziyXhxfADXxln1188824;     WMdVMSziyXhxfADXxln1188824 = WMdVMSziyXhxfADXxln5481838;     WMdVMSziyXhxfADXxln5481838 = WMdVMSziyXhxfADXxln37774472;     WMdVMSziyXhxfADXxln37774472 = WMdVMSziyXhxfADXxln86571475;     WMdVMSziyXhxfADXxln86571475 = WMdVMSziyXhxfADXxln17027160;     WMdVMSziyXhxfADXxln17027160 = WMdVMSziyXhxfADXxln20718059;     WMdVMSziyXhxfADXxln20718059 = WMdVMSziyXhxfADXxln95949916;     WMdVMSziyXhxfADXxln95949916 = WMdVMSziyXhxfADXxln46481943;     WMdVMSziyXhxfADXxln46481943 = WMdVMSziyXhxfADXxln59955370;     WMdVMSziyXhxfADXxln59955370 = WMdVMSziyXhxfADXxln13062883;     WMdVMSziyXhxfADXxln13062883 = WMdVMSziyXhxfADXxln43707183;     WMdVMSziyXhxfADXxln43707183 = WMdVMSziyXhxfADXxln85896143;     WMdVMSziyXhxfADXxln85896143 = WMdVMSziyXhxfADXxln68981976;     WMdVMSziyXhxfADXxln68981976 = WMdVMSziyXhxfADXxln14985393;     WMdVMSziyXhxfADXxln14985393 = WMdVMSziyXhxfADXxln24844246;     WMdVMSziyXhxfADXxln24844246 = WMdVMSziyXhxfADXxln16785779;     WMdVMSziyXhxfADXxln16785779 = WMdVMSziyXhxfADXxln48766789;     WMdVMSziyXhxfADXxln48766789 = WMdVMSziyXhxfADXxln61074967;     WMdVMSziyXhxfADXxln61074967 = WMdVMSziyXhxfADXxln76674106;     WMdVMSziyXhxfADXxln76674106 = WMdVMSziyXhxfADXxln66462561;     WMdVMSziyXhxfADXxln66462561 = WMdVMSziyXhxfADXxln79486460;     WMdVMSziyXhxfADXxln79486460 = WMdVMSziyXhxfADXxln82337158;     WMdVMSziyXhxfADXxln82337158 = WMdVMSziyXhxfADXxln50264600;     WMdVMSziyXhxfADXxln50264600 = WMdVMSziyXhxfADXxln24934421;     WMdVMSziyXhxfADXxln24934421 = WMdVMSziyXhxfADXxln70660117;     WMdVMSziyXhxfADXxln70660117 = WMdVMSziyXhxfADXxln11885618;     WMdVMSziyXhxfADXxln11885618 = WMdVMSziyXhxfADXxln91162512;     WMdVMSziyXhxfADXxln91162512 = WMdVMSziyXhxfADXxln95806785;     WMdVMSziyXhxfADXxln95806785 = WMdVMSziyXhxfADXxln22140671;     WMdVMSziyXhxfADXxln22140671 = WMdVMSziyXhxfADXxln66979322;     WMdVMSziyXhxfADXxln66979322 = WMdVMSziyXhxfADXxln50985418;     WMdVMSziyXhxfADXxln50985418 = WMdVMSziyXhxfADXxln71123448;     WMdVMSziyXhxfADXxln71123448 = WMdVMSziyXhxfADXxln96797654;     WMdVMSziyXhxfADXxln96797654 = WMdVMSziyXhxfADXxln62569127;     WMdVMSziyXhxfADXxln62569127 = WMdVMSziyXhxfADXxln71796694;     WMdVMSziyXhxfADXxln71796694 = WMdVMSziyXhxfADXxln8505171;     WMdVMSziyXhxfADXxln8505171 = WMdVMSziyXhxfADXxln95743012;     WMdVMSziyXhxfADXxln95743012 = WMdVMSziyXhxfADXxln60237419;     WMdVMSziyXhxfADXxln60237419 = WMdVMSziyXhxfADXxln14627038;     WMdVMSziyXhxfADXxln14627038 = WMdVMSziyXhxfADXxln71094061;     WMdVMSziyXhxfADXxln71094061 = WMdVMSziyXhxfADXxln84939830;     WMdVMSziyXhxfADXxln84939830 = WMdVMSziyXhxfADXxln72635890;     WMdVMSziyXhxfADXxln72635890 = WMdVMSziyXhxfADXxln86946441;     WMdVMSziyXhxfADXxln86946441 = WMdVMSziyXhxfADXxln60096444;     WMdVMSziyXhxfADXxln60096444 = WMdVMSziyXhxfADXxln16442253;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void aEBdHbCbTgLwFEKjfdN74191799() {     int wWxrgiXxmwjsWQnvoyh71096650 = -918037088;    int wWxrgiXxmwjsWQnvoyh77425411 = -222730494;    int wWxrgiXxmwjsWQnvoyh89638410 = -755730551;    int wWxrgiXxmwjsWQnvoyh25077425 = -390412577;    int wWxrgiXxmwjsWQnvoyh40927981 = -846918621;    int wWxrgiXxmwjsWQnvoyh69310429 = -123512452;    int wWxrgiXxmwjsWQnvoyh3938471 = -770947461;    int wWxrgiXxmwjsWQnvoyh29913926 = -226818729;    int wWxrgiXxmwjsWQnvoyh64604474 = -422865749;    int wWxrgiXxmwjsWQnvoyh6601213 = -684269065;    int wWxrgiXxmwjsWQnvoyh19529973 = -103490083;    int wWxrgiXxmwjsWQnvoyh10995598 = -979055772;    int wWxrgiXxmwjsWQnvoyh67022056 = -196150687;    int wWxrgiXxmwjsWQnvoyh42355493 = -470863009;    int wWxrgiXxmwjsWQnvoyh18194984 = -732096687;    int wWxrgiXxmwjsWQnvoyh28598790 = -573602599;    int wWxrgiXxmwjsWQnvoyh50135027 = -48488811;    int wWxrgiXxmwjsWQnvoyh63172271 = 38009977;    int wWxrgiXxmwjsWQnvoyh93949766 = 81942452;    int wWxrgiXxmwjsWQnvoyh86120781 = -322629621;    int wWxrgiXxmwjsWQnvoyh81526696 = -885231034;    int wWxrgiXxmwjsWQnvoyh49856882 = -368023032;    int wWxrgiXxmwjsWQnvoyh65708800 = -606660048;    int wWxrgiXxmwjsWQnvoyh24852295 = -628499487;    int wWxrgiXxmwjsWQnvoyh11620628 = -897837764;    int wWxrgiXxmwjsWQnvoyh21145782 = -823978953;    int wWxrgiXxmwjsWQnvoyh40098796 = -223373848;    int wWxrgiXxmwjsWQnvoyh15368708 = -34228794;    int wWxrgiXxmwjsWQnvoyh44686583 = -869317652;    int wWxrgiXxmwjsWQnvoyh24783530 = -129377473;    int wWxrgiXxmwjsWQnvoyh15719387 = -652122486;    int wWxrgiXxmwjsWQnvoyh58847405 = -236140261;    int wWxrgiXxmwjsWQnvoyh72179578 = -507219728;    int wWxrgiXxmwjsWQnvoyh11964491 = -788271097;    int wWxrgiXxmwjsWQnvoyh14911244 = -363075133;    int wWxrgiXxmwjsWQnvoyh60312059 = -727568631;    int wWxrgiXxmwjsWQnvoyh88691495 = -249338888;    int wWxrgiXxmwjsWQnvoyh46494724 = -486831224;    int wWxrgiXxmwjsWQnvoyh97578544 = -153590582;    int wWxrgiXxmwjsWQnvoyh55640593 = -320399608;    int wWxrgiXxmwjsWQnvoyh47771521 = -906722830;    int wWxrgiXxmwjsWQnvoyh17564406 = -120441995;    int wWxrgiXxmwjsWQnvoyh10118017 = -682135007;    int wWxrgiXxmwjsWQnvoyh55896210 = -3437671;    int wWxrgiXxmwjsWQnvoyh33143391 = -866123685;    int wWxrgiXxmwjsWQnvoyh46267193 = -486394300;    int wWxrgiXxmwjsWQnvoyh25718430 = -440890128;    int wWxrgiXxmwjsWQnvoyh49650563 = -65719805;    int wWxrgiXxmwjsWQnvoyh13299963 = -412143521;    int wWxrgiXxmwjsWQnvoyh53823783 = -35678843;    int wWxrgiXxmwjsWQnvoyh83320989 = -200291850;    int wWxrgiXxmwjsWQnvoyh86416685 = -582302295;    int wWxrgiXxmwjsWQnvoyh8598380 = -208674666;    int wWxrgiXxmwjsWQnvoyh90816010 = -962212159;    int wWxrgiXxmwjsWQnvoyh92665103 = -317699917;    int wWxrgiXxmwjsWQnvoyh21239768 = -450014056;    int wWxrgiXxmwjsWQnvoyh11716611 = -616070446;    int wWxrgiXxmwjsWQnvoyh64786115 = -27231065;    int wWxrgiXxmwjsWQnvoyh13456798 = -492574814;    int wWxrgiXxmwjsWQnvoyh19782199 = 77060332;    int wWxrgiXxmwjsWQnvoyh29211633 = -900138605;    int wWxrgiXxmwjsWQnvoyh88569762 = -636718668;    int wWxrgiXxmwjsWQnvoyh85227343 = -357501077;    int wWxrgiXxmwjsWQnvoyh39820945 = -193488277;    int wWxrgiXxmwjsWQnvoyh90881826 = 67853421;    int wWxrgiXxmwjsWQnvoyh60682568 = -867349823;    int wWxrgiXxmwjsWQnvoyh38816020 = -371836045;    int wWxrgiXxmwjsWQnvoyh55057565 = -407879591;    int wWxrgiXxmwjsWQnvoyh27444250 = -7787876;    int wWxrgiXxmwjsWQnvoyh57882924 = 95471943;    int wWxrgiXxmwjsWQnvoyh39907294 = -224263712;    int wWxrgiXxmwjsWQnvoyh3640304 = -561657587;    int wWxrgiXxmwjsWQnvoyh65593727 = -808399442;    int wWxrgiXxmwjsWQnvoyh38309174 = -597657941;    int wWxrgiXxmwjsWQnvoyh38349261 = -415906792;    int wWxrgiXxmwjsWQnvoyh63962291 = -664789040;    int wWxrgiXxmwjsWQnvoyh39738866 = -685888026;    int wWxrgiXxmwjsWQnvoyh9812591 = -503222377;    int wWxrgiXxmwjsWQnvoyh91708904 = -762375803;    int wWxrgiXxmwjsWQnvoyh65353434 = -311443465;    int wWxrgiXxmwjsWQnvoyh95427352 = -283088826;    int wWxrgiXxmwjsWQnvoyh90448232 = -57654043;    int wWxrgiXxmwjsWQnvoyh2068746 = -622085274;    int wWxrgiXxmwjsWQnvoyh90862799 = -733638810;    int wWxrgiXxmwjsWQnvoyh41462540 = -929085623;    int wWxrgiXxmwjsWQnvoyh29302701 = 30179808;    int wWxrgiXxmwjsWQnvoyh50249025 = 72534404;    int wWxrgiXxmwjsWQnvoyh81363567 = -545007570;    int wWxrgiXxmwjsWQnvoyh19299388 = -370571180;    int wWxrgiXxmwjsWQnvoyh93671475 = -913061077;    int wWxrgiXxmwjsWQnvoyh48595448 = -11498185;    int wWxrgiXxmwjsWQnvoyh23905381 = -122107824;    int wWxrgiXxmwjsWQnvoyh33037926 = -994256411;    int wWxrgiXxmwjsWQnvoyh77796345 = -130650915;    int wWxrgiXxmwjsWQnvoyh26428960 = -420261004;    int wWxrgiXxmwjsWQnvoyh59201758 = -170004163;    int wWxrgiXxmwjsWQnvoyh32337062 = -762940918;    int wWxrgiXxmwjsWQnvoyh70297071 = -388646730;    int wWxrgiXxmwjsWQnvoyh65014384 = 28708907;    int wWxrgiXxmwjsWQnvoyh72460822 = -918037088;     wWxrgiXxmwjsWQnvoyh71096650 = wWxrgiXxmwjsWQnvoyh77425411;     wWxrgiXxmwjsWQnvoyh77425411 = wWxrgiXxmwjsWQnvoyh89638410;     wWxrgiXxmwjsWQnvoyh89638410 = wWxrgiXxmwjsWQnvoyh25077425;     wWxrgiXxmwjsWQnvoyh25077425 = wWxrgiXxmwjsWQnvoyh40927981;     wWxrgiXxmwjsWQnvoyh40927981 = wWxrgiXxmwjsWQnvoyh69310429;     wWxrgiXxmwjsWQnvoyh69310429 = wWxrgiXxmwjsWQnvoyh3938471;     wWxrgiXxmwjsWQnvoyh3938471 = wWxrgiXxmwjsWQnvoyh29913926;     wWxrgiXxmwjsWQnvoyh29913926 = wWxrgiXxmwjsWQnvoyh64604474;     wWxrgiXxmwjsWQnvoyh64604474 = wWxrgiXxmwjsWQnvoyh6601213;     wWxrgiXxmwjsWQnvoyh6601213 = wWxrgiXxmwjsWQnvoyh19529973;     wWxrgiXxmwjsWQnvoyh19529973 = wWxrgiXxmwjsWQnvoyh10995598;     wWxrgiXxmwjsWQnvoyh10995598 = wWxrgiXxmwjsWQnvoyh67022056;     wWxrgiXxmwjsWQnvoyh67022056 = wWxrgiXxmwjsWQnvoyh42355493;     wWxrgiXxmwjsWQnvoyh42355493 = wWxrgiXxmwjsWQnvoyh18194984;     wWxrgiXxmwjsWQnvoyh18194984 = wWxrgiXxmwjsWQnvoyh28598790;     wWxrgiXxmwjsWQnvoyh28598790 = wWxrgiXxmwjsWQnvoyh50135027;     wWxrgiXxmwjsWQnvoyh50135027 = wWxrgiXxmwjsWQnvoyh63172271;     wWxrgiXxmwjsWQnvoyh63172271 = wWxrgiXxmwjsWQnvoyh93949766;     wWxrgiXxmwjsWQnvoyh93949766 = wWxrgiXxmwjsWQnvoyh86120781;     wWxrgiXxmwjsWQnvoyh86120781 = wWxrgiXxmwjsWQnvoyh81526696;     wWxrgiXxmwjsWQnvoyh81526696 = wWxrgiXxmwjsWQnvoyh49856882;     wWxrgiXxmwjsWQnvoyh49856882 = wWxrgiXxmwjsWQnvoyh65708800;     wWxrgiXxmwjsWQnvoyh65708800 = wWxrgiXxmwjsWQnvoyh24852295;     wWxrgiXxmwjsWQnvoyh24852295 = wWxrgiXxmwjsWQnvoyh11620628;     wWxrgiXxmwjsWQnvoyh11620628 = wWxrgiXxmwjsWQnvoyh21145782;     wWxrgiXxmwjsWQnvoyh21145782 = wWxrgiXxmwjsWQnvoyh40098796;     wWxrgiXxmwjsWQnvoyh40098796 = wWxrgiXxmwjsWQnvoyh15368708;     wWxrgiXxmwjsWQnvoyh15368708 = wWxrgiXxmwjsWQnvoyh44686583;     wWxrgiXxmwjsWQnvoyh44686583 = wWxrgiXxmwjsWQnvoyh24783530;     wWxrgiXxmwjsWQnvoyh24783530 = wWxrgiXxmwjsWQnvoyh15719387;     wWxrgiXxmwjsWQnvoyh15719387 = wWxrgiXxmwjsWQnvoyh58847405;     wWxrgiXxmwjsWQnvoyh58847405 = wWxrgiXxmwjsWQnvoyh72179578;     wWxrgiXxmwjsWQnvoyh72179578 = wWxrgiXxmwjsWQnvoyh11964491;     wWxrgiXxmwjsWQnvoyh11964491 = wWxrgiXxmwjsWQnvoyh14911244;     wWxrgiXxmwjsWQnvoyh14911244 = wWxrgiXxmwjsWQnvoyh60312059;     wWxrgiXxmwjsWQnvoyh60312059 = wWxrgiXxmwjsWQnvoyh88691495;     wWxrgiXxmwjsWQnvoyh88691495 = wWxrgiXxmwjsWQnvoyh46494724;     wWxrgiXxmwjsWQnvoyh46494724 = wWxrgiXxmwjsWQnvoyh97578544;     wWxrgiXxmwjsWQnvoyh97578544 = wWxrgiXxmwjsWQnvoyh55640593;     wWxrgiXxmwjsWQnvoyh55640593 = wWxrgiXxmwjsWQnvoyh47771521;     wWxrgiXxmwjsWQnvoyh47771521 = wWxrgiXxmwjsWQnvoyh17564406;     wWxrgiXxmwjsWQnvoyh17564406 = wWxrgiXxmwjsWQnvoyh10118017;     wWxrgiXxmwjsWQnvoyh10118017 = wWxrgiXxmwjsWQnvoyh55896210;     wWxrgiXxmwjsWQnvoyh55896210 = wWxrgiXxmwjsWQnvoyh33143391;     wWxrgiXxmwjsWQnvoyh33143391 = wWxrgiXxmwjsWQnvoyh46267193;     wWxrgiXxmwjsWQnvoyh46267193 = wWxrgiXxmwjsWQnvoyh25718430;     wWxrgiXxmwjsWQnvoyh25718430 = wWxrgiXxmwjsWQnvoyh49650563;     wWxrgiXxmwjsWQnvoyh49650563 = wWxrgiXxmwjsWQnvoyh13299963;     wWxrgiXxmwjsWQnvoyh13299963 = wWxrgiXxmwjsWQnvoyh53823783;     wWxrgiXxmwjsWQnvoyh53823783 = wWxrgiXxmwjsWQnvoyh83320989;     wWxrgiXxmwjsWQnvoyh83320989 = wWxrgiXxmwjsWQnvoyh86416685;     wWxrgiXxmwjsWQnvoyh86416685 = wWxrgiXxmwjsWQnvoyh8598380;     wWxrgiXxmwjsWQnvoyh8598380 = wWxrgiXxmwjsWQnvoyh90816010;     wWxrgiXxmwjsWQnvoyh90816010 = wWxrgiXxmwjsWQnvoyh92665103;     wWxrgiXxmwjsWQnvoyh92665103 = wWxrgiXxmwjsWQnvoyh21239768;     wWxrgiXxmwjsWQnvoyh21239768 = wWxrgiXxmwjsWQnvoyh11716611;     wWxrgiXxmwjsWQnvoyh11716611 = wWxrgiXxmwjsWQnvoyh64786115;     wWxrgiXxmwjsWQnvoyh64786115 = wWxrgiXxmwjsWQnvoyh13456798;     wWxrgiXxmwjsWQnvoyh13456798 = wWxrgiXxmwjsWQnvoyh19782199;     wWxrgiXxmwjsWQnvoyh19782199 = wWxrgiXxmwjsWQnvoyh29211633;     wWxrgiXxmwjsWQnvoyh29211633 = wWxrgiXxmwjsWQnvoyh88569762;     wWxrgiXxmwjsWQnvoyh88569762 = wWxrgiXxmwjsWQnvoyh85227343;     wWxrgiXxmwjsWQnvoyh85227343 = wWxrgiXxmwjsWQnvoyh39820945;     wWxrgiXxmwjsWQnvoyh39820945 = wWxrgiXxmwjsWQnvoyh90881826;     wWxrgiXxmwjsWQnvoyh90881826 = wWxrgiXxmwjsWQnvoyh60682568;     wWxrgiXxmwjsWQnvoyh60682568 = wWxrgiXxmwjsWQnvoyh38816020;     wWxrgiXxmwjsWQnvoyh38816020 = wWxrgiXxmwjsWQnvoyh55057565;     wWxrgiXxmwjsWQnvoyh55057565 = wWxrgiXxmwjsWQnvoyh27444250;     wWxrgiXxmwjsWQnvoyh27444250 = wWxrgiXxmwjsWQnvoyh57882924;     wWxrgiXxmwjsWQnvoyh57882924 = wWxrgiXxmwjsWQnvoyh39907294;     wWxrgiXxmwjsWQnvoyh39907294 = wWxrgiXxmwjsWQnvoyh3640304;     wWxrgiXxmwjsWQnvoyh3640304 = wWxrgiXxmwjsWQnvoyh65593727;     wWxrgiXxmwjsWQnvoyh65593727 = wWxrgiXxmwjsWQnvoyh38309174;     wWxrgiXxmwjsWQnvoyh38309174 = wWxrgiXxmwjsWQnvoyh38349261;     wWxrgiXxmwjsWQnvoyh38349261 = wWxrgiXxmwjsWQnvoyh63962291;     wWxrgiXxmwjsWQnvoyh63962291 = wWxrgiXxmwjsWQnvoyh39738866;     wWxrgiXxmwjsWQnvoyh39738866 = wWxrgiXxmwjsWQnvoyh9812591;     wWxrgiXxmwjsWQnvoyh9812591 = wWxrgiXxmwjsWQnvoyh91708904;     wWxrgiXxmwjsWQnvoyh91708904 = wWxrgiXxmwjsWQnvoyh65353434;     wWxrgiXxmwjsWQnvoyh65353434 = wWxrgiXxmwjsWQnvoyh95427352;     wWxrgiXxmwjsWQnvoyh95427352 = wWxrgiXxmwjsWQnvoyh90448232;     wWxrgiXxmwjsWQnvoyh90448232 = wWxrgiXxmwjsWQnvoyh2068746;     wWxrgiXxmwjsWQnvoyh2068746 = wWxrgiXxmwjsWQnvoyh90862799;     wWxrgiXxmwjsWQnvoyh90862799 = wWxrgiXxmwjsWQnvoyh41462540;     wWxrgiXxmwjsWQnvoyh41462540 = wWxrgiXxmwjsWQnvoyh29302701;     wWxrgiXxmwjsWQnvoyh29302701 = wWxrgiXxmwjsWQnvoyh50249025;     wWxrgiXxmwjsWQnvoyh50249025 = wWxrgiXxmwjsWQnvoyh81363567;     wWxrgiXxmwjsWQnvoyh81363567 = wWxrgiXxmwjsWQnvoyh19299388;     wWxrgiXxmwjsWQnvoyh19299388 = wWxrgiXxmwjsWQnvoyh93671475;     wWxrgiXxmwjsWQnvoyh93671475 = wWxrgiXxmwjsWQnvoyh48595448;     wWxrgiXxmwjsWQnvoyh48595448 = wWxrgiXxmwjsWQnvoyh23905381;     wWxrgiXxmwjsWQnvoyh23905381 = wWxrgiXxmwjsWQnvoyh33037926;     wWxrgiXxmwjsWQnvoyh33037926 = wWxrgiXxmwjsWQnvoyh77796345;     wWxrgiXxmwjsWQnvoyh77796345 = wWxrgiXxmwjsWQnvoyh26428960;     wWxrgiXxmwjsWQnvoyh26428960 = wWxrgiXxmwjsWQnvoyh59201758;     wWxrgiXxmwjsWQnvoyh59201758 = wWxrgiXxmwjsWQnvoyh32337062;     wWxrgiXxmwjsWQnvoyh32337062 = wWxrgiXxmwjsWQnvoyh70297071;     wWxrgiXxmwjsWQnvoyh70297071 = wWxrgiXxmwjsWQnvoyh65014384;     wWxrgiXxmwjsWQnvoyh65014384 = wWxrgiXxmwjsWQnvoyh72460822;     wWxrgiXxmwjsWQnvoyh72460822 = wWxrgiXxmwjsWQnvoyh71096650;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void wYPJaKhhnIYujDXdXLc80520346() {     int WYzBuBvjhIuVvjYyaMf25751048 = -255564672;    int WYzBuBvjhIuVvjYyaMf24423031 = -802295308;    int WYzBuBvjhIuVvjYyaMf50371057 = -41115165;    int WYzBuBvjhIuVvjYyaMf96512366 = -396514988;    int WYzBuBvjhIuVvjYyaMf15379652 = -519353860;    int WYzBuBvjhIuVvjYyaMf83484826 = -252663288;    int WYzBuBvjhIuVvjYyaMf25039175 = 27159866;    int WYzBuBvjhIuVvjYyaMf59089030 = -727386961;    int WYzBuBvjhIuVvjYyaMf52378885 = -469719120;    int WYzBuBvjhIuVvjYyaMf89233198 = -963070334;    int WYzBuBvjhIuVvjYyaMf98141267 = -728846656;    int WYzBuBvjhIuVvjYyaMf73760311 = -65479861;    int WYzBuBvjhIuVvjYyaMf30839371 = 309009;    int WYzBuBvjhIuVvjYyaMf35321924 = -82966587;    int WYzBuBvjhIuVvjYyaMf48419057 = -639218318;    int WYzBuBvjhIuVvjYyaMf18366326 = -203762164;    int WYzBuBvjhIuVvjYyaMf49966791 = -522088639;    int WYzBuBvjhIuVvjYyaMf30768858 = -25554490;    int WYzBuBvjhIuVvjYyaMf95170367 = -203869096;    int WYzBuBvjhIuVvjYyaMf3755338 = -667995767;    int WYzBuBvjhIuVvjYyaMf15701084 = -353314185;    int WYzBuBvjhIuVvjYyaMf1109472 = -534467140;    int WYzBuBvjhIuVvjYyaMf2178632 = -93403469;    int WYzBuBvjhIuVvjYyaMf26280664 = -327540303;    int WYzBuBvjhIuVvjYyaMf7373244 = -170751216;    int WYzBuBvjhIuVvjYyaMf62386729 = -827687738;    int WYzBuBvjhIuVvjYyaMf42088720 = -778218127;    int WYzBuBvjhIuVvjYyaMf68617708 = -42280655;    int WYzBuBvjhIuVvjYyaMf84584260 = -149562527;    int WYzBuBvjhIuVvjYyaMf19218939 = -420135441;    int WYzBuBvjhIuVvjYyaMf67424915 = -100995012;    int WYzBuBvjhIuVvjYyaMf89839015 = -647636789;    int WYzBuBvjhIuVvjYyaMf39835455 = 36262657;    int WYzBuBvjhIuVvjYyaMf6620384 = -468391906;    int WYzBuBvjhIuVvjYyaMf49415400 = -580938393;    int WYzBuBvjhIuVvjYyaMf47638601 = -975564227;    int WYzBuBvjhIuVvjYyaMf63395983 = -99765509;    int WYzBuBvjhIuVvjYyaMf59471962 = -360760245;    int WYzBuBvjhIuVvjYyaMf48348193 = -535539184;    int WYzBuBvjhIuVvjYyaMf79626987 = 21291792;    int WYzBuBvjhIuVvjYyaMf3730922 = 80727012;    int WYzBuBvjhIuVvjYyaMf54239064 = -727974081;    int WYzBuBvjhIuVvjYyaMf1118200 = -522640324;    int WYzBuBvjhIuVvjYyaMf64890609 = -577117337;    int WYzBuBvjhIuVvjYyaMf93127453 = -998641282;    int WYzBuBvjhIuVvjYyaMf1600796 = -555183914;    int WYzBuBvjhIuVvjYyaMf42192141 = -467947512;    int WYzBuBvjhIuVvjYyaMf73077872 = -43372178;    int WYzBuBvjhIuVvjYyaMf55642729 = -311873709;    int WYzBuBvjhIuVvjYyaMf98665445 = -275698137;    int WYzBuBvjhIuVvjYyaMf58434529 = -957507352;    int WYzBuBvjhIuVvjYyaMf75798835 = 2631722;    int WYzBuBvjhIuVvjYyaMf40326383 = 51409877;    int WYzBuBvjhIuVvjYyaMf48231768 = -858098644;    int WYzBuBvjhIuVvjYyaMf64819262 = -713608598;    int WYzBuBvjhIuVvjYyaMf24641576 = -721097532;    int WYzBuBvjhIuVvjYyaMf22244399 = -608891839;    int WYzBuBvjhIuVvjYyaMf24090393 = -713574862;    int WYzBuBvjhIuVvjYyaMf89139122 = -125763773;    int WYzBuBvjhIuVvjYyaMf52992923 = -691666123;    int WYzBuBvjhIuVvjYyaMf41396106 = -474445162;    int WYzBuBvjhIuVvjYyaMf56421466 = -930559479;    int WYzBuBvjhIuVvjYyaMf74504770 = -477824434;    int WYzBuBvjhIuVvjYyaMf33159946 = 50416321;    int WYzBuBvjhIuVvjYyaMf21808283 = -762075323;    int WYzBuBvjhIuVvjYyaMf8302253 = 18790133;    int WYzBuBvjhIuVvjYyaMf33924856 = -1742519;    int WYzBuBvjhIuVvjYyaMf24218988 = -531299085;    int WYzBuBvjhIuVvjYyaMf85906523 = -502028194;    int WYzBuBvjhIuVvjYyaMf780456 = -663654091;    int WYzBuBvjhIuVvjYyaMf54970342 = -3996655;    int WYzBuBvjhIuVvjYyaMf90494828 = -61328395;    int WYzBuBvjhIuVvjYyaMf82420665 = -490015307;    int WYzBuBvjhIuVvjYyaMf15543380 = -125160889;    int WYzBuBvjhIuVvjYyaMf24416 = -648722780;    int WYzBuBvjhIuVvjYyaMf61462020 = -625340104;    int WYzBuBvjhIuVvjYyaMf99991272 = 88173184;    int WYzBuBvjhIuVvjYyaMf37288023 = -516286132;    int WYzBuBvjhIuVvjYyaMf33153210 = -328899021;    int WYzBuBvjhIuVvjYyaMf5772449 = -615567302;    int WYzBuBvjhIuVvjYyaMf20194588 = -259740227;    int WYzBuBvjhIuVvjYyaMf69010848 = -634845950;    int WYzBuBvjhIuVvjYyaMf12974979 = -730406946;    int WYzBuBvjhIuVvjYyaMf85918814 = -873864391;    int WYzBuBvjhIuVvjYyaMf60784409 = -462628090;    int WYzBuBvjhIuVvjYyaMf91626080 = -3626734;    int WYzBuBvjhIuVvjYyaMf49512633 = -599046667;    int WYzBuBvjhIuVvjYyaMf91603687 = -105638699;    int WYzBuBvjhIuVvjYyaMf41801121 = -754783308;    int WYzBuBvjhIuVvjYyaMf24773824 = -859840861;    int WYzBuBvjhIuVvjYyaMf25394203 = -266672389;    int WYzBuBvjhIuVvjYyaMf39305591 = -386190647;    int WYzBuBvjhIuVvjYyaMf70332839 = -134996473;    int WYzBuBvjhIuVvjYyaMf95355270 = -843873061;    int WYzBuBvjhIuVvjYyaMf38230882 = -504263046;    int WYzBuBvjhIuVvjYyaMf47309456 = 11286491;    int WYzBuBvjhIuVvjYyaMf79734294 = -150149648;    int WYzBuBvjhIuVvjYyaMf67958253 = -473056646;    int WYzBuBvjhIuVvjYyaMf43082326 = -815042015;    int WYzBuBvjhIuVvjYyaMf84825201 = -255564672;     WYzBuBvjhIuVvjYyaMf25751048 = WYzBuBvjhIuVvjYyaMf24423031;     WYzBuBvjhIuVvjYyaMf24423031 = WYzBuBvjhIuVvjYyaMf50371057;     WYzBuBvjhIuVvjYyaMf50371057 = WYzBuBvjhIuVvjYyaMf96512366;     WYzBuBvjhIuVvjYyaMf96512366 = WYzBuBvjhIuVvjYyaMf15379652;     WYzBuBvjhIuVvjYyaMf15379652 = WYzBuBvjhIuVvjYyaMf83484826;     WYzBuBvjhIuVvjYyaMf83484826 = WYzBuBvjhIuVvjYyaMf25039175;     WYzBuBvjhIuVvjYyaMf25039175 = WYzBuBvjhIuVvjYyaMf59089030;     WYzBuBvjhIuVvjYyaMf59089030 = WYzBuBvjhIuVvjYyaMf52378885;     WYzBuBvjhIuVvjYyaMf52378885 = WYzBuBvjhIuVvjYyaMf89233198;     WYzBuBvjhIuVvjYyaMf89233198 = WYzBuBvjhIuVvjYyaMf98141267;     WYzBuBvjhIuVvjYyaMf98141267 = WYzBuBvjhIuVvjYyaMf73760311;     WYzBuBvjhIuVvjYyaMf73760311 = WYzBuBvjhIuVvjYyaMf30839371;     WYzBuBvjhIuVvjYyaMf30839371 = WYzBuBvjhIuVvjYyaMf35321924;     WYzBuBvjhIuVvjYyaMf35321924 = WYzBuBvjhIuVvjYyaMf48419057;     WYzBuBvjhIuVvjYyaMf48419057 = WYzBuBvjhIuVvjYyaMf18366326;     WYzBuBvjhIuVvjYyaMf18366326 = WYzBuBvjhIuVvjYyaMf49966791;     WYzBuBvjhIuVvjYyaMf49966791 = WYzBuBvjhIuVvjYyaMf30768858;     WYzBuBvjhIuVvjYyaMf30768858 = WYzBuBvjhIuVvjYyaMf95170367;     WYzBuBvjhIuVvjYyaMf95170367 = WYzBuBvjhIuVvjYyaMf3755338;     WYzBuBvjhIuVvjYyaMf3755338 = WYzBuBvjhIuVvjYyaMf15701084;     WYzBuBvjhIuVvjYyaMf15701084 = WYzBuBvjhIuVvjYyaMf1109472;     WYzBuBvjhIuVvjYyaMf1109472 = WYzBuBvjhIuVvjYyaMf2178632;     WYzBuBvjhIuVvjYyaMf2178632 = WYzBuBvjhIuVvjYyaMf26280664;     WYzBuBvjhIuVvjYyaMf26280664 = WYzBuBvjhIuVvjYyaMf7373244;     WYzBuBvjhIuVvjYyaMf7373244 = WYzBuBvjhIuVvjYyaMf62386729;     WYzBuBvjhIuVvjYyaMf62386729 = WYzBuBvjhIuVvjYyaMf42088720;     WYzBuBvjhIuVvjYyaMf42088720 = WYzBuBvjhIuVvjYyaMf68617708;     WYzBuBvjhIuVvjYyaMf68617708 = WYzBuBvjhIuVvjYyaMf84584260;     WYzBuBvjhIuVvjYyaMf84584260 = WYzBuBvjhIuVvjYyaMf19218939;     WYzBuBvjhIuVvjYyaMf19218939 = WYzBuBvjhIuVvjYyaMf67424915;     WYzBuBvjhIuVvjYyaMf67424915 = WYzBuBvjhIuVvjYyaMf89839015;     WYzBuBvjhIuVvjYyaMf89839015 = WYzBuBvjhIuVvjYyaMf39835455;     WYzBuBvjhIuVvjYyaMf39835455 = WYzBuBvjhIuVvjYyaMf6620384;     WYzBuBvjhIuVvjYyaMf6620384 = WYzBuBvjhIuVvjYyaMf49415400;     WYzBuBvjhIuVvjYyaMf49415400 = WYzBuBvjhIuVvjYyaMf47638601;     WYzBuBvjhIuVvjYyaMf47638601 = WYzBuBvjhIuVvjYyaMf63395983;     WYzBuBvjhIuVvjYyaMf63395983 = WYzBuBvjhIuVvjYyaMf59471962;     WYzBuBvjhIuVvjYyaMf59471962 = WYzBuBvjhIuVvjYyaMf48348193;     WYzBuBvjhIuVvjYyaMf48348193 = WYzBuBvjhIuVvjYyaMf79626987;     WYzBuBvjhIuVvjYyaMf79626987 = WYzBuBvjhIuVvjYyaMf3730922;     WYzBuBvjhIuVvjYyaMf3730922 = WYzBuBvjhIuVvjYyaMf54239064;     WYzBuBvjhIuVvjYyaMf54239064 = WYzBuBvjhIuVvjYyaMf1118200;     WYzBuBvjhIuVvjYyaMf1118200 = WYzBuBvjhIuVvjYyaMf64890609;     WYzBuBvjhIuVvjYyaMf64890609 = WYzBuBvjhIuVvjYyaMf93127453;     WYzBuBvjhIuVvjYyaMf93127453 = WYzBuBvjhIuVvjYyaMf1600796;     WYzBuBvjhIuVvjYyaMf1600796 = WYzBuBvjhIuVvjYyaMf42192141;     WYzBuBvjhIuVvjYyaMf42192141 = WYzBuBvjhIuVvjYyaMf73077872;     WYzBuBvjhIuVvjYyaMf73077872 = WYzBuBvjhIuVvjYyaMf55642729;     WYzBuBvjhIuVvjYyaMf55642729 = WYzBuBvjhIuVvjYyaMf98665445;     WYzBuBvjhIuVvjYyaMf98665445 = WYzBuBvjhIuVvjYyaMf58434529;     WYzBuBvjhIuVvjYyaMf58434529 = WYzBuBvjhIuVvjYyaMf75798835;     WYzBuBvjhIuVvjYyaMf75798835 = WYzBuBvjhIuVvjYyaMf40326383;     WYzBuBvjhIuVvjYyaMf40326383 = WYzBuBvjhIuVvjYyaMf48231768;     WYzBuBvjhIuVvjYyaMf48231768 = WYzBuBvjhIuVvjYyaMf64819262;     WYzBuBvjhIuVvjYyaMf64819262 = WYzBuBvjhIuVvjYyaMf24641576;     WYzBuBvjhIuVvjYyaMf24641576 = WYzBuBvjhIuVvjYyaMf22244399;     WYzBuBvjhIuVvjYyaMf22244399 = WYzBuBvjhIuVvjYyaMf24090393;     WYzBuBvjhIuVvjYyaMf24090393 = WYzBuBvjhIuVvjYyaMf89139122;     WYzBuBvjhIuVvjYyaMf89139122 = WYzBuBvjhIuVvjYyaMf52992923;     WYzBuBvjhIuVvjYyaMf52992923 = WYzBuBvjhIuVvjYyaMf41396106;     WYzBuBvjhIuVvjYyaMf41396106 = WYzBuBvjhIuVvjYyaMf56421466;     WYzBuBvjhIuVvjYyaMf56421466 = WYzBuBvjhIuVvjYyaMf74504770;     WYzBuBvjhIuVvjYyaMf74504770 = WYzBuBvjhIuVvjYyaMf33159946;     WYzBuBvjhIuVvjYyaMf33159946 = WYzBuBvjhIuVvjYyaMf21808283;     WYzBuBvjhIuVvjYyaMf21808283 = WYzBuBvjhIuVvjYyaMf8302253;     WYzBuBvjhIuVvjYyaMf8302253 = WYzBuBvjhIuVvjYyaMf33924856;     WYzBuBvjhIuVvjYyaMf33924856 = WYzBuBvjhIuVvjYyaMf24218988;     WYzBuBvjhIuVvjYyaMf24218988 = WYzBuBvjhIuVvjYyaMf85906523;     WYzBuBvjhIuVvjYyaMf85906523 = WYzBuBvjhIuVvjYyaMf780456;     WYzBuBvjhIuVvjYyaMf780456 = WYzBuBvjhIuVvjYyaMf54970342;     WYzBuBvjhIuVvjYyaMf54970342 = WYzBuBvjhIuVvjYyaMf90494828;     WYzBuBvjhIuVvjYyaMf90494828 = WYzBuBvjhIuVvjYyaMf82420665;     WYzBuBvjhIuVvjYyaMf82420665 = WYzBuBvjhIuVvjYyaMf15543380;     WYzBuBvjhIuVvjYyaMf15543380 = WYzBuBvjhIuVvjYyaMf24416;     WYzBuBvjhIuVvjYyaMf24416 = WYzBuBvjhIuVvjYyaMf61462020;     WYzBuBvjhIuVvjYyaMf61462020 = WYzBuBvjhIuVvjYyaMf99991272;     WYzBuBvjhIuVvjYyaMf99991272 = WYzBuBvjhIuVvjYyaMf37288023;     WYzBuBvjhIuVvjYyaMf37288023 = WYzBuBvjhIuVvjYyaMf33153210;     WYzBuBvjhIuVvjYyaMf33153210 = WYzBuBvjhIuVvjYyaMf5772449;     WYzBuBvjhIuVvjYyaMf5772449 = WYzBuBvjhIuVvjYyaMf20194588;     WYzBuBvjhIuVvjYyaMf20194588 = WYzBuBvjhIuVvjYyaMf69010848;     WYzBuBvjhIuVvjYyaMf69010848 = WYzBuBvjhIuVvjYyaMf12974979;     WYzBuBvjhIuVvjYyaMf12974979 = WYzBuBvjhIuVvjYyaMf85918814;     WYzBuBvjhIuVvjYyaMf85918814 = WYzBuBvjhIuVvjYyaMf60784409;     WYzBuBvjhIuVvjYyaMf60784409 = WYzBuBvjhIuVvjYyaMf91626080;     WYzBuBvjhIuVvjYyaMf91626080 = WYzBuBvjhIuVvjYyaMf49512633;     WYzBuBvjhIuVvjYyaMf49512633 = WYzBuBvjhIuVvjYyaMf91603687;     WYzBuBvjhIuVvjYyaMf91603687 = WYzBuBvjhIuVvjYyaMf41801121;     WYzBuBvjhIuVvjYyaMf41801121 = WYzBuBvjhIuVvjYyaMf24773824;     WYzBuBvjhIuVvjYyaMf24773824 = WYzBuBvjhIuVvjYyaMf25394203;     WYzBuBvjhIuVvjYyaMf25394203 = WYzBuBvjhIuVvjYyaMf39305591;     WYzBuBvjhIuVvjYyaMf39305591 = WYzBuBvjhIuVvjYyaMf70332839;     WYzBuBvjhIuVvjYyaMf70332839 = WYzBuBvjhIuVvjYyaMf95355270;     WYzBuBvjhIuVvjYyaMf95355270 = WYzBuBvjhIuVvjYyaMf38230882;     WYzBuBvjhIuVvjYyaMf38230882 = WYzBuBvjhIuVvjYyaMf47309456;     WYzBuBvjhIuVvjYyaMf47309456 = WYzBuBvjhIuVvjYyaMf79734294;     WYzBuBvjhIuVvjYyaMf79734294 = WYzBuBvjhIuVvjYyaMf67958253;     WYzBuBvjhIuVvjYyaMf67958253 = WYzBuBvjhIuVvjYyaMf43082326;     WYzBuBvjhIuVvjYyaMf43082326 = WYzBuBvjhIuVvjYyaMf84825201;     WYzBuBvjhIuVvjYyaMf84825201 = WYzBuBvjhIuVvjYyaMf25751048;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void PFaOEhOBHaoFzeapLFx86848893() {     int phcwopiJsekQzOSrWgO80405445 = -693092256;    int phcwopiJsekQzOSrWgO71420650 = -281860122;    int phcwopiJsekQzOSrWgO11103704 = -426499778;    int phcwopiJsekQzOSrWgO67947308 = -402617399;    int phcwopiJsekQzOSrWgO89831322 = -191789099;    int phcwopiJsekQzOSrWgO97659223 = -381814124;    int phcwopiJsekQzOSrWgO46139878 = -274732806;    int phcwopiJsekQzOSrWgO88264133 = -127955194;    int phcwopiJsekQzOSrWgO40153296 = -516572490;    int phcwopiJsekQzOSrWgO71865183 = -141871604;    int phcwopiJsekQzOSrWgO76752562 = -254203228;    int phcwopiJsekQzOSrWgO36525025 = -251903950;    int phcwopiJsekQzOSrWgO94656685 = -903231296;    int phcwopiJsekQzOSrWgO28288355 = -795070165;    int phcwopiJsekQzOSrWgO78643130 = -546339950;    int phcwopiJsekQzOSrWgO8133862 = -933921728;    int phcwopiJsekQzOSrWgO49798554 = -995688468;    int phcwopiJsekQzOSrWgO98365445 = -89118958;    int phcwopiJsekQzOSrWgO96390967 = -489680644;    int phcwopiJsekQzOSrWgO21389893 = 86638086;    int phcwopiJsekQzOSrWgO49875472 = -921397336;    int phcwopiJsekQzOSrWgO52362060 = -700911248;    int phcwopiJsekQzOSrWgO38648463 = -680146890;    int phcwopiJsekQzOSrWgO27709033 = -26581120;    int phcwopiJsekQzOSrWgO3125860 = -543664668;    int phcwopiJsekQzOSrWgO3627677 = -831396523;    int phcwopiJsekQzOSrWgO44078645 = -233062406;    int phcwopiJsekQzOSrWgO21866709 = -50332515;    int phcwopiJsekQzOSrWgO24481937 = -529807403;    int phcwopiJsekQzOSrWgO13654348 = -710893409;    int phcwopiJsekQzOSrWgO19130444 = -649867538;    int phcwopiJsekQzOSrWgO20830626 = 40866682;    int phcwopiJsekQzOSrWgO7491332 = -520254957;    int phcwopiJsekQzOSrWgO1276277 = -148512716;    int phcwopiJsekQzOSrWgO83919556 = -798801652;    int phcwopiJsekQzOSrWgO34965143 = -123559824;    int phcwopiJsekQzOSrWgO38100472 = 49807871;    int phcwopiJsekQzOSrWgO72449201 = -234689266;    int phcwopiJsekQzOSrWgO99117841 = -917487785;    int phcwopiJsekQzOSrWgO3613383 = -737016807;    int phcwopiJsekQzOSrWgO59690323 = -31823146;    int phcwopiJsekQzOSrWgO90913722 = -235506168;    int phcwopiJsekQzOSrWgO92118382 = -363145642;    int phcwopiJsekQzOSrWgO73885008 = -50797003;    int phcwopiJsekQzOSrWgO53111517 = -31158880;    int phcwopiJsekQzOSrWgO56934397 = -623973529;    int phcwopiJsekQzOSrWgO58665853 = -495004895;    int phcwopiJsekQzOSrWgO96505181 = -21024550;    int phcwopiJsekQzOSrWgO97985495 = -211603898;    int phcwopiJsekQzOSrWgO43507108 = -515717431;    int phcwopiJsekQzOSrWgO33548069 = -614722853;    int phcwopiJsekQzOSrWgO65180985 = -512434261;    int phcwopiJsekQzOSrWgO72054386 = -788505580;    int phcwopiJsekQzOSrWgO5647526 = -753985128;    int phcwopiJsekQzOSrWgO36973422 = -9517280;    int phcwopiJsekQzOSrWgO28043385 = -992181008;    int phcwopiJsekQzOSrWgO32772187 = -601713232;    int phcwopiJsekQzOSrWgO83394670 = -299918659;    int phcwopiJsekQzOSrWgO64821448 = -858952732;    int phcwopiJsekQzOSrWgO86203646 = -360392577;    int phcwopiJsekQzOSrWgO53580579 = -48751719;    int phcwopiJsekQzOSrWgO24273170 = -124400291;    int phcwopiJsekQzOSrWgO63782196 = -598147791;    int phcwopiJsekQzOSrWgO26498948 = -805679082;    int phcwopiJsekQzOSrWgO52734740 = -492004067;    int phcwopiJsekQzOSrWgO55921937 = -195069911;    int phcwopiJsekQzOSrWgO29033693 = -731648994;    int phcwopiJsekQzOSrWgO93380409 = -654718580;    int phcwopiJsekQzOSrWgO44368798 = -996268513;    int phcwopiJsekQzOSrWgO43677987 = -322780126;    int phcwopiJsekQzOSrWgO70033390 = -883729599;    int phcwopiJsekQzOSrWgO77349353 = -660999202;    int phcwopiJsekQzOSrWgO99247603 = -171631173;    int phcwopiJsekQzOSrWgO92777585 = -752663838;    int phcwopiJsekQzOSrWgO61699570 = -881538768;    int phcwopiJsekQzOSrWgO58961749 = -585891168;    int phcwopiJsekQzOSrWgO60243678 = -237765606;    int phcwopiJsekQzOSrWgO64763455 = -529349887;    int phcwopiJsekQzOSrWgO74597515 = -995422240;    int phcwopiJsekQzOSrWgO46191463 = -919691140;    int phcwopiJsekQzOSrWgO44961823 = -236391628;    int phcwopiJsekQzOSrWgO47573463 = -112037856;    int phcwopiJsekQzOSrWgO23881213 = -838728618;    int phcwopiJsekQzOSrWgO80974828 = 85910028;    int phcwopiJsekQzOSrWgO80106279 = 3829444;    int phcwopiJsekQzOSrWgO53949459 = -37433277;    int phcwopiJsekQzOSrWgO48776240 = -170627738;    int phcwopiJsekQzOSrWgO1843807 = -766269829;    int phcwopiJsekQzOSrWgO64302854 = -38995437;    int phcwopiJsekQzOSrWgO55876172 = -806620644;    int phcwopiJsekQzOSrWgO2192957 = -521846592;    int phcwopiJsekQzOSrWgO54705801 = -650273471;    int phcwopiJsekQzOSrWgO7627754 = -375736534;    int phcwopiJsekQzOSrWgO12914196 = -457095208;    int phcwopiJsekQzOSrWgO50032804 = -588265088;    int phcwopiJsekQzOSrWgO35417153 = -907422855;    int phcwopiJsekQzOSrWgO27131526 = -637358377;    int phcwopiJsekQzOSrWgO65619434 = -557466561;    int phcwopiJsekQzOSrWgO21150269 = -558792936;    int phcwopiJsekQzOSrWgO97189580 = -693092256;     phcwopiJsekQzOSrWgO80405445 = phcwopiJsekQzOSrWgO71420650;     phcwopiJsekQzOSrWgO71420650 = phcwopiJsekQzOSrWgO11103704;     phcwopiJsekQzOSrWgO11103704 = phcwopiJsekQzOSrWgO67947308;     phcwopiJsekQzOSrWgO67947308 = phcwopiJsekQzOSrWgO89831322;     phcwopiJsekQzOSrWgO89831322 = phcwopiJsekQzOSrWgO97659223;     phcwopiJsekQzOSrWgO97659223 = phcwopiJsekQzOSrWgO46139878;     phcwopiJsekQzOSrWgO46139878 = phcwopiJsekQzOSrWgO88264133;     phcwopiJsekQzOSrWgO88264133 = phcwopiJsekQzOSrWgO40153296;     phcwopiJsekQzOSrWgO40153296 = phcwopiJsekQzOSrWgO71865183;     phcwopiJsekQzOSrWgO71865183 = phcwopiJsekQzOSrWgO76752562;     phcwopiJsekQzOSrWgO76752562 = phcwopiJsekQzOSrWgO36525025;     phcwopiJsekQzOSrWgO36525025 = phcwopiJsekQzOSrWgO94656685;     phcwopiJsekQzOSrWgO94656685 = phcwopiJsekQzOSrWgO28288355;     phcwopiJsekQzOSrWgO28288355 = phcwopiJsekQzOSrWgO78643130;     phcwopiJsekQzOSrWgO78643130 = phcwopiJsekQzOSrWgO8133862;     phcwopiJsekQzOSrWgO8133862 = phcwopiJsekQzOSrWgO49798554;     phcwopiJsekQzOSrWgO49798554 = phcwopiJsekQzOSrWgO98365445;     phcwopiJsekQzOSrWgO98365445 = phcwopiJsekQzOSrWgO96390967;     phcwopiJsekQzOSrWgO96390967 = phcwopiJsekQzOSrWgO21389893;     phcwopiJsekQzOSrWgO21389893 = phcwopiJsekQzOSrWgO49875472;     phcwopiJsekQzOSrWgO49875472 = phcwopiJsekQzOSrWgO52362060;     phcwopiJsekQzOSrWgO52362060 = phcwopiJsekQzOSrWgO38648463;     phcwopiJsekQzOSrWgO38648463 = phcwopiJsekQzOSrWgO27709033;     phcwopiJsekQzOSrWgO27709033 = phcwopiJsekQzOSrWgO3125860;     phcwopiJsekQzOSrWgO3125860 = phcwopiJsekQzOSrWgO3627677;     phcwopiJsekQzOSrWgO3627677 = phcwopiJsekQzOSrWgO44078645;     phcwopiJsekQzOSrWgO44078645 = phcwopiJsekQzOSrWgO21866709;     phcwopiJsekQzOSrWgO21866709 = phcwopiJsekQzOSrWgO24481937;     phcwopiJsekQzOSrWgO24481937 = phcwopiJsekQzOSrWgO13654348;     phcwopiJsekQzOSrWgO13654348 = phcwopiJsekQzOSrWgO19130444;     phcwopiJsekQzOSrWgO19130444 = phcwopiJsekQzOSrWgO20830626;     phcwopiJsekQzOSrWgO20830626 = phcwopiJsekQzOSrWgO7491332;     phcwopiJsekQzOSrWgO7491332 = phcwopiJsekQzOSrWgO1276277;     phcwopiJsekQzOSrWgO1276277 = phcwopiJsekQzOSrWgO83919556;     phcwopiJsekQzOSrWgO83919556 = phcwopiJsekQzOSrWgO34965143;     phcwopiJsekQzOSrWgO34965143 = phcwopiJsekQzOSrWgO38100472;     phcwopiJsekQzOSrWgO38100472 = phcwopiJsekQzOSrWgO72449201;     phcwopiJsekQzOSrWgO72449201 = phcwopiJsekQzOSrWgO99117841;     phcwopiJsekQzOSrWgO99117841 = phcwopiJsekQzOSrWgO3613383;     phcwopiJsekQzOSrWgO3613383 = phcwopiJsekQzOSrWgO59690323;     phcwopiJsekQzOSrWgO59690323 = phcwopiJsekQzOSrWgO90913722;     phcwopiJsekQzOSrWgO90913722 = phcwopiJsekQzOSrWgO92118382;     phcwopiJsekQzOSrWgO92118382 = phcwopiJsekQzOSrWgO73885008;     phcwopiJsekQzOSrWgO73885008 = phcwopiJsekQzOSrWgO53111517;     phcwopiJsekQzOSrWgO53111517 = phcwopiJsekQzOSrWgO56934397;     phcwopiJsekQzOSrWgO56934397 = phcwopiJsekQzOSrWgO58665853;     phcwopiJsekQzOSrWgO58665853 = phcwopiJsekQzOSrWgO96505181;     phcwopiJsekQzOSrWgO96505181 = phcwopiJsekQzOSrWgO97985495;     phcwopiJsekQzOSrWgO97985495 = phcwopiJsekQzOSrWgO43507108;     phcwopiJsekQzOSrWgO43507108 = phcwopiJsekQzOSrWgO33548069;     phcwopiJsekQzOSrWgO33548069 = phcwopiJsekQzOSrWgO65180985;     phcwopiJsekQzOSrWgO65180985 = phcwopiJsekQzOSrWgO72054386;     phcwopiJsekQzOSrWgO72054386 = phcwopiJsekQzOSrWgO5647526;     phcwopiJsekQzOSrWgO5647526 = phcwopiJsekQzOSrWgO36973422;     phcwopiJsekQzOSrWgO36973422 = phcwopiJsekQzOSrWgO28043385;     phcwopiJsekQzOSrWgO28043385 = phcwopiJsekQzOSrWgO32772187;     phcwopiJsekQzOSrWgO32772187 = phcwopiJsekQzOSrWgO83394670;     phcwopiJsekQzOSrWgO83394670 = phcwopiJsekQzOSrWgO64821448;     phcwopiJsekQzOSrWgO64821448 = phcwopiJsekQzOSrWgO86203646;     phcwopiJsekQzOSrWgO86203646 = phcwopiJsekQzOSrWgO53580579;     phcwopiJsekQzOSrWgO53580579 = phcwopiJsekQzOSrWgO24273170;     phcwopiJsekQzOSrWgO24273170 = phcwopiJsekQzOSrWgO63782196;     phcwopiJsekQzOSrWgO63782196 = phcwopiJsekQzOSrWgO26498948;     phcwopiJsekQzOSrWgO26498948 = phcwopiJsekQzOSrWgO52734740;     phcwopiJsekQzOSrWgO52734740 = phcwopiJsekQzOSrWgO55921937;     phcwopiJsekQzOSrWgO55921937 = phcwopiJsekQzOSrWgO29033693;     phcwopiJsekQzOSrWgO29033693 = phcwopiJsekQzOSrWgO93380409;     phcwopiJsekQzOSrWgO93380409 = phcwopiJsekQzOSrWgO44368798;     phcwopiJsekQzOSrWgO44368798 = phcwopiJsekQzOSrWgO43677987;     phcwopiJsekQzOSrWgO43677987 = phcwopiJsekQzOSrWgO70033390;     phcwopiJsekQzOSrWgO70033390 = phcwopiJsekQzOSrWgO77349353;     phcwopiJsekQzOSrWgO77349353 = phcwopiJsekQzOSrWgO99247603;     phcwopiJsekQzOSrWgO99247603 = phcwopiJsekQzOSrWgO92777585;     phcwopiJsekQzOSrWgO92777585 = phcwopiJsekQzOSrWgO61699570;     phcwopiJsekQzOSrWgO61699570 = phcwopiJsekQzOSrWgO58961749;     phcwopiJsekQzOSrWgO58961749 = phcwopiJsekQzOSrWgO60243678;     phcwopiJsekQzOSrWgO60243678 = phcwopiJsekQzOSrWgO64763455;     phcwopiJsekQzOSrWgO64763455 = phcwopiJsekQzOSrWgO74597515;     phcwopiJsekQzOSrWgO74597515 = phcwopiJsekQzOSrWgO46191463;     phcwopiJsekQzOSrWgO46191463 = phcwopiJsekQzOSrWgO44961823;     phcwopiJsekQzOSrWgO44961823 = phcwopiJsekQzOSrWgO47573463;     phcwopiJsekQzOSrWgO47573463 = phcwopiJsekQzOSrWgO23881213;     phcwopiJsekQzOSrWgO23881213 = phcwopiJsekQzOSrWgO80974828;     phcwopiJsekQzOSrWgO80974828 = phcwopiJsekQzOSrWgO80106279;     phcwopiJsekQzOSrWgO80106279 = phcwopiJsekQzOSrWgO53949459;     phcwopiJsekQzOSrWgO53949459 = phcwopiJsekQzOSrWgO48776240;     phcwopiJsekQzOSrWgO48776240 = phcwopiJsekQzOSrWgO1843807;     phcwopiJsekQzOSrWgO1843807 = phcwopiJsekQzOSrWgO64302854;     phcwopiJsekQzOSrWgO64302854 = phcwopiJsekQzOSrWgO55876172;     phcwopiJsekQzOSrWgO55876172 = phcwopiJsekQzOSrWgO2192957;     phcwopiJsekQzOSrWgO2192957 = phcwopiJsekQzOSrWgO54705801;     phcwopiJsekQzOSrWgO54705801 = phcwopiJsekQzOSrWgO7627754;     phcwopiJsekQzOSrWgO7627754 = phcwopiJsekQzOSrWgO12914196;     phcwopiJsekQzOSrWgO12914196 = phcwopiJsekQzOSrWgO50032804;     phcwopiJsekQzOSrWgO50032804 = phcwopiJsekQzOSrWgO35417153;     phcwopiJsekQzOSrWgO35417153 = phcwopiJsekQzOSrWgO27131526;     phcwopiJsekQzOSrWgO27131526 = phcwopiJsekQzOSrWgO65619434;     phcwopiJsekQzOSrWgO65619434 = phcwopiJsekQzOSrWgO21150269;     phcwopiJsekQzOSrWgO21150269 = phcwopiJsekQzOSrWgO97189580;     phcwopiJsekQzOSrWgO97189580 = phcwopiJsekQzOSrWgO80405445;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void GpsOkUWTrFrQMAbizow93177440() {     int mpiCuAPJXaafZhPYlCO35059843 = -30619840;    int mpiCuAPJXaafZhPYlCO18418270 = -861424935;    int mpiCuAPJXaafZhPYlCO71836349 = -811884392;    int mpiCuAPJXaafZhPYlCO39382249 = -408719810;    int mpiCuAPJXaafZhPYlCO64282993 = -964224339;    int mpiCuAPJXaafZhPYlCO11833621 = -510964961;    int mpiCuAPJXaafZhPYlCO67240582 = -576625479;    int mpiCuAPJXaafZhPYlCO17439237 = -628523426;    int mpiCuAPJXaafZhPYlCO27927706 = -563425861;    int mpiCuAPJXaafZhPYlCO54497169 = -420672873;    int mpiCuAPJXaafZhPYlCO55363858 = -879559800;    int mpiCuAPJXaafZhPYlCO99289737 = -438328039;    int mpiCuAPJXaafZhPYlCO58474000 = -706771600;    int mpiCuAPJXaafZhPYlCO21254785 = -407173743;    int mpiCuAPJXaafZhPYlCO8867204 = -453461581;    int mpiCuAPJXaafZhPYlCO97901396 = -564081292;    int mpiCuAPJXaafZhPYlCO49630318 = -369288296;    int mpiCuAPJXaafZhPYlCO65962032 = -152683425;    int mpiCuAPJXaafZhPYlCO97611568 = -775492192;    int mpiCuAPJXaafZhPYlCO39024448 = -258728060;    int mpiCuAPJXaafZhPYlCO84049859 = -389480487;    int mpiCuAPJXaafZhPYlCO3614650 = -867355356;    int mpiCuAPJXaafZhPYlCO75118295 = -166890311;    int mpiCuAPJXaafZhPYlCO29137402 = -825621936;    int mpiCuAPJXaafZhPYlCO98878475 = -916578120;    int mpiCuAPJXaafZhPYlCO44868624 = -835105307;    int mpiCuAPJXaafZhPYlCO46068569 = -787906685;    int mpiCuAPJXaafZhPYlCO75115708 = -58384376;    int mpiCuAPJXaafZhPYlCO64379614 = -910052278;    int mpiCuAPJXaafZhPYlCO8089757 = 98348623;    int mpiCuAPJXaafZhPYlCO70835972 = -98740063;    int mpiCuAPJXaafZhPYlCO51822236 = -370629846;    int mpiCuAPJXaafZhPYlCO75147208 = 23227429;    int mpiCuAPJXaafZhPYlCO95932168 = -928633525;    int mpiCuAPJXaafZhPYlCO18423714 = 83335088;    int mpiCuAPJXaafZhPYlCO22291686 = -371555421;    int mpiCuAPJXaafZhPYlCO12804960 = -900618750;    int mpiCuAPJXaafZhPYlCO85426440 = -108618287;    int mpiCuAPJXaafZhPYlCO49887491 = -199436387;    int mpiCuAPJXaafZhPYlCO27599778 = -395325406;    int mpiCuAPJXaafZhPYlCO15649724 = -144373304;    int mpiCuAPJXaafZhPYlCO27588381 = -843038255;    int mpiCuAPJXaafZhPYlCO83118565 = -203650960;    int mpiCuAPJXaafZhPYlCO82879408 = -624476668;    int mpiCuAPJXaafZhPYlCO13095581 = -163676478;    int mpiCuAPJXaafZhPYlCO12267999 = -692763144;    int mpiCuAPJXaafZhPYlCO75139565 = -522062279;    int mpiCuAPJXaafZhPYlCO19932491 = 1323078;    int mpiCuAPJXaafZhPYlCO40328263 = -111334087;    int mpiCuAPJXaafZhPYlCO88348770 = -755736725;    int mpiCuAPJXaafZhPYlCO8661609 = -271938355;    int mpiCuAPJXaafZhPYlCO54563134 = 72499756;    int mpiCuAPJXaafZhPYlCO3782390 = -528421038;    int mpiCuAPJXaafZhPYlCO63063283 = -649871613;    int mpiCuAPJXaafZhPYlCO9127582 = -405425961;    int mpiCuAPJXaafZhPYlCO31445193 = -163264484;    int mpiCuAPJXaafZhPYlCO43299975 = -594534625;    int mpiCuAPJXaafZhPYlCO42698948 = -986262456;    int mpiCuAPJXaafZhPYlCO40503773 = -492141691;    int mpiCuAPJXaafZhPYlCO19414370 = -29119032;    int mpiCuAPJXaafZhPYlCO65765051 = -723058276;    int mpiCuAPJXaafZhPYlCO92124873 = -418241103;    int mpiCuAPJXaafZhPYlCO53059623 = -718471149;    int mpiCuAPJXaafZhPYlCO19837950 = -561774484;    int mpiCuAPJXaafZhPYlCO83661196 = -221932810;    int mpiCuAPJXaafZhPYlCO3541622 = -408929955;    int mpiCuAPJXaafZhPYlCO24142530 = -361555469;    int mpiCuAPJXaafZhPYlCO62541832 = -778138075;    int mpiCuAPJXaafZhPYlCO2831072 = -390508831;    int mpiCuAPJXaafZhPYlCO86575518 = 18093839;    int mpiCuAPJXaafZhPYlCO85096437 = -663462543;    int mpiCuAPJXaafZhPYlCO64203877 = -160670010;    int mpiCuAPJXaafZhPYlCO16074542 = -953247039;    int mpiCuAPJXaafZhPYlCO70011791 = -280166786;    int mpiCuAPJXaafZhPYlCO23374725 = -14354756;    int mpiCuAPJXaafZhPYlCO56461479 = -546442232;    int mpiCuAPJXaafZhPYlCO20496084 = -563704396;    int mpiCuAPJXaafZhPYlCO92238887 = -542413643;    int mpiCuAPJXaafZhPYlCO16041821 = -561945459;    int mpiCuAPJXaafZhPYlCO86610477 = -123814977;    int mpiCuAPJXaafZhPYlCO69729058 = -213043029;    int mpiCuAPJXaafZhPYlCO26136078 = -689229763;    int mpiCuAPJXaafZhPYlCO34787446 = -947050289;    int mpiCuAPJXaafZhPYlCO76030843 = -54315553;    int mpiCuAPJXaafZhPYlCO99428148 = -629713022;    int mpiCuAPJXaafZhPYlCO16272838 = -71239820;    int mpiCuAPJXaafZhPYlCO48039847 = -842208808;    int mpiCuAPJXaafZhPYlCO12083926 = -326900958;    int mpiCuAPJXaafZhPYlCO86804587 = -423207565;    int mpiCuAPJXaafZhPYlCO86978520 = -753400428;    int mpiCuAPJXaafZhPYlCO78991710 = -777020796;    int mpiCuAPJXaafZhPYlCO70106011 = -914356294;    int mpiCuAPJXaafZhPYlCO44922667 = -616476596;    int mpiCuAPJXaafZhPYlCO30473121 = -70317355;    int mpiCuAPJXaafZhPYlCO61834726 = -672267130;    int mpiCuAPJXaafZhPYlCO23524850 = -726132201;    int mpiCuAPJXaafZhPYlCO74528757 = -24567107;    int mpiCuAPJXaafZhPYlCO63280615 = -641876476;    int mpiCuAPJXaafZhPYlCO99218211 = -302543858;    int mpiCuAPJXaafZhPYlCO9553960 = -30619840;     mpiCuAPJXaafZhPYlCO35059843 = mpiCuAPJXaafZhPYlCO18418270;     mpiCuAPJXaafZhPYlCO18418270 = mpiCuAPJXaafZhPYlCO71836349;     mpiCuAPJXaafZhPYlCO71836349 = mpiCuAPJXaafZhPYlCO39382249;     mpiCuAPJXaafZhPYlCO39382249 = mpiCuAPJXaafZhPYlCO64282993;     mpiCuAPJXaafZhPYlCO64282993 = mpiCuAPJXaafZhPYlCO11833621;     mpiCuAPJXaafZhPYlCO11833621 = mpiCuAPJXaafZhPYlCO67240582;     mpiCuAPJXaafZhPYlCO67240582 = mpiCuAPJXaafZhPYlCO17439237;     mpiCuAPJXaafZhPYlCO17439237 = mpiCuAPJXaafZhPYlCO27927706;     mpiCuAPJXaafZhPYlCO27927706 = mpiCuAPJXaafZhPYlCO54497169;     mpiCuAPJXaafZhPYlCO54497169 = mpiCuAPJXaafZhPYlCO55363858;     mpiCuAPJXaafZhPYlCO55363858 = mpiCuAPJXaafZhPYlCO99289737;     mpiCuAPJXaafZhPYlCO99289737 = mpiCuAPJXaafZhPYlCO58474000;     mpiCuAPJXaafZhPYlCO58474000 = mpiCuAPJXaafZhPYlCO21254785;     mpiCuAPJXaafZhPYlCO21254785 = mpiCuAPJXaafZhPYlCO8867204;     mpiCuAPJXaafZhPYlCO8867204 = mpiCuAPJXaafZhPYlCO97901396;     mpiCuAPJXaafZhPYlCO97901396 = mpiCuAPJXaafZhPYlCO49630318;     mpiCuAPJXaafZhPYlCO49630318 = mpiCuAPJXaafZhPYlCO65962032;     mpiCuAPJXaafZhPYlCO65962032 = mpiCuAPJXaafZhPYlCO97611568;     mpiCuAPJXaafZhPYlCO97611568 = mpiCuAPJXaafZhPYlCO39024448;     mpiCuAPJXaafZhPYlCO39024448 = mpiCuAPJXaafZhPYlCO84049859;     mpiCuAPJXaafZhPYlCO84049859 = mpiCuAPJXaafZhPYlCO3614650;     mpiCuAPJXaafZhPYlCO3614650 = mpiCuAPJXaafZhPYlCO75118295;     mpiCuAPJXaafZhPYlCO75118295 = mpiCuAPJXaafZhPYlCO29137402;     mpiCuAPJXaafZhPYlCO29137402 = mpiCuAPJXaafZhPYlCO98878475;     mpiCuAPJXaafZhPYlCO98878475 = mpiCuAPJXaafZhPYlCO44868624;     mpiCuAPJXaafZhPYlCO44868624 = mpiCuAPJXaafZhPYlCO46068569;     mpiCuAPJXaafZhPYlCO46068569 = mpiCuAPJXaafZhPYlCO75115708;     mpiCuAPJXaafZhPYlCO75115708 = mpiCuAPJXaafZhPYlCO64379614;     mpiCuAPJXaafZhPYlCO64379614 = mpiCuAPJXaafZhPYlCO8089757;     mpiCuAPJXaafZhPYlCO8089757 = mpiCuAPJXaafZhPYlCO70835972;     mpiCuAPJXaafZhPYlCO70835972 = mpiCuAPJXaafZhPYlCO51822236;     mpiCuAPJXaafZhPYlCO51822236 = mpiCuAPJXaafZhPYlCO75147208;     mpiCuAPJXaafZhPYlCO75147208 = mpiCuAPJXaafZhPYlCO95932168;     mpiCuAPJXaafZhPYlCO95932168 = mpiCuAPJXaafZhPYlCO18423714;     mpiCuAPJXaafZhPYlCO18423714 = mpiCuAPJXaafZhPYlCO22291686;     mpiCuAPJXaafZhPYlCO22291686 = mpiCuAPJXaafZhPYlCO12804960;     mpiCuAPJXaafZhPYlCO12804960 = mpiCuAPJXaafZhPYlCO85426440;     mpiCuAPJXaafZhPYlCO85426440 = mpiCuAPJXaafZhPYlCO49887491;     mpiCuAPJXaafZhPYlCO49887491 = mpiCuAPJXaafZhPYlCO27599778;     mpiCuAPJXaafZhPYlCO27599778 = mpiCuAPJXaafZhPYlCO15649724;     mpiCuAPJXaafZhPYlCO15649724 = mpiCuAPJXaafZhPYlCO27588381;     mpiCuAPJXaafZhPYlCO27588381 = mpiCuAPJXaafZhPYlCO83118565;     mpiCuAPJXaafZhPYlCO83118565 = mpiCuAPJXaafZhPYlCO82879408;     mpiCuAPJXaafZhPYlCO82879408 = mpiCuAPJXaafZhPYlCO13095581;     mpiCuAPJXaafZhPYlCO13095581 = mpiCuAPJXaafZhPYlCO12267999;     mpiCuAPJXaafZhPYlCO12267999 = mpiCuAPJXaafZhPYlCO75139565;     mpiCuAPJXaafZhPYlCO75139565 = mpiCuAPJXaafZhPYlCO19932491;     mpiCuAPJXaafZhPYlCO19932491 = mpiCuAPJXaafZhPYlCO40328263;     mpiCuAPJXaafZhPYlCO40328263 = mpiCuAPJXaafZhPYlCO88348770;     mpiCuAPJXaafZhPYlCO88348770 = mpiCuAPJXaafZhPYlCO8661609;     mpiCuAPJXaafZhPYlCO8661609 = mpiCuAPJXaafZhPYlCO54563134;     mpiCuAPJXaafZhPYlCO54563134 = mpiCuAPJXaafZhPYlCO3782390;     mpiCuAPJXaafZhPYlCO3782390 = mpiCuAPJXaafZhPYlCO63063283;     mpiCuAPJXaafZhPYlCO63063283 = mpiCuAPJXaafZhPYlCO9127582;     mpiCuAPJXaafZhPYlCO9127582 = mpiCuAPJXaafZhPYlCO31445193;     mpiCuAPJXaafZhPYlCO31445193 = mpiCuAPJXaafZhPYlCO43299975;     mpiCuAPJXaafZhPYlCO43299975 = mpiCuAPJXaafZhPYlCO42698948;     mpiCuAPJXaafZhPYlCO42698948 = mpiCuAPJXaafZhPYlCO40503773;     mpiCuAPJXaafZhPYlCO40503773 = mpiCuAPJXaafZhPYlCO19414370;     mpiCuAPJXaafZhPYlCO19414370 = mpiCuAPJXaafZhPYlCO65765051;     mpiCuAPJXaafZhPYlCO65765051 = mpiCuAPJXaafZhPYlCO92124873;     mpiCuAPJXaafZhPYlCO92124873 = mpiCuAPJXaafZhPYlCO53059623;     mpiCuAPJXaafZhPYlCO53059623 = mpiCuAPJXaafZhPYlCO19837950;     mpiCuAPJXaafZhPYlCO19837950 = mpiCuAPJXaafZhPYlCO83661196;     mpiCuAPJXaafZhPYlCO83661196 = mpiCuAPJXaafZhPYlCO3541622;     mpiCuAPJXaafZhPYlCO3541622 = mpiCuAPJXaafZhPYlCO24142530;     mpiCuAPJXaafZhPYlCO24142530 = mpiCuAPJXaafZhPYlCO62541832;     mpiCuAPJXaafZhPYlCO62541832 = mpiCuAPJXaafZhPYlCO2831072;     mpiCuAPJXaafZhPYlCO2831072 = mpiCuAPJXaafZhPYlCO86575518;     mpiCuAPJXaafZhPYlCO86575518 = mpiCuAPJXaafZhPYlCO85096437;     mpiCuAPJXaafZhPYlCO85096437 = mpiCuAPJXaafZhPYlCO64203877;     mpiCuAPJXaafZhPYlCO64203877 = mpiCuAPJXaafZhPYlCO16074542;     mpiCuAPJXaafZhPYlCO16074542 = mpiCuAPJXaafZhPYlCO70011791;     mpiCuAPJXaafZhPYlCO70011791 = mpiCuAPJXaafZhPYlCO23374725;     mpiCuAPJXaafZhPYlCO23374725 = mpiCuAPJXaafZhPYlCO56461479;     mpiCuAPJXaafZhPYlCO56461479 = mpiCuAPJXaafZhPYlCO20496084;     mpiCuAPJXaafZhPYlCO20496084 = mpiCuAPJXaafZhPYlCO92238887;     mpiCuAPJXaafZhPYlCO92238887 = mpiCuAPJXaafZhPYlCO16041821;     mpiCuAPJXaafZhPYlCO16041821 = mpiCuAPJXaafZhPYlCO86610477;     mpiCuAPJXaafZhPYlCO86610477 = mpiCuAPJXaafZhPYlCO69729058;     mpiCuAPJXaafZhPYlCO69729058 = mpiCuAPJXaafZhPYlCO26136078;     mpiCuAPJXaafZhPYlCO26136078 = mpiCuAPJXaafZhPYlCO34787446;     mpiCuAPJXaafZhPYlCO34787446 = mpiCuAPJXaafZhPYlCO76030843;     mpiCuAPJXaafZhPYlCO76030843 = mpiCuAPJXaafZhPYlCO99428148;     mpiCuAPJXaafZhPYlCO99428148 = mpiCuAPJXaafZhPYlCO16272838;     mpiCuAPJXaafZhPYlCO16272838 = mpiCuAPJXaafZhPYlCO48039847;     mpiCuAPJXaafZhPYlCO48039847 = mpiCuAPJXaafZhPYlCO12083926;     mpiCuAPJXaafZhPYlCO12083926 = mpiCuAPJXaafZhPYlCO86804587;     mpiCuAPJXaafZhPYlCO86804587 = mpiCuAPJXaafZhPYlCO86978520;     mpiCuAPJXaafZhPYlCO86978520 = mpiCuAPJXaafZhPYlCO78991710;     mpiCuAPJXaafZhPYlCO78991710 = mpiCuAPJXaafZhPYlCO70106011;     mpiCuAPJXaafZhPYlCO70106011 = mpiCuAPJXaafZhPYlCO44922667;     mpiCuAPJXaafZhPYlCO44922667 = mpiCuAPJXaafZhPYlCO30473121;     mpiCuAPJXaafZhPYlCO30473121 = mpiCuAPJXaafZhPYlCO61834726;     mpiCuAPJXaafZhPYlCO61834726 = mpiCuAPJXaafZhPYlCO23524850;     mpiCuAPJXaafZhPYlCO23524850 = mpiCuAPJXaafZhPYlCO74528757;     mpiCuAPJXaafZhPYlCO74528757 = mpiCuAPJXaafZhPYlCO63280615;     mpiCuAPJXaafZhPYlCO63280615 = mpiCuAPJXaafZhPYlCO99218211;     mpiCuAPJXaafZhPYlCO99218211 = mpiCuAPJXaafZhPYlCO9553960;     mpiCuAPJXaafZhPYlCO9553960 = mpiCuAPJXaafZhPYlCO35059843;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void hDPHnoOFPjceOrsdNqE99505988() {     int vNKbbPMomTYPtQTIaZz89714240 = -468147424;    int vNKbbPMomTYPtQTIaZz65415889 = -340989749;    int vNKbbPMomTYPtQTIaZz32568996 = -97269005;    int vNKbbPMomTYPtQTIaZz10817191 = -414822222;    int vNKbbPMomTYPtQTIaZz38734664 = -636659578;    int vNKbbPMomTYPtQTIaZz26008018 = -640115797;    int vNKbbPMomTYPtQTIaZz88341285 = -878518151;    int vNKbbPMomTYPtQTIaZz46614340 = -29091659;    int vNKbbPMomTYPtQTIaZz15702117 = -610279231;    int vNKbbPMomTYPtQTIaZz37129154 = -699474143;    int vNKbbPMomTYPtQTIaZz33975153 = -404916372;    int vNKbbPMomTYPtQTIaZz62054451 = -624752128;    int vNKbbPMomTYPtQTIaZz22291316 = -510311904;    int vNKbbPMomTYPtQTIaZz14221216 = -19277321;    int vNKbbPMomTYPtQTIaZz39091277 = -360583213;    int vNKbbPMomTYPtQTIaZz87668932 = -194240856;    int vNKbbPMomTYPtQTIaZz49462081 = -842888124;    int vNKbbPMomTYPtQTIaZz33558619 = -216247892;    int vNKbbPMomTYPtQTIaZz98832169 = 38696260;    int vNKbbPMomTYPtQTIaZz56659004 = -604094206;    int vNKbbPMomTYPtQTIaZz18224247 = -957563638;    int vNKbbPMomTYPtQTIaZz54867238 = 66200536;    int vNKbbPMomTYPtQTIaZz11588127 = -753633732;    int vNKbbPMomTYPtQTIaZz30565770 = -524662752;    int vNKbbPMomTYPtQTIaZz94631091 = -189491572;    int vNKbbPMomTYPtQTIaZz86109570 = -838814092;    int vNKbbPMomTYPtQTIaZz48058493 = -242750964;    int vNKbbPMomTYPtQTIaZz28364709 = -66436236;    int vNKbbPMomTYPtQTIaZz4277291 = -190297154;    int vNKbbPMomTYPtQTIaZz2525166 = -192409345;    int vNKbbPMomTYPtQTIaZz22541501 = -647612589;    int vNKbbPMomTYPtQTIaZz82813846 = -782126374;    int vNKbbPMomTYPtQTIaZz42803085 = -533290185;    int vNKbbPMomTYPtQTIaZz90588061 = -608754335;    int vNKbbPMomTYPtQTIaZz52927870 = -134528171;    int vNKbbPMomTYPtQTIaZz9618228 = -619551017;    int vNKbbPMomTYPtQTIaZz87509447 = -751045370;    int vNKbbPMomTYPtQTIaZz98403679 = 17452692;    int vNKbbPMomTYPtQTIaZz657140 = -581384988;    int vNKbbPMomTYPtQTIaZz51586172 = -53634006;    int vNKbbPMomTYPtQTIaZz71609124 = -256923462;    int vNKbbPMomTYPtQTIaZz64263038 = -350570341;    int vNKbbPMomTYPtQTIaZz74118748 = -44156278;    int vNKbbPMomTYPtQTIaZz91873807 = -98156334;    int vNKbbPMomTYPtQTIaZz73079644 = -296194076;    int vNKbbPMomTYPtQTIaZz67601600 = -761552758;    int vNKbbPMomTYPtQTIaZz91613276 = -549119663;    int vNKbbPMomTYPtQTIaZz43359800 = 23670706;    int vNKbbPMomTYPtQTIaZz82671029 = -11064276;    int vNKbbPMomTYPtQTIaZz33190433 = -995756020;    int vNKbbPMomTYPtQTIaZz83775148 = 70846143;    int vNKbbPMomTYPtQTIaZz43945284 = -442566227;    int vNKbbPMomTYPtQTIaZz35510392 = -268336495;    int vNKbbPMomTYPtQTIaZz20479041 = -545758097;    int vNKbbPMomTYPtQTIaZz81281741 = -801334642;    int vNKbbPMomTYPtQTIaZz34847002 = -434347960;    int vNKbbPMomTYPtQTIaZz53827762 = -587356018;    int vNKbbPMomTYPtQTIaZz2003226 = -572606253;    int vNKbbPMomTYPtQTIaZz16186099 = -125330650;    int vNKbbPMomTYPtQTIaZz52625093 = -797845487;    int vNKbbPMomTYPtQTIaZz77949524 = -297364834;    int vNKbbPMomTYPtQTIaZz59976577 = -712081915;    int vNKbbPMomTYPtQTIaZz42337049 = -838794506;    int vNKbbPMomTYPtQTIaZz13176951 = -317869887;    int vNKbbPMomTYPtQTIaZz14587653 = 48138446;    int vNKbbPMomTYPtQTIaZz51161306 = -622789999;    int vNKbbPMomTYPtQTIaZz19251367 = 8538057;    int vNKbbPMomTYPtQTIaZz31703254 = -901557570;    int vNKbbPMomTYPtQTIaZz61293345 = -884749150;    int vNKbbPMomTYPtQTIaZz29473050 = -741032196;    int vNKbbPMomTYPtQTIaZz159486 = -443195487;    int vNKbbPMomTYPtQTIaZz51058402 = -760340817;    int vNKbbPMomTYPtQTIaZz32901480 = -634862904;    int vNKbbPMomTYPtQTIaZz47245997 = -907669735;    int vNKbbPMomTYPtQTIaZz85049879 = -247170744;    int vNKbbPMomTYPtQTIaZz53961208 = -506993297;    int vNKbbPMomTYPtQTIaZz80748490 = -889643186;    int vNKbbPMomTYPtQTIaZz19714320 = -555477398;    int vNKbbPMomTYPtQTIaZz57486126 = -128468677;    int vNKbbPMomTYPtQTIaZz27029492 = -427938814;    int vNKbbPMomTYPtQTIaZz94496294 = -189694430;    int vNKbbPMomTYPtQTIaZz4698694 = -166421670;    int vNKbbPMomTYPtQTIaZz45693679 = 44628039;    int vNKbbPMomTYPtQTIaZz71086857 = -194541134;    int vNKbbPMomTYPtQTIaZz18750018 = -163255489;    int vNKbbPMomTYPtQTIaZz78596217 = -105046363;    int vNKbbPMomTYPtQTIaZz47303455 = -413789879;    int vNKbbPMomTYPtQTIaZz22324045 = -987532088;    int vNKbbPMomTYPtQTIaZz9306321 = -807419694;    int vNKbbPMomTYPtQTIaZz18080869 = -700180211;    int vNKbbPMomTYPtQTIaZz55790465 = 67805000;    int vNKbbPMomTYPtQTIaZz85506221 = -78439118;    int vNKbbPMomTYPtQTIaZz82217580 = -857216658;    int vNKbbPMomTYPtQTIaZz48032047 = -783539502;    int vNKbbPMomTYPtQTIaZz73636647 = -756269172;    int vNKbbPMomTYPtQTIaZz11632548 = -544841547;    int vNKbbPMomTYPtQTIaZz21925990 = -511775836;    int vNKbbPMomTYPtQTIaZz60941797 = -726286392;    int vNKbbPMomTYPtQTIaZz77286154 = -46294780;    int vNKbbPMomTYPtQTIaZz21918339 = -468147424;     vNKbbPMomTYPtQTIaZz89714240 = vNKbbPMomTYPtQTIaZz65415889;     vNKbbPMomTYPtQTIaZz65415889 = vNKbbPMomTYPtQTIaZz32568996;     vNKbbPMomTYPtQTIaZz32568996 = vNKbbPMomTYPtQTIaZz10817191;     vNKbbPMomTYPtQTIaZz10817191 = vNKbbPMomTYPtQTIaZz38734664;     vNKbbPMomTYPtQTIaZz38734664 = vNKbbPMomTYPtQTIaZz26008018;     vNKbbPMomTYPtQTIaZz26008018 = vNKbbPMomTYPtQTIaZz88341285;     vNKbbPMomTYPtQTIaZz88341285 = vNKbbPMomTYPtQTIaZz46614340;     vNKbbPMomTYPtQTIaZz46614340 = vNKbbPMomTYPtQTIaZz15702117;     vNKbbPMomTYPtQTIaZz15702117 = vNKbbPMomTYPtQTIaZz37129154;     vNKbbPMomTYPtQTIaZz37129154 = vNKbbPMomTYPtQTIaZz33975153;     vNKbbPMomTYPtQTIaZz33975153 = vNKbbPMomTYPtQTIaZz62054451;     vNKbbPMomTYPtQTIaZz62054451 = vNKbbPMomTYPtQTIaZz22291316;     vNKbbPMomTYPtQTIaZz22291316 = vNKbbPMomTYPtQTIaZz14221216;     vNKbbPMomTYPtQTIaZz14221216 = vNKbbPMomTYPtQTIaZz39091277;     vNKbbPMomTYPtQTIaZz39091277 = vNKbbPMomTYPtQTIaZz87668932;     vNKbbPMomTYPtQTIaZz87668932 = vNKbbPMomTYPtQTIaZz49462081;     vNKbbPMomTYPtQTIaZz49462081 = vNKbbPMomTYPtQTIaZz33558619;     vNKbbPMomTYPtQTIaZz33558619 = vNKbbPMomTYPtQTIaZz98832169;     vNKbbPMomTYPtQTIaZz98832169 = vNKbbPMomTYPtQTIaZz56659004;     vNKbbPMomTYPtQTIaZz56659004 = vNKbbPMomTYPtQTIaZz18224247;     vNKbbPMomTYPtQTIaZz18224247 = vNKbbPMomTYPtQTIaZz54867238;     vNKbbPMomTYPtQTIaZz54867238 = vNKbbPMomTYPtQTIaZz11588127;     vNKbbPMomTYPtQTIaZz11588127 = vNKbbPMomTYPtQTIaZz30565770;     vNKbbPMomTYPtQTIaZz30565770 = vNKbbPMomTYPtQTIaZz94631091;     vNKbbPMomTYPtQTIaZz94631091 = vNKbbPMomTYPtQTIaZz86109570;     vNKbbPMomTYPtQTIaZz86109570 = vNKbbPMomTYPtQTIaZz48058493;     vNKbbPMomTYPtQTIaZz48058493 = vNKbbPMomTYPtQTIaZz28364709;     vNKbbPMomTYPtQTIaZz28364709 = vNKbbPMomTYPtQTIaZz4277291;     vNKbbPMomTYPtQTIaZz4277291 = vNKbbPMomTYPtQTIaZz2525166;     vNKbbPMomTYPtQTIaZz2525166 = vNKbbPMomTYPtQTIaZz22541501;     vNKbbPMomTYPtQTIaZz22541501 = vNKbbPMomTYPtQTIaZz82813846;     vNKbbPMomTYPtQTIaZz82813846 = vNKbbPMomTYPtQTIaZz42803085;     vNKbbPMomTYPtQTIaZz42803085 = vNKbbPMomTYPtQTIaZz90588061;     vNKbbPMomTYPtQTIaZz90588061 = vNKbbPMomTYPtQTIaZz52927870;     vNKbbPMomTYPtQTIaZz52927870 = vNKbbPMomTYPtQTIaZz9618228;     vNKbbPMomTYPtQTIaZz9618228 = vNKbbPMomTYPtQTIaZz87509447;     vNKbbPMomTYPtQTIaZz87509447 = vNKbbPMomTYPtQTIaZz98403679;     vNKbbPMomTYPtQTIaZz98403679 = vNKbbPMomTYPtQTIaZz657140;     vNKbbPMomTYPtQTIaZz657140 = vNKbbPMomTYPtQTIaZz51586172;     vNKbbPMomTYPtQTIaZz51586172 = vNKbbPMomTYPtQTIaZz71609124;     vNKbbPMomTYPtQTIaZz71609124 = vNKbbPMomTYPtQTIaZz64263038;     vNKbbPMomTYPtQTIaZz64263038 = vNKbbPMomTYPtQTIaZz74118748;     vNKbbPMomTYPtQTIaZz74118748 = vNKbbPMomTYPtQTIaZz91873807;     vNKbbPMomTYPtQTIaZz91873807 = vNKbbPMomTYPtQTIaZz73079644;     vNKbbPMomTYPtQTIaZz73079644 = vNKbbPMomTYPtQTIaZz67601600;     vNKbbPMomTYPtQTIaZz67601600 = vNKbbPMomTYPtQTIaZz91613276;     vNKbbPMomTYPtQTIaZz91613276 = vNKbbPMomTYPtQTIaZz43359800;     vNKbbPMomTYPtQTIaZz43359800 = vNKbbPMomTYPtQTIaZz82671029;     vNKbbPMomTYPtQTIaZz82671029 = vNKbbPMomTYPtQTIaZz33190433;     vNKbbPMomTYPtQTIaZz33190433 = vNKbbPMomTYPtQTIaZz83775148;     vNKbbPMomTYPtQTIaZz83775148 = vNKbbPMomTYPtQTIaZz43945284;     vNKbbPMomTYPtQTIaZz43945284 = vNKbbPMomTYPtQTIaZz35510392;     vNKbbPMomTYPtQTIaZz35510392 = vNKbbPMomTYPtQTIaZz20479041;     vNKbbPMomTYPtQTIaZz20479041 = vNKbbPMomTYPtQTIaZz81281741;     vNKbbPMomTYPtQTIaZz81281741 = vNKbbPMomTYPtQTIaZz34847002;     vNKbbPMomTYPtQTIaZz34847002 = vNKbbPMomTYPtQTIaZz53827762;     vNKbbPMomTYPtQTIaZz53827762 = vNKbbPMomTYPtQTIaZz2003226;     vNKbbPMomTYPtQTIaZz2003226 = vNKbbPMomTYPtQTIaZz16186099;     vNKbbPMomTYPtQTIaZz16186099 = vNKbbPMomTYPtQTIaZz52625093;     vNKbbPMomTYPtQTIaZz52625093 = vNKbbPMomTYPtQTIaZz77949524;     vNKbbPMomTYPtQTIaZz77949524 = vNKbbPMomTYPtQTIaZz59976577;     vNKbbPMomTYPtQTIaZz59976577 = vNKbbPMomTYPtQTIaZz42337049;     vNKbbPMomTYPtQTIaZz42337049 = vNKbbPMomTYPtQTIaZz13176951;     vNKbbPMomTYPtQTIaZz13176951 = vNKbbPMomTYPtQTIaZz14587653;     vNKbbPMomTYPtQTIaZz14587653 = vNKbbPMomTYPtQTIaZz51161306;     vNKbbPMomTYPtQTIaZz51161306 = vNKbbPMomTYPtQTIaZz19251367;     vNKbbPMomTYPtQTIaZz19251367 = vNKbbPMomTYPtQTIaZz31703254;     vNKbbPMomTYPtQTIaZz31703254 = vNKbbPMomTYPtQTIaZz61293345;     vNKbbPMomTYPtQTIaZz61293345 = vNKbbPMomTYPtQTIaZz29473050;     vNKbbPMomTYPtQTIaZz29473050 = vNKbbPMomTYPtQTIaZz159486;     vNKbbPMomTYPtQTIaZz159486 = vNKbbPMomTYPtQTIaZz51058402;     vNKbbPMomTYPtQTIaZz51058402 = vNKbbPMomTYPtQTIaZz32901480;     vNKbbPMomTYPtQTIaZz32901480 = vNKbbPMomTYPtQTIaZz47245997;     vNKbbPMomTYPtQTIaZz47245997 = vNKbbPMomTYPtQTIaZz85049879;     vNKbbPMomTYPtQTIaZz85049879 = vNKbbPMomTYPtQTIaZz53961208;     vNKbbPMomTYPtQTIaZz53961208 = vNKbbPMomTYPtQTIaZz80748490;     vNKbbPMomTYPtQTIaZz80748490 = vNKbbPMomTYPtQTIaZz19714320;     vNKbbPMomTYPtQTIaZz19714320 = vNKbbPMomTYPtQTIaZz57486126;     vNKbbPMomTYPtQTIaZz57486126 = vNKbbPMomTYPtQTIaZz27029492;     vNKbbPMomTYPtQTIaZz27029492 = vNKbbPMomTYPtQTIaZz94496294;     vNKbbPMomTYPtQTIaZz94496294 = vNKbbPMomTYPtQTIaZz4698694;     vNKbbPMomTYPtQTIaZz4698694 = vNKbbPMomTYPtQTIaZz45693679;     vNKbbPMomTYPtQTIaZz45693679 = vNKbbPMomTYPtQTIaZz71086857;     vNKbbPMomTYPtQTIaZz71086857 = vNKbbPMomTYPtQTIaZz18750018;     vNKbbPMomTYPtQTIaZz18750018 = vNKbbPMomTYPtQTIaZz78596217;     vNKbbPMomTYPtQTIaZz78596217 = vNKbbPMomTYPtQTIaZz47303455;     vNKbbPMomTYPtQTIaZz47303455 = vNKbbPMomTYPtQTIaZz22324045;     vNKbbPMomTYPtQTIaZz22324045 = vNKbbPMomTYPtQTIaZz9306321;     vNKbbPMomTYPtQTIaZz9306321 = vNKbbPMomTYPtQTIaZz18080869;     vNKbbPMomTYPtQTIaZz18080869 = vNKbbPMomTYPtQTIaZz55790465;     vNKbbPMomTYPtQTIaZz55790465 = vNKbbPMomTYPtQTIaZz85506221;     vNKbbPMomTYPtQTIaZz85506221 = vNKbbPMomTYPtQTIaZz82217580;     vNKbbPMomTYPtQTIaZz82217580 = vNKbbPMomTYPtQTIaZz48032047;     vNKbbPMomTYPtQTIaZz48032047 = vNKbbPMomTYPtQTIaZz73636647;     vNKbbPMomTYPtQTIaZz73636647 = vNKbbPMomTYPtQTIaZz11632548;     vNKbbPMomTYPtQTIaZz11632548 = vNKbbPMomTYPtQTIaZz21925990;     vNKbbPMomTYPtQTIaZz21925990 = vNKbbPMomTYPtQTIaZz60941797;     vNKbbPMomTYPtQTIaZz60941797 = vNKbbPMomTYPtQTIaZz77286154;     vNKbbPMomTYPtQTIaZz77286154 = vNKbbPMomTYPtQTIaZz21918339;     vNKbbPMomTYPtQTIaZz21918339 = vNKbbPMomTYPtQTIaZz89714240;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void tOHEeLZGeNKeycsGGmr5834536() {     int TunrrZXyuHERadaLqLa44368637 = -905675008;    int TunrrZXyuHERadaLqLa12413509 = -920554563;    int TunrrZXyuHERadaLqLa93301642 = -482653619;    int TunrrZXyuHERadaLqLa82252132 = -420924633;    int TunrrZXyuHERadaLqLa13186335 = -309094817;    int TunrrZXyuHERadaLqLa40182415 = -769266633;    int TunrrZXyuHERadaLqLa9441990 = -80410824;    int TunrrZXyuHERadaLqLa75789443 = -529659892;    int TunrrZXyuHERadaLqLa3476528 = -657132602;    int TunrrZXyuHERadaLqLa19761140 = -978275412;    int TunrrZXyuHERadaLqLa12586448 = 69727055;    int TunrrZXyuHERadaLqLa24819165 = -811176217;    int TunrrZXyuHERadaLqLa86108630 = -313852209;    int TunrrZXyuHERadaLqLa7187647 = -731380899;    int TunrrZXyuHERadaLqLa69315350 = -267704844;    int TunrrZXyuHERadaLqLa77436468 = -924400421;    int TunrrZXyuHERadaLqLa49293845 = -216487953;    int TunrrZXyuHERadaLqLa1155207 = -279812360;    int TunrrZXyuHERadaLqLa52771 = -247115288;    int TunrrZXyuHERadaLqLa74293559 = -949460353;    int TunrrZXyuHERadaLqLa52398635 = -425646789;    int TunrrZXyuHERadaLqLa6119827 = -100243572;    int TunrrZXyuHERadaLqLa48057958 = -240377153;    int TunrrZXyuHERadaLqLa31994139 = -223703569;    int TunrrZXyuHERadaLqLa90383708 = -562405024;    int TunrrZXyuHERadaLqLa27350518 = -842522877;    int TunrrZXyuHERadaLqLa50048417 = -797595242;    int TunrrZXyuHERadaLqLa81613708 = -74488097;    int TunrrZXyuHERadaLqLa44174968 = -570542029;    int TunrrZXyuHERadaLqLa96960575 = -483167313;    int TunrrZXyuHERadaLqLa74247030 = -96485115;    int TunrrZXyuHERadaLqLa13805457 = -93622902;    int TunrrZXyuHERadaLqLa10458962 = 10192201;    int TunrrZXyuHERadaLqLa85243954 = -288875145;    int TunrrZXyuHERadaLqLa87432027 = -352391431;    int TunrrZXyuHERadaLqLa96944769 = -867546614;    int TunrrZXyuHERadaLqLa62213935 = -601471991;    int TunrrZXyuHERadaLqLa11380919 = -956476328;    int TunrrZXyuHERadaLqLa51426788 = -963333590;    int TunrrZXyuHERadaLqLa75572567 = -811942605;    int TunrrZXyuHERadaLqLa27568525 = -369473620;    int TunrrZXyuHERadaLqLa937697 = -958102428;    int TunrrZXyuHERadaLqLa65118931 = -984661596;    int TunrrZXyuHERadaLqLa868207 = -671836000;    int TunrrZXyuHERadaLqLa33063708 = -428711674;    int TunrrZXyuHERadaLqLa22935203 = -830342373;    int TunrrZXyuHERadaLqLa8086989 = -576177046;    int TunrrZXyuHERadaLqLa66787109 = 46018333;    int TunrrZXyuHERadaLqLa25013796 = 89205535;    int TunrrZXyuHERadaLqLa78032095 = -135775314;    int TunrrZXyuHERadaLqLa58888687 = -686369359;    int TunrrZXyuHERadaLqLa33327434 = -957632210;    int TunrrZXyuHERadaLqLa67238395 = -8251952;    int TunrrZXyuHERadaLqLa77894797 = -441644582;    int TunrrZXyuHERadaLqLa53435900 = -97243323;    int TunrrZXyuHERadaLqLa38248811 = -705431436;    int TunrrZXyuHERadaLqLa64355550 = -580177411;    int TunrrZXyuHERadaLqLa61307503 = -158950050;    int TunrrZXyuHERadaLqLa91868424 = -858519609;    int TunrrZXyuHERadaLqLa85835816 = -466571941;    int TunrrZXyuHERadaLqLa90133997 = -971671391;    int TunrrZXyuHERadaLqLa27828281 = 94077273;    int TunrrZXyuHERadaLqLa31614476 = -959117863;    int TunrrZXyuHERadaLqLa6515953 = -73965289;    int TunrrZXyuHERadaLqLa45514110 = -781790298;    int TunrrZXyuHERadaLqLa98780990 = -836650043;    int TunrrZXyuHERadaLqLa14360203 = -721368418;    int TunrrZXyuHERadaLqLa864677 = 75022935;    int TunrrZXyuHERadaLqLa19755620 = -278989468;    int TunrrZXyuHERadaLqLa72370580 = -400158231;    int TunrrZXyuHERadaLqLa15222534 = -222928431;    int TunrrZXyuHERadaLqLa37912927 = -260011625;    int TunrrZXyuHERadaLqLa49728418 = -316478770;    int TunrrZXyuHERadaLqLa24480204 = -435172683;    int TunrrZXyuHERadaLqLa46725034 = -479986733;    int TunrrZXyuHERadaLqLa51460938 = -467544361;    int TunrrZXyuHERadaLqLa41000896 = -115581976;    int TunrrZXyuHERadaLqLa47189752 = -568541153;    int TunrrZXyuHERadaLqLa98930431 = -794991896;    int TunrrZXyuHERadaLqLa67448506 = -732062651;    int TunrrZXyuHERadaLqLa19263530 = -166345831;    int TunrrZXyuHERadaLqLa83261308 = -743613576;    int TunrrZXyuHERadaLqLa56599913 = -63693633;    int TunrrZXyuHERadaLqLa66142872 = -334766715;    int TunrrZXyuHERadaLqLa38071888 = -796797955;    int TunrrZXyuHERadaLqLa40919596 = -138852906;    int TunrrZXyuHERadaLqLa46567062 = 14629050;    int TunrrZXyuHERadaLqLa32564164 = -548163218;    int TunrrZXyuHERadaLqLa31808054 = -91631822;    int TunrrZXyuHERadaLqLa49183217 = -646959995;    int TunrrZXyuHERadaLqLa32589219 = -187369203;    int TunrrZXyuHERadaLqLa906432 = -342521941;    int TunrrZXyuHERadaLqLa19512494 = 2043280;    int TunrrZXyuHERadaLqLa65590972 = -396761649;    int TunrrZXyuHERadaLqLa85438569 = -840271215;    int TunrrZXyuHERadaLqLa99740244 = -363550894;    int TunrrZXyuHERadaLqLa69323221 = -998984565;    int TunrrZXyuHERadaLqLa58602978 = -810696307;    int TunrrZXyuHERadaLqLa55354097 = -890045702;    int TunrrZXyuHERadaLqLa34282717 = -905675008;     TunrrZXyuHERadaLqLa44368637 = TunrrZXyuHERadaLqLa12413509;     TunrrZXyuHERadaLqLa12413509 = TunrrZXyuHERadaLqLa93301642;     TunrrZXyuHERadaLqLa93301642 = TunrrZXyuHERadaLqLa82252132;     TunrrZXyuHERadaLqLa82252132 = TunrrZXyuHERadaLqLa13186335;     TunrrZXyuHERadaLqLa13186335 = TunrrZXyuHERadaLqLa40182415;     TunrrZXyuHERadaLqLa40182415 = TunrrZXyuHERadaLqLa9441990;     TunrrZXyuHERadaLqLa9441990 = TunrrZXyuHERadaLqLa75789443;     TunrrZXyuHERadaLqLa75789443 = TunrrZXyuHERadaLqLa3476528;     TunrrZXyuHERadaLqLa3476528 = TunrrZXyuHERadaLqLa19761140;     TunrrZXyuHERadaLqLa19761140 = TunrrZXyuHERadaLqLa12586448;     TunrrZXyuHERadaLqLa12586448 = TunrrZXyuHERadaLqLa24819165;     TunrrZXyuHERadaLqLa24819165 = TunrrZXyuHERadaLqLa86108630;     TunrrZXyuHERadaLqLa86108630 = TunrrZXyuHERadaLqLa7187647;     TunrrZXyuHERadaLqLa7187647 = TunrrZXyuHERadaLqLa69315350;     TunrrZXyuHERadaLqLa69315350 = TunrrZXyuHERadaLqLa77436468;     TunrrZXyuHERadaLqLa77436468 = TunrrZXyuHERadaLqLa49293845;     TunrrZXyuHERadaLqLa49293845 = TunrrZXyuHERadaLqLa1155207;     TunrrZXyuHERadaLqLa1155207 = TunrrZXyuHERadaLqLa52771;     TunrrZXyuHERadaLqLa52771 = TunrrZXyuHERadaLqLa74293559;     TunrrZXyuHERadaLqLa74293559 = TunrrZXyuHERadaLqLa52398635;     TunrrZXyuHERadaLqLa52398635 = TunrrZXyuHERadaLqLa6119827;     TunrrZXyuHERadaLqLa6119827 = TunrrZXyuHERadaLqLa48057958;     TunrrZXyuHERadaLqLa48057958 = TunrrZXyuHERadaLqLa31994139;     TunrrZXyuHERadaLqLa31994139 = TunrrZXyuHERadaLqLa90383708;     TunrrZXyuHERadaLqLa90383708 = TunrrZXyuHERadaLqLa27350518;     TunrrZXyuHERadaLqLa27350518 = TunrrZXyuHERadaLqLa50048417;     TunrrZXyuHERadaLqLa50048417 = TunrrZXyuHERadaLqLa81613708;     TunrrZXyuHERadaLqLa81613708 = TunrrZXyuHERadaLqLa44174968;     TunrrZXyuHERadaLqLa44174968 = TunrrZXyuHERadaLqLa96960575;     TunrrZXyuHERadaLqLa96960575 = TunrrZXyuHERadaLqLa74247030;     TunrrZXyuHERadaLqLa74247030 = TunrrZXyuHERadaLqLa13805457;     TunrrZXyuHERadaLqLa13805457 = TunrrZXyuHERadaLqLa10458962;     TunrrZXyuHERadaLqLa10458962 = TunrrZXyuHERadaLqLa85243954;     TunrrZXyuHERadaLqLa85243954 = TunrrZXyuHERadaLqLa87432027;     TunrrZXyuHERadaLqLa87432027 = TunrrZXyuHERadaLqLa96944769;     TunrrZXyuHERadaLqLa96944769 = TunrrZXyuHERadaLqLa62213935;     TunrrZXyuHERadaLqLa62213935 = TunrrZXyuHERadaLqLa11380919;     TunrrZXyuHERadaLqLa11380919 = TunrrZXyuHERadaLqLa51426788;     TunrrZXyuHERadaLqLa51426788 = TunrrZXyuHERadaLqLa75572567;     TunrrZXyuHERadaLqLa75572567 = TunrrZXyuHERadaLqLa27568525;     TunrrZXyuHERadaLqLa27568525 = TunrrZXyuHERadaLqLa937697;     TunrrZXyuHERadaLqLa937697 = TunrrZXyuHERadaLqLa65118931;     TunrrZXyuHERadaLqLa65118931 = TunrrZXyuHERadaLqLa868207;     TunrrZXyuHERadaLqLa868207 = TunrrZXyuHERadaLqLa33063708;     TunrrZXyuHERadaLqLa33063708 = TunrrZXyuHERadaLqLa22935203;     TunrrZXyuHERadaLqLa22935203 = TunrrZXyuHERadaLqLa8086989;     TunrrZXyuHERadaLqLa8086989 = TunrrZXyuHERadaLqLa66787109;     TunrrZXyuHERadaLqLa66787109 = TunrrZXyuHERadaLqLa25013796;     TunrrZXyuHERadaLqLa25013796 = TunrrZXyuHERadaLqLa78032095;     TunrrZXyuHERadaLqLa78032095 = TunrrZXyuHERadaLqLa58888687;     TunrrZXyuHERadaLqLa58888687 = TunrrZXyuHERadaLqLa33327434;     TunrrZXyuHERadaLqLa33327434 = TunrrZXyuHERadaLqLa67238395;     TunrrZXyuHERadaLqLa67238395 = TunrrZXyuHERadaLqLa77894797;     TunrrZXyuHERadaLqLa77894797 = TunrrZXyuHERadaLqLa53435900;     TunrrZXyuHERadaLqLa53435900 = TunrrZXyuHERadaLqLa38248811;     TunrrZXyuHERadaLqLa38248811 = TunrrZXyuHERadaLqLa64355550;     TunrrZXyuHERadaLqLa64355550 = TunrrZXyuHERadaLqLa61307503;     TunrrZXyuHERadaLqLa61307503 = TunrrZXyuHERadaLqLa91868424;     TunrrZXyuHERadaLqLa91868424 = TunrrZXyuHERadaLqLa85835816;     TunrrZXyuHERadaLqLa85835816 = TunrrZXyuHERadaLqLa90133997;     TunrrZXyuHERadaLqLa90133997 = TunrrZXyuHERadaLqLa27828281;     TunrrZXyuHERadaLqLa27828281 = TunrrZXyuHERadaLqLa31614476;     TunrrZXyuHERadaLqLa31614476 = TunrrZXyuHERadaLqLa6515953;     TunrrZXyuHERadaLqLa6515953 = TunrrZXyuHERadaLqLa45514110;     TunrrZXyuHERadaLqLa45514110 = TunrrZXyuHERadaLqLa98780990;     TunrrZXyuHERadaLqLa98780990 = TunrrZXyuHERadaLqLa14360203;     TunrrZXyuHERadaLqLa14360203 = TunrrZXyuHERadaLqLa864677;     TunrrZXyuHERadaLqLa864677 = TunrrZXyuHERadaLqLa19755620;     TunrrZXyuHERadaLqLa19755620 = TunrrZXyuHERadaLqLa72370580;     TunrrZXyuHERadaLqLa72370580 = TunrrZXyuHERadaLqLa15222534;     TunrrZXyuHERadaLqLa15222534 = TunrrZXyuHERadaLqLa37912927;     TunrrZXyuHERadaLqLa37912927 = TunrrZXyuHERadaLqLa49728418;     TunrrZXyuHERadaLqLa49728418 = TunrrZXyuHERadaLqLa24480204;     TunrrZXyuHERadaLqLa24480204 = TunrrZXyuHERadaLqLa46725034;     TunrrZXyuHERadaLqLa46725034 = TunrrZXyuHERadaLqLa51460938;     TunrrZXyuHERadaLqLa51460938 = TunrrZXyuHERadaLqLa41000896;     TunrrZXyuHERadaLqLa41000896 = TunrrZXyuHERadaLqLa47189752;     TunrrZXyuHERadaLqLa47189752 = TunrrZXyuHERadaLqLa98930431;     TunrrZXyuHERadaLqLa98930431 = TunrrZXyuHERadaLqLa67448506;     TunrrZXyuHERadaLqLa67448506 = TunrrZXyuHERadaLqLa19263530;     TunrrZXyuHERadaLqLa19263530 = TunrrZXyuHERadaLqLa83261308;     TunrrZXyuHERadaLqLa83261308 = TunrrZXyuHERadaLqLa56599913;     TunrrZXyuHERadaLqLa56599913 = TunrrZXyuHERadaLqLa66142872;     TunrrZXyuHERadaLqLa66142872 = TunrrZXyuHERadaLqLa38071888;     TunrrZXyuHERadaLqLa38071888 = TunrrZXyuHERadaLqLa40919596;     TunrrZXyuHERadaLqLa40919596 = TunrrZXyuHERadaLqLa46567062;     TunrrZXyuHERadaLqLa46567062 = TunrrZXyuHERadaLqLa32564164;     TunrrZXyuHERadaLqLa32564164 = TunrrZXyuHERadaLqLa31808054;     TunrrZXyuHERadaLqLa31808054 = TunrrZXyuHERadaLqLa49183217;     TunrrZXyuHERadaLqLa49183217 = TunrrZXyuHERadaLqLa32589219;     TunrrZXyuHERadaLqLa32589219 = TunrrZXyuHERadaLqLa906432;     TunrrZXyuHERadaLqLa906432 = TunrrZXyuHERadaLqLa19512494;     TunrrZXyuHERadaLqLa19512494 = TunrrZXyuHERadaLqLa65590972;     TunrrZXyuHERadaLqLa65590972 = TunrrZXyuHERadaLqLa85438569;     TunrrZXyuHERadaLqLa85438569 = TunrrZXyuHERadaLqLa99740244;     TunrrZXyuHERadaLqLa99740244 = TunrrZXyuHERadaLqLa69323221;     TunrrZXyuHERadaLqLa69323221 = TunrrZXyuHERadaLqLa58602978;     TunrrZXyuHERadaLqLa58602978 = TunrrZXyuHERadaLqLa55354097;     TunrrZXyuHERadaLqLa55354097 = TunrrZXyuHERadaLqLa34282717;     TunrrZXyuHERadaLqLa34282717 = TunrrZXyuHERadaLqLa44368637;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void qrqnxEtiyuoknAniqEt12163083() {     int cmNLPGWRtpQmLuwODDN99023034 = -243202591;    int cmNLPGWRtpQmLuwODDN59411128 = -400119377;    int cmNLPGWRtpQmLuwODDN54034289 = -868038232;    int cmNLPGWRtpQmLuwODDN53687073 = -427027044;    int cmNLPGWRtpQmLuwODDN87638005 = 18469943;    int cmNLPGWRtpQmLuwODDN54356812 = -898417469;    int cmNLPGWRtpQmLuwODDN30542693 = -382303496;    int cmNLPGWRtpQmLuwODDN4964548 = 69771876;    int cmNLPGWRtpQmLuwODDN91250938 = -703985973;    int cmNLPGWRtpQmLuwODDN2393125 = -157076682;    int cmNLPGWRtpQmLuwODDN91197742 = -555629517;    int cmNLPGWRtpQmLuwODDN87583877 = -997600306;    int cmNLPGWRtpQmLuwODDN49925945 = -117392513;    int cmNLPGWRtpQmLuwODDN154078 = -343484477;    int cmNLPGWRtpQmLuwODDN99539423 = -174826476;    int cmNLPGWRtpQmLuwODDN67204004 = -554559985;    int cmNLPGWRtpQmLuwODDN49125608 = -690087781;    int cmNLPGWRtpQmLuwODDN68751793 = -343376827;    int cmNLPGWRtpQmLuwODDN1273372 = -532926835;    int cmNLPGWRtpQmLuwODDN91928114 = -194826499;    int cmNLPGWRtpQmLuwODDN86573022 = -993729939;    int cmNLPGWRtpQmLuwODDN57372416 = -266687680;    int cmNLPGWRtpQmLuwODDN84527789 = -827120574;    int cmNLPGWRtpQmLuwODDN33422508 = 77255615;    int cmNLPGWRtpQmLuwODDN86136324 = -935318476;    int cmNLPGWRtpQmLuwODDN68591465 = -846231661;    int cmNLPGWRtpQmLuwODDN52038341 = -252439521;    int cmNLPGWRtpQmLuwODDN34862709 = -82539958;    int cmNLPGWRtpQmLuwODDN84072645 = -950786904;    int cmNLPGWRtpQmLuwODDN91395984 = -773925282;    int cmNLPGWRtpQmLuwODDN25952559 = -645357641;    int cmNLPGWRtpQmLuwODDN44797068 = -505119430;    int cmNLPGWRtpQmLuwODDN78114838 = -546325413;    int cmNLPGWRtpQmLuwODDN79899846 = 31004046;    int cmNLPGWRtpQmLuwODDN21936184 = -570254690;    int cmNLPGWRtpQmLuwODDN84271311 = -15542211;    int cmNLPGWRtpQmLuwODDN36918423 = -451898611;    int cmNLPGWRtpQmLuwODDN24358157 = -830405349;    int cmNLPGWRtpQmLuwODDN2196438 = -245282192;    int cmNLPGWRtpQmLuwODDN99558961 = -470251204;    int cmNLPGWRtpQmLuwODDN83527926 = -482023779;    int cmNLPGWRtpQmLuwODDN37612355 = -465634515;    int cmNLPGWRtpQmLuwODDN56119113 = -825166914;    int cmNLPGWRtpQmLuwODDN9862606 = -145515666;    int cmNLPGWRtpQmLuwODDN93047771 = -561229271;    int cmNLPGWRtpQmLuwODDN78268804 = -899131988;    int cmNLPGWRtpQmLuwODDN24560701 = -603234430;    int cmNLPGWRtpQmLuwODDN90214417 = 68365961;    int cmNLPGWRtpQmLuwODDN67356562 = -910524654;    int cmNLPGWRtpQmLuwODDN22873759 = -375794608;    int cmNLPGWRtpQmLuwODDN34002227 = -343584861;    int cmNLPGWRtpQmLuwODDN22709584 = -372698192;    int cmNLPGWRtpQmLuwODDN98966398 = -848167410;    int cmNLPGWRtpQmLuwODDN35310555 = -337531067;    int cmNLPGWRtpQmLuwODDN25590060 = -493152004;    int cmNLPGWRtpQmLuwODDN41650619 = -976514912;    int cmNLPGWRtpQmLuwODDN74883338 = -572998804;    int cmNLPGWRtpQmLuwODDN20611781 = -845293847;    int cmNLPGWRtpQmLuwODDN67550749 = -491708568;    int cmNLPGWRtpQmLuwODDN19046540 = -135298396;    int cmNLPGWRtpQmLuwODDN2318471 = -545977948;    int cmNLPGWRtpQmLuwODDN95679984 = -199763539;    int cmNLPGWRtpQmLuwODDN20891903 = 20558780;    int cmNLPGWRtpQmLuwODDN99854953 = -930060691;    int cmNLPGWRtpQmLuwODDN76440566 = -511719042;    int cmNLPGWRtpQmLuwODDN46400675 = 49489913;    int cmNLPGWRtpQmLuwODDN9469040 = -351274893;    int cmNLPGWRtpQmLuwODDN70026098 = -48396560;    int cmNLPGWRtpQmLuwODDN78217893 = -773229787;    int cmNLPGWRtpQmLuwODDN15268112 = -59284266;    int cmNLPGWRtpQmLuwODDN30285582 = -2661374;    int cmNLPGWRtpQmLuwODDN24767452 = -859682433;    int cmNLPGWRtpQmLuwODDN66555356 = 1905364;    int cmNLPGWRtpQmLuwODDN1714410 = 37324368;    int cmNLPGWRtpQmLuwODDN8400189 = -712802721;    int cmNLPGWRtpQmLuwODDN48960667 = -428095425;    int cmNLPGWRtpQmLuwODDN1253303 = -441520766;    int cmNLPGWRtpQmLuwODDN74665184 = -581604909;    int cmNLPGWRtpQmLuwODDN40374737 = -361515114;    int cmNLPGWRtpQmLuwODDN7867520 = 63813511;    int cmNLPGWRtpQmLuwODDN44030765 = -142997232;    int cmNLPGWRtpQmLuwODDN61823923 = -220805483;    int cmNLPGWRtpQmLuwODDN67506146 = -172015304;    int cmNLPGWRtpQmLuwODDN61198886 = -474992297;    int cmNLPGWRtpQmLuwODDN57393757 = -330340421;    int cmNLPGWRtpQmLuwODDN3242976 = -172659449;    int cmNLPGWRtpQmLuwODDN45830669 = -656952021;    int cmNLPGWRtpQmLuwODDN42804283 = -108794347;    int cmNLPGWRtpQmLuwODDN54309787 = -475843950;    int cmNLPGWRtpQmLuwODDN80285564 = -593739778;    int cmNLPGWRtpQmLuwODDN9387974 = -442543407;    int cmNLPGWRtpQmLuwODDN16306642 = -606604764;    int cmNLPGWRtpQmLuwODDN56807408 = -238696781;    int cmNLPGWRtpQmLuwODDN83149897 = -9983796;    int cmNLPGWRtpQmLuwODDN97240491 = -924273257;    int cmNLPGWRtpQmLuwODDN87847941 = -182260240;    int cmNLPGWRtpQmLuwODDN16720453 = -386193295;    int cmNLPGWRtpQmLuwODDN56264160 = -895106223;    int cmNLPGWRtpQmLuwODDN33422040 = -633796624;    int cmNLPGWRtpQmLuwODDN46647096 = -243202591;     cmNLPGWRtpQmLuwODDN99023034 = cmNLPGWRtpQmLuwODDN59411128;     cmNLPGWRtpQmLuwODDN59411128 = cmNLPGWRtpQmLuwODDN54034289;     cmNLPGWRtpQmLuwODDN54034289 = cmNLPGWRtpQmLuwODDN53687073;     cmNLPGWRtpQmLuwODDN53687073 = cmNLPGWRtpQmLuwODDN87638005;     cmNLPGWRtpQmLuwODDN87638005 = cmNLPGWRtpQmLuwODDN54356812;     cmNLPGWRtpQmLuwODDN54356812 = cmNLPGWRtpQmLuwODDN30542693;     cmNLPGWRtpQmLuwODDN30542693 = cmNLPGWRtpQmLuwODDN4964548;     cmNLPGWRtpQmLuwODDN4964548 = cmNLPGWRtpQmLuwODDN91250938;     cmNLPGWRtpQmLuwODDN91250938 = cmNLPGWRtpQmLuwODDN2393125;     cmNLPGWRtpQmLuwODDN2393125 = cmNLPGWRtpQmLuwODDN91197742;     cmNLPGWRtpQmLuwODDN91197742 = cmNLPGWRtpQmLuwODDN87583877;     cmNLPGWRtpQmLuwODDN87583877 = cmNLPGWRtpQmLuwODDN49925945;     cmNLPGWRtpQmLuwODDN49925945 = cmNLPGWRtpQmLuwODDN154078;     cmNLPGWRtpQmLuwODDN154078 = cmNLPGWRtpQmLuwODDN99539423;     cmNLPGWRtpQmLuwODDN99539423 = cmNLPGWRtpQmLuwODDN67204004;     cmNLPGWRtpQmLuwODDN67204004 = cmNLPGWRtpQmLuwODDN49125608;     cmNLPGWRtpQmLuwODDN49125608 = cmNLPGWRtpQmLuwODDN68751793;     cmNLPGWRtpQmLuwODDN68751793 = cmNLPGWRtpQmLuwODDN1273372;     cmNLPGWRtpQmLuwODDN1273372 = cmNLPGWRtpQmLuwODDN91928114;     cmNLPGWRtpQmLuwODDN91928114 = cmNLPGWRtpQmLuwODDN86573022;     cmNLPGWRtpQmLuwODDN86573022 = cmNLPGWRtpQmLuwODDN57372416;     cmNLPGWRtpQmLuwODDN57372416 = cmNLPGWRtpQmLuwODDN84527789;     cmNLPGWRtpQmLuwODDN84527789 = cmNLPGWRtpQmLuwODDN33422508;     cmNLPGWRtpQmLuwODDN33422508 = cmNLPGWRtpQmLuwODDN86136324;     cmNLPGWRtpQmLuwODDN86136324 = cmNLPGWRtpQmLuwODDN68591465;     cmNLPGWRtpQmLuwODDN68591465 = cmNLPGWRtpQmLuwODDN52038341;     cmNLPGWRtpQmLuwODDN52038341 = cmNLPGWRtpQmLuwODDN34862709;     cmNLPGWRtpQmLuwODDN34862709 = cmNLPGWRtpQmLuwODDN84072645;     cmNLPGWRtpQmLuwODDN84072645 = cmNLPGWRtpQmLuwODDN91395984;     cmNLPGWRtpQmLuwODDN91395984 = cmNLPGWRtpQmLuwODDN25952559;     cmNLPGWRtpQmLuwODDN25952559 = cmNLPGWRtpQmLuwODDN44797068;     cmNLPGWRtpQmLuwODDN44797068 = cmNLPGWRtpQmLuwODDN78114838;     cmNLPGWRtpQmLuwODDN78114838 = cmNLPGWRtpQmLuwODDN79899846;     cmNLPGWRtpQmLuwODDN79899846 = cmNLPGWRtpQmLuwODDN21936184;     cmNLPGWRtpQmLuwODDN21936184 = cmNLPGWRtpQmLuwODDN84271311;     cmNLPGWRtpQmLuwODDN84271311 = cmNLPGWRtpQmLuwODDN36918423;     cmNLPGWRtpQmLuwODDN36918423 = cmNLPGWRtpQmLuwODDN24358157;     cmNLPGWRtpQmLuwODDN24358157 = cmNLPGWRtpQmLuwODDN2196438;     cmNLPGWRtpQmLuwODDN2196438 = cmNLPGWRtpQmLuwODDN99558961;     cmNLPGWRtpQmLuwODDN99558961 = cmNLPGWRtpQmLuwODDN83527926;     cmNLPGWRtpQmLuwODDN83527926 = cmNLPGWRtpQmLuwODDN37612355;     cmNLPGWRtpQmLuwODDN37612355 = cmNLPGWRtpQmLuwODDN56119113;     cmNLPGWRtpQmLuwODDN56119113 = cmNLPGWRtpQmLuwODDN9862606;     cmNLPGWRtpQmLuwODDN9862606 = cmNLPGWRtpQmLuwODDN93047771;     cmNLPGWRtpQmLuwODDN93047771 = cmNLPGWRtpQmLuwODDN78268804;     cmNLPGWRtpQmLuwODDN78268804 = cmNLPGWRtpQmLuwODDN24560701;     cmNLPGWRtpQmLuwODDN24560701 = cmNLPGWRtpQmLuwODDN90214417;     cmNLPGWRtpQmLuwODDN90214417 = cmNLPGWRtpQmLuwODDN67356562;     cmNLPGWRtpQmLuwODDN67356562 = cmNLPGWRtpQmLuwODDN22873759;     cmNLPGWRtpQmLuwODDN22873759 = cmNLPGWRtpQmLuwODDN34002227;     cmNLPGWRtpQmLuwODDN34002227 = cmNLPGWRtpQmLuwODDN22709584;     cmNLPGWRtpQmLuwODDN22709584 = cmNLPGWRtpQmLuwODDN98966398;     cmNLPGWRtpQmLuwODDN98966398 = cmNLPGWRtpQmLuwODDN35310555;     cmNLPGWRtpQmLuwODDN35310555 = cmNLPGWRtpQmLuwODDN25590060;     cmNLPGWRtpQmLuwODDN25590060 = cmNLPGWRtpQmLuwODDN41650619;     cmNLPGWRtpQmLuwODDN41650619 = cmNLPGWRtpQmLuwODDN74883338;     cmNLPGWRtpQmLuwODDN74883338 = cmNLPGWRtpQmLuwODDN20611781;     cmNLPGWRtpQmLuwODDN20611781 = cmNLPGWRtpQmLuwODDN67550749;     cmNLPGWRtpQmLuwODDN67550749 = cmNLPGWRtpQmLuwODDN19046540;     cmNLPGWRtpQmLuwODDN19046540 = cmNLPGWRtpQmLuwODDN2318471;     cmNLPGWRtpQmLuwODDN2318471 = cmNLPGWRtpQmLuwODDN95679984;     cmNLPGWRtpQmLuwODDN95679984 = cmNLPGWRtpQmLuwODDN20891903;     cmNLPGWRtpQmLuwODDN20891903 = cmNLPGWRtpQmLuwODDN99854953;     cmNLPGWRtpQmLuwODDN99854953 = cmNLPGWRtpQmLuwODDN76440566;     cmNLPGWRtpQmLuwODDN76440566 = cmNLPGWRtpQmLuwODDN46400675;     cmNLPGWRtpQmLuwODDN46400675 = cmNLPGWRtpQmLuwODDN9469040;     cmNLPGWRtpQmLuwODDN9469040 = cmNLPGWRtpQmLuwODDN70026098;     cmNLPGWRtpQmLuwODDN70026098 = cmNLPGWRtpQmLuwODDN78217893;     cmNLPGWRtpQmLuwODDN78217893 = cmNLPGWRtpQmLuwODDN15268112;     cmNLPGWRtpQmLuwODDN15268112 = cmNLPGWRtpQmLuwODDN30285582;     cmNLPGWRtpQmLuwODDN30285582 = cmNLPGWRtpQmLuwODDN24767452;     cmNLPGWRtpQmLuwODDN24767452 = cmNLPGWRtpQmLuwODDN66555356;     cmNLPGWRtpQmLuwODDN66555356 = cmNLPGWRtpQmLuwODDN1714410;     cmNLPGWRtpQmLuwODDN1714410 = cmNLPGWRtpQmLuwODDN8400189;     cmNLPGWRtpQmLuwODDN8400189 = cmNLPGWRtpQmLuwODDN48960667;     cmNLPGWRtpQmLuwODDN48960667 = cmNLPGWRtpQmLuwODDN1253303;     cmNLPGWRtpQmLuwODDN1253303 = cmNLPGWRtpQmLuwODDN74665184;     cmNLPGWRtpQmLuwODDN74665184 = cmNLPGWRtpQmLuwODDN40374737;     cmNLPGWRtpQmLuwODDN40374737 = cmNLPGWRtpQmLuwODDN7867520;     cmNLPGWRtpQmLuwODDN7867520 = cmNLPGWRtpQmLuwODDN44030765;     cmNLPGWRtpQmLuwODDN44030765 = cmNLPGWRtpQmLuwODDN61823923;     cmNLPGWRtpQmLuwODDN61823923 = cmNLPGWRtpQmLuwODDN67506146;     cmNLPGWRtpQmLuwODDN67506146 = cmNLPGWRtpQmLuwODDN61198886;     cmNLPGWRtpQmLuwODDN61198886 = cmNLPGWRtpQmLuwODDN57393757;     cmNLPGWRtpQmLuwODDN57393757 = cmNLPGWRtpQmLuwODDN3242976;     cmNLPGWRtpQmLuwODDN3242976 = cmNLPGWRtpQmLuwODDN45830669;     cmNLPGWRtpQmLuwODDN45830669 = cmNLPGWRtpQmLuwODDN42804283;     cmNLPGWRtpQmLuwODDN42804283 = cmNLPGWRtpQmLuwODDN54309787;     cmNLPGWRtpQmLuwODDN54309787 = cmNLPGWRtpQmLuwODDN80285564;     cmNLPGWRtpQmLuwODDN80285564 = cmNLPGWRtpQmLuwODDN9387974;     cmNLPGWRtpQmLuwODDN9387974 = cmNLPGWRtpQmLuwODDN16306642;     cmNLPGWRtpQmLuwODDN16306642 = cmNLPGWRtpQmLuwODDN56807408;     cmNLPGWRtpQmLuwODDN56807408 = cmNLPGWRtpQmLuwODDN83149897;     cmNLPGWRtpQmLuwODDN83149897 = cmNLPGWRtpQmLuwODDN97240491;     cmNLPGWRtpQmLuwODDN97240491 = cmNLPGWRtpQmLuwODDN87847941;     cmNLPGWRtpQmLuwODDN87847941 = cmNLPGWRtpQmLuwODDN16720453;     cmNLPGWRtpQmLuwODDN16720453 = cmNLPGWRtpQmLuwODDN56264160;     cmNLPGWRtpQmLuwODDN56264160 = cmNLPGWRtpQmLuwODDN33422040;     cmNLPGWRtpQmLuwODDN33422040 = cmNLPGWRtpQmLuwODDN46647096;     cmNLPGWRtpQmLuwODDN46647096 = cmNLPGWRtpQmLuwODDN99023034;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void mgFzvfqmrHCvFFLibrk18491630() {     int fBrGXYvzzvtXOWYStCG53677432 = -680730175;    int fBrGXYvzzvtXOWYStCG6408747 = -979684191;    int fBrGXYvzzvtXOWYStCG14766935 = -153422845;    int fBrGXYvzzvtXOWYStCG25122015 = -433129455;    int fBrGXYvzzvtXOWYStCG62089675 = -753965296;    int fBrGXYvzzvtXOWYStCG68531209 = 72431695;    int fBrGXYvzzvtXOWYStCG51643397 = -684196169;    int fBrGXYvzzvtXOWYStCG34139651 = -430796357;    int fBrGXYvzzvtXOWYStCG79025348 = -750839343;    int fBrGXYvzzvtXOWYStCG85025110 = -435877951;    int fBrGXYvzzvtXOWYStCG69809037 = -80986089;    int fBrGXYvzzvtXOWYStCG50348591 = -84024395;    int fBrGXYvzzvtXOWYStCG13743260 = 79067182;    int fBrGXYvzzvtXOWYStCG93120508 = 44411945;    int fBrGXYvzzvtXOWYStCG29763497 = -81948107;    int fBrGXYvzzvtXOWYStCG56971540 = -184719549;    int fBrGXYvzzvtXOWYStCG48957372 = -63687610;    int fBrGXYvzzvtXOWYStCG36348380 = -406941294;    int fBrGXYvzzvtXOWYStCG2493973 = -818738383;    int fBrGXYvzzvtXOWYStCG9562671 = -540192645;    int fBrGXYvzzvtXOWYStCG20747411 = -461813090;    int fBrGXYvzzvtXOWYStCG8625005 = -433131787;    int fBrGXYvzzvtXOWYStCG20997622 = -313863995;    int fBrGXYvzzvtXOWYStCG34850877 = -721785202;    int fBrGXYvzzvtXOWYStCG81888940 = -208231928;    int fBrGXYvzzvtXOWYStCG9832413 = -849940446;    int fBrGXYvzzvtXOWYStCG54028265 = -807283800;    int fBrGXYvzzvtXOWYStCG88111709 = -90591818;    int fBrGXYvzzvtXOWYStCG23970322 = -231031780;    int fBrGXYvzzvtXOWYStCG85831393 = 35316750;    int fBrGXYvzzvtXOWYStCG77658087 = -94230166;    int fBrGXYvzzvtXOWYStCG75788678 = -916615959;    int fBrGXYvzzvtXOWYStCG45770715 = -2843028;    int fBrGXYvzzvtXOWYStCG74555739 = -749116764;    int fBrGXYvzzvtXOWYStCG56440341 = -788117950;    int fBrGXYvzzvtXOWYStCG71597853 = -263537807;    int fBrGXYvzzvtXOWYStCG11622911 = -302325232;    int fBrGXYvzzvtXOWYStCG37335396 = -704334370;    int fBrGXYvzzvtXOWYStCG52966086 = -627230793;    int fBrGXYvzzvtXOWYStCG23545357 = -128559803;    int fBrGXYvzzvtXOWYStCG39487327 = -594573937;    int fBrGXYvzzvtXOWYStCG74287013 = 26833398;    int fBrGXYvzzvtXOWYStCG47119296 = -665672232;    int fBrGXYvzzvtXOWYStCG18857005 = -719195331;    int fBrGXYvzzvtXOWYStCG53031834 = -693746869;    int fBrGXYvzzvtXOWYStCG33602406 = -967921602;    int fBrGXYvzzvtXOWYStCG41034412 = -630291814;    int fBrGXYvzzvtXOWYStCG13641727 = 90713589;    int fBrGXYvzzvtXOWYStCG9699330 = -810254843;    int fBrGXYvzzvtXOWYStCG67715421 = -615813902;    int fBrGXYvzzvtXOWYStCG9115767 = -800363;    int fBrGXYvzzvtXOWYStCG12091734 = -887764175;    int fBrGXYvzzvtXOWYStCG30694401 = -588082867;    int fBrGXYvzzvtXOWYStCG92726312 = -233417551;    int fBrGXYvzzvtXOWYStCG97744219 = -889060685;    int fBrGXYvzzvtXOWYStCG45052428 = -147598388;    int fBrGXYvzzvtXOWYStCG85411125 = -565820197;    int fBrGXYvzzvtXOWYStCG79916058 = -431637644;    int fBrGXYvzzvtXOWYStCG43233075 = -124897528;    int fBrGXYvzzvtXOWYStCG52257263 = -904024851;    int fBrGXYvzzvtXOWYStCG14502944 = -120284505;    int fBrGXYvzzvtXOWYStCG63531688 = -493604351;    int fBrGXYvzzvtXOWYStCG10169329 = -99764578;    int fBrGXYvzzvtXOWYStCG93193955 = -686156094;    int fBrGXYvzzvtXOWYStCG7367023 = -241647786;    int fBrGXYvzzvtXOWYStCG94020359 = -164370131;    int fBrGXYvzzvtXOWYStCG4577877 = 18818632;    int fBrGXYvzzvtXOWYStCG39187520 = -171816054;    int fBrGXYvzzvtXOWYStCG36680168 = -167470105;    int fBrGXYvzzvtXOWYStCG58165643 = -818410301;    int fBrGXYvzzvtXOWYStCG45348630 = -882394318;    int fBrGXYvzzvtXOWYStCG11621976 = -359353240;    int fBrGXYvzzvtXOWYStCG83382294 = -779710502;    int fBrGXYvzzvtXOWYStCG78948615 = -590178580;    int fBrGXYvzzvtXOWYStCG70075343 = -945618709;    int fBrGXYvzzvtXOWYStCG46460397 = -388646489;    int fBrGXYvzzvtXOWYStCG61505708 = -767459556;    int fBrGXYvzzvtXOWYStCG2140617 = -594668664;    int fBrGXYvzzvtXOWYStCG81819042 = 71961667;    int fBrGXYvzzvtXOWYStCG48286534 = -240310326;    int fBrGXYvzzvtXOWYStCG68798000 = -119648633;    int fBrGXYvzzvtXOWYStCG40386539 = -797997390;    int fBrGXYvzzvtXOWYStCG78412379 = -280336976;    int fBrGXYvzzvtXOWYStCG56254901 = -615217878;    int fBrGXYvzzvtXOWYStCG76715626 = -963882887;    int fBrGXYvzzvtXOWYStCG65566354 = -206465991;    int fBrGXYvzzvtXOWYStCG45094277 = -228533092;    int fBrGXYvzzvtXOWYStCG53044402 = -769425477;    int fBrGXYvzzvtXOWYStCG76811520 = -860056079;    int fBrGXYvzzvtXOWYStCG11387913 = -540519562;    int fBrGXYvzzvtXOWYStCG86186727 = -697717611;    int fBrGXYvzzvtXOWYStCG31706852 = -870687588;    int fBrGXYvzzvtXOWYStCG94102321 = -479436843;    int fBrGXYvzzvtXOWYStCG708823 = -723205943;    int fBrGXYvzzvtXOWYStCG9042414 = 91724701;    int fBrGXYvzzvtXOWYStCG75955639 = -969586;    int fBrGXYvzzvtXOWYStCG64117685 = -873402024;    int fBrGXYvzzvtXOWYStCG53925341 = -979516138;    int fBrGXYvzzvtXOWYStCG11489983 = -377547546;    int fBrGXYvzzvtXOWYStCG59011475 = -680730175;     fBrGXYvzzvtXOWYStCG53677432 = fBrGXYvzzvtXOWYStCG6408747;     fBrGXYvzzvtXOWYStCG6408747 = fBrGXYvzzvtXOWYStCG14766935;     fBrGXYvzzvtXOWYStCG14766935 = fBrGXYvzzvtXOWYStCG25122015;     fBrGXYvzzvtXOWYStCG25122015 = fBrGXYvzzvtXOWYStCG62089675;     fBrGXYvzzvtXOWYStCG62089675 = fBrGXYvzzvtXOWYStCG68531209;     fBrGXYvzzvtXOWYStCG68531209 = fBrGXYvzzvtXOWYStCG51643397;     fBrGXYvzzvtXOWYStCG51643397 = fBrGXYvzzvtXOWYStCG34139651;     fBrGXYvzzvtXOWYStCG34139651 = fBrGXYvzzvtXOWYStCG79025348;     fBrGXYvzzvtXOWYStCG79025348 = fBrGXYvzzvtXOWYStCG85025110;     fBrGXYvzzvtXOWYStCG85025110 = fBrGXYvzzvtXOWYStCG69809037;     fBrGXYvzzvtXOWYStCG69809037 = fBrGXYvzzvtXOWYStCG50348591;     fBrGXYvzzvtXOWYStCG50348591 = fBrGXYvzzvtXOWYStCG13743260;     fBrGXYvzzvtXOWYStCG13743260 = fBrGXYvzzvtXOWYStCG93120508;     fBrGXYvzzvtXOWYStCG93120508 = fBrGXYvzzvtXOWYStCG29763497;     fBrGXYvzzvtXOWYStCG29763497 = fBrGXYvzzvtXOWYStCG56971540;     fBrGXYvzzvtXOWYStCG56971540 = fBrGXYvzzvtXOWYStCG48957372;     fBrGXYvzzvtXOWYStCG48957372 = fBrGXYvzzvtXOWYStCG36348380;     fBrGXYvzzvtXOWYStCG36348380 = fBrGXYvzzvtXOWYStCG2493973;     fBrGXYvzzvtXOWYStCG2493973 = fBrGXYvzzvtXOWYStCG9562671;     fBrGXYvzzvtXOWYStCG9562671 = fBrGXYvzzvtXOWYStCG20747411;     fBrGXYvzzvtXOWYStCG20747411 = fBrGXYvzzvtXOWYStCG8625005;     fBrGXYvzzvtXOWYStCG8625005 = fBrGXYvzzvtXOWYStCG20997622;     fBrGXYvzzvtXOWYStCG20997622 = fBrGXYvzzvtXOWYStCG34850877;     fBrGXYvzzvtXOWYStCG34850877 = fBrGXYvzzvtXOWYStCG81888940;     fBrGXYvzzvtXOWYStCG81888940 = fBrGXYvzzvtXOWYStCG9832413;     fBrGXYvzzvtXOWYStCG9832413 = fBrGXYvzzvtXOWYStCG54028265;     fBrGXYvzzvtXOWYStCG54028265 = fBrGXYvzzvtXOWYStCG88111709;     fBrGXYvzzvtXOWYStCG88111709 = fBrGXYvzzvtXOWYStCG23970322;     fBrGXYvzzvtXOWYStCG23970322 = fBrGXYvzzvtXOWYStCG85831393;     fBrGXYvzzvtXOWYStCG85831393 = fBrGXYvzzvtXOWYStCG77658087;     fBrGXYvzzvtXOWYStCG77658087 = fBrGXYvzzvtXOWYStCG75788678;     fBrGXYvzzvtXOWYStCG75788678 = fBrGXYvzzvtXOWYStCG45770715;     fBrGXYvzzvtXOWYStCG45770715 = fBrGXYvzzvtXOWYStCG74555739;     fBrGXYvzzvtXOWYStCG74555739 = fBrGXYvzzvtXOWYStCG56440341;     fBrGXYvzzvtXOWYStCG56440341 = fBrGXYvzzvtXOWYStCG71597853;     fBrGXYvzzvtXOWYStCG71597853 = fBrGXYvzzvtXOWYStCG11622911;     fBrGXYvzzvtXOWYStCG11622911 = fBrGXYvzzvtXOWYStCG37335396;     fBrGXYvzzvtXOWYStCG37335396 = fBrGXYvzzvtXOWYStCG52966086;     fBrGXYvzzvtXOWYStCG52966086 = fBrGXYvzzvtXOWYStCG23545357;     fBrGXYvzzvtXOWYStCG23545357 = fBrGXYvzzvtXOWYStCG39487327;     fBrGXYvzzvtXOWYStCG39487327 = fBrGXYvzzvtXOWYStCG74287013;     fBrGXYvzzvtXOWYStCG74287013 = fBrGXYvzzvtXOWYStCG47119296;     fBrGXYvzzvtXOWYStCG47119296 = fBrGXYvzzvtXOWYStCG18857005;     fBrGXYvzzvtXOWYStCG18857005 = fBrGXYvzzvtXOWYStCG53031834;     fBrGXYvzzvtXOWYStCG53031834 = fBrGXYvzzvtXOWYStCG33602406;     fBrGXYvzzvtXOWYStCG33602406 = fBrGXYvzzvtXOWYStCG41034412;     fBrGXYvzzvtXOWYStCG41034412 = fBrGXYvzzvtXOWYStCG13641727;     fBrGXYvzzvtXOWYStCG13641727 = fBrGXYvzzvtXOWYStCG9699330;     fBrGXYvzzvtXOWYStCG9699330 = fBrGXYvzzvtXOWYStCG67715421;     fBrGXYvzzvtXOWYStCG67715421 = fBrGXYvzzvtXOWYStCG9115767;     fBrGXYvzzvtXOWYStCG9115767 = fBrGXYvzzvtXOWYStCG12091734;     fBrGXYvzzvtXOWYStCG12091734 = fBrGXYvzzvtXOWYStCG30694401;     fBrGXYvzzvtXOWYStCG30694401 = fBrGXYvzzvtXOWYStCG92726312;     fBrGXYvzzvtXOWYStCG92726312 = fBrGXYvzzvtXOWYStCG97744219;     fBrGXYvzzvtXOWYStCG97744219 = fBrGXYvzzvtXOWYStCG45052428;     fBrGXYvzzvtXOWYStCG45052428 = fBrGXYvzzvtXOWYStCG85411125;     fBrGXYvzzvtXOWYStCG85411125 = fBrGXYvzzvtXOWYStCG79916058;     fBrGXYvzzvtXOWYStCG79916058 = fBrGXYvzzvtXOWYStCG43233075;     fBrGXYvzzvtXOWYStCG43233075 = fBrGXYvzzvtXOWYStCG52257263;     fBrGXYvzzvtXOWYStCG52257263 = fBrGXYvzzvtXOWYStCG14502944;     fBrGXYvzzvtXOWYStCG14502944 = fBrGXYvzzvtXOWYStCG63531688;     fBrGXYvzzvtXOWYStCG63531688 = fBrGXYvzzvtXOWYStCG10169329;     fBrGXYvzzvtXOWYStCG10169329 = fBrGXYvzzvtXOWYStCG93193955;     fBrGXYvzzvtXOWYStCG93193955 = fBrGXYvzzvtXOWYStCG7367023;     fBrGXYvzzvtXOWYStCG7367023 = fBrGXYvzzvtXOWYStCG94020359;     fBrGXYvzzvtXOWYStCG94020359 = fBrGXYvzzvtXOWYStCG4577877;     fBrGXYvzzvtXOWYStCG4577877 = fBrGXYvzzvtXOWYStCG39187520;     fBrGXYvzzvtXOWYStCG39187520 = fBrGXYvzzvtXOWYStCG36680168;     fBrGXYvzzvtXOWYStCG36680168 = fBrGXYvzzvtXOWYStCG58165643;     fBrGXYvzzvtXOWYStCG58165643 = fBrGXYvzzvtXOWYStCG45348630;     fBrGXYvzzvtXOWYStCG45348630 = fBrGXYvzzvtXOWYStCG11621976;     fBrGXYvzzvtXOWYStCG11621976 = fBrGXYvzzvtXOWYStCG83382294;     fBrGXYvzzvtXOWYStCG83382294 = fBrGXYvzzvtXOWYStCG78948615;     fBrGXYvzzvtXOWYStCG78948615 = fBrGXYvzzvtXOWYStCG70075343;     fBrGXYvzzvtXOWYStCG70075343 = fBrGXYvzzvtXOWYStCG46460397;     fBrGXYvzzvtXOWYStCG46460397 = fBrGXYvzzvtXOWYStCG61505708;     fBrGXYvzzvtXOWYStCG61505708 = fBrGXYvzzvtXOWYStCG2140617;     fBrGXYvzzvtXOWYStCG2140617 = fBrGXYvzzvtXOWYStCG81819042;     fBrGXYvzzvtXOWYStCG81819042 = fBrGXYvzzvtXOWYStCG48286534;     fBrGXYvzzvtXOWYStCG48286534 = fBrGXYvzzvtXOWYStCG68798000;     fBrGXYvzzvtXOWYStCG68798000 = fBrGXYvzzvtXOWYStCG40386539;     fBrGXYvzzvtXOWYStCG40386539 = fBrGXYvzzvtXOWYStCG78412379;     fBrGXYvzzvtXOWYStCG78412379 = fBrGXYvzzvtXOWYStCG56254901;     fBrGXYvzzvtXOWYStCG56254901 = fBrGXYvzzvtXOWYStCG76715626;     fBrGXYvzzvtXOWYStCG76715626 = fBrGXYvzzvtXOWYStCG65566354;     fBrGXYvzzvtXOWYStCG65566354 = fBrGXYvzzvtXOWYStCG45094277;     fBrGXYvzzvtXOWYStCG45094277 = fBrGXYvzzvtXOWYStCG53044402;     fBrGXYvzzvtXOWYStCG53044402 = fBrGXYvzzvtXOWYStCG76811520;     fBrGXYvzzvtXOWYStCG76811520 = fBrGXYvzzvtXOWYStCG11387913;     fBrGXYvzzvtXOWYStCG11387913 = fBrGXYvzzvtXOWYStCG86186727;     fBrGXYvzzvtXOWYStCG86186727 = fBrGXYvzzvtXOWYStCG31706852;     fBrGXYvzzvtXOWYStCG31706852 = fBrGXYvzzvtXOWYStCG94102321;     fBrGXYvzzvtXOWYStCG94102321 = fBrGXYvzzvtXOWYStCG708823;     fBrGXYvzzvtXOWYStCG708823 = fBrGXYvzzvtXOWYStCG9042414;     fBrGXYvzzvtXOWYStCG9042414 = fBrGXYvzzvtXOWYStCG75955639;     fBrGXYvzzvtXOWYStCG75955639 = fBrGXYvzzvtXOWYStCG64117685;     fBrGXYvzzvtXOWYStCG64117685 = fBrGXYvzzvtXOWYStCG53925341;     fBrGXYvzzvtXOWYStCG53925341 = fBrGXYvzzvtXOWYStCG11489983;     fBrGXYvzzvtXOWYStCG11489983 = fBrGXYvzzvtXOWYStCG59011475;     fBrGXYvzzvtXOWYStCG59011475 = fBrGXYvzzvtXOWYStCG53677432;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void UiYKEFjwFMljmRzUbRg24820177() {     int JEfSIQLllAlgbiurNTX8331830 = -18257759;    int JEfSIQLllAlgbiurNTX53406366 = -459249005;    int JEfSIQLllAlgbiurNTX75499581 = -538807459;    int JEfSIQLllAlgbiurNTX96556956 = -439231866;    int JEfSIQLllAlgbiurNTX36541346 = -426400535;    int JEfSIQLllAlgbiurNTX82705606 = -56719141;    int JEfSIQLllAlgbiurNTX72744100 = -986088841;    int JEfSIQLllAlgbiurNTX63314754 = -931364589;    int JEfSIQLllAlgbiurNTX66799759 = -797692714;    int JEfSIQLllAlgbiurNTX67657095 = -714679221;    int JEfSIQLllAlgbiurNTX48420332 = -706342661;    int JEfSIQLllAlgbiurNTX13113305 = -270448484;    int JEfSIQLllAlgbiurNTX77560574 = -824473122;    int JEfSIQLllAlgbiurNTX86086938 = -667691633;    int JEfSIQLllAlgbiurNTX59987570 = 10930261;    int JEfSIQLllAlgbiurNTX46739076 = -914879113;    int JEfSIQLllAlgbiurNTX48789136 = -537287438;    int JEfSIQLllAlgbiurNTX3944967 = -470505762;    int JEfSIQLllAlgbiurNTX3714574 = -4549931;    int JEfSIQLllAlgbiurNTX27197226 = -885558791;    int JEfSIQLllAlgbiurNTX54921798 = 70103759;    int JEfSIQLllAlgbiurNTX59877594 = -599575895;    int JEfSIQLllAlgbiurNTX57467453 = -900607416;    int JEfSIQLllAlgbiurNTX36279245 = -420826018;    int JEfSIQLllAlgbiurNTX77641556 = -581145380;    int JEfSIQLllAlgbiurNTX51073360 = -853649231;    int JEfSIQLllAlgbiurNTX56018190 = -262128079;    int JEfSIQLllAlgbiurNTX41360709 = -98643679;    int JEfSIQLllAlgbiurNTX63867999 = -611276655;    int JEfSIQLllAlgbiurNTX80266802 = -255441218;    int JEfSIQLllAlgbiurNTX29363616 = -643102692;    int JEfSIQLllAlgbiurNTX6780289 = -228112487;    int JEfSIQLllAlgbiurNTX13426592 = -559360642;    int JEfSIQLllAlgbiurNTX69211632 = -429237573;    int JEfSIQLllAlgbiurNTX90944497 = 94018791;    int JEfSIQLllAlgbiurNTX58924395 = -511533404;    int JEfSIQLllAlgbiurNTX86327398 = -152751852;    int JEfSIQLllAlgbiurNTX50312635 = -578263391;    int JEfSIQLllAlgbiurNTX3735735 = 90820605;    int JEfSIQLllAlgbiurNTX47531752 = -886868403;    int JEfSIQLllAlgbiurNTX95446727 = -707124095;    int JEfSIQLllAlgbiurNTX10961672 = -580698688;    int JEfSIQLllAlgbiurNTX38119479 = -506177549;    int JEfSIQLllAlgbiurNTX27851405 = -192874997;    int JEfSIQLllAlgbiurNTX13015898 = -826264467;    int JEfSIQLllAlgbiurNTX88936007 = 63288783;    int JEfSIQLllAlgbiurNTX57508124 = -657349197;    int JEfSIQLllAlgbiurNTX37069036 = -986938783;    int JEfSIQLllAlgbiurNTX52042096 = -709985032;    int JEfSIQLllAlgbiurNTX12557084 = -855833197;    int JEfSIQLllAlgbiurNTX84229306 = -758015865;    int JEfSIQLllAlgbiurNTX1473883 = -302830158;    int JEfSIQLllAlgbiurNTX62422404 = -327998324;    int JEfSIQLllAlgbiurNTX50142070 = -129304036;    int JEfSIQLllAlgbiurNTX69898379 = -184969367;    int JEfSIQLllAlgbiurNTX48454236 = -418681864;    int JEfSIQLllAlgbiurNTX95938913 = -558641590;    int JEfSIQLllAlgbiurNTX39220336 = -17981441;    int JEfSIQLllAlgbiurNTX18915400 = -858086487;    int JEfSIQLllAlgbiurNTX85467986 = -572751305;    int JEfSIQLllAlgbiurNTX26687416 = -794591062;    int JEfSIQLllAlgbiurNTX31383392 = -787445163;    int JEfSIQLllAlgbiurNTX99446755 = -220087935;    int JEfSIQLllAlgbiurNTX86532957 = -442251496;    int JEfSIQLllAlgbiurNTX38293480 = 28423471;    int JEfSIQLllAlgbiurNTX41640044 = -378230175;    int JEfSIQLllAlgbiurNTX99686713 = -711087842;    int JEfSIQLllAlgbiurNTX8348943 = -295235549;    int JEfSIQLllAlgbiurNTX95142441 = -661710424;    int JEfSIQLllAlgbiurNTX1063175 = -477536336;    int JEfSIQLllAlgbiurNTX60411677 = -662127262;    int JEfSIQLllAlgbiurNTX98476500 = -959024048;    int JEfSIQLllAlgbiurNTX209233 = -461326367;    int JEfSIQLllAlgbiurNTX56182821 = -117681529;    int JEfSIQLllAlgbiurNTX31750498 = -78434697;    int JEfSIQLllAlgbiurNTX43960126 = -349197554;    int JEfSIQLllAlgbiurNTX21758115 = 6601654;    int JEfSIQLllAlgbiurNTX29616049 = -607732419;    int JEfSIQLllAlgbiurNTX23263348 = -594561552;    int JEfSIQLllAlgbiurNTX88705548 = -544434163;    int JEfSIQLllAlgbiurNTX93565235 = -96300034;    int JEfSIQLllAlgbiurNTX18949154 = -275189296;    int JEfSIQLllAlgbiurNTX89318613 = -388658648;    int JEfSIQLllAlgbiurNTX51310916 = -755443459;    int JEfSIQLllAlgbiurNTX96037496 = -497425354;    int JEfSIQLllAlgbiurNTX27889733 = -240272534;    int JEfSIQLllAlgbiurNTX44357884 = -900114163;    int JEfSIQLllAlgbiurNTX63284521 = -330056607;    int JEfSIQLllAlgbiurNTX99313253 = -144268207;    int JEfSIQLllAlgbiurNTX42490261 = -487299346;    int JEfSIQLllAlgbiurNTX62985482 = -952891814;    int JEfSIQLllAlgbiurNTX47107062 = -34770411;    int JEfSIQLllAlgbiurNTX31397235 = -720176905;    int JEfSIQLllAlgbiurNTX18267749 = -336428090;    int JEfSIQLllAlgbiurNTX20844336 = 7722659;    int JEfSIQLllAlgbiurNTX64063336 = -919678932;    int JEfSIQLllAlgbiurNTX11514917 = -260610754;    int JEfSIQLllAlgbiurNTX51586522 = 36073946;    int JEfSIQLllAlgbiurNTX89557925 = -121298468;    int JEfSIQLllAlgbiurNTX71375854 = -18257759;     JEfSIQLllAlgbiurNTX8331830 = JEfSIQLllAlgbiurNTX53406366;     JEfSIQLllAlgbiurNTX53406366 = JEfSIQLllAlgbiurNTX75499581;     JEfSIQLllAlgbiurNTX75499581 = JEfSIQLllAlgbiurNTX96556956;     JEfSIQLllAlgbiurNTX96556956 = JEfSIQLllAlgbiurNTX36541346;     JEfSIQLllAlgbiurNTX36541346 = JEfSIQLllAlgbiurNTX82705606;     JEfSIQLllAlgbiurNTX82705606 = JEfSIQLllAlgbiurNTX72744100;     JEfSIQLllAlgbiurNTX72744100 = JEfSIQLllAlgbiurNTX63314754;     JEfSIQLllAlgbiurNTX63314754 = JEfSIQLllAlgbiurNTX66799759;     JEfSIQLllAlgbiurNTX66799759 = JEfSIQLllAlgbiurNTX67657095;     JEfSIQLllAlgbiurNTX67657095 = JEfSIQLllAlgbiurNTX48420332;     JEfSIQLllAlgbiurNTX48420332 = JEfSIQLllAlgbiurNTX13113305;     JEfSIQLllAlgbiurNTX13113305 = JEfSIQLllAlgbiurNTX77560574;     JEfSIQLllAlgbiurNTX77560574 = JEfSIQLllAlgbiurNTX86086938;     JEfSIQLllAlgbiurNTX86086938 = JEfSIQLllAlgbiurNTX59987570;     JEfSIQLllAlgbiurNTX59987570 = JEfSIQLllAlgbiurNTX46739076;     JEfSIQLllAlgbiurNTX46739076 = JEfSIQLllAlgbiurNTX48789136;     JEfSIQLllAlgbiurNTX48789136 = JEfSIQLllAlgbiurNTX3944967;     JEfSIQLllAlgbiurNTX3944967 = JEfSIQLllAlgbiurNTX3714574;     JEfSIQLllAlgbiurNTX3714574 = JEfSIQLllAlgbiurNTX27197226;     JEfSIQLllAlgbiurNTX27197226 = JEfSIQLllAlgbiurNTX54921798;     JEfSIQLllAlgbiurNTX54921798 = JEfSIQLllAlgbiurNTX59877594;     JEfSIQLllAlgbiurNTX59877594 = JEfSIQLllAlgbiurNTX57467453;     JEfSIQLllAlgbiurNTX57467453 = JEfSIQLllAlgbiurNTX36279245;     JEfSIQLllAlgbiurNTX36279245 = JEfSIQLllAlgbiurNTX77641556;     JEfSIQLllAlgbiurNTX77641556 = JEfSIQLllAlgbiurNTX51073360;     JEfSIQLllAlgbiurNTX51073360 = JEfSIQLllAlgbiurNTX56018190;     JEfSIQLllAlgbiurNTX56018190 = JEfSIQLllAlgbiurNTX41360709;     JEfSIQLllAlgbiurNTX41360709 = JEfSIQLllAlgbiurNTX63867999;     JEfSIQLllAlgbiurNTX63867999 = JEfSIQLllAlgbiurNTX80266802;     JEfSIQLllAlgbiurNTX80266802 = JEfSIQLllAlgbiurNTX29363616;     JEfSIQLllAlgbiurNTX29363616 = JEfSIQLllAlgbiurNTX6780289;     JEfSIQLllAlgbiurNTX6780289 = JEfSIQLllAlgbiurNTX13426592;     JEfSIQLllAlgbiurNTX13426592 = JEfSIQLllAlgbiurNTX69211632;     JEfSIQLllAlgbiurNTX69211632 = JEfSIQLllAlgbiurNTX90944497;     JEfSIQLllAlgbiurNTX90944497 = JEfSIQLllAlgbiurNTX58924395;     JEfSIQLllAlgbiurNTX58924395 = JEfSIQLllAlgbiurNTX86327398;     JEfSIQLllAlgbiurNTX86327398 = JEfSIQLllAlgbiurNTX50312635;     JEfSIQLllAlgbiurNTX50312635 = JEfSIQLllAlgbiurNTX3735735;     JEfSIQLllAlgbiurNTX3735735 = JEfSIQLllAlgbiurNTX47531752;     JEfSIQLllAlgbiurNTX47531752 = JEfSIQLllAlgbiurNTX95446727;     JEfSIQLllAlgbiurNTX95446727 = JEfSIQLllAlgbiurNTX10961672;     JEfSIQLllAlgbiurNTX10961672 = JEfSIQLllAlgbiurNTX38119479;     JEfSIQLllAlgbiurNTX38119479 = JEfSIQLllAlgbiurNTX27851405;     JEfSIQLllAlgbiurNTX27851405 = JEfSIQLllAlgbiurNTX13015898;     JEfSIQLllAlgbiurNTX13015898 = JEfSIQLllAlgbiurNTX88936007;     JEfSIQLllAlgbiurNTX88936007 = JEfSIQLllAlgbiurNTX57508124;     JEfSIQLllAlgbiurNTX57508124 = JEfSIQLllAlgbiurNTX37069036;     JEfSIQLllAlgbiurNTX37069036 = JEfSIQLllAlgbiurNTX52042096;     JEfSIQLllAlgbiurNTX52042096 = JEfSIQLllAlgbiurNTX12557084;     JEfSIQLllAlgbiurNTX12557084 = JEfSIQLllAlgbiurNTX84229306;     JEfSIQLllAlgbiurNTX84229306 = JEfSIQLllAlgbiurNTX1473883;     JEfSIQLllAlgbiurNTX1473883 = JEfSIQLllAlgbiurNTX62422404;     JEfSIQLllAlgbiurNTX62422404 = JEfSIQLllAlgbiurNTX50142070;     JEfSIQLllAlgbiurNTX50142070 = JEfSIQLllAlgbiurNTX69898379;     JEfSIQLllAlgbiurNTX69898379 = JEfSIQLllAlgbiurNTX48454236;     JEfSIQLllAlgbiurNTX48454236 = JEfSIQLllAlgbiurNTX95938913;     JEfSIQLllAlgbiurNTX95938913 = JEfSIQLllAlgbiurNTX39220336;     JEfSIQLllAlgbiurNTX39220336 = JEfSIQLllAlgbiurNTX18915400;     JEfSIQLllAlgbiurNTX18915400 = JEfSIQLllAlgbiurNTX85467986;     JEfSIQLllAlgbiurNTX85467986 = JEfSIQLllAlgbiurNTX26687416;     JEfSIQLllAlgbiurNTX26687416 = JEfSIQLllAlgbiurNTX31383392;     JEfSIQLllAlgbiurNTX31383392 = JEfSIQLllAlgbiurNTX99446755;     JEfSIQLllAlgbiurNTX99446755 = JEfSIQLllAlgbiurNTX86532957;     JEfSIQLllAlgbiurNTX86532957 = JEfSIQLllAlgbiurNTX38293480;     JEfSIQLllAlgbiurNTX38293480 = JEfSIQLllAlgbiurNTX41640044;     JEfSIQLllAlgbiurNTX41640044 = JEfSIQLllAlgbiurNTX99686713;     JEfSIQLllAlgbiurNTX99686713 = JEfSIQLllAlgbiurNTX8348943;     JEfSIQLllAlgbiurNTX8348943 = JEfSIQLllAlgbiurNTX95142441;     JEfSIQLllAlgbiurNTX95142441 = JEfSIQLllAlgbiurNTX1063175;     JEfSIQLllAlgbiurNTX1063175 = JEfSIQLllAlgbiurNTX60411677;     JEfSIQLllAlgbiurNTX60411677 = JEfSIQLllAlgbiurNTX98476500;     JEfSIQLllAlgbiurNTX98476500 = JEfSIQLllAlgbiurNTX209233;     JEfSIQLllAlgbiurNTX209233 = JEfSIQLllAlgbiurNTX56182821;     JEfSIQLllAlgbiurNTX56182821 = JEfSIQLllAlgbiurNTX31750498;     JEfSIQLllAlgbiurNTX31750498 = JEfSIQLllAlgbiurNTX43960126;     JEfSIQLllAlgbiurNTX43960126 = JEfSIQLllAlgbiurNTX21758115;     JEfSIQLllAlgbiurNTX21758115 = JEfSIQLllAlgbiurNTX29616049;     JEfSIQLllAlgbiurNTX29616049 = JEfSIQLllAlgbiurNTX23263348;     JEfSIQLllAlgbiurNTX23263348 = JEfSIQLllAlgbiurNTX88705548;     JEfSIQLllAlgbiurNTX88705548 = JEfSIQLllAlgbiurNTX93565235;     JEfSIQLllAlgbiurNTX93565235 = JEfSIQLllAlgbiurNTX18949154;     JEfSIQLllAlgbiurNTX18949154 = JEfSIQLllAlgbiurNTX89318613;     JEfSIQLllAlgbiurNTX89318613 = JEfSIQLllAlgbiurNTX51310916;     JEfSIQLllAlgbiurNTX51310916 = JEfSIQLllAlgbiurNTX96037496;     JEfSIQLllAlgbiurNTX96037496 = JEfSIQLllAlgbiurNTX27889733;     JEfSIQLllAlgbiurNTX27889733 = JEfSIQLllAlgbiurNTX44357884;     JEfSIQLllAlgbiurNTX44357884 = JEfSIQLllAlgbiurNTX63284521;     JEfSIQLllAlgbiurNTX63284521 = JEfSIQLllAlgbiurNTX99313253;     JEfSIQLllAlgbiurNTX99313253 = JEfSIQLllAlgbiurNTX42490261;     JEfSIQLllAlgbiurNTX42490261 = JEfSIQLllAlgbiurNTX62985482;     JEfSIQLllAlgbiurNTX62985482 = JEfSIQLllAlgbiurNTX47107062;     JEfSIQLllAlgbiurNTX47107062 = JEfSIQLllAlgbiurNTX31397235;     JEfSIQLllAlgbiurNTX31397235 = JEfSIQLllAlgbiurNTX18267749;     JEfSIQLllAlgbiurNTX18267749 = JEfSIQLllAlgbiurNTX20844336;     JEfSIQLllAlgbiurNTX20844336 = JEfSIQLllAlgbiurNTX64063336;     JEfSIQLllAlgbiurNTX64063336 = JEfSIQLllAlgbiurNTX11514917;     JEfSIQLllAlgbiurNTX11514917 = JEfSIQLllAlgbiurNTX51586522;     JEfSIQLllAlgbiurNTX51586522 = JEfSIQLllAlgbiurNTX89557925;     JEfSIQLllAlgbiurNTX89557925 = JEfSIQLllAlgbiurNTX71375854;     JEfSIQLllAlgbiurNTX71375854 = JEfSIQLllAlgbiurNTX8331830;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void GYKtsDQCAxZiAmREPTh31148725() {     int xRIlCyOWdANVKOwgyNt62986227 = -455785343;    int xRIlCyOWdANVKOwgyNt403986 = 61186181;    int xRIlCyOWdANVKOwgyNt36232228 = -924192072;    int xRIlCyOWdANVKOwgyNt67991897 = -445334277;    int xRIlCyOWdANVKOwgyNt10993017 = -98835775;    int xRIlCyOWdANVKOwgyNt96880003 = -185869977;    int xRIlCyOWdANVKOwgyNt93844804 = -187981514;    int xRIlCyOWdANVKOwgyNt92489857 = -331932822;    int xRIlCyOWdANVKOwgyNt54574170 = -844546084;    int xRIlCyOWdANVKOwgyNt50289081 = -993480490;    int xRIlCyOWdANVKOwgyNt27031627 = -231699233;    int xRIlCyOWdANVKOwgyNt75878017 = -456872572;    int xRIlCyOWdANVKOwgyNt41377890 = -628013427;    int xRIlCyOWdANVKOwgyNt79053369 = -279795211;    int xRIlCyOWdANVKOwgyNt90211643 = -996191370;    int xRIlCyOWdANVKOwgyNt36506611 = -545038678;    int xRIlCyOWdANVKOwgyNt48620899 = 89112733;    int xRIlCyOWdANVKOwgyNt71541554 = -534070229;    int xRIlCyOWdANVKOwgyNt4935174 = -290361479;    int xRIlCyOWdANVKOwgyNt44831781 = -130924938;    int xRIlCyOWdANVKOwgyNt89096186 = -497979392;    int xRIlCyOWdANVKOwgyNt11130183 = -766020003;    int xRIlCyOWdANVKOwgyNt93937284 = -387350837;    int xRIlCyOWdANVKOwgyNt37707614 = -119866834;    int xRIlCyOWdANVKOwgyNt73394172 = -954058832;    int xRIlCyOWdANVKOwgyNt92314306 = -857358015;    int xRIlCyOWdANVKOwgyNt58008114 = -816972358;    int xRIlCyOWdANVKOwgyNt94609709 = -106695539;    int xRIlCyOWdANVKOwgyNt3765676 = -991521530;    int xRIlCyOWdANVKOwgyNt74702211 = -546199186;    int xRIlCyOWdANVKOwgyNt81069144 = -91975218;    int xRIlCyOWdANVKOwgyNt37771899 = -639609015;    int xRIlCyOWdANVKOwgyNt81082468 = -15878256;    int xRIlCyOWdANVKOwgyNt63867525 = -109358383;    int xRIlCyOWdANVKOwgyNt25448654 = -123844469;    int xRIlCyOWdANVKOwgyNt46250938 = -759529001;    int xRIlCyOWdANVKOwgyNt61031886 = -3178472;    int xRIlCyOWdANVKOwgyNt63289874 = -452192412;    int xRIlCyOWdANVKOwgyNt54505384 = -291127997;    int xRIlCyOWdANVKOwgyNt71518146 = -545177002;    int xRIlCyOWdANVKOwgyNt51406128 = -819674253;    int xRIlCyOWdANVKOwgyNt47636330 = -88230775;    int xRIlCyOWdANVKOwgyNt29119662 = -346682867;    int xRIlCyOWdANVKOwgyNt36845804 = -766554663;    int xRIlCyOWdANVKOwgyNt72999961 = -958782065;    int xRIlCyOWdANVKOwgyNt44269610 = -5500832;    int xRIlCyOWdANVKOwgyNt73981835 = -684406581;    int xRIlCyOWdANVKOwgyNt60496345 = -964591155;    int xRIlCyOWdANVKOwgyNt94384862 = -609715220;    int xRIlCyOWdANVKOwgyNt57398746 = 4147509;    int xRIlCyOWdANVKOwgyNt59342845 = -415231367;    int xRIlCyOWdANVKOwgyNt90856032 = -817896141;    int xRIlCyOWdANVKOwgyNt94150407 = -67913782;    int xRIlCyOWdANVKOwgyNt7557828 = -25190520;    int xRIlCyOWdANVKOwgyNt42052539 = -580878048;    int xRIlCyOWdANVKOwgyNt51856045 = -689765340;    int xRIlCyOWdANVKOwgyNt6466702 = -551462983;    int xRIlCyOWdANVKOwgyNt98524613 = -704325238;    int xRIlCyOWdANVKOwgyNt94597725 = -491275446;    int xRIlCyOWdANVKOwgyNt18678710 = -241477760;    int xRIlCyOWdANVKOwgyNt38871889 = -368897620;    int xRIlCyOWdANVKOwgyNt99235095 = 18714025;    int xRIlCyOWdANVKOwgyNt88724182 = -340411292;    int xRIlCyOWdANVKOwgyNt79871958 = -198346899;    int xRIlCyOWdANVKOwgyNt69219936 = -801505273;    int xRIlCyOWdANVKOwgyNt89259728 = -592090219;    int xRIlCyOWdANVKOwgyNt94795549 = -340994317;    int xRIlCyOWdANVKOwgyNt77510364 = -418655044;    int xRIlCyOWdANVKOwgyNt53604715 = -55950743;    int xRIlCyOWdANVKOwgyNt43960706 = -136662370;    int xRIlCyOWdANVKOwgyNt75474725 = -441860206;    int xRIlCyOWdANVKOwgyNt85331025 = -458694855;    int xRIlCyOWdANVKOwgyNt17036170 = -142942233;    int xRIlCyOWdANVKOwgyNt33417028 = -745184477;    int xRIlCyOWdANVKOwgyNt93425652 = -311250685;    int xRIlCyOWdANVKOwgyNt41459856 = -309748618;    int xRIlCyOWdANVKOwgyNt82010520 = -319337136;    int xRIlCyOWdANVKOwgyNt57091481 = -620796175;    int xRIlCyOWdANVKOwgyNt64707652 = -161084770;    int xRIlCyOWdANVKOwgyNt29124563 = -848558000;    int xRIlCyOWdANVKOwgyNt18332471 = -72951435;    int xRIlCyOWdANVKOwgyNt97511768 = -852381203;    int xRIlCyOWdANVKOwgyNt224847 = -496980319;    int xRIlCyOWdANVKOwgyNt46366930 = -895669040;    int xRIlCyOWdANVKOwgyNt15359366 = -30967820;    int xRIlCyOWdANVKOwgyNt90213112 = -274079077;    int xRIlCyOWdANVKOwgyNt43621491 = -471695234;    int xRIlCyOWdANVKOwgyNt73524641 = -990687736;    int xRIlCyOWdANVKOwgyNt21814986 = -528480336;    int xRIlCyOWdANVKOwgyNt73592609 = -434079129;    int xRIlCyOWdANVKOwgyNt39784236 = -108066018;    int xRIlCyOWdANVKOwgyNt62507272 = -298853235;    int xRIlCyOWdANVKOwgyNt68692148 = -960916967;    int xRIlCyOWdANVKOwgyNt35826674 = 50349763;    int xRIlCyOWdANVKOwgyNt32646258 = -76279383;    int xRIlCyOWdANVKOwgyNt52171033 = -738388278;    int xRIlCyOWdANVKOwgyNt58912148 = -747819483;    int xRIlCyOWdANVKOwgyNt49247704 = -48335969;    int xRIlCyOWdANVKOwgyNt67625867 = -965049390;    int xRIlCyOWdANVKOwgyNt83740232 = -455785343;     xRIlCyOWdANVKOwgyNt62986227 = xRIlCyOWdANVKOwgyNt403986;     xRIlCyOWdANVKOwgyNt403986 = xRIlCyOWdANVKOwgyNt36232228;     xRIlCyOWdANVKOwgyNt36232228 = xRIlCyOWdANVKOwgyNt67991897;     xRIlCyOWdANVKOwgyNt67991897 = xRIlCyOWdANVKOwgyNt10993017;     xRIlCyOWdANVKOwgyNt10993017 = xRIlCyOWdANVKOwgyNt96880003;     xRIlCyOWdANVKOwgyNt96880003 = xRIlCyOWdANVKOwgyNt93844804;     xRIlCyOWdANVKOwgyNt93844804 = xRIlCyOWdANVKOwgyNt92489857;     xRIlCyOWdANVKOwgyNt92489857 = xRIlCyOWdANVKOwgyNt54574170;     xRIlCyOWdANVKOwgyNt54574170 = xRIlCyOWdANVKOwgyNt50289081;     xRIlCyOWdANVKOwgyNt50289081 = xRIlCyOWdANVKOwgyNt27031627;     xRIlCyOWdANVKOwgyNt27031627 = xRIlCyOWdANVKOwgyNt75878017;     xRIlCyOWdANVKOwgyNt75878017 = xRIlCyOWdANVKOwgyNt41377890;     xRIlCyOWdANVKOwgyNt41377890 = xRIlCyOWdANVKOwgyNt79053369;     xRIlCyOWdANVKOwgyNt79053369 = xRIlCyOWdANVKOwgyNt90211643;     xRIlCyOWdANVKOwgyNt90211643 = xRIlCyOWdANVKOwgyNt36506611;     xRIlCyOWdANVKOwgyNt36506611 = xRIlCyOWdANVKOwgyNt48620899;     xRIlCyOWdANVKOwgyNt48620899 = xRIlCyOWdANVKOwgyNt71541554;     xRIlCyOWdANVKOwgyNt71541554 = xRIlCyOWdANVKOwgyNt4935174;     xRIlCyOWdANVKOwgyNt4935174 = xRIlCyOWdANVKOwgyNt44831781;     xRIlCyOWdANVKOwgyNt44831781 = xRIlCyOWdANVKOwgyNt89096186;     xRIlCyOWdANVKOwgyNt89096186 = xRIlCyOWdANVKOwgyNt11130183;     xRIlCyOWdANVKOwgyNt11130183 = xRIlCyOWdANVKOwgyNt93937284;     xRIlCyOWdANVKOwgyNt93937284 = xRIlCyOWdANVKOwgyNt37707614;     xRIlCyOWdANVKOwgyNt37707614 = xRIlCyOWdANVKOwgyNt73394172;     xRIlCyOWdANVKOwgyNt73394172 = xRIlCyOWdANVKOwgyNt92314306;     xRIlCyOWdANVKOwgyNt92314306 = xRIlCyOWdANVKOwgyNt58008114;     xRIlCyOWdANVKOwgyNt58008114 = xRIlCyOWdANVKOwgyNt94609709;     xRIlCyOWdANVKOwgyNt94609709 = xRIlCyOWdANVKOwgyNt3765676;     xRIlCyOWdANVKOwgyNt3765676 = xRIlCyOWdANVKOwgyNt74702211;     xRIlCyOWdANVKOwgyNt74702211 = xRIlCyOWdANVKOwgyNt81069144;     xRIlCyOWdANVKOwgyNt81069144 = xRIlCyOWdANVKOwgyNt37771899;     xRIlCyOWdANVKOwgyNt37771899 = xRIlCyOWdANVKOwgyNt81082468;     xRIlCyOWdANVKOwgyNt81082468 = xRIlCyOWdANVKOwgyNt63867525;     xRIlCyOWdANVKOwgyNt63867525 = xRIlCyOWdANVKOwgyNt25448654;     xRIlCyOWdANVKOwgyNt25448654 = xRIlCyOWdANVKOwgyNt46250938;     xRIlCyOWdANVKOwgyNt46250938 = xRIlCyOWdANVKOwgyNt61031886;     xRIlCyOWdANVKOwgyNt61031886 = xRIlCyOWdANVKOwgyNt63289874;     xRIlCyOWdANVKOwgyNt63289874 = xRIlCyOWdANVKOwgyNt54505384;     xRIlCyOWdANVKOwgyNt54505384 = xRIlCyOWdANVKOwgyNt71518146;     xRIlCyOWdANVKOwgyNt71518146 = xRIlCyOWdANVKOwgyNt51406128;     xRIlCyOWdANVKOwgyNt51406128 = xRIlCyOWdANVKOwgyNt47636330;     xRIlCyOWdANVKOwgyNt47636330 = xRIlCyOWdANVKOwgyNt29119662;     xRIlCyOWdANVKOwgyNt29119662 = xRIlCyOWdANVKOwgyNt36845804;     xRIlCyOWdANVKOwgyNt36845804 = xRIlCyOWdANVKOwgyNt72999961;     xRIlCyOWdANVKOwgyNt72999961 = xRIlCyOWdANVKOwgyNt44269610;     xRIlCyOWdANVKOwgyNt44269610 = xRIlCyOWdANVKOwgyNt73981835;     xRIlCyOWdANVKOwgyNt73981835 = xRIlCyOWdANVKOwgyNt60496345;     xRIlCyOWdANVKOwgyNt60496345 = xRIlCyOWdANVKOwgyNt94384862;     xRIlCyOWdANVKOwgyNt94384862 = xRIlCyOWdANVKOwgyNt57398746;     xRIlCyOWdANVKOwgyNt57398746 = xRIlCyOWdANVKOwgyNt59342845;     xRIlCyOWdANVKOwgyNt59342845 = xRIlCyOWdANVKOwgyNt90856032;     xRIlCyOWdANVKOwgyNt90856032 = xRIlCyOWdANVKOwgyNt94150407;     xRIlCyOWdANVKOwgyNt94150407 = xRIlCyOWdANVKOwgyNt7557828;     xRIlCyOWdANVKOwgyNt7557828 = xRIlCyOWdANVKOwgyNt42052539;     xRIlCyOWdANVKOwgyNt42052539 = xRIlCyOWdANVKOwgyNt51856045;     xRIlCyOWdANVKOwgyNt51856045 = xRIlCyOWdANVKOwgyNt6466702;     xRIlCyOWdANVKOwgyNt6466702 = xRIlCyOWdANVKOwgyNt98524613;     xRIlCyOWdANVKOwgyNt98524613 = xRIlCyOWdANVKOwgyNt94597725;     xRIlCyOWdANVKOwgyNt94597725 = xRIlCyOWdANVKOwgyNt18678710;     xRIlCyOWdANVKOwgyNt18678710 = xRIlCyOWdANVKOwgyNt38871889;     xRIlCyOWdANVKOwgyNt38871889 = xRIlCyOWdANVKOwgyNt99235095;     xRIlCyOWdANVKOwgyNt99235095 = xRIlCyOWdANVKOwgyNt88724182;     xRIlCyOWdANVKOwgyNt88724182 = xRIlCyOWdANVKOwgyNt79871958;     xRIlCyOWdANVKOwgyNt79871958 = xRIlCyOWdANVKOwgyNt69219936;     xRIlCyOWdANVKOwgyNt69219936 = xRIlCyOWdANVKOwgyNt89259728;     xRIlCyOWdANVKOwgyNt89259728 = xRIlCyOWdANVKOwgyNt94795549;     xRIlCyOWdANVKOwgyNt94795549 = xRIlCyOWdANVKOwgyNt77510364;     xRIlCyOWdANVKOwgyNt77510364 = xRIlCyOWdANVKOwgyNt53604715;     xRIlCyOWdANVKOwgyNt53604715 = xRIlCyOWdANVKOwgyNt43960706;     xRIlCyOWdANVKOwgyNt43960706 = xRIlCyOWdANVKOwgyNt75474725;     xRIlCyOWdANVKOwgyNt75474725 = xRIlCyOWdANVKOwgyNt85331025;     xRIlCyOWdANVKOwgyNt85331025 = xRIlCyOWdANVKOwgyNt17036170;     xRIlCyOWdANVKOwgyNt17036170 = xRIlCyOWdANVKOwgyNt33417028;     xRIlCyOWdANVKOwgyNt33417028 = xRIlCyOWdANVKOwgyNt93425652;     xRIlCyOWdANVKOwgyNt93425652 = xRIlCyOWdANVKOwgyNt41459856;     xRIlCyOWdANVKOwgyNt41459856 = xRIlCyOWdANVKOwgyNt82010520;     xRIlCyOWdANVKOwgyNt82010520 = xRIlCyOWdANVKOwgyNt57091481;     xRIlCyOWdANVKOwgyNt57091481 = xRIlCyOWdANVKOwgyNt64707652;     xRIlCyOWdANVKOwgyNt64707652 = xRIlCyOWdANVKOwgyNt29124563;     xRIlCyOWdANVKOwgyNt29124563 = xRIlCyOWdANVKOwgyNt18332471;     xRIlCyOWdANVKOwgyNt18332471 = xRIlCyOWdANVKOwgyNt97511768;     xRIlCyOWdANVKOwgyNt97511768 = xRIlCyOWdANVKOwgyNt224847;     xRIlCyOWdANVKOwgyNt224847 = xRIlCyOWdANVKOwgyNt46366930;     xRIlCyOWdANVKOwgyNt46366930 = xRIlCyOWdANVKOwgyNt15359366;     xRIlCyOWdANVKOwgyNt15359366 = xRIlCyOWdANVKOwgyNt90213112;     xRIlCyOWdANVKOwgyNt90213112 = xRIlCyOWdANVKOwgyNt43621491;     xRIlCyOWdANVKOwgyNt43621491 = xRIlCyOWdANVKOwgyNt73524641;     xRIlCyOWdANVKOwgyNt73524641 = xRIlCyOWdANVKOwgyNt21814986;     xRIlCyOWdANVKOwgyNt21814986 = xRIlCyOWdANVKOwgyNt73592609;     xRIlCyOWdANVKOwgyNt73592609 = xRIlCyOWdANVKOwgyNt39784236;     xRIlCyOWdANVKOwgyNt39784236 = xRIlCyOWdANVKOwgyNt62507272;     xRIlCyOWdANVKOwgyNt62507272 = xRIlCyOWdANVKOwgyNt68692148;     xRIlCyOWdANVKOwgyNt68692148 = xRIlCyOWdANVKOwgyNt35826674;     xRIlCyOWdANVKOwgyNt35826674 = xRIlCyOWdANVKOwgyNt32646258;     xRIlCyOWdANVKOwgyNt32646258 = xRIlCyOWdANVKOwgyNt52171033;     xRIlCyOWdANVKOwgyNt52171033 = xRIlCyOWdANVKOwgyNt58912148;     xRIlCyOWdANVKOwgyNt58912148 = xRIlCyOWdANVKOwgyNt49247704;     xRIlCyOWdANVKOwgyNt49247704 = xRIlCyOWdANVKOwgyNt67625867;     xRIlCyOWdANVKOwgyNt67625867 = xRIlCyOWdANVKOwgyNt83740232;     xRIlCyOWdANVKOwgyNt83740232 = xRIlCyOWdANVKOwgyNt62986227;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void rPdXnCVYkgVKLtiHOZC37477272() {     int lxsXYkEyZjHYBXUyNBy17640625 = -893312925;    int lxsXYkEyZjHYBXUyNBy47401606 = -518378627;    int lxsXYkEyZjHYBXUyNBy96964874 = -209576686;    int lxsXYkEyZjHYBXUyNBy39426839 = -451436691;    int lxsXYkEyZjHYBXUyNBy85444687 = -871271006;    int lxsXYkEyZjHYBXUyNBy11054400 = -315020813;    int lxsXYkEyZjHYBXUyNBy14945508 = -489874186;    int lxsXYkEyZjHYBXUyNBy21664962 = -832501039;    int lxsXYkEyZjHYBXUyNBy42348580 = -891399454;    int lxsXYkEyZjHYBXUyNBy32921066 = -172281760;    int lxsXYkEyZjHYBXUyNBy5642922 = -857055805;    int lxsXYkEyZjHYBXUyNBy38642731 = -643296652;    int lxsXYkEyZjHYBXUyNBy5195205 = -431553731;    int lxsXYkEyZjHYBXUyNBy72019800 = -991898788;    int lxsXYkEyZjHYBXUyNBy20435717 = -903312983;    int lxsXYkEyZjHYBXUyNBy26274147 = -175198242;    int lxsXYkEyZjHYBXUyNBy48452663 = -384487095;    int lxsXYkEyZjHYBXUyNBy39138141 = -597634692;    int lxsXYkEyZjHYBXUyNBy6155775 = -576173028;    int lxsXYkEyZjHYBXUyNBy62466337 = -476291084;    int lxsXYkEyZjHYBXUyNBy23270574 = 33937462;    int lxsXYkEyZjHYBXUyNBy62382771 = -932464111;    int lxsXYkEyZjHYBXUyNBy30407116 = -974094258;    int lxsXYkEyZjHYBXUyNBy39135983 = -918907651;    int lxsXYkEyZjHYBXUyNBy69146788 = -226972271;    int lxsXYkEyZjHYBXUyNBy33555254 = -861066804;    int lxsXYkEyZjHYBXUyNBy59998038 = -271816637;    int lxsXYkEyZjHYBXUyNBy47858709 = -114747393;    int lxsXYkEyZjHYBXUyNBy43663353 = -271766421;    int lxsXYkEyZjHYBXUyNBy69137620 = -836957154;    int lxsXYkEyZjHYBXUyNBy32774674 = -640847743;    int lxsXYkEyZjHYBXUyNBy68763509 = 48894453;    int lxsXYkEyZjHYBXUyNBy48738345 = -572395873;    int lxsXYkEyZjHYBXUyNBy58523417 = -889479193;    int lxsXYkEyZjHYBXUyNBy59952811 = -341707731;    int lxsXYkEyZjHYBXUyNBy33577479 = 92475384;    int lxsXYkEyZjHYBXUyNBy35736374 = -953605093;    int lxsXYkEyZjHYBXUyNBy76267113 = -326121430;    int lxsXYkEyZjHYBXUyNBy5275033 = -673076611;    int lxsXYkEyZjHYBXUyNBy95504541 = -203485601;    int lxsXYkEyZjHYBXUyNBy7365530 = -932224411;    int lxsXYkEyZjHYBXUyNBy84310988 = -695762882;    int lxsXYkEyZjHYBXUyNBy20119845 = -187188187;    int lxsXYkEyZjHYBXUyNBy45840203 = -240234328;    int lxsXYkEyZjHYBXUyNBy32984025 = 8700336;    int lxsXYkEyZjHYBXUyNBy99603211 = -74290465;    int lxsXYkEyZjHYBXUyNBy90455548 = -711463965;    int lxsXYkEyZjHYBXUyNBy83923654 = -942243529;    int lxsXYkEyZjHYBXUyNBy36727629 = -509445434;    int lxsXYkEyZjHYBXUyNBy2240409 = -235871780;    int lxsXYkEyZjHYBXUyNBy34456385 = -72446869;    int lxsXYkEyZjHYBXUyNBy80238182 = -232962128;    int lxsXYkEyZjHYBXUyNBy25878411 = -907829236;    int lxsXYkEyZjHYBXUyNBy64973584 = 78922995;    int lxsXYkEyZjHYBXUyNBy14206698 = -976786734;    int lxsXYkEyZjHYBXUyNBy55257853 = -960848814;    int lxsXYkEyZjHYBXUyNBy16994490 = -544284370;    int lxsXYkEyZjHYBXUyNBy57828891 = -290669035;    int lxsXYkEyZjHYBXUyNBy70280050 = -124464420;    int lxsXYkEyZjHYBXUyNBy51889434 = 89795798;    int lxsXYkEyZjHYBXUyNBy51056362 = 56795823;    int lxsXYkEyZjHYBXUyNBy67086799 = -275126793;    int lxsXYkEyZjHYBXUyNBy78001608 = -460734619;    int lxsXYkEyZjHYBXUyNBy73210960 = 45557700;    int lxsXYkEyZjHYBXUyNBy146393 = -531434017;    int lxsXYkEyZjHYBXUyNBy36879413 = -805950259;    int lxsXYkEyZjHYBXUyNBy89904386 = 29099221;    int lxsXYkEyZjHYBXUyNBy46671787 = -542074539;    int lxsXYkEyZjHYBXUyNBy12066990 = -550191057;    int lxsXYkEyZjHYBXUyNBy86858237 = -895788368;    int lxsXYkEyZjHYBXUyNBy90537772 = -221593149;    int lxsXYkEyZjHYBXUyNBy72185550 = 41634334;    int lxsXYkEyZjHYBXUyNBy33863108 = -924558082;    int lxsXYkEyZjHYBXUyNBy10651233 = -272687427;    int lxsXYkEyZjHYBXUyNBy55100808 = -544066673;    int lxsXYkEyZjHYBXUyNBy38959585 = -270299656;    int lxsXYkEyZjHYBXUyNBy42262927 = -645275924;    int lxsXYkEyZjHYBXUyNBy84566912 = -633859930;    int lxsXYkEyZjHYBXUyNBy6151958 = -827607988;    int lxsXYkEyZjHYBXUyNBy69543577 = -52681807;    int lxsXYkEyZjHYBXUyNBy43099705 = -49602840;    int lxsXYkEyZjHYBXUyNBy76074384 = -329573109;    int lxsXYkEyZjHYBXUyNBy11131080 = -605301960;    int lxsXYkEyZjHYBXUyNBy41422944 = 64105359;    int lxsXYkEyZjHYBXUyNBy34681235 = -664510286;    int lxsXYkEyZjHYBXUyNBy52536491 = -307885616;    int lxsXYkEyZjHYBXUyNBy42885098 = -43276311;    int lxsXYkEyZjHYBXUyNBy83764760 = -551318869;    int lxsXYkEyZjHYBXUyNBy44316719 = -912692459;    int lxsXYkEyZjHYBXUyNBy4694958 = -380858918;    int lxsXYkEyZjHYBXUyNBy16582990 = -363240246;    int lxsXYkEyZjHYBXUyNBy77907482 = -562936058;    int lxsXYkEyZjHYBXUyNBy5987063 = -101657010;    int lxsXYkEyZjHYBXUyNBy53385598 = -662872409;    int lxsXYkEyZjHYBXUyNBy44448180 = -160281425;    int lxsXYkEyZjHYBXUyNBy40278731 = -557097618;    int lxsXYkEyZjHYBXUyNBy6309380 = -135028264;    int lxsXYkEyZjHYBXUyNBy46908885 = -132745888;    int lxsXYkEyZjHYBXUyNBy45693810 = -708800312;    int lxsXYkEyZjHYBXUyNBy96104611 = -893312925;     lxsXYkEyZjHYBXUyNBy17640625 = lxsXYkEyZjHYBXUyNBy47401606;     lxsXYkEyZjHYBXUyNBy47401606 = lxsXYkEyZjHYBXUyNBy96964874;     lxsXYkEyZjHYBXUyNBy96964874 = lxsXYkEyZjHYBXUyNBy39426839;     lxsXYkEyZjHYBXUyNBy39426839 = lxsXYkEyZjHYBXUyNBy85444687;     lxsXYkEyZjHYBXUyNBy85444687 = lxsXYkEyZjHYBXUyNBy11054400;     lxsXYkEyZjHYBXUyNBy11054400 = lxsXYkEyZjHYBXUyNBy14945508;     lxsXYkEyZjHYBXUyNBy14945508 = lxsXYkEyZjHYBXUyNBy21664962;     lxsXYkEyZjHYBXUyNBy21664962 = lxsXYkEyZjHYBXUyNBy42348580;     lxsXYkEyZjHYBXUyNBy42348580 = lxsXYkEyZjHYBXUyNBy32921066;     lxsXYkEyZjHYBXUyNBy32921066 = lxsXYkEyZjHYBXUyNBy5642922;     lxsXYkEyZjHYBXUyNBy5642922 = lxsXYkEyZjHYBXUyNBy38642731;     lxsXYkEyZjHYBXUyNBy38642731 = lxsXYkEyZjHYBXUyNBy5195205;     lxsXYkEyZjHYBXUyNBy5195205 = lxsXYkEyZjHYBXUyNBy72019800;     lxsXYkEyZjHYBXUyNBy72019800 = lxsXYkEyZjHYBXUyNBy20435717;     lxsXYkEyZjHYBXUyNBy20435717 = lxsXYkEyZjHYBXUyNBy26274147;     lxsXYkEyZjHYBXUyNBy26274147 = lxsXYkEyZjHYBXUyNBy48452663;     lxsXYkEyZjHYBXUyNBy48452663 = lxsXYkEyZjHYBXUyNBy39138141;     lxsXYkEyZjHYBXUyNBy39138141 = lxsXYkEyZjHYBXUyNBy6155775;     lxsXYkEyZjHYBXUyNBy6155775 = lxsXYkEyZjHYBXUyNBy62466337;     lxsXYkEyZjHYBXUyNBy62466337 = lxsXYkEyZjHYBXUyNBy23270574;     lxsXYkEyZjHYBXUyNBy23270574 = lxsXYkEyZjHYBXUyNBy62382771;     lxsXYkEyZjHYBXUyNBy62382771 = lxsXYkEyZjHYBXUyNBy30407116;     lxsXYkEyZjHYBXUyNBy30407116 = lxsXYkEyZjHYBXUyNBy39135983;     lxsXYkEyZjHYBXUyNBy39135983 = lxsXYkEyZjHYBXUyNBy69146788;     lxsXYkEyZjHYBXUyNBy69146788 = lxsXYkEyZjHYBXUyNBy33555254;     lxsXYkEyZjHYBXUyNBy33555254 = lxsXYkEyZjHYBXUyNBy59998038;     lxsXYkEyZjHYBXUyNBy59998038 = lxsXYkEyZjHYBXUyNBy47858709;     lxsXYkEyZjHYBXUyNBy47858709 = lxsXYkEyZjHYBXUyNBy43663353;     lxsXYkEyZjHYBXUyNBy43663353 = lxsXYkEyZjHYBXUyNBy69137620;     lxsXYkEyZjHYBXUyNBy69137620 = lxsXYkEyZjHYBXUyNBy32774674;     lxsXYkEyZjHYBXUyNBy32774674 = lxsXYkEyZjHYBXUyNBy68763509;     lxsXYkEyZjHYBXUyNBy68763509 = lxsXYkEyZjHYBXUyNBy48738345;     lxsXYkEyZjHYBXUyNBy48738345 = lxsXYkEyZjHYBXUyNBy58523417;     lxsXYkEyZjHYBXUyNBy58523417 = lxsXYkEyZjHYBXUyNBy59952811;     lxsXYkEyZjHYBXUyNBy59952811 = lxsXYkEyZjHYBXUyNBy33577479;     lxsXYkEyZjHYBXUyNBy33577479 = lxsXYkEyZjHYBXUyNBy35736374;     lxsXYkEyZjHYBXUyNBy35736374 = lxsXYkEyZjHYBXUyNBy76267113;     lxsXYkEyZjHYBXUyNBy76267113 = lxsXYkEyZjHYBXUyNBy5275033;     lxsXYkEyZjHYBXUyNBy5275033 = lxsXYkEyZjHYBXUyNBy95504541;     lxsXYkEyZjHYBXUyNBy95504541 = lxsXYkEyZjHYBXUyNBy7365530;     lxsXYkEyZjHYBXUyNBy7365530 = lxsXYkEyZjHYBXUyNBy84310988;     lxsXYkEyZjHYBXUyNBy84310988 = lxsXYkEyZjHYBXUyNBy20119845;     lxsXYkEyZjHYBXUyNBy20119845 = lxsXYkEyZjHYBXUyNBy45840203;     lxsXYkEyZjHYBXUyNBy45840203 = lxsXYkEyZjHYBXUyNBy32984025;     lxsXYkEyZjHYBXUyNBy32984025 = lxsXYkEyZjHYBXUyNBy99603211;     lxsXYkEyZjHYBXUyNBy99603211 = lxsXYkEyZjHYBXUyNBy90455548;     lxsXYkEyZjHYBXUyNBy90455548 = lxsXYkEyZjHYBXUyNBy83923654;     lxsXYkEyZjHYBXUyNBy83923654 = lxsXYkEyZjHYBXUyNBy36727629;     lxsXYkEyZjHYBXUyNBy36727629 = lxsXYkEyZjHYBXUyNBy2240409;     lxsXYkEyZjHYBXUyNBy2240409 = lxsXYkEyZjHYBXUyNBy34456385;     lxsXYkEyZjHYBXUyNBy34456385 = lxsXYkEyZjHYBXUyNBy80238182;     lxsXYkEyZjHYBXUyNBy80238182 = lxsXYkEyZjHYBXUyNBy25878411;     lxsXYkEyZjHYBXUyNBy25878411 = lxsXYkEyZjHYBXUyNBy64973584;     lxsXYkEyZjHYBXUyNBy64973584 = lxsXYkEyZjHYBXUyNBy14206698;     lxsXYkEyZjHYBXUyNBy14206698 = lxsXYkEyZjHYBXUyNBy55257853;     lxsXYkEyZjHYBXUyNBy55257853 = lxsXYkEyZjHYBXUyNBy16994490;     lxsXYkEyZjHYBXUyNBy16994490 = lxsXYkEyZjHYBXUyNBy57828891;     lxsXYkEyZjHYBXUyNBy57828891 = lxsXYkEyZjHYBXUyNBy70280050;     lxsXYkEyZjHYBXUyNBy70280050 = lxsXYkEyZjHYBXUyNBy51889434;     lxsXYkEyZjHYBXUyNBy51889434 = lxsXYkEyZjHYBXUyNBy51056362;     lxsXYkEyZjHYBXUyNBy51056362 = lxsXYkEyZjHYBXUyNBy67086799;     lxsXYkEyZjHYBXUyNBy67086799 = lxsXYkEyZjHYBXUyNBy78001608;     lxsXYkEyZjHYBXUyNBy78001608 = lxsXYkEyZjHYBXUyNBy73210960;     lxsXYkEyZjHYBXUyNBy73210960 = lxsXYkEyZjHYBXUyNBy146393;     lxsXYkEyZjHYBXUyNBy146393 = lxsXYkEyZjHYBXUyNBy36879413;     lxsXYkEyZjHYBXUyNBy36879413 = lxsXYkEyZjHYBXUyNBy89904386;     lxsXYkEyZjHYBXUyNBy89904386 = lxsXYkEyZjHYBXUyNBy46671787;     lxsXYkEyZjHYBXUyNBy46671787 = lxsXYkEyZjHYBXUyNBy12066990;     lxsXYkEyZjHYBXUyNBy12066990 = lxsXYkEyZjHYBXUyNBy86858237;     lxsXYkEyZjHYBXUyNBy86858237 = lxsXYkEyZjHYBXUyNBy90537772;     lxsXYkEyZjHYBXUyNBy90537772 = lxsXYkEyZjHYBXUyNBy72185550;     lxsXYkEyZjHYBXUyNBy72185550 = lxsXYkEyZjHYBXUyNBy33863108;     lxsXYkEyZjHYBXUyNBy33863108 = lxsXYkEyZjHYBXUyNBy10651233;     lxsXYkEyZjHYBXUyNBy10651233 = lxsXYkEyZjHYBXUyNBy55100808;     lxsXYkEyZjHYBXUyNBy55100808 = lxsXYkEyZjHYBXUyNBy38959585;     lxsXYkEyZjHYBXUyNBy38959585 = lxsXYkEyZjHYBXUyNBy42262927;     lxsXYkEyZjHYBXUyNBy42262927 = lxsXYkEyZjHYBXUyNBy84566912;     lxsXYkEyZjHYBXUyNBy84566912 = lxsXYkEyZjHYBXUyNBy6151958;     lxsXYkEyZjHYBXUyNBy6151958 = lxsXYkEyZjHYBXUyNBy69543577;     lxsXYkEyZjHYBXUyNBy69543577 = lxsXYkEyZjHYBXUyNBy43099705;     lxsXYkEyZjHYBXUyNBy43099705 = lxsXYkEyZjHYBXUyNBy76074384;     lxsXYkEyZjHYBXUyNBy76074384 = lxsXYkEyZjHYBXUyNBy11131080;     lxsXYkEyZjHYBXUyNBy11131080 = lxsXYkEyZjHYBXUyNBy41422944;     lxsXYkEyZjHYBXUyNBy41422944 = lxsXYkEyZjHYBXUyNBy34681235;     lxsXYkEyZjHYBXUyNBy34681235 = lxsXYkEyZjHYBXUyNBy52536491;     lxsXYkEyZjHYBXUyNBy52536491 = lxsXYkEyZjHYBXUyNBy42885098;     lxsXYkEyZjHYBXUyNBy42885098 = lxsXYkEyZjHYBXUyNBy83764760;     lxsXYkEyZjHYBXUyNBy83764760 = lxsXYkEyZjHYBXUyNBy44316719;     lxsXYkEyZjHYBXUyNBy44316719 = lxsXYkEyZjHYBXUyNBy4694958;     lxsXYkEyZjHYBXUyNBy4694958 = lxsXYkEyZjHYBXUyNBy16582990;     lxsXYkEyZjHYBXUyNBy16582990 = lxsXYkEyZjHYBXUyNBy77907482;     lxsXYkEyZjHYBXUyNBy77907482 = lxsXYkEyZjHYBXUyNBy5987063;     lxsXYkEyZjHYBXUyNBy5987063 = lxsXYkEyZjHYBXUyNBy53385598;     lxsXYkEyZjHYBXUyNBy53385598 = lxsXYkEyZjHYBXUyNBy44448180;     lxsXYkEyZjHYBXUyNBy44448180 = lxsXYkEyZjHYBXUyNBy40278731;     lxsXYkEyZjHYBXUyNBy40278731 = lxsXYkEyZjHYBXUyNBy6309380;     lxsXYkEyZjHYBXUyNBy6309380 = lxsXYkEyZjHYBXUyNBy46908885;     lxsXYkEyZjHYBXUyNBy46908885 = lxsXYkEyZjHYBXUyNBy45693810;     lxsXYkEyZjHYBXUyNBy45693810 = lxsXYkEyZjHYBXUyNBy96104611;     lxsXYkEyZjHYBXUyNBy96104611 = lxsXYkEyZjHYBXUyNBy17640625;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void XfUxisdkmMhjuNxQedr43805819() {     int YiSfeRRaGCYTXWBzFsp72295022 = -230840511;    int YiSfeRRaGCYTXWBzFsp94399224 = 2056553;    int YiSfeRRaGCYTXWBzFsp57697520 = -594961299;    int YiSfeRRaGCYTXWBzFsp10861781 = -457539099;    int YiSfeRRaGCYTXWBzFsp59896358 = -543706253;    int YiSfeRRaGCYTXWBzFsp25228797 = -444171649;    int YiSfeRRaGCYTXWBzFsp36046212 = -791766859;    int YiSfeRRaGCYTXWBzFsp50840065 = -233069287;    int YiSfeRRaGCYTXWBzFsp30122991 = -938252825;    int YiSfeRRaGCYTXWBzFsp15553052 = -451083029;    int YiSfeRRaGCYTXWBzFsp84254217 = -382412378;    int YiSfeRRaGCYTXWBzFsp1407445 = -829720750;    int YiSfeRRaGCYTXWBzFsp69012519 = -235094036;    int YiSfeRRaGCYTXWBzFsp64986231 = -604002367;    int YiSfeRRaGCYTXWBzFsp50659790 = -810434633;    int YiSfeRRaGCYTXWBzFsp16041683 = -905357806;    int YiSfeRRaGCYTXWBzFsp48284426 = -858086924;    int YiSfeRRaGCYTXWBzFsp6734728 = -661199164;    int YiSfeRRaGCYTXWBzFsp7376376 = -861984575;    int YiSfeRRaGCYTXWBzFsp80100892 = -821657230;    int YiSfeRRaGCYTXWBzFsp57444961 = -534145694;    int YiSfeRRaGCYTXWBzFsp13635361 = 1091781;    int YiSfeRRaGCYTXWBzFsp66876947 = -460837679;    int YiSfeRRaGCYTXWBzFsp40564351 = -617948467;    int YiSfeRRaGCYTXWBzFsp64899404 = -599885736;    int YiSfeRRaGCYTXWBzFsp74796201 = -864775585;    int YiSfeRRaGCYTXWBzFsp61987962 = -826660916;    int YiSfeRRaGCYTXWBzFsp1107710 = -122799260;    int YiSfeRRaGCYTXWBzFsp83561030 = -652011281;    int YiSfeRRaGCYTXWBzFsp63573029 = -27715123;    int YiSfeRRaGCYTXWBzFsp84480202 = -89720269;    int YiSfeRRaGCYTXWBzFsp99755119 = -362602072;    int YiSfeRRaGCYTXWBzFsp16394221 = -28913484;    int YiSfeRRaGCYTXWBzFsp53179310 = -569600002;    int YiSfeRRaGCYTXWBzFsp94456967 = -559570988;    int YiSfeRRaGCYTXWBzFsp20904022 = -155520194;    int YiSfeRRaGCYTXWBzFsp10440862 = -804031713;    int YiSfeRRaGCYTXWBzFsp89244351 = -200050454;    int YiSfeRRaGCYTXWBzFsp56044681 = 44974800;    int YiSfeRRaGCYTXWBzFsp19490937 = -961794201;    int YiSfeRRaGCYTXWBzFsp63324930 = 55225431;    int YiSfeRRaGCYTXWBzFsp20985647 = -203294948;    int YiSfeRRaGCYTXWBzFsp11120028 = -27693503;    int YiSfeRRaGCYTXWBzFsp54834602 = -813913994;    int YiSfeRRaGCYTXWBzFsp92968088 = -123817260;    int YiSfeRRaGCYTXWBzFsp54936813 = -143080061;    int YiSfeRRaGCYTXWBzFsp6929260 = -738521348;    int YiSfeRRaGCYTXWBzFsp7350964 = -919895900;    int YiSfeRRaGCYTXWBzFsp79070396 = -409175598;    int YiSfeRRaGCYTXWBzFsp47082071 = -475891079;    int YiSfeRRaGCYTXWBzFsp9569925 = -829662371;    int YiSfeRRaGCYTXWBzFsp69620332 = -748028107;    int YiSfeRRaGCYTXWBzFsp57606413 = -647744696;    int YiSfeRRaGCYTXWBzFsp22389342 = -916963489;    int YiSfeRRaGCYTXWBzFsp86360857 = -272695410;    int YiSfeRRaGCYTXWBzFsp58659662 = -131932292;    int YiSfeRRaGCYTXWBzFsp27522277 = -537105769;    int YiSfeRRaGCYTXWBzFsp17133169 = -977012832;    int YiSfeRRaGCYTXWBzFsp45962376 = -857653364;    int YiSfeRRaGCYTXWBzFsp85100157 = -678930669;    int YiSfeRRaGCYTXWBzFsp63240835 = -617510734;    int YiSfeRRaGCYTXWBzFsp34938502 = -568967599;    int YiSfeRRaGCYTXWBzFsp67279035 = -581058007;    int YiSfeRRaGCYTXWBzFsp66549961 = -810537703;    int YiSfeRRaGCYTXWBzFsp31072850 = -261362761;    int YiSfeRRaGCYTXWBzFsp84499097 = 80189693;    int YiSfeRRaGCYTXWBzFsp85013223 = -700807266;    int YiSfeRRaGCYTXWBzFsp15833209 = -665494034;    int YiSfeRRaGCYTXWBzFsp70529263 = 55568620;    int YiSfeRRaGCYTXWBzFsp29755769 = -554914440;    int YiSfeRRaGCYTXWBzFsp5600822 = -1326093;    int YiSfeRRaGCYTXWBzFsp59040074 = -558036470;    int YiSfeRRaGCYTXWBzFsp50690046 = -606173964;    int YiSfeRRaGCYTXWBzFsp87885439 = -900190374;    int YiSfeRRaGCYTXWBzFsp16775963 = -776882661;    int YiSfeRRaGCYTXWBzFsp36459315 = -230850746;    int YiSfeRRaGCYTXWBzFsp2515333 = -971214716;    int YiSfeRRaGCYTXWBzFsp12042346 = -646923685;    int YiSfeRRaGCYTXWBzFsp47596263 = -394131207;    int YiSfeRRaGCYTXWBzFsp9962592 = -356805675;    int YiSfeRRaGCYTXWBzFsp67866942 = -26254237;    int YiSfeRRaGCYTXWBzFsp54636999 = -906765016;    int YiSfeRRaGCYTXWBzFsp22037314 = -713623663;    int YiSfeRRaGCYTXWBzFsp36478959 = -76120202;    int YiSfeRRaGCYTXWBzFsp54003105 = -198052752;    int YiSfeRRaGCYTXWBzFsp14859871 = -341692163;    int YiSfeRRaGCYTXWBzFsp42148706 = -714857376;    int YiSfeRRaGCYTXWBzFsp94004879 = -111949996;    int YiSfeRRaGCYTXWBzFsp66818452 = -196904593;    int YiSfeRRaGCYTXWBzFsp35797306 = -327638696;    int YiSfeRRaGCYTXWBzFsp93381744 = -618414425;    int YiSfeRRaGCYTXWBzFsp93307692 = -827018882;    int YiSfeRRaGCYTXWBzFsp43281976 = -342397090;    int YiSfeRRaGCYTXWBzFsp70944524 = -276094531;    int YiSfeRRaGCYTXWBzFsp56250101 = -244283467;    int YiSfeRRaGCYTXWBzFsp28386428 = -375806971;    int YiSfeRRaGCYTXWBzFsp53706612 = -622236942;    int YiSfeRRaGCYTXWBzFsp44570066 = -217155800;    int YiSfeRRaGCYTXWBzFsp23761753 = -452551234;    int YiSfeRRaGCYTXWBzFsp8468991 = -230840511;     YiSfeRRaGCYTXWBzFsp72295022 = YiSfeRRaGCYTXWBzFsp94399224;     YiSfeRRaGCYTXWBzFsp94399224 = YiSfeRRaGCYTXWBzFsp57697520;     YiSfeRRaGCYTXWBzFsp57697520 = YiSfeRRaGCYTXWBzFsp10861781;     YiSfeRRaGCYTXWBzFsp10861781 = YiSfeRRaGCYTXWBzFsp59896358;     YiSfeRRaGCYTXWBzFsp59896358 = YiSfeRRaGCYTXWBzFsp25228797;     YiSfeRRaGCYTXWBzFsp25228797 = YiSfeRRaGCYTXWBzFsp36046212;     YiSfeRRaGCYTXWBzFsp36046212 = YiSfeRRaGCYTXWBzFsp50840065;     YiSfeRRaGCYTXWBzFsp50840065 = YiSfeRRaGCYTXWBzFsp30122991;     YiSfeRRaGCYTXWBzFsp30122991 = YiSfeRRaGCYTXWBzFsp15553052;     YiSfeRRaGCYTXWBzFsp15553052 = YiSfeRRaGCYTXWBzFsp84254217;     YiSfeRRaGCYTXWBzFsp84254217 = YiSfeRRaGCYTXWBzFsp1407445;     YiSfeRRaGCYTXWBzFsp1407445 = YiSfeRRaGCYTXWBzFsp69012519;     YiSfeRRaGCYTXWBzFsp69012519 = YiSfeRRaGCYTXWBzFsp64986231;     YiSfeRRaGCYTXWBzFsp64986231 = YiSfeRRaGCYTXWBzFsp50659790;     YiSfeRRaGCYTXWBzFsp50659790 = YiSfeRRaGCYTXWBzFsp16041683;     YiSfeRRaGCYTXWBzFsp16041683 = YiSfeRRaGCYTXWBzFsp48284426;     YiSfeRRaGCYTXWBzFsp48284426 = YiSfeRRaGCYTXWBzFsp6734728;     YiSfeRRaGCYTXWBzFsp6734728 = YiSfeRRaGCYTXWBzFsp7376376;     YiSfeRRaGCYTXWBzFsp7376376 = YiSfeRRaGCYTXWBzFsp80100892;     YiSfeRRaGCYTXWBzFsp80100892 = YiSfeRRaGCYTXWBzFsp57444961;     YiSfeRRaGCYTXWBzFsp57444961 = YiSfeRRaGCYTXWBzFsp13635361;     YiSfeRRaGCYTXWBzFsp13635361 = YiSfeRRaGCYTXWBzFsp66876947;     YiSfeRRaGCYTXWBzFsp66876947 = YiSfeRRaGCYTXWBzFsp40564351;     YiSfeRRaGCYTXWBzFsp40564351 = YiSfeRRaGCYTXWBzFsp64899404;     YiSfeRRaGCYTXWBzFsp64899404 = YiSfeRRaGCYTXWBzFsp74796201;     YiSfeRRaGCYTXWBzFsp74796201 = YiSfeRRaGCYTXWBzFsp61987962;     YiSfeRRaGCYTXWBzFsp61987962 = YiSfeRRaGCYTXWBzFsp1107710;     YiSfeRRaGCYTXWBzFsp1107710 = YiSfeRRaGCYTXWBzFsp83561030;     YiSfeRRaGCYTXWBzFsp83561030 = YiSfeRRaGCYTXWBzFsp63573029;     YiSfeRRaGCYTXWBzFsp63573029 = YiSfeRRaGCYTXWBzFsp84480202;     YiSfeRRaGCYTXWBzFsp84480202 = YiSfeRRaGCYTXWBzFsp99755119;     YiSfeRRaGCYTXWBzFsp99755119 = YiSfeRRaGCYTXWBzFsp16394221;     YiSfeRRaGCYTXWBzFsp16394221 = YiSfeRRaGCYTXWBzFsp53179310;     YiSfeRRaGCYTXWBzFsp53179310 = YiSfeRRaGCYTXWBzFsp94456967;     YiSfeRRaGCYTXWBzFsp94456967 = YiSfeRRaGCYTXWBzFsp20904022;     YiSfeRRaGCYTXWBzFsp20904022 = YiSfeRRaGCYTXWBzFsp10440862;     YiSfeRRaGCYTXWBzFsp10440862 = YiSfeRRaGCYTXWBzFsp89244351;     YiSfeRRaGCYTXWBzFsp89244351 = YiSfeRRaGCYTXWBzFsp56044681;     YiSfeRRaGCYTXWBzFsp56044681 = YiSfeRRaGCYTXWBzFsp19490937;     YiSfeRRaGCYTXWBzFsp19490937 = YiSfeRRaGCYTXWBzFsp63324930;     YiSfeRRaGCYTXWBzFsp63324930 = YiSfeRRaGCYTXWBzFsp20985647;     YiSfeRRaGCYTXWBzFsp20985647 = YiSfeRRaGCYTXWBzFsp11120028;     YiSfeRRaGCYTXWBzFsp11120028 = YiSfeRRaGCYTXWBzFsp54834602;     YiSfeRRaGCYTXWBzFsp54834602 = YiSfeRRaGCYTXWBzFsp92968088;     YiSfeRRaGCYTXWBzFsp92968088 = YiSfeRRaGCYTXWBzFsp54936813;     YiSfeRRaGCYTXWBzFsp54936813 = YiSfeRRaGCYTXWBzFsp6929260;     YiSfeRRaGCYTXWBzFsp6929260 = YiSfeRRaGCYTXWBzFsp7350964;     YiSfeRRaGCYTXWBzFsp7350964 = YiSfeRRaGCYTXWBzFsp79070396;     YiSfeRRaGCYTXWBzFsp79070396 = YiSfeRRaGCYTXWBzFsp47082071;     YiSfeRRaGCYTXWBzFsp47082071 = YiSfeRRaGCYTXWBzFsp9569925;     YiSfeRRaGCYTXWBzFsp9569925 = YiSfeRRaGCYTXWBzFsp69620332;     YiSfeRRaGCYTXWBzFsp69620332 = YiSfeRRaGCYTXWBzFsp57606413;     YiSfeRRaGCYTXWBzFsp57606413 = YiSfeRRaGCYTXWBzFsp22389342;     YiSfeRRaGCYTXWBzFsp22389342 = YiSfeRRaGCYTXWBzFsp86360857;     YiSfeRRaGCYTXWBzFsp86360857 = YiSfeRRaGCYTXWBzFsp58659662;     YiSfeRRaGCYTXWBzFsp58659662 = YiSfeRRaGCYTXWBzFsp27522277;     YiSfeRRaGCYTXWBzFsp27522277 = YiSfeRRaGCYTXWBzFsp17133169;     YiSfeRRaGCYTXWBzFsp17133169 = YiSfeRRaGCYTXWBzFsp45962376;     YiSfeRRaGCYTXWBzFsp45962376 = YiSfeRRaGCYTXWBzFsp85100157;     YiSfeRRaGCYTXWBzFsp85100157 = YiSfeRRaGCYTXWBzFsp63240835;     YiSfeRRaGCYTXWBzFsp63240835 = YiSfeRRaGCYTXWBzFsp34938502;     YiSfeRRaGCYTXWBzFsp34938502 = YiSfeRRaGCYTXWBzFsp67279035;     YiSfeRRaGCYTXWBzFsp67279035 = YiSfeRRaGCYTXWBzFsp66549961;     YiSfeRRaGCYTXWBzFsp66549961 = YiSfeRRaGCYTXWBzFsp31072850;     YiSfeRRaGCYTXWBzFsp31072850 = YiSfeRRaGCYTXWBzFsp84499097;     YiSfeRRaGCYTXWBzFsp84499097 = YiSfeRRaGCYTXWBzFsp85013223;     YiSfeRRaGCYTXWBzFsp85013223 = YiSfeRRaGCYTXWBzFsp15833209;     YiSfeRRaGCYTXWBzFsp15833209 = YiSfeRRaGCYTXWBzFsp70529263;     YiSfeRRaGCYTXWBzFsp70529263 = YiSfeRRaGCYTXWBzFsp29755769;     YiSfeRRaGCYTXWBzFsp29755769 = YiSfeRRaGCYTXWBzFsp5600822;     YiSfeRRaGCYTXWBzFsp5600822 = YiSfeRRaGCYTXWBzFsp59040074;     YiSfeRRaGCYTXWBzFsp59040074 = YiSfeRRaGCYTXWBzFsp50690046;     YiSfeRRaGCYTXWBzFsp50690046 = YiSfeRRaGCYTXWBzFsp87885439;     YiSfeRRaGCYTXWBzFsp87885439 = YiSfeRRaGCYTXWBzFsp16775963;     YiSfeRRaGCYTXWBzFsp16775963 = YiSfeRRaGCYTXWBzFsp36459315;     YiSfeRRaGCYTXWBzFsp36459315 = YiSfeRRaGCYTXWBzFsp2515333;     YiSfeRRaGCYTXWBzFsp2515333 = YiSfeRRaGCYTXWBzFsp12042346;     YiSfeRRaGCYTXWBzFsp12042346 = YiSfeRRaGCYTXWBzFsp47596263;     YiSfeRRaGCYTXWBzFsp47596263 = YiSfeRRaGCYTXWBzFsp9962592;     YiSfeRRaGCYTXWBzFsp9962592 = YiSfeRRaGCYTXWBzFsp67866942;     YiSfeRRaGCYTXWBzFsp67866942 = YiSfeRRaGCYTXWBzFsp54636999;     YiSfeRRaGCYTXWBzFsp54636999 = YiSfeRRaGCYTXWBzFsp22037314;     YiSfeRRaGCYTXWBzFsp22037314 = YiSfeRRaGCYTXWBzFsp36478959;     YiSfeRRaGCYTXWBzFsp36478959 = YiSfeRRaGCYTXWBzFsp54003105;     YiSfeRRaGCYTXWBzFsp54003105 = YiSfeRRaGCYTXWBzFsp14859871;     YiSfeRRaGCYTXWBzFsp14859871 = YiSfeRRaGCYTXWBzFsp42148706;     YiSfeRRaGCYTXWBzFsp42148706 = YiSfeRRaGCYTXWBzFsp94004879;     YiSfeRRaGCYTXWBzFsp94004879 = YiSfeRRaGCYTXWBzFsp66818452;     YiSfeRRaGCYTXWBzFsp66818452 = YiSfeRRaGCYTXWBzFsp35797306;     YiSfeRRaGCYTXWBzFsp35797306 = YiSfeRRaGCYTXWBzFsp93381744;     YiSfeRRaGCYTXWBzFsp93381744 = YiSfeRRaGCYTXWBzFsp93307692;     YiSfeRRaGCYTXWBzFsp93307692 = YiSfeRRaGCYTXWBzFsp43281976;     YiSfeRRaGCYTXWBzFsp43281976 = YiSfeRRaGCYTXWBzFsp70944524;     YiSfeRRaGCYTXWBzFsp70944524 = YiSfeRRaGCYTXWBzFsp56250101;     YiSfeRRaGCYTXWBzFsp56250101 = YiSfeRRaGCYTXWBzFsp28386428;     YiSfeRRaGCYTXWBzFsp28386428 = YiSfeRRaGCYTXWBzFsp53706612;     YiSfeRRaGCYTXWBzFsp53706612 = YiSfeRRaGCYTXWBzFsp44570066;     YiSfeRRaGCYTXWBzFsp44570066 = YiSfeRRaGCYTXWBzFsp23761753;     YiSfeRRaGCYTXWBzFsp23761753 = YiSfeRRaGCYTXWBzFsp8468991;     YiSfeRRaGCYTXWBzFsp8468991 = YiSfeRRaGCYTXWBzFsp72295022;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void dGMrbgsXbHvetHANCmE50134366() {     int NsjRfnzJbLHnVzztDYe26949420 = -668368095;    int NsjRfnzJbLHnVzztDYe41396844 = -577508261;    int NsjRfnzJbLHnVzztDYe18430167 = -980345912;    int NsjRfnzJbLHnVzztDYe82296721 = -463641510;    int NsjRfnzJbLHnVzztDYe34348029 = -216141493;    int NsjRfnzJbLHnVzztDYe39403194 = -573322485;    int NsjRfnzJbLHnVzztDYe57146915 = 6340469;    int NsjRfnzJbLHnVzztDYe80015168 = -733637520;    int NsjRfnzJbLHnVzztDYe17897402 = -985106196;    int NsjRfnzJbLHnVzztDYe98185037 = -729884299;    int NsjRfnzJbLHnVzztDYe62865512 = 92231050;    int NsjRfnzJbLHnVzztDYe64172157 = 83855161;    int NsjRfnzJbLHnVzztDYe32829834 = -38634340;    int NsjRfnzJbLHnVzztDYe57952662 = -216105945;    int NsjRfnzJbLHnVzztDYe80883863 = -717556265;    int NsjRfnzJbLHnVzztDYe5809219 = -535517370;    int NsjRfnzJbLHnVzztDYe48116190 = -231686752;    int NsjRfnzJbLHnVzztDYe74331315 = -724763631;    int NsjRfnzJbLHnVzztDYe8596977 = -47796123;    int NsjRfnzJbLHnVzztDYe97735447 = -67023377;    int NsjRfnzJbLHnVzztDYe91619349 = -2228845;    int NsjRfnzJbLHnVzztDYe64887949 = -165352327;    int NsjRfnzJbLHnVzztDYe3346780 = 52418900;    int NsjRfnzJbLHnVzztDYe41992720 = -316989284;    int NsjRfnzJbLHnVzztDYe60652020 = -972799188;    int NsjRfnzJbLHnVzztDYe16037149 = -868484369;    int NsjRfnzJbLHnVzztDYe63977886 = -281505195;    int NsjRfnzJbLHnVzztDYe54356710 = -130851121;    int NsjRfnzJbLHnVzztDYe23458707 = 67743844;    int NsjRfnzJbLHnVzztDYe58008438 = -318473091;    int NsjRfnzJbLHnVzztDYe36185731 = -638592795;    int NsjRfnzJbLHnVzztDYe30746730 = -774098600;    int NsjRfnzJbLHnVzztDYe84050097 = -585431098;    int NsjRfnzJbLHnVzztDYe47835203 = -249720812;    int NsjRfnzJbLHnVzztDYe28961125 = -777434247;    int NsjRfnzJbLHnVzztDYe8230564 = -403515790;    int NsjRfnzJbLHnVzztDYe85145349 = -654458334;    int NsjRfnzJbLHnVzztDYe2221591 = -73979475;    int NsjRfnzJbLHnVzztDYe6814331 = -336973801;    int NsjRfnzJbLHnVzztDYe43477331 = -620102800;    int NsjRfnzJbLHnVzztDYe19284331 = -57324727;    int NsjRfnzJbLHnVzztDYe57660305 = -810827035;    int NsjRfnzJbLHnVzztDYe2120211 = -968198821;    int NsjRfnzJbLHnVzztDYe63829001 = -287593660;    int NsjRfnzJbLHnVzztDYe52952152 = -256334858;    int NsjRfnzJbLHnVzztDYe10270415 = -211869676;    int NsjRfnzJbLHnVzztDYe23402971 = -765578732;    int NsjRfnzJbLHnVzztDYe30778273 = -897548272;    int NsjRfnzJbLHnVzztDYe21413163 = -308905787;    int NsjRfnzJbLHnVzztDYe91923733 = -715910374;    int NsjRfnzJbLHnVzztDYe84683464 = -486877872;    int NsjRfnzJbLHnVzztDYe59002482 = -163094090;    int NsjRfnzJbLHnVzztDYe89334416 = -387660153;    int NsjRfnzJbLHnVzztDYe79805099 = -812849974;    int NsjRfnzJbLHnVzztDYe58515017 = -668604091;    int NsjRfnzJbLHnVzztDYe62061470 = -403015768;    int NsjRfnzJbLHnVzztDYe38050065 = -529927162;    int NsjRfnzJbLHnVzztDYe76437446 = -563356629;    int NsjRfnzJbLHnVzztDYe21644702 = -490842323;    int NsjRfnzJbLHnVzztDYe18310881 = -347657124;    int NsjRfnzJbLHnVzztDYe75425307 = -191817291;    int NsjRfnzJbLHnVzztDYe2790206 = -862808411;    int NsjRfnzJbLHnVzztDYe56556461 = -701381364;    int NsjRfnzJbLHnVzztDYe59888963 = -566633106;    int NsjRfnzJbLHnVzztDYe61999306 = 8708496;    int NsjRfnzJbLHnVzztDYe32118782 = -133670351;    int NsjRfnzJbLHnVzztDYe80122060 = -330713741;    int NsjRfnzJbLHnVzztDYe84994631 = -788913529;    int NsjRfnzJbLHnVzztDYe28991537 = -438671698;    int NsjRfnzJbLHnVzztDYe72653300 = -214040475;    int NsjRfnzJbLHnVzztDYe20663869 = -881059037;    int NsjRfnzJbLHnVzztDYe45894599 = -57707278;    int NsjRfnzJbLHnVzztDYe67516984 = -287789830;    int NsjRfnzJbLHnVzztDYe65119645 = -427693323;    int NsjRfnzJbLHnVzztDYe78451117 = 90301350;    int NsjRfnzJbLHnVzztDYe33959044 = -191401810;    int NsjRfnzJbLHnVzztDYe62767739 = -197153507;    int NsjRfnzJbLHnVzztDYe39517778 = -659987441;    int NsjRfnzJbLHnVzztDYe89040568 = 39345574;    int NsjRfnzJbLHnVzztDYe50381605 = -660929512;    int NsjRfnzJbLHnVzztDYe92634177 = -2905638;    int NsjRfnzJbLHnVzztDYe33199614 = -383956923;    int NsjRfnzJbLHnVzztDYe32943547 = -821945334;    int NsjRfnzJbLHnVzztDYe31534974 = -216345783;    int NsjRfnzJbLHnVzztDYe73324974 = -831595219;    int NsjRfnzJbLHnVzztDYe77183249 = -375498706;    int NsjRfnzJbLHnVzztDYe41412313 = -286438447;    int NsjRfnzJbLHnVzztDYe4244999 = -772581125;    int NsjRfnzJbLHnVzztDYe89320185 = -581116721;    int NsjRfnzJbLHnVzztDYe66899654 = -274418480;    int NsjRfnzJbLHnVzztDYe70180499 = -873588629;    int NsjRfnzJbLHnVzztDYe8707903 = 8898295;    int NsjRfnzJbLHnVzztDYe80576889 = -583137152;    int NsjRfnzJbLHnVzztDYe88503450 = -989316678;    int NsjRfnzJbLHnVzztDYe68052023 = -328285509;    int NsjRfnzJbLHnVzztDYe16494125 = -194516317;    int NsjRfnzJbLHnVzztDYe1103844 = -9445672;    int NsjRfnzJbLHnVzztDYe42231248 = -301565716;    int NsjRfnzJbLHnVzztDYe1829696 = -196302156;    int NsjRfnzJbLHnVzztDYe20833370 = -668368095;     NsjRfnzJbLHnVzztDYe26949420 = NsjRfnzJbLHnVzztDYe41396844;     NsjRfnzJbLHnVzztDYe41396844 = NsjRfnzJbLHnVzztDYe18430167;     NsjRfnzJbLHnVzztDYe18430167 = NsjRfnzJbLHnVzztDYe82296721;     NsjRfnzJbLHnVzztDYe82296721 = NsjRfnzJbLHnVzztDYe34348029;     NsjRfnzJbLHnVzztDYe34348029 = NsjRfnzJbLHnVzztDYe39403194;     NsjRfnzJbLHnVzztDYe39403194 = NsjRfnzJbLHnVzztDYe57146915;     NsjRfnzJbLHnVzztDYe57146915 = NsjRfnzJbLHnVzztDYe80015168;     NsjRfnzJbLHnVzztDYe80015168 = NsjRfnzJbLHnVzztDYe17897402;     NsjRfnzJbLHnVzztDYe17897402 = NsjRfnzJbLHnVzztDYe98185037;     NsjRfnzJbLHnVzztDYe98185037 = NsjRfnzJbLHnVzztDYe62865512;     NsjRfnzJbLHnVzztDYe62865512 = NsjRfnzJbLHnVzztDYe64172157;     NsjRfnzJbLHnVzztDYe64172157 = NsjRfnzJbLHnVzztDYe32829834;     NsjRfnzJbLHnVzztDYe32829834 = NsjRfnzJbLHnVzztDYe57952662;     NsjRfnzJbLHnVzztDYe57952662 = NsjRfnzJbLHnVzztDYe80883863;     NsjRfnzJbLHnVzztDYe80883863 = NsjRfnzJbLHnVzztDYe5809219;     NsjRfnzJbLHnVzztDYe5809219 = NsjRfnzJbLHnVzztDYe48116190;     NsjRfnzJbLHnVzztDYe48116190 = NsjRfnzJbLHnVzztDYe74331315;     NsjRfnzJbLHnVzztDYe74331315 = NsjRfnzJbLHnVzztDYe8596977;     NsjRfnzJbLHnVzztDYe8596977 = NsjRfnzJbLHnVzztDYe97735447;     NsjRfnzJbLHnVzztDYe97735447 = NsjRfnzJbLHnVzztDYe91619349;     NsjRfnzJbLHnVzztDYe91619349 = NsjRfnzJbLHnVzztDYe64887949;     NsjRfnzJbLHnVzztDYe64887949 = NsjRfnzJbLHnVzztDYe3346780;     NsjRfnzJbLHnVzztDYe3346780 = NsjRfnzJbLHnVzztDYe41992720;     NsjRfnzJbLHnVzztDYe41992720 = NsjRfnzJbLHnVzztDYe60652020;     NsjRfnzJbLHnVzztDYe60652020 = NsjRfnzJbLHnVzztDYe16037149;     NsjRfnzJbLHnVzztDYe16037149 = NsjRfnzJbLHnVzztDYe63977886;     NsjRfnzJbLHnVzztDYe63977886 = NsjRfnzJbLHnVzztDYe54356710;     NsjRfnzJbLHnVzztDYe54356710 = NsjRfnzJbLHnVzztDYe23458707;     NsjRfnzJbLHnVzztDYe23458707 = NsjRfnzJbLHnVzztDYe58008438;     NsjRfnzJbLHnVzztDYe58008438 = NsjRfnzJbLHnVzztDYe36185731;     NsjRfnzJbLHnVzztDYe36185731 = NsjRfnzJbLHnVzztDYe30746730;     NsjRfnzJbLHnVzztDYe30746730 = NsjRfnzJbLHnVzztDYe84050097;     NsjRfnzJbLHnVzztDYe84050097 = NsjRfnzJbLHnVzztDYe47835203;     NsjRfnzJbLHnVzztDYe47835203 = NsjRfnzJbLHnVzztDYe28961125;     NsjRfnzJbLHnVzztDYe28961125 = NsjRfnzJbLHnVzztDYe8230564;     NsjRfnzJbLHnVzztDYe8230564 = NsjRfnzJbLHnVzztDYe85145349;     NsjRfnzJbLHnVzztDYe85145349 = NsjRfnzJbLHnVzztDYe2221591;     NsjRfnzJbLHnVzztDYe2221591 = NsjRfnzJbLHnVzztDYe6814331;     NsjRfnzJbLHnVzztDYe6814331 = NsjRfnzJbLHnVzztDYe43477331;     NsjRfnzJbLHnVzztDYe43477331 = NsjRfnzJbLHnVzztDYe19284331;     NsjRfnzJbLHnVzztDYe19284331 = NsjRfnzJbLHnVzztDYe57660305;     NsjRfnzJbLHnVzztDYe57660305 = NsjRfnzJbLHnVzztDYe2120211;     NsjRfnzJbLHnVzztDYe2120211 = NsjRfnzJbLHnVzztDYe63829001;     NsjRfnzJbLHnVzztDYe63829001 = NsjRfnzJbLHnVzztDYe52952152;     NsjRfnzJbLHnVzztDYe52952152 = NsjRfnzJbLHnVzztDYe10270415;     NsjRfnzJbLHnVzztDYe10270415 = NsjRfnzJbLHnVzztDYe23402971;     NsjRfnzJbLHnVzztDYe23402971 = NsjRfnzJbLHnVzztDYe30778273;     NsjRfnzJbLHnVzztDYe30778273 = NsjRfnzJbLHnVzztDYe21413163;     NsjRfnzJbLHnVzztDYe21413163 = NsjRfnzJbLHnVzztDYe91923733;     NsjRfnzJbLHnVzztDYe91923733 = NsjRfnzJbLHnVzztDYe84683464;     NsjRfnzJbLHnVzztDYe84683464 = NsjRfnzJbLHnVzztDYe59002482;     NsjRfnzJbLHnVzztDYe59002482 = NsjRfnzJbLHnVzztDYe89334416;     NsjRfnzJbLHnVzztDYe89334416 = NsjRfnzJbLHnVzztDYe79805099;     NsjRfnzJbLHnVzztDYe79805099 = NsjRfnzJbLHnVzztDYe58515017;     NsjRfnzJbLHnVzztDYe58515017 = NsjRfnzJbLHnVzztDYe62061470;     NsjRfnzJbLHnVzztDYe62061470 = NsjRfnzJbLHnVzztDYe38050065;     NsjRfnzJbLHnVzztDYe38050065 = NsjRfnzJbLHnVzztDYe76437446;     NsjRfnzJbLHnVzztDYe76437446 = NsjRfnzJbLHnVzztDYe21644702;     NsjRfnzJbLHnVzztDYe21644702 = NsjRfnzJbLHnVzztDYe18310881;     NsjRfnzJbLHnVzztDYe18310881 = NsjRfnzJbLHnVzztDYe75425307;     NsjRfnzJbLHnVzztDYe75425307 = NsjRfnzJbLHnVzztDYe2790206;     NsjRfnzJbLHnVzztDYe2790206 = NsjRfnzJbLHnVzztDYe56556461;     NsjRfnzJbLHnVzztDYe56556461 = NsjRfnzJbLHnVzztDYe59888963;     NsjRfnzJbLHnVzztDYe59888963 = NsjRfnzJbLHnVzztDYe61999306;     NsjRfnzJbLHnVzztDYe61999306 = NsjRfnzJbLHnVzztDYe32118782;     NsjRfnzJbLHnVzztDYe32118782 = NsjRfnzJbLHnVzztDYe80122060;     NsjRfnzJbLHnVzztDYe80122060 = NsjRfnzJbLHnVzztDYe84994631;     NsjRfnzJbLHnVzztDYe84994631 = NsjRfnzJbLHnVzztDYe28991537;     NsjRfnzJbLHnVzztDYe28991537 = NsjRfnzJbLHnVzztDYe72653300;     NsjRfnzJbLHnVzztDYe72653300 = NsjRfnzJbLHnVzztDYe20663869;     NsjRfnzJbLHnVzztDYe20663869 = NsjRfnzJbLHnVzztDYe45894599;     NsjRfnzJbLHnVzztDYe45894599 = NsjRfnzJbLHnVzztDYe67516984;     NsjRfnzJbLHnVzztDYe67516984 = NsjRfnzJbLHnVzztDYe65119645;     NsjRfnzJbLHnVzztDYe65119645 = NsjRfnzJbLHnVzztDYe78451117;     NsjRfnzJbLHnVzztDYe78451117 = NsjRfnzJbLHnVzztDYe33959044;     NsjRfnzJbLHnVzztDYe33959044 = NsjRfnzJbLHnVzztDYe62767739;     NsjRfnzJbLHnVzztDYe62767739 = NsjRfnzJbLHnVzztDYe39517778;     NsjRfnzJbLHnVzztDYe39517778 = NsjRfnzJbLHnVzztDYe89040568;     NsjRfnzJbLHnVzztDYe89040568 = NsjRfnzJbLHnVzztDYe50381605;     NsjRfnzJbLHnVzztDYe50381605 = NsjRfnzJbLHnVzztDYe92634177;     NsjRfnzJbLHnVzztDYe92634177 = NsjRfnzJbLHnVzztDYe33199614;     NsjRfnzJbLHnVzztDYe33199614 = NsjRfnzJbLHnVzztDYe32943547;     NsjRfnzJbLHnVzztDYe32943547 = NsjRfnzJbLHnVzztDYe31534974;     NsjRfnzJbLHnVzztDYe31534974 = NsjRfnzJbLHnVzztDYe73324974;     NsjRfnzJbLHnVzztDYe73324974 = NsjRfnzJbLHnVzztDYe77183249;     NsjRfnzJbLHnVzztDYe77183249 = NsjRfnzJbLHnVzztDYe41412313;     NsjRfnzJbLHnVzztDYe41412313 = NsjRfnzJbLHnVzztDYe4244999;     NsjRfnzJbLHnVzztDYe4244999 = NsjRfnzJbLHnVzztDYe89320185;     NsjRfnzJbLHnVzztDYe89320185 = NsjRfnzJbLHnVzztDYe66899654;     NsjRfnzJbLHnVzztDYe66899654 = NsjRfnzJbLHnVzztDYe70180499;     NsjRfnzJbLHnVzztDYe70180499 = NsjRfnzJbLHnVzztDYe8707903;     NsjRfnzJbLHnVzztDYe8707903 = NsjRfnzJbLHnVzztDYe80576889;     NsjRfnzJbLHnVzztDYe80576889 = NsjRfnzJbLHnVzztDYe88503450;     NsjRfnzJbLHnVzztDYe88503450 = NsjRfnzJbLHnVzztDYe68052023;     NsjRfnzJbLHnVzztDYe68052023 = NsjRfnzJbLHnVzztDYe16494125;     NsjRfnzJbLHnVzztDYe16494125 = NsjRfnzJbLHnVzztDYe1103844;     NsjRfnzJbLHnVzztDYe1103844 = NsjRfnzJbLHnVzztDYe42231248;     NsjRfnzJbLHnVzztDYe42231248 = NsjRfnzJbLHnVzztDYe1829696;     NsjRfnzJbLHnVzztDYe1829696 = NsjRfnzJbLHnVzztDYe20833370;     NsjRfnzJbLHnVzztDYe20833370 = NsjRfnzJbLHnVzztDYe26949420;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void EhKsYfGbpKkKilgjqgU56462914() {     int lJlOwiuLgTFKwVQtJvv81603817 = -5895679;    int lJlOwiuLgTFKwVQtJvv88394463 = -57073075;    int lJlOwiuLgTFKwVQtJvv79162813 = -265730526;    int lJlOwiuLgTFKwVQtJvv53731663 = -469743921;    int lJlOwiuLgTFKwVQtJvv8799700 = -988576732;    int lJlOwiuLgTFKwVQtJvv53577591 = -702473321;    int lJlOwiuLgTFKwVQtJvv78247619 = -295552204;    int lJlOwiuLgTFKwVQtJvv9190272 = -134205752;    int lJlOwiuLgTFKwVQtJvv5671812 = 68040433;    int lJlOwiuLgTFKwVQtJvv80817022 = 91314432;    int lJlOwiuLgTFKwVQtJvv41476807 = -533125522;    int lJlOwiuLgTFKwVQtJvv26936871 = -102568928;    int lJlOwiuLgTFKwVQtJvv96647148 = -942174644;    int lJlOwiuLgTFKwVQtJvv50919092 = -928209523;    int lJlOwiuLgTFKwVQtJvv11107937 = -624677896;    int lJlOwiuLgTFKwVQtJvv95576754 = -165676935;    int lJlOwiuLgTFKwVQtJvv47947953 = -705286580;    int lJlOwiuLgTFKwVQtJvv41927902 = -788328098;    int lJlOwiuLgTFKwVQtJvv9817578 = -333607670;    int lJlOwiuLgTFKwVQtJvv15370004 = -412389523;    int lJlOwiuLgTFKwVQtJvv25793737 = -570311996;    int lJlOwiuLgTFKwVQtJvv16140539 = -331796435;    int lJlOwiuLgTFKwVQtJvv39816611 = -534324521;    int lJlOwiuLgTFKwVQtJvv43421089 = -16030100;    int lJlOwiuLgTFKwVQtJvv56404636 = -245712639;    int lJlOwiuLgTFKwVQtJvv57278095 = -872193154;    int lJlOwiuLgTFKwVQtJvv65967811 = -836349473;    int lJlOwiuLgTFKwVQtJvv7605710 = -138902981;    int lJlOwiuLgTFKwVQtJvv63356384 = -312501032;    int lJlOwiuLgTFKwVQtJvv52443847 = -609231059;    int lJlOwiuLgTFKwVQtJvv87891259 = -87465321;    int lJlOwiuLgTFKwVQtJvv61738340 = -85595128;    int lJlOwiuLgTFKwVQtJvv51705974 = -41948713;    int lJlOwiuLgTFKwVQtJvv42491095 = 70158379;    int lJlOwiuLgTFKwVQtJvv63465281 = -995297507;    int lJlOwiuLgTFKwVQtJvv95557105 = -651511387;    int lJlOwiuLgTFKwVQtJvv59849837 = -504884954;    int lJlOwiuLgTFKwVQtJvv15198830 = 52091504;    int lJlOwiuLgTFKwVQtJvv57583979 = -718922403;    int lJlOwiuLgTFKwVQtJvv67463726 = -278411399;    int lJlOwiuLgTFKwVQtJvv75243732 = -169874886;    int lJlOwiuLgTFKwVQtJvv94334963 = -318359122;    int lJlOwiuLgTFKwVQtJvv93120393 = -808704139;    int lJlOwiuLgTFKwVQtJvv72823401 = -861273325;    int lJlOwiuLgTFKwVQtJvv12936215 = -388852456;    int lJlOwiuLgTFKwVQtJvv65604017 = -280659290;    int lJlOwiuLgTFKwVQtJvv39876683 = -792636116;    int lJlOwiuLgTFKwVQtJvv54205582 = -875200644;    int lJlOwiuLgTFKwVQtJvv63755929 = -208635976;    int lJlOwiuLgTFKwVQtJvv36765396 = -955929668;    int lJlOwiuLgTFKwVQtJvv59797004 = -144093374;    int lJlOwiuLgTFKwVQtJvv48384631 = -678160073;    int lJlOwiuLgTFKwVQtJvv21062420 = -127575611;    int lJlOwiuLgTFKwVQtJvv37220857 = -708736458;    int lJlOwiuLgTFKwVQtJvv30669177 = 35487228;    int lJlOwiuLgTFKwVQtJvv65463279 = -674099244;    int lJlOwiuLgTFKwVQtJvv48577853 = -522748555;    int lJlOwiuLgTFKwVQtJvv35741725 = -149700426;    int lJlOwiuLgTFKwVQtJvv97327026 = -124031282;    int lJlOwiuLgTFKwVQtJvv51521604 = -16383578;    int lJlOwiuLgTFKwVQtJvv87609780 = -866123849;    int lJlOwiuLgTFKwVQtJvv70641909 = -56649223;    int lJlOwiuLgTFKwVQtJvv45833888 = -821704721;    int lJlOwiuLgTFKwVQtJvv53227965 = -322728508;    int lJlOwiuLgTFKwVQtJvv92925762 = -821220248;    int lJlOwiuLgTFKwVQtJvv79738466 = -347530395;    int lJlOwiuLgTFKwVQtJvv75230896 = 39379784;    int lJlOwiuLgTFKwVQtJvv54156053 = -912333023;    int lJlOwiuLgTFKwVQtJvv87453811 = -932912017;    int lJlOwiuLgTFKwVQtJvv15550832 = -973166510;    int lJlOwiuLgTFKwVQtJvv35726917 = -660791981;    int lJlOwiuLgTFKwVQtJvv32749124 = -657378085;    int lJlOwiuLgTFKwVQtJvv84343922 = 30594304;    int lJlOwiuLgTFKwVQtJvv42353852 = 44803728;    int lJlOwiuLgTFKwVQtJvv40126272 = -142514638;    int lJlOwiuLgTFKwVQtJvv31458774 = -151952875;    int lJlOwiuLgTFKwVQtJvv23020145 = -523092297;    int lJlOwiuLgTFKwVQtJvv66993210 = -673051196;    int lJlOwiuLgTFKwVQtJvv30484874 = -627177645;    int lJlOwiuLgTFKwVQtJvv90800619 = -965053350;    int lJlOwiuLgTFKwVQtJvv17401413 = 20442961;    int lJlOwiuLgTFKwVQtJvv11762230 = -961148829;    int lJlOwiuLgTFKwVQtJvv43849780 = -930267006;    int lJlOwiuLgTFKwVQtJvv26590988 = -356571364;    int lJlOwiuLgTFKwVQtJvv92646843 = -365137685;    int lJlOwiuLgTFKwVQtJvv39506628 = -409305248;    int lJlOwiuLgTFKwVQtJvv40675921 = -958019518;    int lJlOwiuLgTFKwVQtJvv14485118 = -333212255;    int lJlOwiuLgTFKwVQtJvv11821919 = -965328850;    int lJlOwiuLgTFKwVQtJvv98002002 = -221198263;    int lJlOwiuLgTFKwVQtJvv46979253 = -28762833;    int lJlOwiuLgTFKwVQtJvv24108113 = -255184529;    int lJlOwiuLgTFKwVQtJvv17871803 = -823877214;    int lJlOwiuLgTFKwVQtJvv6062376 = -602538825;    int lJlOwiuLgTFKwVQtJvv79853945 = -412287551;    int lJlOwiuLgTFKwVQtJvv4601823 = -13225663;    int lJlOwiuLgTFKwVQtJvv48501075 = -496654401;    int lJlOwiuLgTFKwVQtJvv39892429 = -385975631;    int lJlOwiuLgTFKwVQtJvv79897638 = 59946922;    int lJlOwiuLgTFKwVQtJvv33197749 = -5895679;     lJlOwiuLgTFKwVQtJvv81603817 = lJlOwiuLgTFKwVQtJvv88394463;     lJlOwiuLgTFKwVQtJvv88394463 = lJlOwiuLgTFKwVQtJvv79162813;     lJlOwiuLgTFKwVQtJvv79162813 = lJlOwiuLgTFKwVQtJvv53731663;     lJlOwiuLgTFKwVQtJvv53731663 = lJlOwiuLgTFKwVQtJvv8799700;     lJlOwiuLgTFKwVQtJvv8799700 = lJlOwiuLgTFKwVQtJvv53577591;     lJlOwiuLgTFKwVQtJvv53577591 = lJlOwiuLgTFKwVQtJvv78247619;     lJlOwiuLgTFKwVQtJvv78247619 = lJlOwiuLgTFKwVQtJvv9190272;     lJlOwiuLgTFKwVQtJvv9190272 = lJlOwiuLgTFKwVQtJvv5671812;     lJlOwiuLgTFKwVQtJvv5671812 = lJlOwiuLgTFKwVQtJvv80817022;     lJlOwiuLgTFKwVQtJvv80817022 = lJlOwiuLgTFKwVQtJvv41476807;     lJlOwiuLgTFKwVQtJvv41476807 = lJlOwiuLgTFKwVQtJvv26936871;     lJlOwiuLgTFKwVQtJvv26936871 = lJlOwiuLgTFKwVQtJvv96647148;     lJlOwiuLgTFKwVQtJvv96647148 = lJlOwiuLgTFKwVQtJvv50919092;     lJlOwiuLgTFKwVQtJvv50919092 = lJlOwiuLgTFKwVQtJvv11107937;     lJlOwiuLgTFKwVQtJvv11107937 = lJlOwiuLgTFKwVQtJvv95576754;     lJlOwiuLgTFKwVQtJvv95576754 = lJlOwiuLgTFKwVQtJvv47947953;     lJlOwiuLgTFKwVQtJvv47947953 = lJlOwiuLgTFKwVQtJvv41927902;     lJlOwiuLgTFKwVQtJvv41927902 = lJlOwiuLgTFKwVQtJvv9817578;     lJlOwiuLgTFKwVQtJvv9817578 = lJlOwiuLgTFKwVQtJvv15370004;     lJlOwiuLgTFKwVQtJvv15370004 = lJlOwiuLgTFKwVQtJvv25793737;     lJlOwiuLgTFKwVQtJvv25793737 = lJlOwiuLgTFKwVQtJvv16140539;     lJlOwiuLgTFKwVQtJvv16140539 = lJlOwiuLgTFKwVQtJvv39816611;     lJlOwiuLgTFKwVQtJvv39816611 = lJlOwiuLgTFKwVQtJvv43421089;     lJlOwiuLgTFKwVQtJvv43421089 = lJlOwiuLgTFKwVQtJvv56404636;     lJlOwiuLgTFKwVQtJvv56404636 = lJlOwiuLgTFKwVQtJvv57278095;     lJlOwiuLgTFKwVQtJvv57278095 = lJlOwiuLgTFKwVQtJvv65967811;     lJlOwiuLgTFKwVQtJvv65967811 = lJlOwiuLgTFKwVQtJvv7605710;     lJlOwiuLgTFKwVQtJvv7605710 = lJlOwiuLgTFKwVQtJvv63356384;     lJlOwiuLgTFKwVQtJvv63356384 = lJlOwiuLgTFKwVQtJvv52443847;     lJlOwiuLgTFKwVQtJvv52443847 = lJlOwiuLgTFKwVQtJvv87891259;     lJlOwiuLgTFKwVQtJvv87891259 = lJlOwiuLgTFKwVQtJvv61738340;     lJlOwiuLgTFKwVQtJvv61738340 = lJlOwiuLgTFKwVQtJvv51705974;     lJlOwiuLgTFKwVQtJvv51705974 = lJlOwiuLgTFKwVQtJvv42491095;     lJlOwiuLgTFKwVQtJvv42491095 = lJlOwiuLgTFKwVQtJvv63465281;     lJlOwiuLgTFKwVQtJvv63465281 = lJlOwiuLgTFKwVQtJvv95557105;     lJlOwiuLgTFKwVQtJvv95557105 = lJlOwiuLgTFKwVQtJvv59849837;     lJlOwiuLgTFKwVQtJvv59849837 = lJlOwiuLgTFKwVQtJvv15198830;     lJlOwiuLgTFKwVQtJvv15198830 = lJlOwiuLgTFKwVQtJvv57583979;     lJlOwiuLgTFKwVQtJvv57583979 = lJlOwiuLgTFKwVQtJvv67463726;     lJlOwiuLgTFKwVQtJvv67463726 = lJlOwiuLgTFKwVQtJvv75243732;     lJlOwiuLgTFKwVQtJvv75243732 = lJlOwiuLgTFKwVQtJvv94334963;     lJlOwiuLgTFKwVQtJvv94334963 = lJlOwiuLgTFKwVQtJvv93120393;     lJlOwiuLgTFKwVQtJvv93120393 = lJlOwiuLgTFKwVQtJvv72823401;     lJlOwiuLgTFKwVQtJvv72823401 = lJlOwiuLgTFKwVQtJvv12936215;     lJlOwiuLgTFKwVQtJvv12936215 = lJlOwiuLgTFKwVQtJvv65604017;     lJlOwiuLgTFKwVQtJvv65604017 = lJlOwiuLgTFKwVQtJvv39876683;     lJlOwiuLgTFKwVQtJvv39876683 = lJlOwiuLgTFKwVQtJvv54205582;     lJlOwiuLgTFKwVQtJvv54205582 = lJlOwiuLgTFKwVQtJvv63755929;     lJlOwiuLgTFKwVQtJvv63755929 = lJlOwiuLgTFKwVQtJvv36765396;     lJlOwiuLgTFKwVQtJvv36765396 = lJlOwiuLgTFKwVQtJvv59797004;     lJlOwiuLgTFKwVQtJvv59797004 = lJlOwiuLgTFKwVQtJvv48384631;     lJlOwiuLgTFKwVQtJvv48384631 = lJlOwiuLgTFKwVQtJvv21062420;     lJlOwiuLgTFKwVQtJvv21062420 = lJlOwiuLgTFKwVQtJvv37220857;     lJlOwiuLgTFKwVQtJvv37220857 = lJlOwiuLgTFKwVQtJvv30669177;     lJlOwiuLgTFKwVQtJvv30669177 = lJlOwiuLgTFKwVQtJvv65463279;     lJlOwiuLgTFKwVQtJvv65463279 = lJlOwiuLgTFKwVQtJvv48577853;     lJlOwiuLgTFKwVQtJvv48577853 = lJlOwiuLgTFKwVQtJvv35741725;     lJlOwiuLgTFKwVQtJvv35741725 = lJlOwiuLgTFKwVQtJvv97327026;     lJlOwiuLgTFKwVQtJvv97327026 = lJlOwiuLgTFKwVQtJvv51521604;     lJlOwiuLgTFKwVQtJvv51521604 = lJlOwiuLgTFKwVQtJvv87609780;     lJlOwiuLgTFKwVQtJvv87609780 = lJlOwiuLgTFKwVQtJvv70641909;     lJlOwiuLgTFKwVQtJvv70641909 = lJlOwiuLgTFKwVQtJvv45833888;     lJlOwiuLgTFKwVQtJvv45833888 = lJlOwiuLgTFKwVQtJvv53227965;     lJlOwiuLgTFKwVQtJvv53227965 = lJlOwiuLgTFKwVQtJvv92925762;     lJlOwiuLgTFKwVQtJvv92925762 = lJlOwiuLgTFKwVQtJvv79738466;     lJlOwiuLgTFKwVQtJvv79738466 = lJlOwiuLgTFKwVQtJvv75230896;     lJlOwiuLgTFKwVQtJvv75230896 = lJlOwiuLgTFKwVQtJvv54156053;     lJlOwiuLgTFKwVQtJvv54156053 = lJlOwiuLgTFKwVQtJvv87453811;     lJlOwiuLgTFKwVQtJvv87453811 = lJlOwiuLgTFKwVQtJvv15550832;     lJlOwiuLgTFKwVQtJvv15550832 = lJlOwiuLgTFKwVQtJvv35726917;     lJlOwiuLgTFKwVQtJvv35726917 = lJlOwiuLgTFKwVQtJvv32749124;     lJlOwiuLgTFKwVQtJvv32749124 = lJlOwiuLgTFKwVQtJvv84343922;     lJlOwiuLgTFKwVQtJvv84343922 = lJlOwiuLgTFKwVQtJvv42353852;     lJlOwiuLgTFKwVQtJvv42353852 = lJlOwiuLgTFKwVQtJvv40126272;     lJlOwiuLgTFKwVQtJvv40126272 = lJlOwiuLgTFKwVQtJvv31458774;     lJlOwiuLgTFKwVQtJvv31458774 = lJlOwiuLgTFKwVQtJvv23020145;     lJlOwiuLgTFKwVQtJvv23020145 = lJlOwiuLgTFKwVQtJvv66993210;     lJlOwiuLgTFKwVQtJvv66993210 = lJlOwiuLgTFKwVQtJvv30484874;     lJlOwiuLgTFKwVQtJvv30484874 = lJlOwiuLgTFKwVQtJvv90800619;     lJlOwiuLgTFKwVQtJvv90800619 = lJlOwiuLgTFKwVQtJvv17401413;     lJlOwiuLgTFKwVQtJvv17401413 = lJlOwiuLgTFKwVQtJvv11762230;     lJlOwiuLgTFKwVQtJvv11762230 = lJlOwiuLgTFKwVQtJvv43849780;     lJlOwiuLgTFKwVQtJvv43849780 = lJlOwiuLgTFKwVQtJvv26590988;     lJlOwiuLgTFKwVQtJvv26590988 = lJlOwiuLgTFKwVQtJvv92646843;     lJlOwiuLgTFKwVQtJvv92646843 = lJlOwiuLgTFKwVQtJvv39506628;     lJlOwiuLgTFKwVQtJvv39506628 = lJlOwiuLgTFKwVQtJvv40675921;     lJlOwiuLgTFKwVQtJvv40675921 = lJlOwiuLgTFKwVQtJvv14485118;     lJlOwiuLgTFKwVQtJvv14485118 = lJlOwiuLgTFKwVQtJvv11821919;     lJlOwiuLgTFKwVQtJvv11821919 = lJlOwiuLgTFKwVQtJvv98002002;     lJlOwiuLgTFKwVQtJvv98002002 = lJlOwiuLgTFKwVQtJvv46979253;     lJlOwiuLgTFKwVQtJvv46979253 = lJlOwiuLgTFKwVQtJvv24108113;     lJlOwiuLgTFKwVQtJvv24108113 = lJlOwiuLgTFKwVQtJvv17871803;     lJlOwiuLgTFKwVQtJvv17871803 = lJlOwiuLgTFKwVQtJvv6062376;     lJlOwiuLgTFKwVQtJvv6062376 = lJlOwiuLgTFKwVQtJvv79853945;     lJlOwiuLgTFKwVQtJvv79853945 = lJlOwiuLgTFKwVQtJvv4601823;     lJlOwiuLgTFKwVQtJvv4601823 = lJlOwiuLgTFKwVQtJvv48501075;     lJlOwiuLgTFKwVQtJvv48501075 = lJlOwiuLgTFKwVQtJvv39892429;     lJlOwiuLgTFKwVQtJvv39892429 = lJlOwiuLgTFKwVQtJvv79897638;     lJlOwiuLgTFKwVQtJvv79897638 = lJlOwiuLgTFKwVQtJvv33197749;     lJlOwiuLgTFKwVQtJvv33197749 = lJlOwiuLgTFKwVQtJvv81603817;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void aYXndjdiAHkFWlhABQr62791461() {     int ZZoEiATXmisrcCbGSuw36258215 = -443423262;    int ZZoEiATXmisrcCbGSuw35392083 = -636637889;    int ZZoEiATXmisrcCbGSuw39895460 = -651115139;    int ZZoEiATXmisrcCbGSuw25166605 = -475846332;    int ZZoEiATXmisrcCbGSuw83251370 = -661011971;    int ZZoEiATXmisrcCbGSuw67751988 = -831624158;    int ZZoEiATXmisrcCbGSuw99348322 = -597444876;    int ZZoEiATXmisrcCbGSuw38365375 = -634773985;    int ZZoEiATXmisrcCbGSuw93446222 = 21187063;    int ZZoEiATXmisrcCbGSuw63449008 = -187486838;    int ZZoEiATXmisrcCbGSuw20088102 = -58482095;    int ZZoEiATXmisrcCbGSuw89701584 = -288993017;    int ZZoEiATXmisrcCbGSuw60464463 = -745714949;    int ZZoEiATXmisrcCbGSuw43885523 = -540313101;    int ZZoEiATXmisrcCbGSuw41332010 = -531799528;    int ZZoEiATXmisrcCbGSuw85344290 = -895836499;    int ZZoEiATXmisrcCbGSuw47779717 = -78886409;    int ZZoEiATXmisrcCbGSuw9524489 = -851892566;    int ZZoEiATXmisrcCbGSuw11038179 = -619419218;    int ZZoEiATXmisrcCbGSuw33004559 = -757755669;    int ZZoEiATXmisrcCbGSuw59968125 = -38395147;    int ZZoEiATXmisrcCbGSuw67393127 = -498240543;    int ZZoEiATXmisrcCbGSuw76286442 = -21067942;    int ZZoEiATXmisrcCbGSuw44849458 = -815070916;    int ZZoEiATXmisrcCbGSuw52157252 = -618626091;    int ZZoEiATXmisrcCbGSuw98519042 = -875901939;    int ZZoEiATXmisrcCbGSuw67957735 = -291193752;    int ZZoEiATXmisrcCbGSuw60854710 = -146954842;    int ZZoEiATXmisrcCbGSuw3254061 = -692745907;    int ZZoEiATXmisrcCbGSuw46879256 = -899989027;    int ZZoEiATXmisrcCbGSuw39596789 = -636337846;    int ZZoEiATXmisrcCbGSuw92729950 = -497091656;    int ZZoEiATXmisrcCbGSuw19361851 = -598466327;    int ZZoEiATXmisrcCbGSuw37146988 = -709962431;    int ZZoEiATXmisrcCbGSuw97969437 = -113160766;    int ZZoEiATXmisrcCbGSuw82883647 = -899506984;    int ZZoEiATXmisrcCbGSuw34554325 = -355311575;    int ZZoEiATXmisrcCbGSuw28176069 = -921837516;    int ZZoEiATXmisrcCbGSuw8353628 = -871005;    int ZZoEiATXmisrcCbGSuw91450120 = 63280001;    int ZZoEiATXmisrcCbGSuw31203133 = -282425044;    int ZZoEiATXmisrcCbGSuw31009622 = -925891208;    int ZZoEiATXmisrcCbGSuw84120576 = -649209457;    int ZZoEiATXmisrcCbGSuw81817800 = -334952991;    int ZZoEiATXmisrcCbGSuw72920278 = -521370054;    int ZZoEiATXmisrcCbGSuw20937619 = -349448905;    int ZZoEiATXmisrcCbGSuw56350395 = -819693499;    int ZZoEiATXmisrcCbGSuw77632890 = -852853017;    int ZZoEiATXmisrcCbGSuw6098696 = -108366165;    int ZZoEiATXmisrcCbGSuw81607058 = -95948962;    int ZZoEiATXmisrcCbGSuw34910543 = -901308876;    int ZZoEiATXmisrcCbGSuw37766781 = -93226056;    int ZZoEiATXmisrcCbGSuw52790423 = -967491068;    int ZZoEiATXmisrcCbGSuw94636613 = -604622943;    int ZZoEiATXmisrcCbGSuw2823337 = -360421454;    int ZZoEiATXmisrcCbGSuw68865088 = -945182720;    int ZZoEiATXmisrcCbGSuw59105640 = -515569948;    int ZZoEiATXmisrcCbGSuw95046002 = -836044223;    int ZZoEiATXmisrcCbGSuw73009352 = -857220241;    int ZZoEiATXmisrcCbGSuw84732327 = -785110033;    int ZZoEiATXmisrcCbGSuw99794253 = -440430406;    int ZZoEiATXmisrcCbGSuw38493613 = -350490035;    int ZZoEiATXmisrcCbGSuw35111315 = -942028078;    int ZZoEiATXmisrcCbGSuw46566966 = -78823910;    int ZZoEiATXmisrcCbGSuw23852220 = -551148992;    int ZZoEiATXmisrcCbGSuw27358151 = -561390439;    int ZZoEiATXmisrcCbGSuw70339733 = -690526691;    int ZZoEiATXmisrcCbGSuw23317476 = 64247482;    int ZZoEiATXmisrcCbGSuw45916085 = -327152335;    int ZZoEiATXmisrcCbGSuw58448362 = -632292545;    int ZZoEiATXmisrcCbGSuw50789965 = -440524925;    int ZZoEiATXmisrcCbGSuw19603649 = -157048893;    int ZZoEiATXmisrcCbGSuw1170861 = -751021561;    int ZZoEiATXmisrcCbGSuw19588058 = -582699220;    int ZZoEiATXmisrcCbGSuw1801427 = -375330626;    int ZZoEiATXmisrcCbGSuw28958503 = -112503939;    int ZZoEiATXmisrcCbGSuw83272550 = -849031087;    int ZZoEiATXmisrcCbGSuw94468642 = -686114951;    int ZZoEiATXmisrcCbGSuw71929179 = -193700863;    int ZZoEiATXmisrcCbGSuw31219634 = -169177187;    int ZZoEiATXmisrcCbGSuw42168648 = 43791560;    int ZZoEiATXmisrcCbGSuw90324844 = -438340736;    int ZZoEiATXmisrcCbGSuw54756014 = 61411323;    int ZZoEiATXmisrcCbGSuw21647003 = -496796945;    int ZZoEiATXmisrcCbGSuw11968714 = -998680151;    int ZZoEiATXmisrcCbGSuw1830008 = -443111791;    int ZZoEiATXmisrcCbGSuw39939528 = -529600589;    int ZZoEiATXmisrcCbGSuw24725237 = -993843384;    int ZZoEiATXmisrcCbGSuw34323652 = -249540978;    int ZZoEiATXmisrcCbGSuw29104350 = -167978047;    int ZZoEiATXmisrcCbGSuw23778007 = -283937036;    int ZZoEiATXmisrcCbGSuw39508323 = -519267352;    int ZZoEiATXmisrcCbGSuw55166717 = 35382725;    int ZZoEiATXmisrcCbGSuw23621301 = -215760972;    int ZZoEiATXmisrcCbGSuw91655867 = -496289593;    int ZZoEiATXmisrcCbGSuw92709519 = -931935009;    int ZZoEiATXmisrcCbGSuw95898307 = -983863131;    int ZZoEiATXmisrcCbGSuw37553611 = -470385547;    int ZZoEiATXmisrcCbGSuw57965581 = -783804000;    int ZZoEiATXmisrcCbGSuw45562127 = -443423262;     ZZoEiATXmisrcCbGSuw36258215 = ZZoEiATXmisrcCbGSuw35392083;     ZZoEiATXmisrcCbGSuw35392083 = ZZoEiATXmisrcCbGSuw39895460;     ZZoEiATXmisrcCbGSuw39895460 = ZZoEiATXmisrcCbGSuw25166605;     ZZoEiATXmisrcCbGSuw25166605 = ZZoEiATXmisrcCbGSuw83251370;     ZZoEiATXmisrcCbGSuw83251370 = ZZoEiATXmisrcCbGSuw67751988;     ZZoEiATXmisrcCbGSuw67751988 = ZZoEiATXmisrcCbGSuw99348322;     ZZoEiATXmisrcCbGSuw99348322 = ZZoEiATXmisrcCbGSuw38365375;     ZZoEiATXmisrcCbGSuw38365375 = ZZoEiATXmisrcCbGSuw93446222;     ZZoEiATXmisrcCbGSuw93446222 = ZZoEiATXmisrcCbGSuw63449008;     ZZoEiATXmisrcCbGSuw63449008 = ZZoEiATXmisrcCbGSuw20088102;     ZZoEiATXmisrcCbGSuw20088102 = ZZoEiATXmisrcCbGSuw89701584;     ZZoEiATXmisrcCbGSuw89701584 = ZZoEiATXmisrcCbGSuw60464463;     ZZoEiATXmisrcCbGSuw60464463 = ZZoEiATXmisrcCbGSuw43885523;     ZZoEiATXmisrcCbGSuw43885523 = ZZoEiATXmisrcCbGSuw41332010;     ZZoEiATXmisrcCbGSuw41332010 = ZZoEiATXmisrcCbGSuw85344290;     ZZoEiATXmisrcCbGSuw85344290 = ZZoEiATXmisrcCbGSuw47779717;     ZZoEiATXmisrcCbGSuw47779717 = ZZoEiATXmisrcCbGSuw9524489;     ZZoEiATXmisrcCbGSuw9524489 = ZZoEiATXmisrcCbGSuw11038179;     ZZoEiATXmisrcCbGSuw11038179 = ZZoEiATXmisrcCbGSuw33004559;     ZZoEiATXmisrcCbGSuw33004559 = ZZoEiATXmisrcCbGSuw59968125;     ZZoEiATXmisrcCbGSuw59968125 = ZZoEiATXmisrcCbGSuw67393127;     ZZoEiATXmisrcCbGSuw67393127 = ZZoEiATXmisrcCbGSuw76286442;     ZZoEiATXmisrcCbGSuw76286442 = ZZoEiATXmisrcCbGSuw44849458;     ZZoEiATXmisrcCbGSuw44849458 = ZZoEiATXmisrcCbGSuw52157252;     ZZoEiATXmisrcCbGSuw52157252 = ZZoEiATXmisrcCbGSuw98519042;     ZZoEiATXmisrcCbGSuw98519042 = ZZoEiATXmisrcCbGSuw67957735;     ZZoEiATXmisrcCbGSuw67957735 = ZZoEiATXmisrcCbGSuw60854710;     ZZoEiATXmisrcCbGSuw60854710 = ZZoEiATXmisrcCbGSuw3254061;     ZZoEiATXmisrcCbGSuw3254061 = ZZoEiATXmisrcCbGSuw46879256;     ZZoEiATXmisrcCbGSuw46879256 = ZZoEiATXmisrcCbGSuw39596789;     ZZoEiATXmisrcCbGSuw39596789 = ZZoEiATXmisrcCbGSuw92729950;     ZZoEiATXmisrcCbGSuw92729950 = ZZoEiATXmisrcCbGSuw19361851;     ZZoEiATXmisrcCbGSuw19361851 = ZZoEiATXmisrcCbGSuw37146988;     ZZoEiATXmisrcCbGSuw37146988 = ZZoEiATXmisrcCbGSuw97969437;     ZZoEiATXmisrcCbGSuw97969437 = ZZoEiATXmisrcCbGSuw82883647;     ZZoEiATXmisrcCbGSuw82883647 = ZZoEiATXmisrcCbGSuw34554325;     ZZoEiATXmisrcCbGSuw34554325 = ZZoEiATXmisrcCbGSuw28176069;     ZZoEiATXmisrcCbGSuw28176069 = ZZoEiATXmisrcCbGSuw8353628;     ZZoEiATXmisrcCbGSuw8353628 = ZZoEiATXmisrcCbGSuw91450120;     ZZoEiATXmisrcCbGSuw91450120 = ZZoEiATXmisrcCbGSuw31203133;     ZZoEiATXmisrcCbGSuw31203133 = ZZoEiATXmisrcCbGSuw31009622;     ZZoEiATXmisrcCbGSuw31009622 = ZZoEiATXmisrcCbGSuw84120576;     ZZoEiATXmisrcCbGSuw84120576 = ZZoEiATXmisrcCbGSuw81817800;     ZZoEiATXmisrcCbGSuw81817800 = ZZoEiATXmisrcCbGSuw72920278;     ZZoEiATXmisrcCbGSuw72920278 = ZZoEiATXmisrcCbGSuw20937619;     ZZoEiATXmisrcCbGSuw20937619 = ZZoEiATXmisrcCbGSuw56350395;     ZZoEiATXmisrcCbGSuw56350395 = ZZoEiATXmisrcCbGSuw77632890;     ZZoEiATXmisrcCbGSuw77632890 = ZZoEiATXmisrcCbGSuw6098696;     ZZoEiATXmisrcCbGSuw6098696 = ZZoEiATXmisrcCbGSuw81607058;     ZZoEiATXmisrcCbGSuw81607058 = ZZoEiATXmisrcCbGSuw34910543;     ZZoEiATXmisrcCbGSuw34910543 = ZZoEiATXmisrcCbGSuw37766781;     ZZoEiATXmisrcCbGSuw37766781 = ZZoEiATXmisrcCbGSuw52790423;     ZZoEiATXmisrcCbGSuw52790423 = ZZoEiATXmisrcCbGSuw94636613;     ZZoEiATXmisrcCbGSuw94636613 = ZZoEiATXmisrcCbGSuw2823337;     ZZoEiATXmisrcCbGSuw2823337 = ZZoEiATXmisrcCbGSuw68865088;     ZZoEiATXmisrcCbGSuw68865088 = ZZoEiATXmisrcCbGSuw59105640;     ZZoEiATXmisrcCbGSuw59105640 = ZZoEiATXmisrcCbGSuw95046002;     ZZoEiATXmisrcCbGSuw95046002 = ZZoEiATXmisrcCbGSuw73009352;     ZZoEiATXmisrcCbGSuw73009352 = ZZoEiATXmisrcCbGSuw84732327;     ZZoEiATXmisrcCbGSuw84732327 = ZZoEiATXmisrcCbGSuw99794253;     ZZoEiATXmisrcCbGSuw99794253 = ZZoEiATXmisrcCbGSuw38493613;     ZZoEiATXmisrcCbGSuw38493613 = ZZoEiATXmisrcCbGSuw35111315;     ZZoEiATXmisrcCbGSuw35111315 = ZZoEiATXmisrcCbGSuw46566966;     ZZoEiATXmisrcCbGSuw46566966 = ZZoEiATXmisrcCbGSuw23852220;     ZZoEiATXmisrcCbGSuw23852220 = ZZoEiATXmisrcCbGSuw27358151;     ZZoEiATXmisrcCbGSuw27358151 = ZZoEiATXmisrcCbGSuw70339733;     ZZoEiATXmisrcCbGSuw70339733 = ZZoEiATXmisrcCbGSuw23317476;     ZZoEiATXmisrcCbGSuw23317476 = ZZoEiATXmisrcCbGSuw45916085;     ZZoEiATXmisrcCbGSuw45916085 = ZZoEiATXmisrcCbGSuw58448362;     ZZoEiATXmisrcCbGSuw58448362 = ZZoEiATXmisrcCbGSuw50789965;     ZZoEiATXmisrcCbGSuw50789965 = ZZoEiATXmisrcCbGSuw19603649;     ZZoEiATXmisrcCbGSuw19603649 = ZZoEiATXmisrcCbGSuw1170861;     ZZoEiATXmisrcCbGSuw1170861 = ZZoEiATXmisrcCbGSuw19588058;     ZZoEiATXmisrcCbGSuw19588058 = ZZoEiATXmisrcCbGSuw1801427;     ZZoEiATXmisrcCbGSuw1801427 = ZZoEiATXmisrcCbGSuw28958503;     ZZoEiATXmisrcCbGSuw28958503 = ZZoEiATXmisrcCbGSuw83272550;     ZZoEiATXmisrcCbGSuw83272550 = ZZoEiATXmisrcCbGSuw94468642;     ZZoEiATXmisrcCbGSuw94468642 = ZZoEiATXmisrcCbGSuw71929179;     ZZoEiATXmisrcCbGSuw71929179 = ZZoEiATXmisrcCbGSuw31219634;     ZZoEiATXmisrcCbGSuw31219634 = ZZoEiATXmisrcCbGSuw42168648;     ZZoEiATXmisrcCbGSuw42168648 = ZZoEiATXmisrcCbGSuw90324844;     ZZoEiATXmisrcCbGSuw90324844 = ZZoEiATXmisrcCbGSuw54756014;     ZZoEiATXmisrcCbGSuw54756014 = ZZoEiATXmisrcCbGSuw21647003;     ZZoEiATXmisrcCbGSuw21647003 = ZZoEiATXmisrcCbGSuw11968714;     ZZoEiATXmisrcCbGSuw11968714 = ZZoEiATXmisrcCbGSuw1830008;     ZZoEiATXmisrcCbGSuw1830008 = ZZoEiATXmisrcCbGSuw39939528;     ZZoEiATXmisrcCbGSuw39939528 = ZZoEiATXmisrcCbGSuw24725237;     ZZoEiATXmisrcCbGSuw24725237 = ZZoEiATXmisrcCbGSuw34323652;     ZZoEiATXmisrcCbGSuw34323652 = ZZoEiATXmisrcCbGSuw29104350;     ZZoEiATXmisrcCbGSuw29104350 = ZZoEiATXmisrcCbGSuw23778007;     ZZoEiATXmisrcCbGSuw23778007 = ZZoEiATXmisrcCbGSuw39508323;     ZZoEiATXmisrcCbGSuw39508323 = ZZoEiATXmisrcCbGSuw55166717;     ZZoEiATXmisrcCbGSuw55166717 = ZZoEiATXmisrcCbGSuw23621301;     ZZoEiATXmisrcCbGSuw23621301 = ZZoEiATXmisrcCbGSuw91655867;     ZZoEiATXmisrcCbGSuw91655867 = ZZoEiATXmisrcCbGSuw92709519;     ZZoEiATXmisrcCbGSuw92709519 = ZZoEiATXmisrcCbGSuw95898307;     ZZoEiATXmisrcCbGSuw95898307 = ZZoEiATXmisrcCbGSuw37553611;     ZZoEiATXmisrcCbGSuw37553611 = ZZoEiATXmisrcCbGSuw57965581;     ZZoEiATXmisrcCbGSuw57965581 = ZZoEiATXmisrcCbGSuw45562127;     ZZoEiATXmisrcCbGSuw45562127 = ZZoEiATXmisrcCbGSuw36258215;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void WYzFfurXXwnTzbEAhyf69120008() {     int YgPwDKbjazTYCvEZlDT90912612 = -880950846;    int YgPwDKbjazTYCvEZlDT82389702 = -116202703;    int YgPwDKbjazTYCvEZlDT628106 = 63500247;    int YgPwDKbjazTYCvEZlDT96601545 = -481948743;    int YgPwDKbjazTYCvEZlDT57703041 = -333447210;    int YgPwDKbjazTYCvEZlDT81926385 = -960774994;    int YgPwDKbjazTYCvEZlDT20449027 = -899337549;    int YgPwDKbjazTYCvEZlDT67540479 = -35342217;    int YgPwDKbjazTYCvEZlDT81220633 = -25666308;    int YgPwDKbjazTYCvEZlDT46080993 = -466288107;    int YgPwDKbjazTYCvEZlDT98699396 = -683838667;    int YgPwDKbjazTYCvEZlDT52466297 = -475417106;    int YgPwDKbjazTYCvEZlDT24281779 = -549255253;    int YgPwDKbjazTYCvEZlDT36851954 = -152416679;    int YgPwDKbjazTYCvEZlDT71556083 = -438921159;    int YgPwDKbjazTYCvEZlDT75111825 = -525996063;    int YgPwDKbjazTYCvEZlDT47611481 = -552486237;    int YgPwDKbjazTYCvEZlDT77121075 = -915457033;    int YgPwDKbjazTYCvEZlDT12258780 = -905230766;    int YgPwDKbjazTYCvEZlDT50639114 = -3121816;    int YgPwDKbjazTYCvEZlDT94142512 = -606478298;    int YgPwDKbjazTYCvEZlDT18645717 = -664684650;    int YgPwDKbjazTYCvEZlDT12756274 = -607811363;    int YgPwDKbjazTYCvEZlDT46277826 = -514111733;    int YgPwDKbjazTYCvEZlDT47909868 = -991539543;    int YgPwDKbjazTYCvEZlDT39759990 = -879610723;    int YgPwDKbjazTYCvEZlDT69947659 = -846038031;    int YgPwDKbjazTYCvEZlDT14103710 = -155006702;    int YgPwDKbjazTYCvEZlDT43151738 = 27009217;    int YgPwDKbjazTYCvEZlDT41314665 = -90746995;    int YgPwDKbjazTYCvEZlDT91302317 = -85210372;    int YgPwDKbjazTYCvEZlDT23721561 = -908588185;    int YgPwDKbjazTYCvEZlDT87017727 = -54983941;    int YgPwDKbjazTYCvEZlDT31802881 = -390083241;    int YgPwDKbjazTYCvEZlDT32473595 = -331024026;    int YgPwDKbjazTYCvEZlDT70210190 = -47502580;    int YgPwDKbjazTYCvEZlDT9258813 = -205738195;    int YgPwDKbjazTYCvEZlDT41153308 = -795766537;    int YgPwDKbjazTYCvEZlDT59123277 = -382819606;    int YgPwDKbjazTYCvEZlDT15436516 = -695028598;    int YgPwDKbjazTYCvEZlDT87162533 = -394975202;    int YgPwDKbjazTYCvEZlDT67684280 = -433423295;    int YgPwDKbjazTYCvEZlDT75120759 = -489714774;    int YgPwDKbjazTYCvEZlDT90812199 = -908632657;    int YgPwDKbjazTYCvEZlDT32904342 = -653887652;    int YgPwDKbjazTYCvEZlDT76271220 = -418238520;    int YgPwDKbjazTYCvEZlDT72824106 = -846750883;    int YgPwDKbjazTYCvEZlDT1060200 = -830505389;    int YgPwDKbjazTYCvEZlDT48441463 = -8096354;    int YgPwDKbjazTYCvEZlDT26448721 = -335968257;    int YgPwDKbjazTYCvEZlDT10024083 = -558524378;    int YgPwDKbjazTYCvEZlDT27148931 = -608292038;    int YgPwDKbjazTYCvEZlDT84518425 = -707406525;    int YgPwDKbjazTYCvEZlDT52052371 = -500509427;    int YgPwDKbjazTYCvEZlDT74977495 = -756330135;    int YgPwDKbjazTYCvEZlDT72266896 = -116266196;    int YgPwDKbjazTYCvEZlDT69633428 = -508391341;    int YgPwDKbjazTYCvEZlDT54350280 = -422388020;    int YgPwDKbjazTYCvEZlDT48691677 = -490409201;    int YgPwDKbjazTYCvEZlDT17943051 = -453836488;    int YgPwDKbjazTYCvEZlDT11978727 = -14736963;    int YgPwDKbjazTYCvEZlDT6345317 = -644330847;    int YgPwDKbjazTYCvEZlDT24388741 = 37648565;    int YgPwDKbjazTYCvEZlDT39905968 = -934919313;    int YgPwDKbjazTYCvEZlDT54778676 = -281077736;    int YgPwDKbjazTYCvEZlDT74977835 = -775250483;    int YgPwDKbjazTYCvEZlDT65448570 = -320433165;    int YgPwDKbjazTYCvEZlDT92478897 = -59172013;    int YgPwDKbjazTYCvEZlDT4378360 = -821392654;    int YgPwDKbjazTYCvEZlDT1345894 = -291418580;    int YgPwDKbjazTYCvEZlDT65853013 = -220257868;    int YgPwDKbjazTYCvEZlDT6458173 = -756719701;    int YgPwDKbjazTYCvEZlDT17997799 = -432637427;    int YgPwDKbjazTYCvEZlDT96822263 = -110202169;    int YgPwDKbjazTYCvEZlDT63476581 = -608146614;    int YgPwDKbjazTYCvEZlDT26458233 = -73055003;    int YgPwDKbjazTYCvEZlDT43524957 = -74969877;    int YgPwDKbjazTYCvEZlDT21944075 = -699178706;    int YgPwDKbjazTYCvEZlDT13373485 = -860224082;    int YgPwDKbjazTYCvEZlDT71638648 = -473301024;    int YgPwDKbjazTYCvEZlDT66935883 = 67140159;    int YgPwDKbjazTYCvEZlDT68887459 = 84467357;    int YgPwDKbjazTYCvEZlDT65662247 = -46910349;    int YgPwDKbjazTYCvEZlDT16703017 = -637022526;    int YgPwDKbjazTYCvEZlDT31290583 = -532222618;    int YgPwDKbjazTYCvEZlDT64153386 = -476918334;    int YgPwDKbjazTYCvEZlDT39203135 = -101181660;    int YgPwDKbjazTYCvEZlDT34965356 = -554474514;    int YgPwDKbjazTYCvEZlDT56825385 = -633753106;    int YgPwDKbjazTYCvEZlDT60206698 = -114757830;    int YgPwDKbjazTYCvEZlDT576762 = -539111240;    int YgPwDKbjazTYCvEZlDT54908533 = -783350175;    int YgPwDKbjazTYCvEZlDT92461630 = -205357337;    int YgPwDKbjazTYCvEZlDT41180226 = -928983119;    int YgPwDKbjazTYCvEZlDT3457790 = -580291635;    int YgPwDKbjazTYCvEZlDT80817217 = -750644356;    int YgPwDKbjazTYCvEZlDT43295539 = -371071860;    int YgPwDKbjazTYCvEZlDT35214792 = -554795462;    int YgPwDKbjazTYCvEZlDT36033524 = -527554922;    int YgPwDKbjazTYCvEZlDT57926506 = -880950846;     YgPwDKbjazTYCvEZlDT90912612 = YgPwDKbjazTYCvEZlDT82389702;     YgPwDKbjazTYCvEZlDT82389702 = YgPwDKbjazTYCvEZlDT628106;     YgPwDKbjazTYCvEZlDT628106 = YgPwDKbjazTYCvEZlDT96601545;     YgPwDKbjazTYCvEZlDT96601545 = YgPwDKbjazTYCvEZlDT57703041;     YgPwDKbjazTYCvEZlDT57703041 = YgPwDKbjazTYCvEZlDT81926385;     YgPwDKbjazTYCvEZlDT81926385 = YgPwDKbjazTYCvEZlDT20449027;     YgPwDKbjazTYCvEZlDT20449027 = YgPwDKbjazTYCvEZlDT67540479;     YgPwDKbjazTYCvEZlDT67540479 = YgPwDKbjazTYCvEZlDT81220633;     YgPwDKbjazTYCvEZlDT81220633 = YgPwDKbjazTYCvEZlDT46080993;     YgPwDKbjazTYCvEZlDT46080993 = YgPwDKbjazTYCvEZlDT98699396;     YgPwDKbjazTYCvEZlDT98699396 = YgPwDKbjazTYCvEZlDT52466297;     YgPwDKbjazTYCvEZlDT52466297 = YgPwDKbjazTYCvEZlDT24281779;     YgPwDKbjazTYCvEZlDT24281779 = YgPwDKbjazTYCvEZlDT36851954;     YgPwDKbjazTYCvEZlDT36851954 = YgPwDKbjazTYCvEZlDT71556083;     YgPwDKbjazTYCvEZlDT71556083 = YgPwDKbjazTYCvEZlDT75111825;     YgPwDKbjazTYCvEZlDT75111825 = YgPwDKbjazTYCvEZlDT47611481;     YgPwDKbjazTYCvEZlDT47611481 = YgPwDKbjazTYCvEZlDT77121075;     YgPwDKbjazTYCvEZlDT77121075 = YgPwDKbjazTYCvEZlDT12258780;     YgPwDKbjazTYCvEZlDT12258780 = YgPwDKbjazTYCvEZlDT50639114;     YgPwDKbjazTYCvEZlDT50639114 = YgPwDKbjazTYCvEZlDT94142512;     YgPwDKbjazTYCvEZlDT94142512 = YgPwDKbjazTYCvEZlDT18645717;     YgPwDKbjazTYCvEZlDT18645717 = YgPwDKbjazTYCvEZlDT12756274;     YgPwDKbjazTYCvEZlDT12756274 = YgPwDKbjazTYCvEZlDT46277826;     YgPwDKbjazTYCvEZlDT46277826 = YgPwDKbjazTYCvEZlDT47909868;     YgPwDKbjazTYCvEZlDT47909868 = YgPwDKbjazTYCvEZlDT39759990;     YgPwDKbjazTYCvEZlDT39759990 = YgPwDKbjazTYCvEZlDT69947659;     YgPwDKbjazTYCvEZlDT69947659 = YgPwDKbjazTYCvEZlDT14103710;     YgPwDKbjazTYCvEZlDT14103710 = YgPwDKbjazTYCvEZlDT43151738;     YgPwDKbjazTYCvEZlDT43151738 = YgPwDKbjazTYCvEZlDT41314665;     YgPwDKbjazTYCvEZlDT41314665 = YgPwDKbjazTYCvEZlDT91302317;     YgPwDKbjazTYCvEZlDT91302317 = YgPwDKbjazTYCvEZlDT23721561;     YgPwDKbjazTYCvEZlDT23721561 = YgPwDKbjazTYCvEZlDT87017727;     YgPwDKbjazTYCvEZlDT87017727 = YgPwDKbjazTYCvEZlDT31802881;     YgPwDKbjazTYCvEZlDT31802881 = YgPwDKbjazTYCvEZlDT32473595;     YgPwDKbjazTYCvEZlDT32473595 = YgPwDKbjazTYCvEZlDT70210190;     YgPwDKbjazTYCvEZlDT70210190 = YgPwDKbjazTYCvEZlDT9258813;     YgPwDKbjazTYCvEZlDT9258813 = YgPwDKbjazTYCvEZlDT41153308;     YgPwDKbjazTYCvEZlDT41153308 = YgPwDKbjazTYCvEZlDT59123277;     YgPwDKbjazTYCvEZlDT59123277 = YgPwDKbjazTYCvEZlDT15436516;     YgPwDKbjazTYCvEZlDT15436516 = YgPwDKbjazTYCvEZlDT87162533;     YgPwDKbjazTYCvEZlDT87162533 = YgPwDKbjazTYCvEZlDT67684280;     YgPwDKbjazTYCvEZlDT67684280 = YgPwDKbjazTYCvEZlDT75120759;     YgPwDKbjazTYCvEZlDT75120759 = YgPwDKbjazTYCvEZlDT90812199;     YgPwDKbjazTYCvEZlDT90812199 = YgPwDKbjazTYCvEZlDT32904342;     YgPwDKbjazTYCvEZlDT32904342 = YgPwDKbjazTYCvEZlDT76271220;     YgPwDKbjazTYCvEZlDT76271220 = YgPwDKbjazTYCvEZlDT72824106;     YgPwDKbjazTYCvEZlDT72824106 = YgPwDKbjazTYCvEZlDT1060200;     YgPwDKbjazTYCvEZlDT1060200 = YgPwDKbjazTYCvEZlDT48441463;     YgPwDKbjazTYCvEZlDT48441463 = YgPwDKbjazTYCvEZlDT26448721;     YgPwDKbjazTYCvEZlDT26448721 = YgPwDKbjazTYCvEZlDT10024083;     YgPwDKbjazTYCvEZlDT10024083 = YgPwDKbjazTYCvEZlDT27148931;     YgPwDKbjazTYCvEZlDT27148931 = YgPwDKbjazTYCvEZlDT84518425;     YgPwDKbjazTYCvEZlDT84518425 = YgPwDKbjazTYCvEZlDT52052371;     YgPwDKbjazTYCvEZlDT52052371 = YgPwDKbjazTYCvEZlDT74977495;     YgPwDKbjazTYCvEZlDT74977495 = YgPwDKbjazTYCvEZlDT72266896;     YgPwDKbjazTYCvEZlDT72266896 = YgPwDKbjazTYCvEZlDT69633428;     YgPwDKbjazTYCvEZlDT69633428 = YgPwDKbjazTYCvEZlDT54350280;     YgPwDKbjazTYCvEZlDT54350280 = YgPwDKbjazTYCvEZlDT48691677;     YgPwDKbjazTYCvEZlDT48691677 = YgPwDKbjazTYCvEZlDT17943051;     YgPwDKbjazTYCvEZlDT17943051 = YgPwDKbjazTYCvEZlDT11978727;     YgPwDKbjazTYCvEZlDT11978727 = YgPwDKbjazTYCvEZlDT6345317;     YgPwDKbjazTYCvEZlDT6345317 = YgPwDKbjazTYCvEZlDT24388741;     YgPwDKbjazTYCvEZlDT24388741 = YgPwDKbjazTYCvEZlDT39905968;     YgPwDKbjazTYCvEZlDT39905968 = YgPwDKbjazTYCvEZlDT54778676;     YgPwDKbjazTYCvEZlDT54778676 = YgPwDKbjazTYCvEZlDT74977835;     YgPwDKbjazTYCvEZlDT74977835 = YgPwDKbjazTYCvEZlDT65448570;     YgPwDKbjazTYCvEZlDT65448570 = YgPwDKbjazTYCvEZlDT92478897;     YgPwDKbjazTYCvEZlDT92478897 = YgPwDKbjazTYCvEZlDT4378360;     YgPwDKbjazTYCvEZlDT4378360 = YgPwDKbjazTYCvEZlDT1345894;     YgPwDKbjazTYCvEZlDT1345894 = YgPwDKbjazTYCvEZlDT65853013;     YgPwDKbjazTYCvEZlDT65853013 = YgPwDKbjazTYCvEZlDT6458173;     YgPwDKbjazTYCvEZlDT6458173 = YgPwDKbjazTYCvEZlDT17997799;     YgPwDKbjazTYCvEZlDT17997799 = YgPwDKbjazTYCvEZlDT96822263;     YgPwDKbjazTYCvEZlDT96822263 = YgPwDKbjazTYCvEZlDT63476581;     YgPwDKbjazTYCvEZlDT63476581 = YgPwDKbjazTYCvEZlDT26458233;     YgPwDKbjazTYCvEZlDT26458233 = YgPwDKbjazTYCvEZlDT43524957;     YgPwDKbjazTYCvEZlDT43524957 = YgPwDKbjazTYCvEZlDT21944075;     YgPwDKbjazTYCvEZlDT21944075 = YgPwDKbjazTYCvEZlDT13373485;     YgPwDKbjazTYCvEZlDT13373485 = YgPwDKbjazTYCvEZlDT71638648;     YgPwDKbjazTYCvEZlDT71638648 = YgPwDKbjazTYCvEZlDT66935883;     YgPwDKbjazTYCvEZlDT66935883 = YgPwDKbjazTYCvEZlDT68887459;     YgPwDKbjazTYCvEZlDT68887459 = YgPwDKbjazTYCvEZlDT65662247;     YgPwDKbjazTYCvEZlDT65662247 = YgPwDKbjazTYCvEZlDT16703017;     YgPwDKbjazTYCvEZlDT16703017 = YgPwDKbjazTYCvEZlDT31290583;     YgPwDKbjazTYCvEZlDT31290583 = YgPwDKbjazTYCvEZlDT64153386;     YgPwDKbjazTYCvEZlDT64153386 = YgPwDKbjazTYCvEZlDT39203135;     YgPwDKbjazTYCvEZlDT39203135 = YgPwDKbjazTYCvEZlDT34965356;     YgPwDKbjazTYCvEZlDT34965356 = YgPwDKbjazTYCvEZlDT56825385;     YgPwDKbjazTYCvEZlDT56825385 = YgPwDKbjazTYCvEZlDT60206698;     YgPwDKbjazTYCvEZlDT60206698 = YgPwDKbjazTYCvEZlDT576762;     YgPwDKbjazTYCvEZlDT576762 = YgPwDKbjazTYCvEZlDT54908533;     YgPwDKbjazTYCvEZlDT54908533 = YgPwDKbjazTYCvEZlDT92461630;     YgPwDKbjazTYCvEZlDT92461630 = YgPwDKbjazTYCvEZlDT41180226;     YgPwDKbjazTYCvEZlDT41180226 = YgPwDKbjazTYCvEZlDT3457790;     YgPwDKbjazTYCvEZlDT3457790 = YgPwDKbjazTYCvEZlDT80817217;     YgPwDKbjazTYCvEZlDT80817217 = YgPwDKbjazTYCvEZlDT43295539;     YgPwDKbjazTYCvEZlDT43295539 = YgPwDKbjazTYCvEZlDT35214792;     YgPwDKbjazTYCvEZlDT35214792 = YgPwDKbjazTYCvEZlDT36033524;     YgPwDKbjazTYCvEZlDT36033524 = YgPwDKbjazTYCvEZlDT57926506;     YgPwDKbjazTYCvEZlDT57926506 = YgPwDKbjazTYCvEZlDT90912612;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void STJQejGabcOwsbtIZji75448555() {     int WaBCMJQnVVFjINXMJVS45567010 = -218478430;    int WaBCMJQnVVFjINXMJVS29387322 = -695767517;    int WaBCMJQnVVFjINXMJVS61360752 = -321884366;    int WaBCMJQnVVFjINXMJVS68036487 = -488051154;    int WaBCMJQnVVFjINXMJVS32154712 = -5882450;    int WaBCMJQnVVFjINXMJVS96100782 = 10074170;    int WaBCMJQnVVFjINXMJVS41549730 = -101230221;    int WaBCMJQnVVFjINXMJVS96715582 = -535910450;    int WaBCMJQnVVFjINXMJVS68995043 = -72519678;    int WaBCMJQnVVFjINXMJVS28712979 = -745089377;    int WaBCMJQnVVFjINXMJVS77310691 = -209195239;    int WaBCMJQnVVFjINXMJVS15231011 = -661841195;    int WaBCMJQnVVFjINXMJVS88099093 = -352795558;    int WaBCMJQnVVFjINXMJVS29818385 = -864520257;    int WaBCMJQnVVFjINXMJVS1780158 = -346042791;    int WaBCMJQnVVFjINXMJVS64879361 = -156155627;    int WaBCMJQnVVFjINXMJVS47443244 = 73913934;    int WaBCMJQnVVFjINXMJVS44717663 = -979021500;    int WaBCMJQnVVFjINXMJVS13479380 = -91042314;    int WaBCMJQnVVFjINXMJVS68273670 = -348487962;    int WaBCMJQnVVFjINXMJVS28316901 = -74561448;    int WaBCMJQnVVFjINXMJVS69898305 = -831128758;    int WaBCMJQnVVFjINXMJVS49226105 = -94554784;    int WaBCMJQnVVFjINXMJVS47706195 = -213152549;    int WaBCMJQnVVFjINXMJVS43662484 = -264452995;    int WaBCMJQnVVFjINXMJVS81000937 = -883319508;    int WaBCMJQnVVFjINXMJVS71937583 = -300882310;    int WaBCMJQnVVFjINXMJVS67352710 = -163058563;    int WaBCMJQnVVFjINXMJVS83049414 = -353235658;    int WaBCMJQnVVFjINXMJVS35750075 = -381504963;    int WaBCMJQnVVFjINXMJVS43007846 = -634082898;    int WaBCMJQnVVFjINXMJVS54713171 = -220084713;    int WaBCMJQnVVFjINXMJVS54673604 = -611501555;    int WaBCMJQnVVFjINXMJVS26458774 = -70204050;    int WaBCMJQnVVFjINXMJVS66977751 = -548887286;    int WaBCMJQnVVFjINXMJVS57536732 = -295498177;    int WaBCMJQnVVFjINXMJVS83963300 = -56164816;    int WaBCMJQnVVFjINXMJVS54130546 = -669695558;    int WaBCMJQnVVFjINXMJVS9892926 = -764768208;    int WaBCMJQnVVFjINXMJVS39422911 = -353337197;    int WaBCMJQnVVFjINXMJVS43121934 = -507525360;    int WaBCMJQnVVFjINXMJVS4358939 = 59044618;    int WaBCMJQnVVFjINXMJVS66120942 = -330220092;    int WaBCMJQnVVFjINXMJVS99806598 = -382312322;    int WaBCMJQnVVFjINXMJVS92888405 = -786405249;    int WaBCMJQnVVFjINXMJVS31604822 = -487028134;    int WaBCMJQnVVFjINXMJVS89297818 = -873808267;    int WaBCMJQnVVFjINXMJVS24487509 = -808157761;    int WaBCMJQnVVFjINXMJVS90784229 = 92173458;    int WaBCMJQnVVFjINXMJVS71290383 = -575987551;    int WaBCMJQnVVFjINXMJVS85137622 = -215739880;    int WaBCMJQnVVFjINXMJVS16531081 = -23358021;    int WaBCMJQnVVFjINXMJVS16246429 = -447321983;    int WaBCMJQnVVFjINXMJVS9468129 = -396395912;    int WaBCMJQnVVFjINXMJVS47131655 = -52238816;    int WaBCMJQnVVFjINXMJVS75668705 = -387349672;    int WaBCMJQnVVFjINXMJVS80161216 = -501212734;    int WaBCMJQnVVFjINXMJVS13654558 = -8731817;    int WaBCMJQnVVFjINXMJVS24374003 = -123598160;    int WaBCMJQnVVFjINXMJVS51153774 = -122562942;    int WaBCMJQnVVFjINXMJVS24163200 = -689043520;    int WaBCMJQnVVFjINXMJVS74197020 = -938171659;    int WaBCMJQnVVFjINXMJVS13666168 = -82674793;    int WaBCMJQnVVFjINXMJVS33244969 = -691014715;    int WaBCMJQnVVFjINXMJVS85705132 = -11006479;    int WaBCMJQnVVFjINXMJVS22597520 = -989110527;    int WaBCMJQnVVFjINXMJVS60557407 = 49660360;    int WaBCMJQnVVFjINXMJVS61640320 = -182591508;    int WaBCMJQnVVFjINXMJVS62840633 = -215632972;    int WaBCMJQnVVFjINXMJVS44243425 = 49455386;    int WaBCMJQnVVFjINXMJVS80916061 = 9188;    int WaBCMJQnVVFjINXMJVS93312697 = -256390508;    int WaBCMJQnVVFjINXMJVS34824737 = -114253293;    int WaBCMJQnVVFjINXMJVS74056469 = -737705117;    int WaBCMJQnVVFjINXMJVS25151736 = -840962602;    int WaBCMJQnVVFjINXMJVS23957962 = -33606067;    int WaBCMJQnVVFjINXMJVS3777363 = -400908667;    int WaBCMJQnVVFjINXMJVS49419507 = -712242462;    int WaBCMJQnVVFjINXMJVS54817790 = -426747300;    int WaBCMJQnVVFjINXMJVS12057663 = -777424861;    int WaBCMJQnVVFjINXMJVS91703118 = 90488759;    int WaBCMJQnVVFjINXMJVS47450075 = -492724549;    int WaBCMJQnVVFjINXMJVS76568480 = -155232021;    int WaBCMJQnVVFjINXMJVS11759032 = -777248108;    int WaBCMJQnVVFjINXMJVS50612452 = -65765084;    int WaBCMJQnVVFjINXMJVS26476766 = -510724877;    int WaBCMJQnVVFjINXMJVS38466743 = -772762731;    int WaBCMJQnVVFjINXMJVS45205476 = -115105644;    int WaBCMJQnVVFjINXMJVS79327118 = 82034765;    int WaBCMJQnVVFjINXMJVS91309046 = -61537614;    int WaBCMJQnVVFjINXMJVS77375515 = -794285444;    int WaBCMJQnVVFjINXMJVS70308743 = 52567001;    int WaBCMJQnVVFjINXMJVS29756544 = -446097399;    int WaBCMJQnVVFjINXMJVS58739152 = -542205266;    int WaBCMJQnVVFjINXMJVS15259712 = -664293678;    int WaBCMJQnVVFjINXMJVS68924914 = -569353702;    int WaBCMJQnVVFjINXMJVS90692770 = -858280590;    int WaBCMJQnVVFjINXMJVS32875973 = -639205377;    int WaBCMJQnVVFjINXMJVS14101466 = -271305844;    int WaBCMJQnVVFjINXMJVS70290885 = -218478430;     WaBCMJQnVVFjINXMJVS45567010 = WaBCMJQnVVFjINXMJVS29387322;     WaBCMJQnVVFjINXMJVS29387322 = WaBCMJQnVVFjINXMJVS61360752;     WaBCMJQnVVFjINXMJVS61360752 = WaBCMJQnVVFjINXMJVS68036487;     WaBCMJQnVVFjINXMJVS68036487 = WaBCMJQnVVFjINXMJVS32154712;     WaBCMJQnVVFjINXMJVS32154712 = WaBCMJQnVVFjINXMJVS96100782;     WaBCMJQnVVFjINXMJVS96100782 = WaBCMJQnVVFjINXMJVS41549730;     WaBCMJQnVVFjINXMJVS41549730 = WaBCMJQnVVFjINXMJVS96715582;     WaBCMJQnVVFjINXMJVS96715582 = WaBCMJQnVVFjINXMJVS68995043;     WaBCMJQnVVFjINXMJVS68995043 = WaBCMJQnVVFjINXMJVS28712979;     WaBCMJQnVVFjINXMJVS28712979 = WaBCMJQnVVFjINXMJVS77310691;     WaBCMJQnVVFjINXMJVS77310691 = WaBCMJQnVVFjINXMJVS15231011;     WaBCMJQnVVFjINXMJVS15231011 = WaBCMJQnVVFjINXMJVS88099093;     WaBCMJQnVVFjINXMJVS88099093 = WaBCMJQnVVFjINXMJVS29818385;     WaBCMJQnVVFjINXMJVS29818385 = WaBCMJQnVVFjINXMJVS1780158;     WaBCMJQnVVFjINXMJVS1780158 = WaBCMJQnVVFjINXMJVS64879361;     WaBCMJQnVVFjINXMJVS64879361 = WaBCMJQnVVFjINXMJVS47443244;     WaBCMJQnVVFjINXMJVS47443244 = WaBCMJQnVVFjINXMJVS44717663;     WaBCMJQnVVFjINXMJVS44717663 = WaBCMJQnVVFjINXMJVS13479380;     WaBCMJQnVVFjINXMJVS13479380 = WaBCMJQnVVFjINXMJVS68273670;     WaBCMJQnVVFjINXMJVS68273670 = WaBCMJQnVVFjINXMJVS28316901;     WaBCMJQnVVFjINXMJVS28316901 = WaBCMJQnVVFjINXMJVS69898305;     WaBCMJQnVVFjINXMJVS69898305 = WaBCMJQnVVFjINXMJVS49226105;     WaBCMJQnVVFjINXMJVS49226105 = WaBCMJQnVVFjINXMJVS47706195;     WaBCMJQnVVFjINXMJVS47706195 = WaBCMJQnVVFjINXMJVS43662484;     WaBCMJQnVVFjINXMJVS43662484 = WaBCMJQnVVFjINXMJVS81000937;     WaBCMJQnVVFjINXMJVS81000937 = WaBCMJQnVVFjINXMJVS71937583;     WaBCMJQnVVFjINXMJVS71937583 = WaBCMJQnVVFjINXMJVS67352710;     WaBCMJQnVVFjINXMJVS67352710 = WaBCMJQnVVFjINXMJVS83049414;     WaBCMJQnVVFjINXMJVS83049414 = WaBCMJQnVVFjINXMJVS35750075;     WaBCMJQnVVFjINXMJVS35750075 = WaBCMJQnVVFjINXMJVS43007846;     WaBCMJQnVVFjINXMJVS43007846 = WaBCMJQnVVFjINXMJVS54713171;     WaBCMJQnVVFjINXMJVS54713171 = WaBCMJQnVVFjINXMJVS54673604;     WaBCMJQnVVFjINXMJVS54673604 = WaBCMJQnVVFjINXMJVS26458774;     WaBCMJQnVVFjINXMJVS26458774 = WaBCMJQnVVFjINXMJVS66977751;     WaBCMJQnVVFjINXMJVS66977751 = WaBCMJQnVVFjINXMJVS57536732;     WaBCMJQnVVFjINXMJVS57536732 = WaBCMJQnVVFjINXMJVS83963300;     WaBCMJQnVVFjINXMJVS83963300 = WaBCMJQnVVFjINXMJVS54130546;     WaBCMJQnVVFjINXMJVS54130546 = WaBCMJQnVVFjINXMJVS9892926;     WaBCMJQnVVFjINXMJVS9892926 = WaBCMJQnVVFjINXMJVS39422911;     WaBCMJQnVVFjINXMJVS39422911 = WaBCMJQnVVFjINXMJVS43121934;     WaBCMJQnVVFjINXMJVS43121934 = WaBCMJQnVVFjINXMJVS4358939;     WaBCMJQnVVFjINXMJVS4358939 = WaBCMJQnVVFjINXMJVS66120942;     WaBCMJQnVVFjINXMJVS66120942 = WaBCMJQnVVFjINXMJVS99806598;     WaBCMJQnVVFjINXMJVS99806598 = WaBCMJQnVVFjINXMJVS92888405;     WaBCMJQnVVFjINXMJVS92888405 = WaBCMJQnVVFjINXMJVS31604822;     WaBCMJQnVVFjINXMJVS31604822 = WaBCMJQnVVFjINXMJVS89297818;     WaBCMJQnVVFjINXMJVS89297818 = WaBCMJQnVVFjINXMJVS24487509;     WaBCMJQnVVFjINXMJVS24487509 = WaBCMJQnVVFjINXMJVS90784229;     WaBCMJQnVVFjINXMJVS90784229 = WaBCMJQnVVFjINXMJVS71290383;     WaBCMJQnVVFjINXMJVS71290383 = WaBCMJQnVVFjINXMJVS85137622;     WaBCMJQnVVFjINXMJVS85137622 = WaBCMJQnVVFjINXMJVS16531081;     WaBCMJQnVVFjINXMJVS16531081 = WaBCMJQnVVFjINXMJVS16246429;     WaBCMJQnVVFjINXMJVS16246429 = WaBCMJQnVVFjINXMJVS9468129;     WaBCMJQnVVFjINXMJVS9468129 = WaBCMJQnVVFjINXMJVS47131655;     WaBCMJQnVVFjINXMJVS47131655 = WaBCMJQnVVFjINXMJVS75668705;     WaBCMJQnVVFjINXMJVS75668705 = WaBCMJQnVVFjINXMJVS80161216;     WaBCMJQnVVFjINXMJVS80161216 = WaBCMJQnVVFjINXMJVS13654558;     WaBCMJQnVVFjINXMJVS13654558 = WaBCMJQnVVFjINXMJVS24374003;     WaBCMJQnVVFjINXMJVS24374003 = WaBCMJQnVVFjINXMJVS51153774;     WaBCMJQnVVFjINXMJVS51153774 = WaBCMJQnVVFjINXMJVS24163200;     WaBCMJQnVVFjINXMJVS24163200 = WaBCMJQnVVFjINXMJVS74197020;     WaBCMJQnVVFjINXMJVS74197020 = WaBCMJQnVVFjINXMJVS13666168;     WaBCMJQnVVFjINXMJVS13666168 = WaBCMJQnVVFjINXMJVS33244969;     WaBCMJQnVVFjINXMJVS33244969 = WaBCMJQnVVFjINXMJVS85705132;     WaBCMJQnVVFjINXMJVS85705132 = WaBCMJQnVVFjINXMJVS22597520;     WaBCMJQnVVFjINXMJVS22597520 = WaBCMJQnVVFjINXMJVS60557407;     WaBCMJQnVVFjINXMJVS60557407 = WaBCMJQnVVFjINXMJVS61640320;     WaBCMJQnVVFjINXMJVS61640320 = WaBCMJQnVVFjINXMJVS62840633;     WaBCMJQnVVFjINXMJVS62840633 = WaBCMJQnVVFjINXMJVS44243425;     WaBCMJQnVVFjINXMJVS44243425 = WaBCMJQnVVFjINXMJVS80916061;     WaBCMJQnVVFjINXMJVS80916061 = WaBCMJQnVVFjINXMJVS93312697;     WaBCMJQnVVFjINXMJVS93312697 = WaBCMJQnVVFjINXMJVS34824737;     WaBCMJQnVVFjINXMJVS34824737 = WaBCMJQnVVFjINXMJVS74056469;     WaBCMJQnVVFjINXMJVS74056469 = WaBCMJQnVVFjINXMJVS25151736;     WaBCMJQnVVFjINXMJVS25151736 = WaBCMJQnVVFjINXMJVS23957962;     WaBCMJQnVVFjINXMJVS23957962 = WaBCMJQnVVFjINXMJVS3777363;     WaBCMJQnVVFjINXMJVS3777363 = WaBCMJQnVVFjINXMJVS49419507;     WaBCMJQnVVFjINXMJVS49419507 = WaBCMJQnVVFjINXMJVS54817790;     WaBCMJQnVVFjINXMJVS54817790 = WaBCMJQnVVFjINXMJVS12057663;     WaBCMJQnVVFjINXMJVS12057663 = WaBCMJQnVVFjINXMJVS91703118;     WaBCMJQnVVFjINXMJVS91703118 = WaBCMJQnVVFjINXMJVS47450075;     WaBCMJQnVVFjINXMJVS47450075 = WaBCMJQnVVFjINXMJVS76568480;     WaBCMJQnVVFjINXMJVS76568480 = WaBCMJQnVVFjINXMJVS11759032;     WaBCMJQnVVFjINXMJVS11759032 = WaBCMJQnVVFjINXMJVS50612452;     WaBCMJQnVVFjINXMJVS50612452 = WaBCMJQnVVFjINXMJVS26476766;     WaBCMJQnVVFjINXMJVS26476766 = WaBCMJQnVVFjINXMJVS38466743;     WaBCMJQnVVFjINXMJVS38466743 = WaBCMJQnVVFjINXMJVS45205476;     WaBCMJQnVVFjINXMJVS45205476 = WaBCMJQnVVFjINXMJVS79327118;     WaBCMJQnVVFjINXMJVS79327118 = WaBCMJQnVVFjINXMJVS91309046;     WaBCMJQnVVFjINXMJVS91309046 = WaBCMJQnVVFjINXMJVS77375515;     WaBCMJQnVVFjINXMJVS77375515 = WaBCMJQnVVFjINXMJVS70308743;     WaBCMJQnVVFjINXMJVS70308743 = WaBCMJQnVVFjINXMJVS29756544;     WaBCMJQnVVFjINXMJVS29756544 = WaBCMJQnVVFjINXMJVS58739152;     WaBCMJQnVVFjINXMJVS58739152 = WaBCMJQnVVFjINXMJVS15259712;     WaBCMJQnVVFjINXMJVS15259712 = WaBCMJQnVVFjINXMJVS68924914;     WaBCMJQnVVFjINXMJVS68924914 = WaBCMJQnVVFjINXMJVS90692770;     WaBCMJQnVVFjINXMJVS90692770 = WaBCMJQnVVFjINXMJVS32875973;     WaBCMJQnVVFjINXMJVS32875973 = WaBCMJQnVVFjINXMJVS14101466;     WaBCMJQnVVFjINXMJVS14101466 = WaBCMJQnVVFjINXMJVS70290885;     WaBCMJQnVVFjINXMJVS70290885 = WaBCMJQnVVFjINXMJVS45567010;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void JPcBeqSIwhZQdDnxvpb81777102() {     int JotQXAsyowDdXwDaIPo221408 = -656006014;    int JotQXAsyowDdXwDaIPo76384941 = -175332331;    int JotQXAsyowDdXwDaIPo22093399 = -707268979;    int JotQXAsyowDdXwDaIPo39471428 = -494153566;    int JotQXAsyowDdXwDaIPo6606382 = -778317689;    int JotQXAsyowDdXwDaIPo10275180 = -119076666;    int JotQXAsyowDdXwDaIPo62650434 = -403122894;    int JotQXAsyowDdXwDaIPo25890686 = 63521317;    int JotQXAsyowDdXwDaIPo56769454 = -119373049;    int JotQXAsyowDdXwDaIPo11344964 = 76109354;    int JotQXAsyowDdXwDaIPo55921986 = -834551811;    int JotQXAsyowDdXwDaIPo77995724 = -848265284;    int JotQXAsyowDdXwDaIPo51916408 = -156335862;    int JotQXAsyowDdXwDaIPo22784816 = -476623835;    int JotQXAsyowDdXwDaIPo32004231 = -253164422;    int JotQXAsyowDdXwDaIPo54646897 = -886315192;    int JotQXAsyowDdXwDaIPo47275008 = -399685894;    int JotQXAsyowDdXwDaIPo12314250 = 57414032;    int JotQXAsyowDdXwDaIPo14699981 = -376853862;    int JotQXAsyowDdXwDaIPo85908225 = -693854108;    int JotQXAsyowDdXwDaIPo62491288 = -642644599;    int JotQXAsyowDdXwDaIPo21150894 = -997572866;    int JotQXAsyowDdXwDaIPo85695937 = -681298205;    int JotQXAsyowDdXwDaIPo49134564 = 87806634;    int JotQXAsyowDdXwDaIPo39415101 = -637366447;    int JotQXAsyowDdXwDaIPo22241885 = -887028293;    int JotQXAsyowDdXwDaIPo73927507 = -855726589;    int JotQXAsyowDdXwDaIPo20601711 = -171110423;    int JotQXAsyowDdXwDaIPo22947092 = -733480533;    int JotQXAsyowDdXwDaIPo30185484 = -672262932;    int JotQXAsyowDdXwDaIPo94713374 = -82955424;    int JotQXAsyowDdXwDaIPo85704781 = -631581241;    int JotQXAsyowDdXwDaIPo22329481 = -68019169;    int JotQXAsyowDdXwDaIPo21114666 = -850324860;    int JotQXAsyowDdXwDaIPo1481909 = -766750545;    int JotQXAsyowDdXwDaIPo44863274 = -543493774;    int JotQXAsyowDdXwDaIPo58667788 = 93408564;    int JotQXAsyowDdXwDaIPo67107785 = -543624579;    int JotQXAsyowDdXwDaIPo60662575 = -46716810;    int JotQXAsyowDdXwDaIPo63409305 = -11645797;    int JotQXAsyowDdXwDaIPo99081335 = -620075518;    int JotQXAsyowDdXwDaIPo41033597 = -548487468;    int JotQXAsyowDdXwDaIPo57121125 = -170725410;    int JotQXAsyowDdXwDaIPo8800998 = -955991988;    int JotQXAsyowDdXwDaIPo52872469 = -918922847;    int JotQXAsyowDdXwDaIPo86938424 = -555817749;    int JotQXAsyowDdXwDaIPo5771531 = -900865651;    int JotQXAsyowDdXwDaIPo47914818 = -785810133;    int JotQXAsyowDdXwDaIPo33126996 = -907556731;    int JotQXAsyowDdXwDaIPo16132046 = -816006845;    int JotQXAsyowDdXwDaIPo60251162 = -972955382;    int JotQXAsyowDdXwDaIPo5913231 = -538424004;    int JotQXAsyowDdXwDaIPo47974432 = -187237440;    int JotQXAsyowDdXwDaIPo66883886 = -292282396;    int JotQXAsyowDdXwDaIPo19285815 = -448147497;    int JotQXAsyowDdXwDaIPo79070513 = -658433148;    int JotQXAsyowDdXwDaIPo90689004 = -494034127;    int JotQXAsyowDdXwDaIPo72958835 = -695075614;    int JotQXAsyowDdXwDaIPo56328 = -856787119;    int JotQXAsyowDdXwDaIPo84364497 = -891289397;    int JotQXAsyowDdXwDaIPo36347672 = -263350077;    int JotQXAsyowDdXwDaIPo42048724 = -132012471;    int JotQXAsyowDdXwDaIPo2943595 = -202998150;    int JotQXAsyowDdXwDaIPo26583971 = -447110118;    int JotQXAsyowDdXwDaIPo16631590 = -840935223;    int JotQXAsyowDdXwDaIPo70217204 = -102970571;    int JotQXAsyowDdXwDaIPo55666243 = -680246115;    int JotQXAsyowDdXwDaIPo30801742 = -306011003;    int JotQXAsyowDdXwDaIPo21302907 = -709873291;    int JotQXAsyowDdXwDaIPo87140956 = -709670649;    int JotQXAsyowDdXwDaIPo95979108 = -879723756;    int JotQXAsyowDdXwDaIPo80167222 = -856061316;    int JotQXAsyowDdXwDaIPo51651675 = -895869158;    int JotQXAsyowDdXwDaIPo51290676 = -265208066;    int JotQXAsyowDdXwDaIPo86826890 = 26221410;    int JotQXAsyowDdXwDaIPo21457692 = 5842869;    int JotQXAsyowDdXwDaIPo64029769 = -726847457;    int JotQXAsyowDdXwDaIPo76894939 = -725306217;    int JotQXAsyowDdXwDaIPo96262095 = 6729481;    int JotQXAsyowDdXwDaIPo52476677 = 18451301;    int JotQXAsyowDdXwDaIPo16470355 = -986162642;    int JotQXAsyowDdXwDaIPo26012690 = 30083544;    int JotQXAsyowDdXwDaIPo87474714 = -263553692;    int JotQXAsyowDdXwDaIPo6815046 = -917473689;    int JotQXAsyowDdXwDaIPo69934321 = -699307550;    int JotQXAsyowDdXwDaIPo88800144 = -544531420;    int JotQXAsyowDdXwDaIPo37730350 = -344343802;    int JotQXAsyowDdXwDaIPo55445595 = -775736773;    int JotQXAsyowDdXwDaIPo1828852 = -302177363;    int JotQXAsyowDdXwDaIPo22411395 = -8317397;    int JotQXAsyowDdXwDaIPo54174270 = 50540353;    int JotQXAsyowDdXwDaIPo85708953 = -211515822;    int JotQXAsyowDdXwDaIPo67051457 = -686837461;    int JotQXAsyowDdXwDaIPo76298077 = -155427413;    int JotQXAsyowDdXwDaIPo27061633 = -748295720;    int JotQXAsyowDdXwDaIPo57032611 = -388063048;    int JotQXAsyowDdXwDaIPo38090003 = -245489319;    int JotQXAsyowDdXwDaIPo30537155 = -723615293;    int JotQXAsyowDdXwDaIPo92169408 = -15056766;    int JotQXAsyowDdXwDaIPo82655264 = -656006014;     JotQXAsyowDdXwDaIPo221408 = JotQXAsyowDdXwDaIPo76384941;     JotQXAsyowDdXwDaIPo76384941 = JotQXAsyowDdXwDaIPo22093399;     JotQXAsyowDdXwDaIPo22093399 = JotQXAsyowDdXwDaIPo39471428;     JotQXAsyowDdXwDaIPo39471428 = JotQXAsyowDdXwDaIPo6606382;     JotQXAsyowDdXwDaIPo6606382 = JotQXAsyowDdXwDaIPo10275180;     JotQXAsyowDdXwDaIPo10275180 = JotQXAsyowDdXwDaIPo62650434;     JotQXAsyowDdXwDaIPo62650434 = JotQXAsyowDdXwDaIPo25890686;     JotQXAsyowDdXwDaIPo25890686 = JotQXAsyowDdXwDaIPo56769454;     JotQXAsyowDdXwDaIPo56769454 = JotQXAsyowDdXwDaIPo11344964;     JotQXAsyowDdXwDaIPo11344964 = JotQXAsyowDdXwDaIPo55921986;     JotQXAsyowDdXwDaIPo55921986 = JotQXAsyowDdXwDaIPo77995724;     JotQXAsyowDdXwDaIPo77995724 = JotQXAsyowDdXwDaIPo51916408;     JotQXAsyowDdXwDaIPo51916408 = JotQXAsyowDdXwDaIPo22784816;     JotQXAsyowDdXwDaIPo22784816 = JotQXAsyowDdXwDaIPo32004231;     JotQXAsyowDdXwDaIPo32004231 = JotQXAsyowDdXwDaIPo54646897;     JotQXAsyowDdXwDaIPo54646897 = JotQXAsyowDdXwDaIPo47275008;     JotQXAsyowDdXwDaIPo47275008 = JotQXAsyowDdXwDaIPo12314250;     JotQXAsyowDdXwDaIPo12314250 = JotQXAsyowDdXwDaIPo14699981;     JotQXAsyowDdXwDaIPo14699981 = JotQXAsyowDdXwDaIPo85908225;     JotQXAsyowDdXwDaIPo85908225 = JotQXAsyowDdXwDaIPo62491288;     JotQXAsyowDdXwDaIPo62491288 = JotQXAsyowDdXwDaIPo21150894;     JotQXAsyowDdXwDaIPo21150894 = JotQXAsyowDdXwDaIPo85695937;     JotQXAsyowDdXwDaIPo85695937 = JotQXAsyowDdXwDaIPo49134564;     JotQXAsyowDdXwDaIPo49134564 = JotQXAsyowDdXwDaIPo39415101;     JotQXAsyowDdXwDaIPo39415101 = JotQXAsyowDdXwDaIPo22241885;     JotQXAsyowDdXwDaIPo22241885 = JotQXAsyowDdXwDaIPo73927507;     JotQXAsyowDdXwDaIPo73927507 = JotQXAsyowDdXwDaIPo20601711;     JotQXAsyowDdXwDaIPo20601711 = JotQXAsyowDdXwDaIPo22947092;     JotQXAsyowDdXwDaIPo22947092 = JotQXAsyowDdXwDaIPo30185484;     JotQXAsyowDdXwDaIPo30185484 = JotQXAsyowDdXwDaIPo94713374;     JotQXAsyowDdXwDaIPo94713374 = JotQXAsyowDdXwDaIPo85704781;     JotQXAsyowDdXwDaIPo85704781 = JotQXAsyowDdXwDaIPo22329481;     JotQXAsyowDdXwDaIPo22329481 = JotQXAsyowDdXwDaIPo21114666;     JotQXAsyowDdXwDaIPo21114666 = JotQXAsyowDdXwDaIPo1481909;     JotQXAsyowDdXwDaIPo1481909 = JotQXAsyowDdXwDaIPo44863274;     JotQXAsyowDdXwDaIPo44863274 = JotQXAsyowDdXwDaIPo58667788;     JotQXAsyowDdXwDaIPo58667788 = JotQXAsyowDdXwDaIPo67107785;     JotQXAsyowDdXwDaIPo67107785 = JotQXAsyowDdXwDaIPo60662575;     JotQXAsyowDdXwDaIPo60662575 = JotQXAsyowDdXwDaIPo63409305;     JotQXAsyowDdXwDaIPo63409305 = JotQXAsyowDdXwDaIPo99081335;     JotQXAsyowDdXwDaIPo99081335 = JotQXAsyowDdXwDaIPo41033597;     JotQXAsyowDdXwDaIPo41033597 = JotQXAsyowDdXwDaIPo57121125;     JotQXAsyowDdXwDaIPo57121125 = JotQXAsyowDdXwDaIPo8800998;     JotQXAsyowDdXwDaIPo8800998 = JotQXAsyowDdXwDaIPo52872469;     JotQXAsyowDdXwDaIPo52872469 = JotQXAsyowDdXwDaIPo86938424;     JotQXAsyowDdXwDaIPo86938424 = JotQXAsyowDdXwDaIPo5771531;     JotQXAsyowDdXwDaIPo5771531 = JotQXAsyowDdXwDaIPo47914818;     JotQXAsyowDdXwDaIPo47914818 = JotQXAsyowDdXwDaIPo33126996;     JotQXAsyowDdXwDaIPo33126996 = JotQXAsyowDdXwDaIPo16132046;     JotQXAsyowDdXwDaIPo16132046 = JotQXAsyowDdXwDaIPo60251162;     JotQXAsyowDdXwDaIPo60251162 = JotQXAsyowDdXwDaIPo5913231;     JotQXAsyowDdXwDaIPo5913231 = JotQXAsyowDdXwDaIPo47974432;     JotQXAsyowDdXwDaIPo47974432 = JotQXAsyowDdXwDaIPo66883886;     JotQXAsyowDdXwDaIPo66883886 = JotQXAsyowDdXwDaIPo19285815;     JotQXAsyowDdXwDaIPo19285815 = JotQXAsyowDdXwDaIPo79070513;     JotQXAsyowDdXwDaIPo79070513 = JotQXAsyowDdXwDaIPo90689004;     JotQXAsyowDdXwDaIPo90689004 = JotQXAsyowDdXwDaIPo72958835;     JotQXAsyowDdXwDaIPo72958835 = JotQXAsyowDdXwDaIPo56328;     JotQXAsyowDdXwDaIPo56328 = JotQXAsyowDdXwDaIPo84364497;     JotQXAsyowDdXwDaIPo84364497 = JotQXAsyowDdXwDaIPo36347672;     JotQXAsyowDdXwDaIPo36347672 = JotQXAsyowDdXwDaIPo42048724;     JotQXAsyowDdXwDaIPo42048724 = JotQXAsyowDdXwDaIPo2943595;     JotQXAsyowDdXwDaIPo2943595 = JotQXAsyowDdXwDaIPo26583971;     JotQXAsyowDdXwDaIPo26583971 = JotQXAsyowDdXwDaIPo16631590;     JotQXAsyowDdXwDaIPo16631590 = JotQXAsyowDdXwDaIPo70217204;     JotQXAsyowDdXwDaIPo70217204 = JotQXAsyowDdXwDaIPo55666243;     JotQXAsyowDdXwDaIPo55666243 = JotQXAsyowDdXwDaIPo30801742;     JotQXAsyowDdXwDaIPo30801742 = JotQXAsyowDdXwDaIPo21302907;     JotQXAsyowDdXwDaIPo21302907 = JotQXAsyowDdXwDaIPo87140956;     JotQXAsyowDdXwDaIPo87140956 = JotQXAsyowDdXwDaIPo95979108;     JotQXAsyowDdXwDaIPo95979108 = JotQXAsyowDdXwDaIPo80167222;     JotQXAsyowDdXwDaIPo80167222 = JotQXAsyowDdXwDaIPo51651675;     JotQXAsyowDdXwDaIPo51651675 = JotQXAsyowDdXwDaIPo51290676;     JotQXAsyowDdXwDaIPo51290676 = JotQXAsyowDdXwDaIPo86826890;     JotQXAsyowDdXwDaIPo86826890 = JotQXAsyowDdXwDaIPo21457692;     JotQXAsyowDdXwDaIPo21457692 = JotQXAsyowDdXwDaIPo64029769;     JotQXAsyowDdXwDaIPo64029769 = JotQXAsyowDdXwDaIPo76894939;     JotQXAsyowDdXwDaIPo76894939 = JotQXAsyowDdXwDaIPo96262095;     JotQXAsyowDdXwDaIPo96262095 = JotQXAsyowDdXwDaIPo52476677;     JotQXAsyowDdXwDaIPo52476677 = JotQXAsyowDdXwDaIPo16470355;     JotQXAsyowDdXwDaIPo16470355 = JotQXAsyowDdXwDaIPo26012690;     JotQXAsyowDdXwDaIPo26012690 = JotQXAsyowDdXwDaIPo87474714;     JotQXAsyowDdXwDaIPo87474714 = JotQXAsyowDdXwDaIPo6815046;     JotQXAsyowDdXwDaIPo6815046 = JotQXAsyowDdXwDaIPo69934321;     JotQXAsyowDdXwDaIPo69934321 = JotQXAsyowDdXwDaIPo88800144;     JotQXAsyowDdXwDaIPo88800144 = JotQXAsyowDdXwDaIPo37730350;     JotQXAsyowDdXwDaIPo37730350 = JotQXAsyowDdXwDaIPo55445595;     JotQXAsyowDdXwDaIPo55445595 = JotQXAsyowDdXwDaIPo1828852;     JotQXAsyowDdXwDaIPo1828852 = JotQXAsyowDdXwDaIPo22411395;     JotQXAsyowDdXwDaIPo22411395 = JotQXAsyowDdXwDaIPo54174270;     JotQXAsyowDdXwDaIPo54174270 = JotQXAsyowDdXwDaIPo85708953;     JotQXAsyowDdXwDaIPo85708953 = JotQXAsyowDdXwDaIPo67051457;     JotQXAsyowDdXwDaIPo67051457 = JotQXAsyowDdXwDaIPo76298077;     JotQXAsyowDdXwDaIPo76298077 = JotQXAsyowDdXwDaIPo27061633;     JotQXAsyowDdXwDaIPo27061633 = JotQXAsyowDdXwDaIPo57032611;     JotQXAsyowDdXwDaIPo57032611 = JotQXAsyowDdXwDaIPo38090003;     JotQXAsyowDdXwDaIPo38090003 = JotQXAsyowDdXwDaIPo30537155;     JotQXAsyowDdXwDaIPo30537155 = JotQXAsyowDdXwDaIPo92169408;     JotQXAsyowDdXwDaIPo92169408 = JotQXAsyowDdXwDaIPo82655264;     JotQXAsyowDdXwDaIPo82655264 = JotQXAsyowDdXwDaIPo221408;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void sAovdIdNAZjGeralKhm88105650() {     int SrqmJQJBFcJKLCbdSgD54875805 = 6466402;    int SrqmJQJBFcJKLCbdSgD23382561 = -754897145;    int SrqmJQJBFcJKLCbdSgD82826045 = 7346407;    int SrqmJQJBFcJKLCbdSgD10906370 = -500255977;    int SrqmJQJBFcJKLCbdSgD81058052 = -450752928;    int SrqmJQJBFcJKLCbdSgD24449577 = -248227502;    int SrqmJQJBFcJKLCbdSgD83751138 = -705015566;    int SrqmJQJBFcJKLCbdSgD55065789 = -437046915;    int SrqmJQJBFcJKLCbdSgD44543865 = -166226419;    int SrqmJQJBFcJKLCbdSgD93976949 = -202691916;    int SrqmJQJBFcJKLCbdSgD34533281 = -359908383;    int SrqmJQJBFcJKLCbdSgD40760437 = 65310628;    int SrqmJQJBFcJKLCbdSgD15733723 = 40123833;    int SrqmJQJBFcJKLCbdSgD15751246 = -88727413;    int SrqmJQJBFcJKLCbdSgD62228304 = -160286054;    int SrqmJQJBFcJKLCbdSgD44414433 = -516474756;    int SrqmJQJBFcJKLCbdSgD47106771 = -873285723;    int SrqmJQJBFcJKLCbdSgD79910836 = -6150435;    int SrqmJQJBFcJKLCbdSgD15920582 = -662665410;    int SrqmJQJBFcJKLCbdSgD3542782 = 60779746;    int SrqmJQJBFcJKLCbdSgD96665676 = -110727750;    int SrqmJQJBFcJKLCbdSgD72403483 = -64016974;    int SrqmJQJBFcJKLCbdSgD22165769 = -168041626;    int SrqmJQJBFcJKLCbdSgD50562932 = -711234182;    int SrqmJQJBFcJKLCbdSgD35167717 = 89720101;    int SrqmJQJBFcJKLCbdSgD63482831 = -890737077;    int SrqmJQJBFcJKLCbdSgD75917432 = -310570868;    int SrqmJQJBFcJKLCbdSgD73850710 = -179162284;    int SrqmJQJBFcJKLCbdSgD62844769 = -13725409;    int SrqmJQJBFcJKLCbdSgD24620893 = -963020900;    int SrqmJQJBFcJKLCbdSgD46418903 = -631827949;    int SrqmJQJBFcJKLCbdSgD16696392 = 56922231;    int SrqmJQJBFcJKLCbdSgD89985357 = -624536783;    int SrqmJQJBFcJKLCbdSgD15770559 = -530445669;    int SrqmJQJBFcJKLCbdSgD35986065 = -984613805;    int SrqmJQJBFcJKLCbdSgD32189816 = -791489370;    int SrqmJQJBFcJKLCbdSgD33372276 = -857018057;    int SrqmJQJBFcJKLCbdSgD80085024 = -417553600;    int SrqmJQJBFcJKLCbdSgD11432224 = -428665411;    int SrqmJQJBFcJKLCbdSgD87395700 = -769954396;    int SrqmJQJBFcJKLCbdSgD55040736 = -732625676;    int SrqmJQJBFcJKLCbdSgD77708255 = -56019555;    int SrqmJQJBFcJKLCbdSgD48121308 = -11230728;    int SrqmJQJBFcJKLCbdSgD17795398 = -429671654;    int SrqmJQJBFcJKLCbdSgD12856532 = 48559555;    int SrqmJQJBFcJKLCbdSgD42272026 = -624607364;    int SrqmJQJBFcJKLCbdSgD22245242 = -927923034;    int SrqmJQJBFcJKLCbdSgD71342127 = -763462506;    int SrqmJQJBFcJKLCbdSgD75469762 = -807286920;    int SrqmJQJBFcJKLCbdSgD60973709 = 43973861;    int SrqmJQJBFcJKLCbdSgD35364701 = -630170884;    int SrqmJQJBFcJKLCbdSgD95295379 = 46510013;    int SrqmJQJBFcJKLCbdSgD79702435 = 72847103;    int SrqmJQJBFcJKLCbdSgD24299644 = -188168881;    int SrqmJQJBFcJKLCbdSgD91439974 = -844056178;    int SrqmJQJBFcJKLCbdSgD82472322 = -929516624;    int SrqmJQJBFcJKLCbdSgD1216792 = -486855520;    int SrqmJQJBFcJKLCbdSgD32263113 = -281419411;    int SrqmJQJBFcJKLCbdSgD75738653 = -489976078;    int SrqmJQJBFcJKLCbdSgD17575221 = -560015852;    int SrqmJQJBFcJKLCbdSgD48532145 = -937656635;    int SrqmJQJBFcJKLCbdSgD9900428 = -425853283;    int SrqmJQJBFcJKLCbdSgD92221020 = -323321507;    int SrqmJQJBFcJKLCbdSgD19922973 = -203205520;    int SrqmJQJBFcJKLCbdSgD47558046 = -570863967;    int SrqmJQJBFcJKLCbdSgD17836889 = -316830615;    int SrqmJQJBFcJKLCbdSgD50775080 = -310152589;    int SrqmJQJBFcJKLCbdSgD99963164 = -429430498;    int SrqmJQJBFcJKLCbdSgD79765181 = -104113609;    int SrqmJQJBFcJKLCbdSgD30038488 = -368796684;    int SrqmJQJBFcJKLCbdSgD11042157 = -659456700;    int SrqmJQJBFcJKLCbdSgD67021747 = -355732123;    int SrqmJQJBFcJKLCbdSgD68478613 = -577485024;    int SrqmJQJBFcJKLCbdSgD28524882 = -892711014;    int SrqmJQJBFcJKLCbdSgD48502045 = -206594578;    int SrqmJQJBFcJKLCbdSgD18957421 = 45291804;    int SrqmJQJBFcJKLCbdSgD24282175 = 47213753;    int SrqmJQJBFcJKLCbdSgD4370372 = -738369972;    int SrqmJQJBFcJKLCbdSgD37706400 = -659793738;    int SrqmJQJBFcJKLCbdSgD92895690 = -285672536;    int SrqmJQJBFcJKLCbdSgD41237590 = -962814043;    int SrqmJQJBFcJKLCbdSgD4575305 = -547108363;    int SrqmJQJBFcJKLCbdSgD98380947 = -371875364;    int SrqmJQJBFcJKLCbdSgD1871061 = 42300730;    int SrqmJQJBFcJKLCbdSgD89256191 = -232850016;    int SrqmJQJBFcJKLCbdSgD51123523 = -578337963;    int SrqmJQJBFcJKLCbdSgD36993957 = 84075127;    int SrqmJQJBFcJKLCbdSgD65685714 = -336367903;    int SrqmJQJBFcJKLCbdSgD24330585 = -686389492;    int SrqmJQJBFcJKLCbdSgD53513743 = 44902819;    int SrqmJQJBFcJKLCbdSgD30973024 = -204633851;    int SrqmJQJBFcJKLCbdSgD1109164 = -475598646;    int SrqmJQJBFcJKLCbdSgD4346372 = -927577522;    int SrqmJQJBFcJKLCbdSgD93857002 = -868649560;    int SrqmJQJBFcJKLCbdSgD38863555 = -832297762;    int SrqmJQJBFcJKLCbdSgD45140309 = -206772394;    int SrqmJQJBFcJKLCbdSgD85487234 = -732698049;    int SrqmJQJBFcJKLCbdSgD28198336 = -808025208;    int SrqmJQJBFcJKLCbdSgD70237351 = -858807687;    int SrqmJQJBFcJKLCbdSgD95019643 = 6466402;     SrqmJQJBFcJKLCbdSgD54875805 = SrqmJQJBFcJKLCbdSgD23382561;     SrqmJQJBFcJKLCbdSgD23382561 = SrqmJQJBFcJKLCbdSgD82826045;     SrqmJQJBFcJKLCbdSgD82826045 = SrqmJQJBFcJKLCbdSgD10906370;     SrqmJQJBFcJKLCbdSgD10906370 = SrqmJQJBFcJKLCbdSgD81058052;     SrqmJQJBFcJKLCbdSgD81058052 = SrqmJQJBFcJKLCbdSgD24449577;     SrqmJQJBFcJKLCbdSgD24449577 = SrqmJQJBFcJKLCbdSgD83751138;     SrqmJQJBFcJKLCbdSgD83751138 = SrqmJQJBFcJKLCbdSgD55065789;     SrqmJQJBFcJKLCbdSgD55065789 = SrqmJQJBFcJKLCbdSgD44543865;     SrqmJQJBFcJKLCbdSgD44543865 = SrqmJQJBFcJKLCbdSgD93976949;     SrqmJQJBFcJKLCbdSgD93976949 = SrqmJQJBFcJKLCbdSgD34533281;     SrqmJQJBFcJKLCbdSgD34533281 = SrqmJQJBFcJKLCbdSgD40760437;     SrqmJQJBFcJKLCbdSgD40760437 = SrqmJQJBFcJKLCbdSgD15733723;     SrqmJQJBFcJKLCbdSgD15733723 = SrqmJQJBFcJKLCbdSgD15751246;     SrqmJQJBFcJKLCbdSgD15751246 = SrqmJQJBFcJKLCbdSgD62228304;     SrqmJQJBFcJKLCbdSgD62228304 = SrqmJQJBFcJKLCbdSgD44414433;     SrqmJQJBFcJKLCbdSgD44414433 = SrqmJQJBFcJKLCbdSgD47106771;     SrqmJQJBFcJKLCbdSgD47106771 = SrqmJQJBFcJKLCbdSgD79910836;     SrqmJQJBFcJKLCbdSgD79910836 = SrqmJQJBFcJKLCbdSgD15920582;     SrqmJQJBFcJKLCbdSgD15920582 = SrqmJQJBFcJKLCbdSgD3542782;     SrqmJQJBFcJKLCbdSgD3542782 = SrqmJQJBFcJKLCbdSgD96665676;     SrqmJQJBFcJKLCbdSgD96665676 = SrqmJQJBFcJKLCbdSgD72403483;     SrqmJQJBFcJKLCbdSgD72403483 = SrqmJQJBFcJKLCbdSgD22165769;     SrqmJQJBFcJKLCbdSgD22165769 = SrqmJQJBFcJKLCbdSgD50562932;     SrqmJQJBFcJKLCbdSgD50562932 = SrqmJQJBFcJKLCbdSgD35167717;     SrqmJQJBFcJKLCbdSgD35167717 = SrqmJQJBFcJKLCbdSgD63482831;     SrqmJQJBFcJKLCbdSgD63482831 = SrqmJQJBFcJKLCbdSgD75917432;     SrqmJQJBFcJKLCbdSgD75917432 = SrqmJQJBFcJKLCbdSgD73850710;     SrqmJQJBFcJKLCbdSgD73850710 = SrqmJQJBFcJKLCbdSgD62844769;     SrqmJQJBFcJKLCbdSgD62844769 = SrqmJQJBFcJKLCbdSgD24620893;     SrqmJQJBFcJKLCbdSgD24620893 = SrqmJQJBFcJKLCbdSgD46418903;     SrqmJQJBFcJKLCbdSgD46418903 = SrqmJQJBFcJKLCbdSgD16696392;     SrqmJQJBFcJKLCbdSgD16696392 = SrqmJQJBFcJKLCbdSgD89985357;     SrqmJQJBFcJKLCbdSgD89985357 = SrqmJQJBFcJKLCbdSgD15770559;     SrqmJQJBFcJKLCbdSgD15770559 = SrqmJQJBFcJKLCbdSgD35986065;     SrqmJQJBFcJKLCbdSgD35986065 = SrqmJQJBFcJKLCbdSgD32189816;     SrqmJQJBFcJKLCbdSgD32189816 = SrqmJQJBFcJKLCbdSgD33372276;     SrqmJQJBFcJKLCbdSgD33372276 = SrqmJQJBFcJKLCbdSgD80085024;     SrqmJQJBFcJKLCbdSgD80085024 = SrqmJQJBFcJKLCbdSgD11432224;     SrqmJQJBFcJKLCbdSgD11432224 = SrqmJQJBFcJKLCbdSgD87395700;     SrqmJQJBFcJKLCbdSgD87395700 = SrqmJQJBFcJKLCbdSgD55040736;     SrqmJQJBFcJKLCbdSgD55040736 = SrqmJQJBFcJKLCbdSgD77708255;     SrqmJQJBFcJKLCbdSgD77708255 = SrqmJQJBFcJKLCbdSgD48121308;     SrqmJQJBFcJKLCbdSgD48121308 = SrqmJQJBFcJKLCbdSgD17795398;     SrqmJQJBFcJKLCbdSgD17795398 = SrqmJQJBFcJKLCbdSgD12856532;     SrqmJQJBFcJKLCbdSgD12856532 = SrqmJQJBFcJKLCbdSgD42272026;     SrqmJQJBFcJKLCbdSgD42272026 = SrqmJQJBFcJKLCbdSgD22245242;     SrqmJQJBFcJKLCbdSgD22245242 = SrqmJQJBFcJKLCbdSgD71342127;     SrqmJQJBFcJKLCbdSgD71342127 = SrqmJQJBFcJKLCbdSgD75469762;     SrqmJQJBFcJKLCbdSgD75469762 = SrqmJQJBFcJKLCbdSgD60973709;     SrqmJQJBFcJKLCbdSgD60973709 = SrqmJQJBFcJKLCbdSgD35364701;     SrqmJQJBFcJKLCbdSgD35364701 = SrqmJQJBFcJKLCbdSgD95295379;     SrqmJQJBFcJKLCbdSgD95295379 = SrqmJQJBFcJKLCbdSgD79702435;     SrqmJQJBFcJKLCbdSgD79702435 = SrqmJQJBFcJKLCbdSgD24299644;     SrqmJQJBFcJKLCbdSgD24299644 = SrqmJQJBFcJKLCbdSgD91439974;     SrqmJQJBFcJKLCbdSgD91439974 = SrqmJQJBFcJKLCbdSgD82472322;     SrqmJQJBFcJKLCbdSgD82472322 = SrqmJQJBFcJKLCbdSgD1216792;     SrqmJQJBFcJKLCbdSgD1216792 = SrqmJQJBFcJKLCbdSgD32263113;     SrqmJQJBFcJKLCbdSgD32263113 = SrqmJQJBFcJKLCbdSgD75738653;     SrqmJQJBFcJKLCbdSgD75738653 = SrqmJQJBFcJKLCbdSgD17575221;     SrqmJQJBFcJKLCbdSgD17575221 = SrqmJQJBFcJKLCbdSgD48532145;     SrqmJQJBFcJKLCbdSgD48532145 = SrqmJQJBFcJKLCbdSgD9900428;     SrqmJQJBFcJKLCbdSgD9900428 = SrqmJQJBFcJKLCbdSgD92221020;     SrqmJQJBFcJKLCbdSgD92221020 = SrqmJQJBFcJKLCbdSgD19922973;     SrqmJQJBFcJKLCbdSgD19922973 = SrqmJQJBFcJKLCbdSgD47558046;     SrqmJQJBFcJKLCbdSgD47558046 = SrqmJQJBFcJKLCbdSgD17836889;     SrqmJQJBFcJKLCbdSgD17836889 = SrqmJQJBFcJKLCbdSgD50775080;     SrqmJQJBFcJKLCbdSgD50775080 = SrqmJQJBFcJKLCbdSgD99963164;     SrqmJQJBFcJKLCbdSgD99963164 = SrqmJQJBFcJKLCbdSgD79765181;     SrqmJQJBFcJKLCbdSgD79765181 = SrqmJQJBFcJKLCbdSgD30038488;     SrqmJQJBFcJKLCbdSgD30038488 = SrqmJQJBFcJKLCbdSgD11042157;     SrqmJQJBFcJKLCbdSgD11042157 = SrqmJQJBFcJKLCbdSgD67021747;     SrqmJQJBFcJKLCbdSgD67021747 = SrqmJQJBFcJKLCbdSgD68478613;     SrqmJQJBFcJKLCbdSgD68478613 = SrqmJQJBFcJKLCbdSgD28524882;     SrqmJQJBFcJKLCbdSgD28524882 = SrqmJQJBFcJKLCbdSgD48502045;     SrqmJQJBFcJKLCbdSgD48502045 = SrqmJQJBFcJKLCbdSgD18957421;     SrqmJQJBFcJKLCbdSgD18957421 = SrqmJQJBFcJKLCbdSgD24282175;     SrqmJQJBFcJKLCbdSgD24282175 = SrqmJQJBFcJKLCbdSgD4370372;     SrqmJQJBFcJKLCbdSgD4370372 = SrqmJQJBFcJKLCbdSgD37706400;     SrqmJQJBFcJKLCbdSgD37706400 = SrqmJQJBFcJKLCbdSgD92895690;     SrqmJQJBFcJKLCbdSgD92895690 = SrqmJQJBFcJKLCbdSgD41237590;     SrqmJQJBFcJKLCbdSgD41237590 = SrqmJQJBFcJKLCbdSgD4575305;     SrqmJQJBFcJKLCbdSgD4575305 = SrqmJQJBFcJKLCbdSgD98380947;     SrqmJQJBFcJKLCbdSgD98380947 = SrqmJQJBFcJKLCbdSgD1871061;     SrqmJQJBFcJKLCbdSgD1871061 = SrqmJQJBFcJKLCbdSgD89256191;     SrqmJQJBFcJKLCbdSgD89256191 = SrqmJQJBFcJKLCbdSgD51123523;     SrqmJQJBFcJKLCbdSgD51123523 = SrqmJQJBFcJKLCbdSgD36993957;     SrqmJQJBFcJKLCbdSgD36993957 = SrqmJQJBFcJKLCbdSgD65685714;     SrqmJQJBFcJKLCbdSgD65685714 = SrqmJQJBFcJKLCbdSgD24330585;     SrqmJQJBFcJKLCbdSgD24330585 = SrqmJQJBFcJKLCbdSgD53513743;     SrqmJQJBFcJKLCbdSgD53513743 = SrqmJQJBFcJKLCbdSgD30973024;     SrqmJQJBFcJKLCbdSgD30973024 = SrqmJQJBFcJKLCbdSgD1109164;     SrqmJQJBFcJKLCbdSgD1109164 = SrqmJQJBFcJKLCbdSgD4346372;     SrqmJQJBFcJKLCbdSgD4346372 = SrqmJQJBFcJKLCbdSgD93857002;     SrqmJQJBFcJKLCbdSgD93857002 = SrqmJQJBFcJKLCbdSgD38863555;     SrqmJQJBFcJKLCbdSgD38863555 = SrqmJQJBFcJKLCbdSgD45140309;     SrqmJQJBFcJKLCbdSgD45140309 = SrqmJQJBFcJKLCbdSgD85487234;     SrqmJQJBFcJKLCbdSgD85487234 = SrqmJQJBFcJKLCbdSgD28198336;     SrqmJQJBFcJKLCbdSgD28198336 = SrqmJQJBFcJKLCbdSgD70237351;     SrqmJQJBFcJKLCbdSgD70237351 = SrqmJQJBFcJKLCbdSgD95019643;     SrqmJQJBFcJKLCbdSgD95019643 = SrqmJQJBFcJKLCbdSgD54875805;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ZERsZVQCszmvBwKrlhk94434197() {     int PaUmAaADhWbJZXjyXou9530203 = -431061182;    int PaUmAaADhWbJZXjyXou70380180 = -234461959;    int PaUmAaADhWbJZXjyXou43558691 = -378038206;    int PaUmAaADhWbJZXjyXou82341311 = -506358388;    int PaUmAaADhWbJZXjyXou55509723 = -123188168;    int PaUmAaADhWbJZXjyXou38623974 = -377378338;    int PaUmAaADhWbJZXjyXou4851842 = 93091761;    int PaUmAaADhWbJZXjyXou84240893 = -937615148;    int PaUmAaADhWbJZXjyXou32318275 = -213079790;    int PaUmAaADhWbJZXjyXou76608934 = -481493185;    int PaUmAaADhWbJZXjyXou13144577 = -985264956;    int PaUmAaADhWbJZXjyXou3525151 = -121113461;    int PaUmAaADhWbJZXjyXou79551037 = -863416471;    int PaUmAaADhWbJZXjyXou8717677 = -800830991;    int PaUmAaADhWbJZXjyXou92452377 = -67407685;    int PaUmAaADhWbJZXjyXou34181969 = -146634320;    int PaUmAaADhWbJZXjyXou46938535 = -246885551;    int PaUmAaADhWbJZXjyXou47507424 = -69714902;    int PaUmAaADhWbJZXjyXou17141183 = -948476957;    int PaUmAaADhWbJZXjyXou21177337 = -284586401;    int PaUmAaADhWbJZXjyXou30840064 = -678810901;    int PaUmAaADhWbJZXjyXou23656072 = -230461082;    int PaUmAaADhWbJZXjyXou58635600 = -754785047;    int PaUmAaADhWbJZXjyXou51991301 = -410274998;    int PaUmAaADhWbJZXjyXou30920333 = -283193351;    int PaUmAaADhWbJZXjyXou4723779 = -894445862;    int PaUmAaADhWbJZXjyXou77907356 = -865415147;    int PaUmAaADhWbJZXjyXou27099711 = -187214144;    int PaUmAaADhWbJZXjyXou2742446 = -393970284;    int PaUmAaADhWbJZXjyXou19056302 = -153778868;    int PaUmAaADhWbJZXjyXou98124432 = -80700475;    int PaUmAaADhWbJZXjyXou47688003 = -354574298;    int PaUmAaADhWbJZXjyXou57641234 = -81054398;    int PaUmAaADhWbJZXjyXou10426452 = -210566479;    int PaUmAaADhWbJZXjyXou70490222 = -102477064;    int PaUmAaADhWbJZXjyXou19516358 = 60515033;    int PaUmAaADhWbJZXjyXou8076764 = -707444677;    int PaUmAaADhWbJZXjyXou93062263 = -291482621;    int PaUmAaADhWbJZXjyXou62201872 = -810614013;    int PaUmAaADhWbJZXjyXou11382095 = -428262995;    int PaUmAaADhWbJZXjyXou11000137 = -845175835;    int PaUmAaADhWbJZXjyXou14382914 = -663551642;    int PaUmAaADhWbJZXjyXou39121491 = -951736046;    int PaUmAaADhWbJZXjyXou26789797 = 96648680;    int PaUmAaADhWbJZXjyXou72840595 = -83958043;    int PaUmAaADhWbJZXjyXou97605627 = -693396978;    int PaUmAaADhWbJZXjyXou38718954 = -954980418;    int PaUmAaADhWbJZXjyXou94769436 = -741114878;    int PaUmAaADhWbJZXjyXou17812530 = -707017109;    int PaUmAaADhWbJZXjyXou5815372 = -196045434;    int PaUmAaADhWbJZXjyXou10478241 = -287386386;    int PaUmAaADhWbJZXjyXou84677529 = -468555970;    int PaUmAaADhWbJZXjyXou11430438 = -767068354;    int PaUmAaADhWbJZXjyXou81715400 = -84055365;    int PaUmAaADhWbJZXjyXou63594133 = -139964859;    int PaUmAaADhWbJZXjyXou85874130 = -100600100;    int PaUmAaADhWbJZXjyXou11744580 = -479676913;    int PaUmAaADhWbJZXjyXou91567390 = -967763208;    int PaUmAaADhWbJZXjyXou51420979 = -123165037;    int PaUmAaADhWbJZXjyXou50785945 = -228742306;    int PaUmAaADhWbJZXjyXou60716618 = -511963192;    int PaUmAaADhWbJZXjyXou77752131 = -719694095;    int PaUmAaADhWbJZXjyXou81498447 = -443644864;    int PaUmAaADhWbJZXjyXou13261974 = 40699078;    int PaUmAaADhWbJZXjyXou78484502 = -300792711;    int PaUmAaADhWbJZXjyXou65456574 = -530690659;    int PaUmAaADhWbJZXjyXou45883917 = 59940936;    int PaUmAaADhWbJZXjyXou69124586 = -552849993;    int PaUmAaADhWbJZXjyXou38227455 = -598353928;    int PaUmAaADhWbJZXjyXou72936019 = -27922719;    int PaUmAaADhWbJZXjyXou26105205 = -439189643;    int PaUmAaADhWbJZXjyXou53876271 = -955402931;    int PaUmAaADhWbJZXjyXou85305551 = -259100890;    int PaUmAaADhWbJZXjyXou5759088 = -420213963;    int PaUmAaADhWbJZXjyXou10177200 = -439410567;    int PaUmAaADhWbJZXjyXou16457151 = 84740740;    int PaUmAaADhWbJZXjyXou84534581 = -278725037;    int PaUmAaADhWbJZXjyXou31845804 = -751433728;    int PaUmAaADhWbJZXjyXou79150705 = -226316956;    int PaUmAaADhWbJZXjyXou33314705 = -589796373;    int PaUmAaADhWbJZXjyXou66004825 = -939465444;    int PaUmAaADhWbJZXjyXou83137919 = -24300269;    int PaUmAaADhWbJZXjyXou9287182 = -480197036;    int PaUmAaADhWbJZXjyXou96927074 = -97924851;    int PaUmAaADhWbJZXjyXou8578061 = -866392483;    int PaUmAaADhWbJZXjyXou13446903 = -612144506;    int PaUmAaADhWbJZXjyXou36257565 = -587505944;    int PaUmAaADhWbJZXjyXou75925833 = -996999033;    int PaUmAaADhWbJZXjyXou46832318 = 29398380;    int PaUmAaADhWbJZXjyXou84616091 = 98123036;    int PaUmAaADhWbJZXjyXou7771779 = -459808054;    int PaUmAaADhWbJZXjyXou16509374 = -739681469;    int PaUmAaADhWbJZXjyXou41641285 = -68317584;    int PaUmAaADhWbJZXjyXou11415928 = -481871707;    int PaUmAaADhWbJZXjyXou50665477 = -916299804;    int PaUmAaADhWbJZXjyXou33248006 = -25481740;    int PaUmAaADhWbJZXjyXou32884466 = -119906778;    int PaUmAaADhWbJZXjyXou25859517 = -892435124;    int PaUmAaADhWbJZXjyXou48305294 = -602558609;    int PaUmAaADhWbJZXjyXou7384022 = -431061182;     PaUmAaADhWbJZXjyXou9530203 = PaUmAaADhWbJZXjyXou70380180;     PaUmAaADhWbJZXjyXou70380180 = PaUmAaADhWbJZXjyXou43558691;     PaUmAaADhWbJZXjyXou43558691 = PaUmAaADhWbJZXjyXou82341311;     PaUmAaADhWbJZXjyXou82341311 = PaUmAaADhWbJZXjyXou55509723;     PaUmAaADhWbJZXjyXou55509723 = PaUmAaADhWbJZXjyXou38623974;     PaUmAaADhWbJZXjyXou38623974 = PaUmAaADhWbJZXjyXou4851842;     PaUmAaADhWbJZXjyXou4851842 = PaUmAaADhWbJZXjyXou84240893;     PaUmAaADhWbJZXjyXou84240893 = PaUmAaADhWbJZXjyXou32318275;     PaUmAaADhWbJZXjyXou32318275 = PaUmAaADhWbJZXjyXou76608934;     PaUmAaADhWbJZXjyXou76608934 = PaUmAaADhWbJZXjyXou13144577;     PaUmAaADhWbJZXjyXou13144577 = PaUmAaADhWbJZXjyXou3525151;     PaUmAaADhWbJZXjyXou3525151 = PaUmAaADhWbJZXjyXou79551037;     PaUmAaADhWbJZXjyXou79551037 = PaUmAaADhWbJZXjyXou8717677;     PaUmAaADhWbJZXjyXou8717677 = PaUmAaADhWbJZXjyXou92452377;     PaUmAaADhWbJZXjyXou92452377 = PaUmAaADhWbJZXjyXou34181969;     PaUmAaADhWbJZXjyXou34181969 = PaUmAaADhWbJZXjyXou46938535;     PaUmAaADhWbJZXjyXou46938535 = PaUmAaADhWbJZXjyXou47507424;     PaUmAaADhWbJZXjyXou47507424 = PaUmAaADhWbJZXjyXou17141183;     PaUmAaADhWbJZXjyXou17141183 = PaUmAaADhWbJZXjyXou21177337;     PaUmAaADhWbJZXjyXou21177337 = PaUmAaADhWbJZXjyXou30840064;     PaUmAaADhWbJZXjyXou30840064 = PaUmAaADhWbJZXjyXou23656072;     PaUmAaADhWbJZXjyXou23656072 = PaUmAaADhWbJZXjyXou58635600;     PaUmAaADhWbJZXjyXou58635600 = PaUmAaADhWbJZXjyXou51991301;     PaUmAaADhWbJZXjyXou51991301 = PaUmAaADhWbJZXjyXou30920333;     PaUmAaADhWbJZXjyXou30920333 = PaUmAaADhWbJZXjyXou4723779;     PaUmAaADhWbJZXjyXou4723779 = PaUmAaADhWbJZXjyXou77907356;     PaUmAaADhWbJZXjyXou77907356 = PaUmAaADhWbJZXjyXou27099711;     PaUmAaADhWbJZXjyXou27099711 = PaUmAaADhWbJZXjyXou2742446;     PaUmAaADhWbJZXjyXou2742446 = PaUmAaADhWbJZXjyXou19056302;     PaUmAaADhWbJZXjyXou19056302 = PaUmAaADhWbJZXjyXou98124432;     PaUmAaADhWbJZXjyXou98124432 = PaUmAaADhWbJZXjyXou47688003;     PaUmAaADhWbJZXjyXou47688003 = PaUmAaADhWbJZXjyXou57641234;     PaUmAaADhWbJZXjyXou57641234 = PaUmAaADhWbJZXjyXou10426452;     PaUmAaADhWbJZXjyXou10426452 = PaUmAaADhWbJZXjyXou70490222;     PaUmAaADhWbJZXjyXou70490222 = PaUmAaADhWbJZXjyXou19516358;     PaUmAaADhWbJZXjyXou19516358 = PaUmAaADhWbJZXjyXou8076764;     PaUmAaADhWbJZXjyXou8076764 = PaUmAaADhWbJZXjyXou93062263;     PaUmAaADhWbJZXjyXou93062263 = PaUmAaADhWbJZXjyXou62201872;     PaUmAaADhWbJZXjyXou62201872 = PaUmAaADhWbJZXjyXou11382095;     PaUmAaADhWbJZXjyXou11382095 = PaUmAaADhWbJZXjyXou11000137;     PaUmAaADhWbJZXjyXou11000137 = PaUmAaADhWbJZXjyXou14382914;     PaUmAaADhWbJZXjyXou14382914 = PaUmAaADhWbJZXjyXou39121491;     PaUmAaADhWbJZXjyXou39121491 = PaUmAaADhWbJZXjyXou26789797;     PaUmAaADhWbJZXjyXou26789797 = PaUmAaADhWbJZXjyXou72840595;     PaUmAaADhWbJZXjyXou72840595 = PaUmAaADhWbJZXjyXou97605627;     PaUmAaADhWbJZXjyXou97605627 = PaUmAaADhWbJZXjyXou38718954;     PaUmAaADhWbJZXjyXou38718954 = PaUmAaADhWbJZXjyXou94769436;     PaUmAaADhWbJZXjyXou94769436 = PaUmAaADhWbJZXjyXou17812530;     PaUmAaADhWbJZXjyXou17812530 = PaUmAaADhWbJZXjyXou5815372;     PaUmAaADhWbJZXjyXou5815372 = PaUmAaADhWbJZXjyXou10478241;     PaUmAaADhWbJZXjyXou10478241 = PaUmAaADhWbJZXjyXou84677529;     PaUmAaADhWbJZXjyXou84677529 = PaUmAaADhWbJZXjyXou11430438;     PaUmAaADhWbJZXjyXou11430438 = PaUmAaADhWbJZXjyXou81715400;     PaUmAaADhWbJZXjyXou81715400 = PaUmAaADhWbJZXjyXou63594133;     PaUmAaADhWbJZXjyXou63594133 = PaUmAaADhWbJZXjyXou85874130;     PaUmAaADhWbJZXjyXou85874130 = PaUmAaADhWbJZXjyXou11744580;     PaUmAaADhWbJZXjyXou11744580 = PaUmAaADhWbJZXjyXou91567390;     PaUmAaADhWbJZXjyXou91567390 = PaUmAaADhWbJZXjyXou51420979;     PaUmAaADhWbJZXjyXou51420979 = PaUmAaADhWbJZXjyXou50785945;     PaUmAaADhWbJZXjyXou50785945 = PaUmAaADhWbJZXjyXou60716618;     PaUmAaADhWbJZXjyXou60716618 = PaUmAaADhWbJZXjyXou77752131;     PaUmAaADhWbJZXjyXou77752131 = PaUmAaADhWbJZXjyXou81498447;     PaUmAaADhWbJZXjyXou81498447 = PaUmAaADhWbJZXjyXou13261974;     PaUmAaADhWbJZXjyXou13261974 = PaUmAaADhWbJZXjyXou78484502;     PaUmAaADhWbJZXjyXou78484502 = PaUmAaADhWbJZXjyXou65456574;     PaUmAaADhWbJZXjyXou65456574 = PaUmAaADhWbJZXjyXou45883917;     PaUmAaADhWbJZXjyXou45883917 = PaUmAaADhWbJZXjyXou69124586;     PaUmAaADhWbJZXjyXou69124586 = PaUmAaADhWbJZXjyXou38227455;     PaUmAaADhWbJZXjyXou38227455 = PaUmAaADhWbJZXjyXou72936019;     PaUmAaADhWbJZXjyXou72936019 = PaUmAaADhWbJZXjyXou26105205;     PaUmAaADhWbJZXjyXou26105205 = PaUmAaADhWbJZXjyXou53876271;     PaUmAaADhWbJZXjyXou53876271 = PaUmAaADhWbJZXjyXou85305551;     PaUmAaADhWbJZXjyXou85305551 = PaUmAaADhWbJZXjyXou5759088;     PaUmAaADhWbJZXjyXou5759088 = PaUmAaADhWbJZXjyXou10177200;     PaUmAaADhWbJZXjyXou10177200 = PaUmAaADhWbJZXjyXou16457151;     PaUmAaADhWbJZXjyXou16457151 = PaUmAaADhWbJZXjyXou84534581;     PaUmAaADhWbJZXjyXou84534581 = PaUmAaADhWbJZXjyXou31845804;     PaUmAaADhWbJZXjyXou31845804 = PaUmAaADhWbJZXjyXou79150705;     PaUmAaADhWbJZXjyXou79150705 = PaUmAaADhWbJZXjyXou33314705;     PaUmAaADhWbJZXjyXou33314705 = PaUmAaADhWbJZXjyXou66004825;     PaUmAaADhWbJZXjyXou66004825 = PaUmAaADhWbJZXjyXou83137919;     PaUmAaADhWbJZXjyXou83137919 = PaUmAaADhWbJZXjyXou9287182;     PaUmAaADhWbJZXjyXou9287182 = PaUmAaADhWbJZXjyXou96927074;     PaUmAaADhWbJZXjyXou96927074 = PaUmAaADhWbJZXjyXou8578061;     PaUmAaADhWbJZXjyXou8578061 = PaUmAaADhWbJZXjyXou13446903;     PaUmAaADhWbJZXjyXou13446903 = PaUmAaADhWbJZXjyXou36257565;     PaUmAaADhWbJZXjyXou36257565 = PaUmAaADhWbJZXjyXou75925833;     PaUmAaADhWbJZXjyXou75925833 = PaUmAaADhWbJZXjyXou46832318;     PaUmAaADhWbJZXjyXou46832318 = PaUmAaADhWbJZXjyXou84616091;     PaUmAaADhWbJZXjyXou84616091 = PaUmAaADhWbJZXjyXou7771779;     PaUmAaADhWbJZXjyXou7771779 = PaUmAaADhWbJZXjyXou16509374;     PaUmAaADhWbJZXjyXou16509374 = PaUmAaADhWbJZXjyXou41641285;     PaUmAaADhWbJZXjyXou41641285 = PaUmAaADhWbJZXjyXou11415928;     PaUmAaADhWbJZXjyXou11415928 = PaUmAaADhWbJZXjyXou50665477;     PaUmAaADhWbJZXjyXou50665477 = PaUmAaADhWbJZXjyXou33248006;     PaUmAaADhWbJZXjyXou33248006 = PaUmAaADhWbJZXjyXou32884466;     PaUmAaADhWbJZXjyXou32884466 = PaUmAaADhWbJZXjyXou25859517;     PaUmAaADhWbJZXjyXou25859517 = PaUmAaADhWbJZXjyXou48305294;     PaUmAaADhWbJZXjyXou48305294 = PaUmAaADhWbJZXjyXou7384022;     PaUmAaADhWbJZXjyXou7384022 = PaUmAaADhWbJZXjyXou9530203;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void uRbRxqiWyqXgfoGNYwk762745() {     int GUsBwgTQVCtQdTzSNsU64184600 = -868588766;    int GUsBwgTQVCtQdTzSNsU17377799 = -814026773;    int GUsBwgTQVCtQdTzSNsU4291338 = -763422820;    int GUsBwgTQVCtQdTzSNsU53776252 = -512460799;    int GUsBwgTQVCtQdTzSNsU29961394 = -895623407;    int GUsBwgTQVCtQdTzSNsU52798371 = -506529174;    int GUsBwgTQVCtQdTzSNsU25952546 = -208800911;    int GUsBwgTQVCtQdTzSNsU13415997 = -338183380;    int GUsBwgTQVCtQdTzSNsU20092686 = -259933160;    int GUsBwgTQVCtQdTzSNsU59240920 = -760294455;    int GUsBwgTQVCtQdTzSNsU91755871 = -510621528;    int GUsBwgTQVCtQdTzSNsU66289864 = -307537550;    int GUsBwgTQVCtQdTzSNsU43368353 = -666956776;    int GUsBwgTQVCtQdTzSNsU1684108 = -412934569;    int GUsBwgTQVCtQdTzSNsU22676451 = 25470683;    int GUsBwgTQVCtQdTzSNsU23949505 = -876793884;    int GUsBwgTQVCtQdTzSNsU46770298 = -720485380;    int GUsBwgTQVCtQdTzSNsU15104011 = -133279370;    int GUsBwgTQVCtQdTzSNsU18361784 = -134288505;    int GUsBwgTQVCtQdTzSNsU38811892 = -629952547;    int GUsBwgTQVCtQdTzSNsU65014451 = -146894052;    int GUsBwgTQVCtQdTzSNsU74908661 = -396905190;    int GUsBwgTQVCtQdTzSNsU95105431 = -241528468;    int GUsBwgTQVCtQdTzSNsU53419670 = -109315815;    int GUsBwgTQVCtQdTzSNsU26672949 = -656106803;    int GUsBwgTQVCtQdTzSNsU45964726 = -898154646;    int GUsBwgTQVCtQdTzSNsU79897280 = -320259425;    int GUsBwgTQVCtQdTzSNsU80348710 = -195266005;    int GUsBwgTQVCtQdTzSNsU42640123 = -774215159;    int GUsBwgTQVCtQdTzSNsU13491711 = -444536836;    int GUsBwgTQVCtQdTzSNsU49829961 = -629573001;    int GUsBwgTQVCtQdTzSNsU78679613 = -766070826;    int GUsBwgTQVCtQdTzSNsU25297111 = -637572012;    int GUsBwgTQVCtQdTzSNsU5082345 = -990687289;    int GUsBwgTQVCtQdTzSNsU4994379 = -320340324;    int GUsBwgTQVCtQdTzSNsU6842901 = -187480564;    int GUsBwgTQVCtQdTzSNsU82781251 = -557871297;    int GUsBwgTQVCtQdTzSNsU6039503 = -165411642;    int GUsBwgTQVCtQdTzSNsU12971522 = -92562615;    int GUsBwgTQVCtQdTzSNsU35368490 = -86571594;    int GUsBwgTQVCtQdTzSNsU66959538 = -957725993;    int GUsBwgTQVCtQdTzSNsU51057572 = -171083729;    int GUsBwgTQVCtQdTzSNsU30121674 = -792241364;    int GUsBwgTQVCtQdTzSNsU35784196 = -477030985;    int GUsBwgTQVCtQdTzSNsU32824659 = -216475641;    int GUsBwgTQVCtQdTzSNsU52939229 = -762186593;    int GUsBwgTQVCtQdTzSNsU55192665 = -982037802;    int GUsBwgTQVCtQdTzSNsU18196746 = -718767250;    int GUsBwgTQVCtQdTzSNsU60155296 = -606747298;    int GUsBwgTQVCtQdTzSNsU50657034 = -436064728;    int GUsBwgTQVCtQdTzSNsU85591780 = 55398112;    int GUsBwgTQVCtQdTzSNsU74059679 = -983621953;    int GUsBwgTQVCtQdTzSNsU43158441 = -506983812;    int GUsBwgTQVCtQdTzSNsU39131158 = 20058150;    int GUsBwgTQVCtQdTzSNsU35748293 = -535873540;    int GUsBwgTQVCtQdTzSNsU89275939 = -371683576;    int GUsBwgTQVCtQdTzSNsU22272368 = -472498306;    int GUsBwgTQVCtQdTzSNsU50871668 = -554107005;    int GUsBwgTQVCtQdTzSNsU27103304 = -856353996;    int GUsBwgTQVCtQdTzSNsU83996668 = -997468761;    int GUsBwgTQVCtQdTzSNsU72901091 = -86269749;    int GUsBwgTQVCtQdTzSNsU45603835 = 86465093;    int GUsBwgTQVCtQdTzSNsU70775873 = -563968222;    int GUsBwgTQVCtQdTzSNsU6600976 = -815396325;    int GUsBwgTQVCtQdTzSNsU9410960 = -30721454;    int GUsBwgTQVCtQdTzSNsU13076259 = -744550703;    int GUsBwgTQVCtQdTzSNsU40992754 = -669965539;    int GUsBwgTQVCtQdTzSNsU38286009 = -676269487;    int GUsBwgTQVCtQdTzSNsU96689728 = 7405754;    int GUsBwgTQVCtQdTzSNsU15833551 = -787048754;    int GUsBwgTQVCtQdTzSNsU41168253 = -218922587;    int GUsBwgTQVCtQdTzSNsU40730796 = -455073738;    int GUsBwgTQVCtQdTzSNsU2132490 = 59283245;    int GUsBwgTQVCtQdTzSNsU82993293 = 52283089;    int GUsBwgTQVCtQdTzSNsU71852354 = -672226555;    int GUsBwgTQVCtQdTzSNsU13956880 = -975810324;    int GUsBwgTQVCtQdTzSNsU44786987 = -604663827;    int GUsBwgTQVCtQdTzSNsU59321236 = -764497483;    int GUsBwgTQVCtQdTzSNsU20595011 = -892840175;    int GUsBwgTQVCtQdTzSNsU73733719 = -893920210;    int GUsBwgTQVCtQdTzSNsU90772060 = -916116845;    int GUsBwgTQVCtQdTzSNsU61700535 = -601492176;    int GUsBwgTQVCtQdTzSNsU20193415 = -588518707;    int GUsBwgTQVCtQdTzSNsU91983089 = -238150432;    int GUsBwgTQVCtQdTzSNsU27899930 = -399934949;    int GUsBwgTQVCtQdTzSNsU75770281 = -645951048;    int GUsBwgTQVCtQdTzSNsU35521172 = -159087015;    int GUsBwgTQVCtQdTzSNsU86165952 = -557630162;    int GUsBwgTQVCtQdTzSNsU69334051 = -354813749;    int GUsBwgTQVCtQdTzSNsU15718440 = -948656748;    int GUsBwgTQVCtQdTzSNsU84570532 = -714982258;    int GUsBwgTQVCtQdTzSNsU31909584 = 96235707;    int GUsBwgTQVCtQdTzSNsU78936198 = -309057646;    int GUsBwgTQVCtQdTzSNsU28974853 = -95093854;    int GUsBwgTQVCtQdTzSNsU62467399 = 99698154;    int GUsBwgTQVCtQdTzSNsU21355703 = -944191087;    int GUsBwgTQVCtQdTzSNsU80281698 = -607115507;    int GUsBwgTQVCtQdTzSNsU23520699 = -976845039;    int GUsBwgTQVCtQdTzSNsU26373237 = -346309531;    int GUsBwgTQVCtQdTzSNsU19748401 = -868588766;     GUsBwgTQVCtQdTzSNsU64184600 = GUsBwgTQVCtQdTzSNsU17377799;     GUsBwgTQVCtQdTzSNsU17377799 = GUsBwgTQVCtQdTzSNsU4291338;     GUsBwgTQVCtQdTzSNsU4291338 = GUsBwgTQVCtQdTzSNsU53776252;     GUsBwgTQVCtQdTzSNsU53776252 = GUsBwgTQVCtQdTzSNsU29961394;     GUsBwgTQVCtQdTzSNsU29961394 = GUsBwgTQVCtQdTzSNsU52798371;     GUsBwgTQVCtQdTzSNsU52798371 = GUsBwgTQVCtQdTzSNsU25952546;     GUsBwgTQVCtQdTzSNsU25952546 = GUsBwgTQVCtQdTzSNsU13415997;     GUsBwgTQVCtQdTzSNsU13415997 = GUsBwgTQVCtQdTzSNsU20092686;     GUsBwgTQVCtQdTzSNsU20092686 = GUsBwgTQVCtQdTzSNsU59240920;     GUsBwgTQVCtQdTzSNsU59240920 = GUsBwgTQVCtQdTzSNsU91755871;     GUsBwgTQVCtQdTzSNsU91755871 = GUsBwgTQVCtQdTzSNsU66289864;     GUsBwgTQVCtQdTzSNsU66289864 = GUsBwgTQVCtQdTzSNsU43368353;     GUsBwgTQVCtQdTzSNsU43368353 = GUsBwgTQVCtQdTzSNsU1684108;     GUsBwgTQVCtQdTzSNsU1684108 = GUsBwgTQVCtQdTzSNsU22676451;     GUsBwgTQVCtQdTzSNsU22676451 = GUsBwgTQVCtQdTzSNsU23949505;     GUsBwgTQVCtQdTzSNsU23949505 = GUsBwgTQVCtQdTzSNsU46770298;     GUsBwgTQVCtQdTzSNsU46770298 = GUsBwgTQVCtQdTzSNsU15104011;     GUsBwgTQVCtQdTzSNsU15104011 = GUsBwgTQVCtQdTzSNsU18361784;     GUsBwgTQVCtQdTzSNsU18361784 = GUsBwgTQVCtQdTzSNsU38811892;     GUsBwgTQVCtQdTzSNsU38811892 = GUsBwgTQVCtQdTzSNsU65014451;     GUsBwgTQVCtQdTzSNsU65014451 = GUsBwgTQVCtQdTzSNsU74908661;     GUsBwgTQVCtQdTzSNsU74908661 = GUsBwgTQVCtQdTzSNsU95105431;     GUsBwgTQVCtQdTzSNsU95105431 = GUsBwgTQVCtQdTzSNsU53419670;     GUsBwgTQVCtQdTzSNsU53419670 = GUsBwgTQVCtQdTzSNsU26672949;     GUsBwgTQVCtQdTzSNsU26672949 = GUsBwgTQVCtQdTzSNsU45964726;     GUsBwgTQVCtQdTzSNsU45964726 = GUsBwgTQVCtQdTzSNsU79897280;     GUsBwgTQVCtQdTzSNsU79897280 = GUsBwgTQVCtQdTzSNsU80348710;     GUsBwgTQVCtQdTzSNsU80348710 = GUsBwgTQVCtQdTzSNsU42640123;     GUsBwgTQVCtQdTzSNsU42640123 = GUsBwgTQVCtQdTzSNsU13491711;     GUsBwgTQVCtQdTzSNsU13491711 = GUsBwgTQVCtQdTzSNsU49829961;     GUsBwgTQVCtQdTzSNsU49829961 = GUsBwgTQVCtQdTzSNsU78679613;     GUsBwgTQVCtQdTzSNsU78679613 = GUsBwgTQVCtQdTzSNsU25297111;     GUsBwgTQVCtQdTzSNsU25297111 = GUsBwgTQVCtQdTzSNsU5082345;     GUsBwgTQVCtQdTzSNsU5082345 = GUsBwgTQVCtQdTzSNsU4994379;     GUsBwgTQVCtQdTzSNsU4994379 = GUsBwgTQVCtQdTzSNsU6842901;     GUsBwgTQVCtQdTzSNsU6842901 = GUsBwgTQVCtQdTzSNsU82781251;     GUsBwgTQVCtQdTzSNsU82781251 = GUsBwgTQVCtQdTzSNsU6039503;     GUsBwgTQVCtQdTzSNsU6039503 = GUsBwgTQVCtQdTzSNsU12971522;     GUsBwgTQVCtQdTzSNsU12971522 = GUsBwgTQVCtQdTzSNsU35368490;     GUsBwgTQVCtQdTzSNsU35368490 = GUsBwgTQVCtQdTzSNsU66959538;     GUsBwgTQVCtQdTzSNsU66959538 = GUsBwgTQVCtQdTzSNsU51057572;     GUsBwgTQVCtQdTzSNsU51057572 = GUsBwgTQVCtQdTzSNsU30121674;     GUsBwgTQVCtQdTzSNsU30121674 = GUsBwgTQVCtQdTzSNsU35784196;     GUsBwgTQVCtQdTzSNsU35784196 = GUsBwgTQVCtQdTzSNsU32824659;     GUsBwgTQVCtQdTzSNsU32824659 = GUsBwgTQVCtQdTzSNsU52939229;     GUsBwgTQVCtQdTzSNsU52939229 = GUsBwgTQVCtQdTzSNsU55192665;     GUsBwgTQVCtQdTzSNsU55192665 = GUsBwgTQVCtQdTzSNsU18196746;     GUsBwgTQVCtQdTzSNsU18196746 = GUsBwgTQVCtQdTzSNsU60155296;     GUsBwgTQVCtQdTzSNsU60155296 = GUsBwgTQVCtQdTzSNsU50657034;     GUsBwgTQVCtQdTzSNsU50657034 = GUsBwgTQVCtQdTzSNsU85591780;     GUsBwgTQVCtQdTzSNsU85591780 = GUsBwgTQVCtQdTzSNsU74059679;     GUsBwgTQVCtQdTzSNsU74059679 = GUsBwgTQVCtQdTzSNsU43158441;     GUsBwgTQVCtQdTzSNsU43158441 = GUsBwgTQVCtQdTzSNsU39131158;     GUsBwgTQVCtQdTzSNsU39131158 = GUsBwgTQVCtQdTzSNsU35748293;     GUsBwgTQVCtQdTzSNsU35748293 = GUsBwgTQVCtQdTzSNsU89275939;     GUsBwgTQVCtQdTzSNsU89275939 = GUsBwgTQVCtQdTzSNsU22272368;     GUsBwgTQVCtQdTzSNsU22272368 = GUsBwgTQVCtQdTzSNsU50871668;     GUsBwgTQVCtQdTzSNsU50871668 = GUsBwgTQVCtQdTzSNsU27103304;     GUsBwgTQVCtQdTzSNsU27103304 = GUsBwgTQVCtQdTzSNsU83996668;     GUsBwgTQVCtQdTzSNsU83996668 = GUsBwgTQVCtQdTzSNsU72901091;     GUsBwgTQVCtQdTzSNsU72901091 = GUsBwgTQVCtQdTzSNsU45603835;     GUsBwgTQVCtQdTzSNsU45603835 = GUsBwgTQVCtQdTzSNsU70775873;     GUsBwgTQVCtQdTzSNsU70775873 = GUsBwgTQVCtQdTzSNsU6600976;     GUsBwgTQVCtQdTzSNsU6600976 = GUsBwgTQVCtQdTzSNsU9410960;     GUsBwgTQVCtQdTzSNsU9410960 = GUsBwgTQVCtQdTzSNsU13076259;     GUsBwgTQVCtQdTzSNsU13076259 = GUsBwgTQVCtQdTzSNsU40992754;     GUsBwgTQVCtQdTzSNsU40992754 = GUsBwgTQVCtQdTzSNsU38286009;     GUsBwgTQVCtQdTzSNsU38286009 = GUsBwgTQVCtQdTzSNsU96689728;     GUsBwgTQVCtQdTzSNsU96689728 = GUsBwgTQVCtQdTzSNsU15833551;     GUsBwgTQVCtQdTzSNsU15833551 = GUsBwgTQVCtQdTzSNsU41168253;     GUsBwgTQVCtQdTzSNsU41168253 = GUsBwgTQVCtQdTzSNsU40730796;     GUsBwgTQVCtQdTzSNsU40730796 = GUsBwgTQVCtQdTzSNsU2132490;     GUsBwgTQVCtQdTzSNsU2132490 = GUsBwgTQVCtQdTzSNsU82993293;     GUsBwgTQVCtQdTzSNsU82993293 = GUsBwgTQVCtQdTzSNsU71852354;     GUsBwgTQVCtQdTzSNsU71852354 = GUsBwgTQVCtQdTzSNsU13956880;     GUsBwgTQVCtQdTzSNsU13956880 = GUsBwgTQVCtQdTzSNsU44786987;     GUsBwgTQVCtQdTzSNsU44786987 = GUsBwgTQVCtQdTzSNsU59321236;     GUsBwgTQVCtQdTzSNsU59321236 = GUsBwgTQVCtQdTzSNsU20595011;     GUsBwgTQVCtQdTzSNsU20595011 = GUsBwgTQVCtQdTzSNsU73733719;     GUsBwgTQVCtQdTzSNsU73733719 = GUsBwgTQVCtQdTzSNsU90772060;     GUsBwgTQVCtQdTzSNsU90772060 = GUsBwgTQVCtQdTzSNsU61700535;     GUsBwgTQVCtQdTzSNsU61700535 = GUsBwgTQVCtQdTzSNsU20193415;     GUsBwgTQVCtQdTzSNsU20193415 = GUsBwgTQVCtQdTzSNsU91983089;     GUsBwgTQVCtQdTzSNsU91983089 = GUsBwgTQVCtQdTzSNsU27899930;     GUsBwgTQVCtQdTzSNsU27899930 = GUsBwgTQVCtQdTzSNsU75770281;     GUsBwgTQVCtQdTzSNsU75770281 = GUsBwgTQVCtQdTzSNsU35521172;     GUsBwgTQVCtQdTzSNsU35521172 = GUsBwgTQVCtQdTzSNsU86165952;     GUsBwgTQVCtQdTzSNsU86165952 = GUsBwgTQVCtQdTzSNsU69334051;     GUsBwgTQVCtQdTzSNsU69334051 = GUsBwgTQVCtQdTzSNsU15718440;     GUsBwgTQVCtQdTzSNsU15718440 = GUsBwgTQVCtQdTzSNsU84570532;     GUsBwgTQVCtQdTzSNsU84570532 = GUsBwgTQVCtQdTzSNsU31909584;     GUsBwgTQVCtQdTzSNsU31909584 = GUsBwgTQVCtQdTzSNsU78936198;     GUsBwgTQVCtQdTzSNsU78936198 = GUsBwgTQVCtQdTzSNsU28974853;     GUsBwgTQVCtQdTzSNsU28974853 = GUsBwgTQVCtQdTzSNsU62467399;     GUsBwgTQVCtQdTzSNsU62467399 = GUsBwgTQVCtQdTzSNsU21355703;     GUsBwgTQVCtQdTzSNsU21355703 = GUsBwgTQVCtQdTzSNsU80281698;     GUsBwgTQVCtQdTzSNsU80281698 = GUsBwgTQVCtQdTzSNsU23520699;     GUsBwgTQVCtQdTzSNsU23520699 = GUsBwgTQVCtQdTzSNsU26373237;     GUsBwgTQVCtQdTzSNsU26373237 = GUsBwgTQVCtQdTzSNsU19748401;     GUsBwgTQVCtQdTzSNsU19748401 = GUsBwgTQVCtQdTzSNsU64184600;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void oEeJpWnbUBDMNSSnSSq7091292() {     int wUKGtEiYlySxWuGzzmG18838998 = -206116350;    int wUKGtEiYlySxWuGzzmG64375418 = -293591587;    int wUKGtEiYlySxWuGzzmG65023984 = -48807433;    int wUKGtEiYlySxWuGzzmG25211194 = -518563210;    int wUKGtEiYlySxWuGzzmG4413065 = -568058646;    int wUKGtEiYlySxWuGzzmG66972768 = -635680010;    int wUKGtEiYlySxWuGzzmG47053249 = -510693583;    int wUKGtEiYlySxWuGzzmG42591100 = -838751613;    int wUKGtEiYlySxWuGzzmG7867097 = -306786531;    int wUKGtEiYlySxWuGzzmG41872905 = 60904276;    int wUKGtEiYlySxWuGzzmG70367166 = -35978100;    int wUKGtEiYlySxWuGzzmG29054577 = -493961639;    int wUKGtEiYlySxWuGzzmG7185668 = -470497080;    int wUKGtEiYlySxWuGzzmG94650538 = -25038147;    int wUKGtEiYlySxWuGzzmG52900524 = -981650949;    int wUKGtEiYlySxWuGzzmG13717040 = -506953448;    int wUKGtEiYlySxWuGzzmG46602062 = -94085208;    int wUKGtEiYlySxWuGzzmG82700597 = -196843837;    int wUKGtEiYlySxWuGzzmG19582385 = -420100053;    int wUKGtEiYlySxWuGzzmG56446448 = -975318693;    int wUKGtEiYlySxWuGzzmG99188839 = -714977203;    int wUKGtEiYlySxWuGzzmG26161250 = -563349298;    int wUKGtEiYlySxWuGzzmG31575263 = -828271889;    int wUKGtEiYlySxWuGzzmG54848039 = -908356631;    int wUKGtEiYlySxWuGzzmG22425565 = 70979745;    int wUKGtEiYlySxWuGzzmG87205673 = -901863431;    int wUKGtEiYlySxWuGzzmG81887204 = -875103704;    int wUKGtEiYlySxWuGzzmG33597711 = -203317865;    int wUKGtEiYlySxWuGzzmG82537799 = -54460035;    int wUKGtEiYlySxWuGzzmG7927120 = -735294804;    int wUKGtEiYlySxWuGzzmG1535490 = -78445527;    int wUKGtEiYlySxWuGzzmG9671224 = -77567354;    int wUKGtEiYlySxWuGzzmG92952987 = -94089626;    int wUKGtEiYlySxWuGzzmG99738236 = -670808098;    int wUKGtEiYlySxWuGzzmG39498535 = -538203583;    int wUKGtEiYlySxWuGzzmG94169442 = -435476160;    int wUKGtEiYlySxWuGzzmG57485739 = -408297918;    int wUKGtEiYlySxWuGzzmG19016741 = -39340663;    int wUKGtEiYlySxWuGzzmG63741170 = -474511216;    int wUKGtEiYlySxWuGzzmG59354885 = -844880194;    int wUKGtEiYlySxWuGzzmG22918939 = 29723849;    int wUKGtEiYlySxWuGzzmG87732230 = -778615815;    int wUKGtEiYlySxWuGzzmG21121857 = -632746681;    int wUKGtEiYlySxWuGzzmG44778595 = 49289349;    int wUKGtEiYlySxWuGzzmG92808722 = -348993238;    int wUKGtEiYlySxWuGzzmG8272832 = -830976208;    int wUKGtEiYlySxWuGzzmG71666377 = 90904815;    int wUKGtEiYlySxWuGzzmG41624055 = -696419622;    int wUKGtEiYlySxWuGzzmG2498063 = -506477487;    int wUKGtEiYlySxWuGzzmG95498696 = -676084022;    int wUKGtEiYlySxWuGzzmG60705320 = -701817390;    int wUKGtEiYlySxWuGzzmG63441829 = -398687936;    int wUKGtEiYlySxWuGzzmG74886444 = -246899269;    int wUKGtEiYlySxWuGzzmG96546915 = -975828334;    int wUKGtEiYlySxWuGzzmG7902453 = -931782222;    int wUKGtEiYlySxWuGzzmG92677747 = -642767052;    int wUKGtEiYlySxWuGzzmG32800156 = -465319699;    int wUKGtEiYlySxWuGzzmG10175946 = -140450802;    int wUKGtEiYlySxWuGzzmG2785630 = -489542955;    int wUKGtEiYlySxWuGzzmG17207392 = -666195216;    int wUKGtEiYlySxWuGzzmG85085563 = -760576306;    int wUKGtEiYlySxWuGzzmG13455539 = -207375719;    int wUKGtEiYlySxWuGzzmG60053300 = -684291579;    int wUKGtEiYlySxWuGzzmG99939976 = -571491727;    int wUKGtEiYlySxWuGzzmG40337416 = -860650198;    int wUKGtEiYlySxWuGzzmG60695943 = -958410747;    int wUKGtEiYlySxWuGzzmG36101590 = -299872014;    int wUKGtEiYlySxWuGzzmG7447431 = -799688982;    int wUKGtEiYlySxWuGzzmG55152003 = -486834565;    int wUKGtEiYlySxWuGzzmG58731082 = -446174789;    int wUKGtEiYlySxWuGzzmG56231300 = 1344469;    int wUKGtEiYlySxWuGzzmG27585321 = 45255454;    int wUKGtEiYlySxWuGzzmG18959428 = -722332621;    int wUKGtEiYlySxWuGzzmG60227500 = -575219860;    int wUKGtEiYlySxWuGzzmG33527509 = -905042543;    int wUKGtEiYlySxWuGzzmG11456610 = -936361388;    int wUKGtEiYlySxWuGzzmG5039394 = -930602617;    int wUKGtEiYlySxWuGzzmG86796668 = -777561238;    int wUKGtEiYlySxWuGzzmG62039316 = -459363393;    int wUKGtEiYlySxWuGzzmG14152734 = -98044048;    int wUKGtEiYlySxWuGzzmG15539296 = -892768246;    int wUKGtEiYlySxWuGzzmG40263150 = -78684083;    int wUKGtEiYlySxWuGzzmG31099648 = -696840379;    int wUKGtEiYlySxWuGzzmG87039103 = -378376013;    int wUKGtEiYlySxWuGzzmG47221800 = 66522585;    int wUKGtEiYlySxWuGzzmG38093661 = -679757591;    int wUKGtEiYlySxWuGzzmG34784779 = -830668086;    int wUKGtEiYlySxWuGzzmG96406071 = -118261292;    int wUKGtEiYlySxWuGzzmG91835784 = -739025877;    int wUKGtEiYlySxWuGzzmG46820788 = -895436531;    int wUKGtEiYlySxWuGzzmG61369287 = -970156462;    int wUKGtEiYlySxWuGzzmG47309794 = -167847116;    int wUKGtEiYlySxWuGzzmG16231112 = -549797708;    int wUKGtEiYlySxWuGzzmG46533779 = -808316001;    int wUKGtEiYlySxWuGzzmG74269321 = 15696112;    int wUKGtEiYlySxWuGzzmG9463401 = -762900433;    int wUKGtEiYlySxWuGzzmG27678930 = 5675763;    int wUKGtEiYlySxWuGzzmG21181880 = 38745045;    int wUKGtEiYlySxWuGzzmG4441180 = -90060453;    int wUKGtEiYlySxWuGzzmG32112780 = -206116350;     wUKGtEiYlySxWuGzzmG18838998 = wUKGtEiYlySxWuGzzmG64375418;     wUKGtEiYlySxWuGzzmG64375418 = wUKGtEiYlySxWuGzzmG65023984;     wUKGtEiYlySxWuGzzmG65023984 = wUKGtEiYlySxWuGzzmG25211194;     wUKGtEiYlySxWuGzzmG25211194 = wUKGtEiYlySxWuGzzmG4413065;     wUKGtEiYlySxWuGzzmG4413065 = wUKGtEiYlySxWuGzzmG66972768;     wUKGtEiYlySxWuGzzmG66972768 = wUKGtEiYlySxWuGzzmG47053249;     wUKGtEiYlySxWuGzzmG47053249 = wUKGtEiYlySxWuGzzmG42591100;     wUKGtEiYlySxWuGzzmG42591100 = wUKGtEiYlySxWuGzzmG7867097;     wUKGtEiYlySxWuGzzmG7867097 = wUKGtEiYlySxWuGzzmG41872905;     wUKGtEiYlySxWuGzzmG41872905 = wUKGtEiYlySxWuGzzmG70367166;     wUKGtEiYlySxWuGzzmG70367166 = wUKGtEiYlySxWuGzzmG29054577;     wUKGtEiYlySxWuGzzmG29054577 = wUKGtEiYlySxWuGzzmG7185668;     wUKGtEiYlySxWuGzzmG7185668 = wUKGtEiYlySxWuGzzmG94650538;     wUKGtEiYlySxWuGzzmG94650538 = wUKGtEiYlySxWuGzzmG52900524;     wUKGtEiYlySxWuGzzmG52900524 = wUKGtEiYlySxWuGzzmG13717040;     wUKGtEiYlySxWuGzzmG13717040 = wUKGtEiYlySxWuGzzmG46602062;     wUKGtEiYlySxWuGzzmG46602062 = wUKGtEiYlySxWuGzzmG82700597;     wUKGtEiYlySxWuGzzmG82700597 = wUKGtEiYlySxWuGzzmG19582385;     wUKGtEiYlySxWuGzzmG19582385 = wUKGtEiYlySxWuGzzmG56446448;     wUKGtEiYlySxWuGzzmG56446448 = wUKGtEiYlySxWuGzzmG99188839;     wUKGtEiYlySxWuGzzmG99188839 = wUKGtEiYlySxWuGzzmG26161250;     wUKGtEiYlySxWuGzzmG26161250 = wUKGtEiYlySxWuGzzmG31575263;     wUKGtEiYlySxWuGzzmG31575263 = wUKGtEiYlySxWuGzzmG54848039;     wUKGtEiYlySxWuGzzmG54848039 = wUKGtEiYlySxWuGzzmG22425565;     wUKGtEiYlySxWuGzzmG22425565 = wUKGtEiYlySxWuGzzmG87205673;     wUKGtEiYlySxWuGzzmG87205673 = wUKGtEiYlySxWuGzzmG81887204;     wUKGtEiYlySxWuGzzmG81887204 = wUKGtEiYlySxWuGzzmG33597711;     wUKGtEiYlySxWuGzzmG33597711 = wUKGtEiYlySxWuGzzmG82537799;     wUKGtEiYlySxWuGzzmG82537799 = wUKGtEiYlySxWuGzzmG7927120;     wUKGtEiYlySxWuGzzmG7927120 = wUKGtEiYlySxWuGzzmG1535490;     wUKGtEiYlySxWuGzzmG1535490 = wUKGtEiYlySxWuGzzmG9671224;     wUKGtEiYlySxWuGzzmG9671224 = wUKGtEiYlySxWuGzzmG92952987;     wUKGtEiYlySxWuGzzmG92952987 = wUKGtEiYlySxWuGzzmG99738236;     wUKGtEiYlySxWuGzzmG99738236 = wUKGtEiYlySxWuGzzmG39498535;     wUKGtEiYlySxWuGzzmG39498535 = wUKGtEiYlySxWuGzzmG94169442;     wUKGtEiYlySxWuGzzmG94169442 = wUKGtEiYlySxWuGzzmG57485739;     wUKGtEiYlySxWuGzzmG57485739 = wUKGtEiYlySxWuGzzmG19016741;     wUKGtEiYlySxWuGzzmG19016741 = wUKGtEiYlySxWuGzzmG63741170;     wUKGtEiYlySxWuGzzmG63741170 = wUKGtEiYlySxWuGzzmG59354885;     wUKGtEiYlySxWuGzzmG59354885 = wUKGtEiYlySxWuGzzmG22918939;     wUKGtEiYlySxWuGzzmG22918939 = wUKGtEiYlySxWuGzzmG87732230;     wUKGtEiYlySxWuGzzmG87732230 = wUKGtEiYlySxWuGzzmG21121857;     wUKGtEiYlySxWuGzzmG21121857 = wUKGtEiYlySxWuGzzmG44778595;     wUKGtEiYlySxWuGzzmG44778595 = wUKGtEiYlySxWuGzzmG92808722;     wUKGtEiYlySxWuGzzmG92808722 = wUKGtEiYlySxWuGzzmG8272832;     wUKGtEiYlySxWuGzzmG8272832 = wUKGtEiYlySxWuGzzmG71666377;     wUKGtEiYlySxWuGzzmG71666377 = wUKGtEiYlySxWuGzzmG41624055;     wUKGtEiYlySxWuGzzmG41624055 = wUKGtEiYlySxWuGzzmG2498063;     wUKGtEiYlySxWuGzzmG2498063 = wUKGtEiYlySxWuGzzmG95498696;     wUKGtEiYlySxWuGzzmG95498696 = wUKGtEiYlySxWuGzzmG60705320;     wUKGtEiYlySxWuGzzmG60705320 = wUKGtEiYlySxWuGzzmG63441829;     wUKGtEiYlySxWuGzzmG63441829 = wUKGtEiYlySxWuGzzmG74886444;     wUKGtEiYlySxWuGzzmG74886444 = wUKGtEiYlySxWuGzzmG96546915;     wUKGtEiYlySxWuGzzmG96546915 = wUKGtEiYlySxWuGzzmG7902453;     wUKGtEiYlySxWuGzzmG7902453 = wUKGtEiYlySxWuGzzmG92677747;     wUKGtEiYlySxWuGzzmG92677747 = wUKGtEiYlySxWuGzzmG32800156;     wUKGtEiYlySxWuGzzmG32800156 = wUKGtEiYlySxWuGzzmG10175946;     wUKGtEiYlySxWuGzzmG10175946 = wUKGtEiYlySxWuGzzmG2785630;     wUKGtEiYlySxWuGzzmG2785630 = wUKGtEiYlySxWuGzzmG17207392;     wUKGtEiYlySxWuGzzmG17207392 = wUKGtEiYlySxWuGzzmG85085563;     wUKGtEiYlySxWuGzzmG85085563 = wUKGtEiYlySxWuGzzmG13455539;     wUKGtEiYlySxWuGzzmG13455539 = wUKGtEiYlySxWuGzzmG60053300;     wUKGtEiYlySxWuGzzmG60053300 = wUKGtEiYlySxWuGzzmG99939976;     wUKGtEiYlySxWuGzzmG99939976 = wUKGtEiYlySxWuGzzmG40337416;     wUKGtEiYlySxWuGzzmG40337416 = wUKGtEiYlySxWuGzzmG60695943;     wUKGtEiYlySxWuGzzmG60695943 = wUKGtEiYlySxWuGzzmG36101590;     wUKGtEiYlySxWuGzzmG36101590 = wUKGtEiYlySxWuGzzmG7447431;     wUKGtEiYlySxWuGzzmG7447431 = wUKGtEiYlySxWuGzzmG55152003;     wUKGtEiYlySxWuGzzmG55152003 = wUKGtEiYlySxWuGzzmG58731082;     wUKGtEiYlySxWuGzzmG58731082 = wUKGtEiYlySxWuGzzmG56231300;     wUKGtEiYlySxWuGzzmG56231300 = wUKGtEiYlySxWuGzzmG27585321;     wUKGtEiYlySxWuGzzmG27585321 = wUKGtEiYlySxWuGzzmG18959428;     wUKGtEiYlySxWuGzzmG18959428 = wUKGtEiYlySxWuGzzmG60227500;     wUKGtEiYlySxWuGzzmG60227500 = wUKGtEiYlySxWuGzzmG33527509;     wUKGtEiYlySxWuGzzmG33527509 = wUKGtEiYlySxWuGzzmG11456610;     wUKGtEiYlySxWuGzzmG11456610 = wUKGtEiYlySxWuGzzmG5039394;     wUKGtEiYlySxWuGzzmG5039394 = wUKGtEiYlySxWuGzzmG86796668;     wUKGtEiYlySxWuGzzmG86796668 = wUKGtEiYlySxWuGzzmG62039316;     wUKGtEiYlySxWuGzzmG62039316 = wUKGtEiYlySxWuGzzmG14152734;     wUKGtEiYlySxWuGzzmG14152734 = wUKGtEiYlySxWuGzzmG15539296;     wUKGtEiYlySxWuGzzmG15539296 = wUKGtEiYlySxWuGzzmG40263150;     wUKGtEiYlySxWuGzzmG40263150 = wUKGtEiYlySxWuGzzmG31099648;     wUKGtEiYlySxWuGzzmG31099648 = wUKGtEiYlySxWuGzzmG87039103;     wUKGtEiYlySxWuGzzmG87039103 = wUKGtEiYlySxWuGzzmG47221800;     wUKGtEiYlySxWuGzzmG47221800 = wUKGtEiYlySxWuGzzmG38093661;     wUKGtEiYlySxWuGzzmG38093661 = wUKGtEiYlySxWuGzzmG34784779;     wUKGtEiYlySxWuGzzmG34784779 = wUKGtEiYlySxWuGzzmG96406071;     wUKGtEiYlySxWuGzzmG96406071 = wUKGtEiYlySxWuGzzmG91835784;     wUKGtEiYlySxWuGzzmG91835784 = wUKGtEiYlySxWuGzzmG46820788;     wUKGtEiYlySxWuGzzmG46820788 = wUKGtEiYlySxWuGzzmG61369287;     wUKGtEiYlySxWuGzzmG61369287 = wUKGtEiYlySxWuGzzmG47309794;     wUKGtEiYlySxWuGzzmG47309794 = wUKGtEiYlySxWuGzzmG16231112;     wUKGtEiYlySxWuGzzmG16231112 = wUKGtEiYlySxWuGzzmG46533779;     wUKGtEiYlySxWuGzzmG46533779 = wUKGtEiYlySxWuGzzmG74269321;     wUKGtEiYlySxWuGzzmG74269321 = wUKGtEiYlySxWuGzzmG9463401;     wUKGtEiYlySxWuGzzmG9463401 = wUKGtEiYlySxWuGzzmG27678930;     wUKGtEiYlySxWuGzzmG27678930 = wUKGtEiYlySxWuGzzmG21181880;     wUKGtEiYlySxWuGzzmG21181880 = wUKGtEiYlySxWuGzzmG4441180;     wUKGtEiYlySxWuGzzmG4441180 = wUKGtEiYlySxWuGzzmG32112780;     wUKGtEiYlySxWuGzzmG32112780 = wUKGtEiYlySxWuGzzmG18838998;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void FTYghfIkNSaZsMDGjug13419840() {     int NNNheKftwMvchhSOhiK73493395 = -643643934;    int NNNheKftwMvchhSOhiK11373038 = -873156401;    int NNNheKftwMvchhSOhiK25756631 = -434192046;    int NNNheKftwMvchhSOhiK96646135 = -524665621;    int NNNheKftwMvchhSOhiK78864735 = -240493886;    int NNNheKftwMvchhSOhiK81147165 = -764830846;    int NNNheKftwMvchhSOhiK68153953 = -812586256;    int NNNheKftwMvchhSOhiK71766203 = -239319846;    int NNNheKftwMvchhSOhiK95641506 = -353639902;    int NNNheKftwMvchhSOhiK24504891 = -217896994;    int NNNheKftwMvchhSOhiK48978461 = -661334672;    int NNNheKftwMvchhSOhiK91819290 = -680385728;    int NNNheKftwMvchhSOhiK71002982 = -274037384;    int NNNheKftwMvchhSOhiK87616969 = -737141725;    int NNNheKftwMvchhSOhiK83124597 = -888772580;    int NNNheKftwMvchhSOhiK3484576 = -137113013;    int NNNheKftwMvchhSOhiK46433825 = -567685036;    int NNNheKftwMvchhSOhiK50297184 = -260408304;    int NNNheKftwMvchhSOhiK20802986 = -705911601;    int NNNheKftwMvchhSOhiK74081003 = -220684840;    int NNNheKftwMvchhSOhiK33363227 = -183060354;    int NNNheKftwMvchhSOhiK77413839 = -729793406;    int NNNheKftwMvchhSOhiK68045095 = -315015310;    int NNNheKftwMvchhSOhiK56276407 = -607397448;    int NNNheKftwMvchhSOhiK18178181 = -301933707;    int NNNheKftwMvchhSOhiK28446621 = -905572216;    int NNNheKftwMvchhSOhiK83877128 = -329947983;    int NNNheKftwMvchhSOhiK86846711 = -211369726;    int NNNheKftwMvchhSOhiK22435477 = -434704910;    int NNNheKftwMvchhSOhiK2362529 = 73947227;    int NNNheKftwMvchhSOhiK53241018 = -627318052;    int NNNheKftwMvchhSOhiK40662834 = -489063882;    int NNNheKftwMvchhSOhiK60608864 = -650607240;    int NNNheKftwMvchhSOhiK94394129 = -350928908;    int NNNheKftwMvchhSOhiK74002692 = -756066843;    int NNNheKftwMvchhSOhiK81495984 = -683471757;    int NNNheKftwMvchhSOhiK32190228 = -258724538;    int NNNheKftwMvchhSOhiK31993980 = 86730316;    int NNNheKftwMvchhSOhiK14510819 = -856459818;    int NNNheKftwMvchhSOhiK83341279 = -503188793;    int NNNheKftwMvchhSOhiK78878339 = -82826309;    int NNNheKftwMvchhSOhiK24406889 = -286147902;    int NNNheKftwMvchhSOhiK12122040 = -473251999;    int NNNheKftwMvchhSOhiK53772994 = -524390317;    int NNNheKftwMvchhSOhiK52792786 = -481510836;    int NNNheKftwMvchhSOhiK63606433 = -899765822;    int NNNheKftwMvchhSOhiK88140089 = 63847431;    int NNNheKftwMvchhSOhiK65051363 = -674071994;    int NNNheKftwMvchhSOhiK44840829 = -406207676;    int NNNheKftwMvchhSOhiK40340359 = -916103316;    int NNNheKftwMvchhSOhiK35818859 = -359032892;    int NNNheKftwMvchhSOhiK52823979 = -913753919;    int NNNheKftwMvchhSOhiK6614447 = 13185274;    int NNNheKftwMvchhSOhiK53962673 = -871714819;    int NNNheKftwMvchhSOhiK80056612 = -227690903;    int NNNheKftwMvchhSOhiK96079556 = -913850528;    int NNNheKftwMvchhSOhiK43327943 = -458141092;    int NNNheKftwMvchhSOhiK69480223 = -826794599;    int NNNheKftwMvchhSOhiK78467954 = -122731915;    int NNNheKftwMvchhSOhiK50418115 = -334921670;    int NNNheKftwMvchhSOhiK97270036 = -334882864;    int NNNheKftwMvchhSOhiK81307242 = -501216531;    int NNNheKftwMvchhSOhiK49330727 = -804614936;    int NNNheKftwMvchhSOhiK93278978 = -327587130;    int NNNheKftwMvchhSOhiK71263872 = -590578942;    int NNNheKftwMvchhSOhiK8315628 = -72270791;    int NNNheKftwMvchhSOhiK31210427 = 70221512;    int NNNheKftwMvchhSOhiK76608853 = -923108477;    int NNNheKftwMvchhSOhiK13614277 = -981074883;    int NNNheKftwMvchhSOhiK1628614 = -105300824;    int NNNheKftwMvchhSOhiK71294348 = -878388475;    int NNNheKftwMvchhSOhiK14439846 = -554415353;    int NNNheKftwMvchhSOhiK35786366 = -403948487;    int NNNheKftwMvchhSOhiK37461706 = -102722808;    int NNNheKftwMvchhSOhiK95202663 = -37858531;    int NNNheKftwMvchhSOhiK8956339 = -896912452;    int NNNheKftwMvchhSOhiK65291799 = -156541407;    int NNNheKftwMvchhSOhiK14272101 = -790624994;    int NNNheKftwMvchhSOhiK3483622 = -25886612;    int NNNheKftwMvchhSOhiK54571748 = -402167885;    int NNNheKftwMvchhSOhiK40306531 = -869419647;    int NNNheKftwMvchhSOhiK18825765 = -655875989;    int NNNheKftwMvchhSOhiK42005882 = -805162051;    int NNNheKftwMvchhSOhiK82095118 = -518601594;    int NNNheKftwMvchhSOhiK66543669 = -567019881;    int NNNheKftwMvchhSOhiK417040 = -713564134;    int NNNheKftwMvchhSOhiK34048387 = -402249157;    int NNNheKftwMvchhSOhiK6646191 = -778892422;    int NNNheKftwMvchhSOhiK14337518 = -23238005;    int NNNheKftwMvchhSOhiK77923135 = -842216315;    int NNNheKftwMvchhSOhiK38168041 = -125330665;    int NNNheKftwMvchhSOhiK62710004 = -431929940;    int NNNheKftwMvchhSOhiK53526026 = -790537770;    int NNNheKftwMvchhSOhiK64092704 = -421538148;    int NNNheKftwMvchhSOhiK86071243 = -68305930;    int NNNheKftwMvchhSOhiK97571097 = -581609779;    int NNNheKftwMvchhSOhiK75076161 = -481532966;    int NNNheKftwMvchhSOhiK18843062 = -45664870;    int NNNheKftwMvchhSOhiK82509122 = -933811375;    int NNNheKftwMvchhSOhiK44477159 = -643643934;     NNNheKftwMvchhSOhiK73493395 = NNNheKftwMvchhSOhiK11373038;     NNNheKftwMvchhSOhiK11373038 = NNNheKftwMvchhSOhiK25756631;     NNNheKftwMvchhSOhiK25756631 = NNNheKftwMvchhSOhiK96646135;     NNNheKftwMvchhSOhiK96646135 = NNNheKftwMvchhSOhiK78864735;     NNNheKftwMvchhSOhiK78864735 = NNNheKftwMvchhSOhiK81147165;     NNNheKftwMvchhSOhiK81147165 = NNNheKftwMvchhSOhiK68153953;     NNNheKftwMvchhSOhiK68153953 = NNNheKftwMvchhSOhiK71766203;     NNNheKftwMvchhSOhiK71766203 = NNNheKftwMvchhSOhiK95641506;     NNNheKftwMvchhSOhiK95641506 = NNNheKftwMvchhSOhiK24504891;     NNNheKftwMvchhSOhiK24504891 = NNNheKftwMvchhSOhiK48978461;     NNNheKftwMvchhSOhiK48978461 = NNNheKftwMvchhSOhiK91819290;     NNNheKftwMvchhSOhiK91819290 = NNNheKftwMvchhSOhiK71002982;     NNNheKftwMvchhSOhiK71002982 = NNNheKftwMvchhSOhiK87616969;     NNNheKftwMvchhSOhiK87616969 = NNNheKftwMvchhSOhiK83124597;     NNNheKftwMvchhSOhiK83124597 = NNNheKftwMvchhSOhiK3484576;     NNNheKftwMvchhSOhiK3484576 = NNNheKftwMvchhSOhiK46433825;     NNNheKftwMvchhSOhiK46433825 = NNNheKftwMvchhSOhiK50297184;     NNNheKftwMvchhSOhiK50297184 = NNNheKftwMvchhSOhiK20802986;     NNNheKftwMvchhSOhiK20802986 = NNNheKftwMvchhSOhiK74081003;     NNNheKftwMvchhSOhiK74081003 = NNNheKftwMvchhSOhiK33363227;     NNNheKftwMvchhSOhiK33363227 = NNNheKftwMvchhSOhiK77413839;     NNNheKftwMvchhSOhiK77413839 = NNNheKftwMvchhSOhiK68045095;     NNNheKftwMvchhSOhiK68045095 = NNNheKftwMvchhSOhiK56276407;     NNNheKftwMvchhSOhiK56276407 = NNNheKftwMvchhSOhiK18178181;     NNNheKftwMvchhSOhiK18178181 = NNNheKftwMvchhSOhiK28446621;     NNNheKftwMvchhSOhiK28446621 = NNNheKftwMvchhSOhiK83877128;     NNNheKftwMvchhSOhiK83877128 = NNNheKftwMvchhSOhiK86846711;     NNNheKftwMvchhSOhiK86846711 = NNNheKftwMvchhSOhiK22435477;     NNNheKftwMvchhSOhiK22435477 = NNNheKftwMvchhSOhiK2362529;     NNNheKftwMvchhSOhiK2362529 = NNNheKftwMvchhSOhiK53241018;     NNNheKftwMvchhSOhiK53241018 = NNNheKftwMvchhSOhiK40662834;     NNNheKftwMvchhSOhiK40662834 = NNNheKftwMvchhSOhiK60608864;     NNNheKftwMvchhSOhiK60608864 = NNNheKftwMvchhSOhiK94394129;     NNNheKftwMvchhSOhiK94394129 = NNNheKftwMvchhSOhiK74002692;     NNNheKftwMvchhSOhiK74002692 = NNNheKftwMvchhSOhiK81495984;     NNNheKftwMvchhSOhiK81495984 = NNNheKftwMvchhSOhiK32190228;     NNNheKftwMvchhSOhiK32190228 = NNNheKftwMvchhSOhiK31993980;     NNNheKftwMvchhSOhiK31993980 = NNNheKftwMvchhSOhiK14510819;     NNNheKftwMvchhSOhiK14510819 = NNNheKftwMvchhSOhiK83341279;     NNNheKftwMvchhSOhiK83341279 = NNNheKftwMvchhSOhiK78878339;     NNNheKftwMvchhSOhiK78878339 = NNNheKftwMvchhSOhiK24406889;     NNNheKftwMvchhSOhiK24406889 = NNNheKftwMvchhSOhiK12122040;     NNNheKftwMvchhSOhiK12122040 = NNNheKftwMvchhSOhiK53772994;     NNNheKftwMvchhSOhiK53772994 = NNNheKftwMvchhSOhiK52792786;     NNNheKftwMvchhSOhiK52792786 = NNNheKftwMvchhSOhiK63606433;     NNNheKftwMvchhSOhiK63606433 = NNNheKftwMvchhSOhiK88140089;     NNNheKftwMvchhSOhiK88140089 = NNNheKftwMvchhSOhiK65051363;     NNNheKftwMvchhSOhiK65051363 = NNNheKftwMvchhSOhiK44840829;     NNNheKftwMvchhSOhiK44840829 = NNNheKftwMvchhSOhiK40340359;     NNNheKftwMvchhSOhiK40340359 = NNNheKftwMvchhSOhiK35818859;     NNNheKftwMvchhSOhiK35818859 = NNNheKftwMvchhSOhiK52823979;     NNNheKftwMvchhSOhiK52823979 = NNNheKftwMvchhSOhiK6614447;     NNNheKftwMvchhSOhiK6614447 = NNNheKftwMvchhSOhiK53962673;     NNNheKftwMvchhSOhiK53962673 = NNNheKftwMvchhSOhiK80056612;     NNNheKftwMvchhSOhiK80056612 = NNNheKftwMvchhSOhiK96079556;     NNNheKftwMvchhSOhiK96079556 = NNNheKftwMvchhSOhiK43327943;     NNNheKftwMvchhSOhiK43327943 = NNNheKftwMvchhSOhiK69480223;     NNNheKftwMvchhSOhiK69480223 = NNNheKftwMvchhSOhiK78467954;     NNNheKftwMvchhSOhiK78467954 = NNNheKftwMvchhSOhiK50418115;     NNNheKftwMvchhSOhiK50418115 = NNNheKftwMvchhSOhiK97270036;     NNNheKftwMvchhSOhiK97270036 = NNNheKftwMvchhSOhiK81307242;     NNNheKftwMvchhSOhiK81307242 = NNNheKftwMvchhSOhiK49330727;     NNNheKftwMvchhSOhiK49330727 = NNNheKftwMvchhSOhiK93278978;     NNNheKftwMvchhSOhiK93278978 = NNNheKftwMvchhSOhiK71263872;     NNNheKftwMvchhSOhiK71263872 = NNNheKftwMvchhSOhiK8315628;     NNNheKftwMvchhSOhiK8315628 = NNNheKftwMvchhSOhiK31210427;     NNNheKftwMvchhSOhiK31210427 = NNNheKftwMvchhSOhiK76608853;     NNNheKftwMvchhSOhiK76608853 = NNNheKftwMvchhSOhiK13614277;     NNNheKftwMvchhSOhiK13614277 = NNNheKftwMvchhSOhiK1628614;     NNNheKftwMvchhSOhiK1628614 = NNNheKftwMvchhSOhiK71294348;     NNNheKftwMvchhSOhiK71294348 = NNNheKftwMvchhSOhiK14439846;     NNNheKftwMvchhSOhiK14439846 = NNNheKftwMvchhSOhiK35786366;     NNNheKftwMvchhSOhiK35786366 = NNNheKftwMvchhSOhiK37461706;     NNNheKftwMvchhSOhiK37461706 = NNNheKftwMvchhSOhiK95202663;     NNNheKftwMvchhSOhiK95202663 = NNNheKftwMvchhSOhiK8956339;     NNNheKftwMvchhSOhiK8956339 = NNNheKftwMvchhSOhiK65291799;     NNNheKftwMvchhSOhiK65291799 = NNNheKftwMvchhSOhiK14272101;     NNNheKftwMvchhSOhiK14272101 = NNNheKftwMvchhSOhiK3483622;     NNNheKftwMvchhSOhiK3483622 = NNNheKftwMvchhSOhiK54571748;     NNNheKftwMvchhSOhiK54571748 = NNNheKftwMvchhSOhiK40306531;     NNNheKftwMvchhSOhiK40306531 = NNNheKftwMvchhSOhiK18825765;     NNNheKftwMvchhSOhiK18825765 = NNNheKftwMvchhSOhiK42005882;     NNNheKftwMvchhSOhiK42005882 = NNNheKftwMvchhSOhiK82095118;     NNNheKftwMvchhSOhiK82095118 = NNNheKftwMvchhSOhiK66543669;     NNNheKftwMvchhSOhiK66543669 = NNNheKftwMvchhSOhiK417040;     NNNheKftwMvchhSOhiK417040 = NNNheKftwMvchhSOhiK34048387;     NNNheKftwMvchhSOhiK34048387 = NNNheKftwMvchhSOhiK6646191;     NNNheKftwMvchhSOhiK6646191 = NNNheKftwMvchhSOhiK14337518;     NNNheKftwMvchhSOhiK14337518 = NNNheKftwMvchhSOhiK77923135;     NNNheKftwMvchhSOhiK77923135 = NNNheKftwMvchhSOhiK38168041;     NNNheKftwMvchhSOhiK38168041 = NNNheKftwMvchhSOhiK62710004;     NNNheKftwMvchhSOhiK62710004 = NNNheKftwMvchhSOhiK53526026;     NNNheKftwMvchhSOhiK53526026 = NNNheKftwMvchhSOhiK64092704;     NNNheKftwMvchhSOhiK64092704 = NNNheKftwMvchhSOhiK86071243;     NNNheKftwMvchhSOhiK86071243 = NNNheKftwMvchhSOhiK97571097;     NNNheKftwMvchhSOhiK97571097 = NNNheKftwMvchhSOhiK75076161;     NNNheKftwMvchhSOhiK75076161 = NNNheKftwMvchhSOhiK18843062;     NNNheKftwMvchhSOhiK18843062 = NNNheKftwMvchhSOhiK82509122;     NNNheKftwMvchhSOhiK82509122 = NNNheKftwMvchhSOhiK44477159;     NNNheKftwMvchhSOhiK44477159 = NNNheKftwMvchhSOhiK73493395;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void RyayKGgiTWQlfyJsHDa10367472() {     int mQtgDvBGWxZODwpIEGX86006821 = -336804097;    int mQtgDvBGWxZODwpIEGX78845603 = -96625626;    int mQtgDvBGWxZODwpIEGX50018608 = -810640352;    int mQtgDvBGWxZODwpIEGX85151398 = -717244975;    int mQtgDvBGWxZODwpIEGX90095725 = -772874329;    int mQtgDvBGWxZODwpIEGX76816687 = -518072332;    int mQtgDvBGWxZODwpIEGX54973130 = -272119035;    int mQtgDvBGWxZODwpIEGX278626 = -346364229;    int mQtgDvBGWxZODwpIEGX16616326 = -245728578;    int mQtgDvBGWxZODwpIEGX20524146 = -630512852;    int mQtgDvBGWxZODwpIEGX62672140 = -66379231;    int mQtgDvBGWxZODwpIEGX82471747 = -410719156;    int mQtgDvBGWxZODwpIEGX76357295 = -104990565;    int mQtgDvBGWxZODwpIEGX68650575 = -163011367;    int mQtgDvBGWxZODwpIEGX17934246 = 98628764;    int mQtgDvBGWxZODwpIEGX71920230 = -219160425;    int mQtgDvBGWxZODwpIEGX40219358 = -6310098;    int mQtgDvBGWxZODwpIEGX77629313 = -55000287;    int mQtgDvBGWxZODwpIEGX22999008 = -207424162;    int mQtgDvBGWxZODwpIEGX19921535 = -21197603;    int mQtgDvBGWxZODwpIEGX22168737 = -978972755;    int mQtgDvBGWxZODwpIEGX39310639 = -467656354;    int mQtgDvBGWxZODwpIEGX4576836 = -897555823;    int mQtgDvBGWxZODwpIEGX90697291 = -519414680;    int mQtgDvBGWxZODwpIEGX603616 = -567003776;    int mQtgDvBGWxZODwpIEGX35540580 = -125340174;    int mQtgDvBGWxZODwpIEGX52933884 = -947063470;    int mQtgDvBGWxZODwpIEGX15928537 = -59714238;    int mQtgDvBGWxZODwpIEGX90537035 = -441161077;    int mQtgDvBGWxZODwpIEGX59308788 = -820751030;    int mQtgDvBGWxZODwpIEGX995227 = 64699252;    int mQtgDvBGWxZODwpIEGX97570938 = -541959657;    int mQtgDvBGWxZODwpIEGX50616575 = -380175895;    int mQtgDvBGWxZODwpIEGX77621461 = -666506916;    int mQtgDvBGWxZODwpIEGX85828591 = -470158926;    int mQtgDvBGWxZODwpIEGX76419860 = -201896543;    int mQtgDvBGWxZODwpIEGX25863509 = -607488394;    int mQtgDvBGWxZODwpIEGX9977365 = -746954399;    int mQtgDvBGWxZODwpIEGX73351967 = -964967895;    int mQtgDvBGWxZODwpIEGX48039136 = -544120596;    int mQtgDvBGWxZODwpIEGX21335384 = -291865251;    int mQtgDvBGWxZODwpIEGX67559743 = -958549806;    int mQtgDvBGWxZODwpIEGX77489072 = -836208179;    int mQtgDvBGWxZODwpIEGX83879054 = -385837154;    int mQtgDvBGWxZODwpIEGX12740470 = -403164270;    int mQtgDvBGWxZODwpIEGX92145708 = -465618823;    int mQtgDvBGWxZODwpIEGX80860777 = -63045322;    int mQtgDvBGWxZODwpIEGX36498 = -457263239;    int mQtgDvBGWxZODwpIEGX67219388 = -791863720;    int mQtgDvBGWxZODwpIEGX66704510 = -415119913;    int mQtgDvBGWxZODwpIEGX74053599 = 11508787;    int mQtgDvBGWxZODwpIEGX70448343 = -209000034;    int mQtgDvBGWxZODwpIEGX34381305 = -470578951;    int mQtgDvBGWxZODwpIEGX67156280 = -170950909;    int mQtgDvBGWxZODwpIEGX88198734 = -496995290;    int mQtgDvBGWxZODwpIEGX46696182 = -869147744;    int mQtgDvBGWxZODwpIEGX74268767 = -199069804;    int mQtgDvBGWxZODwpIEGX59321316 = -191225672;    int mQtgDvBGWxZODwpIEGX84547783 = -50241200;    int mQtgDvBGWxZODwpIEGX54555145 = -547534155;    int mQtgDvBGWxZODwpIEGX23882803 = -571008863;    int mQtgDvBGWxZODwpIEGX39044594 = -112404798;    int mQtgDvBGWxZODwpIEGX9741590 = -905203152;    int mQtgDvBGWxZODwpIEGX57307537 = -424977549;    int mQtgDvBGWxZODwpIEGX19528920 = -595212104;    int mQtgDvBGWxZODwpIEGX65101201 = -524419575;    int mQtgDvBGWxZODwpIEGX31855172 = 69456738;    int mQtgDvBGWxZODwpIEGX98735833 = -438483649;    int mQtgDvBGWxZODwpIEGX82821983 = -692852441;    int mQtgDvBGWxZODwpIEGX41514386 = -699474693;    int mQtgDvBGWxZODwpIEGX46056722 = -611672032;    int mQtgDvBGWxZODwpIEGX30241994 = -259355699;    int mQtgDvBGWxZODwpIEGX4277347 = -90032392;    int mQtgDvBGWxZODwpIEGX74959871 = -663303567;    int mQtgDvBGWxZODwpIEGX98586150 = -729332353;    int mQtgDvBGWxZODwpIEGX54608994 = 79577051;    int mQtgDvBGWxZODwpIEGX61821566 = -631448176;    int mQtgDvBGWxZODwpIEGX20697782 = -411718669;    int mQtgDvBGWxZODwpIEGX77956822 = -16250411;    int mQtgDvBGWxZODwpIEGX8457907 = -1384953;    int mQtgDvBGWxZODwpIEGX54679803 = 37705147;    int mQtgDvBGWxZODwpIEGX52897387 = -389800232;    int mQtgDvBGWxZODwpIEGX48709148 = -267850518;    int mQtgDvBGWxZODwpIEGX23832525 = 73958835;    int mQtgDvBGWxZODwpIEGX85255188 = -732259817;    int mQtgDvBGWxZODwpIEGX30546883 = -726300715;    int mQtgDvBGWxZODwpIEGX63189633 = 28619294;    int mQtgDvBGWxZODwpIEGX83460295 = -109224986;    int mQtgDvBGWxZODwpIEGX89422726 = -69511627;    int mQtgDvBGWxZODwpIEGX39132409 = -601011183;    int mQtgDvBGWxZODwpIEGX2151093 = 97173260;    int mQtgDvBGWxZODwpIEGX66542192 = -316262723;    int mQtgDvBGWxZODwpIEGX25429582 = -596713200;    int mQtgDvBGWxZODwpIEGX18796823 = -317433741;    int mQtgDvBGWxZODwpIEGX24156333 = -973111733;    int mQtgDvBGWxZODwpIEGX82290790 = -79460453;    int mQtgDvBGWxZODwpIEGX57818153 = 46653345;    int mQtgDvBGWxZODwpIEGX20181536 = -311230630;    int mQtgDvBGWxZODwpIEGX64350135 = -790625051;    int mQtgDvBGWxZODwpIEGX47639269 = -336804097;     mQtgDvBGWxZODwpIEGX86006821 = mQtgDvBGWxZODwpIEGX78845603;     mQtgDvBGWxZODwpIEGX78845603 = mQtgDvBGWxZODwpIEGX50018608;     mQtgDvBGWxZODwpIEGX50018608 = mQtgDvBGWxZODwpIEGX85151398;     mQtgDvBGWxZODwpIEGX85151398 = mQtgDvBGWxZODwpIEGX90095725;     mQtgDvBGWxZODwpIEGX90095725 = mQtgDvBGWxZODwpIEGX76816687;     mQtgDvBGWxZODwpIEGX76816687 = mQtgDvBGWxZODwpIEGX54973130;     mQtgDvBGWxZODwpIEGX54973130 = mQtgDvBGWxZODwpIEGX278626;     mQtgDvBGWxZODwpIEGX278626 = mQtgDvBGWxZODwpIEGX16616326;     mQtgDvBGWxZODwpIEGX16616326 = mQtgDvBGWxZODwpIEGX20524146;     mQtgDvBGWxZODwpIEGX20524146 = mQtgDvBGWxZODwpIEGX62672140;     mQtgDvBGWxZODwpIEGX62672140 = mQtgDvBGWxZODwpIEGX82471747;     mQtgDvBGWxZODwpIEGX82471747 = mQtgDvBGWxZODwpIEGX76357295;     mQtgDvBGWxZODwpIEGX76357295 = mQtgDvBGWxZODwpIEGX68650575;     mQtgDvBGWxZODwpIEGX68650575 = mQtgDvBGWxZODwpIEGX17934246;     mQtgDvBGWxZODwpIEGX17934246 = mQtgDvBGWxZODwpIEGX71920230;     mQtgDvBGWxZODwpIEGX71920230 = mQtgDvBGWxZODwpIEGX40219358;     mQtgDvBGWxZODwpIEGX40219358 = mQtgDvBGWxZODwpIEGX77629313;     mQtgDvBGWxZODwpIEGX77629313 = mQtgDvBGWxZODwpIEGX22999008;     mQtgDvBGWxZODwpIEGX22999008 = mQtgDvBGWxZODwpIEGX19921535;     mQtgDvBGWxZODwpIEGX19921535 = mQtgDvBGWxZODwpIEGX22168737;     mQtgDvBGWxZODwpIEGX22168737 = mQtgDvBGWxZODwpIEGX39310639;     mQtgDvBGWxZODwpIEGX39310639 = mQtgDvBGWxZODwpIEGX4576836;     mQtgDvBGWxZODwpIEGX4576836 = mQtgDvBGWxZODwpIEGX90697291;     mQtgDvBGWxZODwpIEGX90697291 = mQtgDvBGWxZODwpIEGX603616;     mQtgDvBGWxZODwpIEGX603616 = mQtgDvBGWxZODwpIEGX35540580;     mQtgDvBGWxZODwpIEGX35540580 = mQtgDvBGWxZODwpIEGX52933884;     mQtgDvBGWxZODwpIEGX52933884 = mQtgDvBGWxZODwpIEGX15928537;     mQtgDvBGWxZODwpIEGX15928537 = mQtgDvBGWxZODwpIEGX90537035;     mQtgDvBGWxZODwpIEGX90537035 = mQtgDvBGWxZODwpIEGX59308788;     mQtgDvBGWxZODwpIEGX59308788 = mQtgDvBGWxZODwpIEGX995227;     mQtgDvBGWxZODwpIEGX995227 = mQtgDvBGWxZODwpIEGX97570938;     mQtgDvBGWxZODwpIEGX97570938 = mQtgDvBGWxZODwpIEGX50616575;     mQtgDvBGWxZODwpIEGX50616575 = mQtgDvBGWxZODwpIEGX77621461;     mQtgDvBGWxZODwpIEGX77621461 = mQtgDvBGWxZODwpIEGX85828591;     mQtgDvBGWxZODwpIEGX85828591 = mQtgDvBGWxZODwpIEGX76419860;     mQtgDvBGWxZODwpIEGX76419860 = mQtgDvBGWxZODwpIEGX25863509;     mQtgDvBGWxZODwpIEGX25863509 = mQtgDvBGWxZODwpIEGX9977365;     mQtgDvBGWxZODwpIEGX9977365 = mQtgDvBGWxZODwpIEGX73351967;     mQtgDvBGWxZODwpIEGX73351967 = mQtgDvBGWxZODwpIEGX48039136;     mQtgDvBGWxZODwpIEGX48039136 = mQtgDvBGWxZODwpIEGX21335384;     mQtgDvBGWxZODwpIEGX21335384 = mQtgDvBGWxZODwpIEGX67559743;     mQtgDvBGWxZODwpIEGX67559743 = mQtgDvBGWxZODwpIEGX77489072;     mQtgDvBGWxZODwpIEGX77489072 = mQtgDvBGWxZODwpIEGX83879054;     mQtgDvBGWxZODwpIEGX83879054 = mQtgDvBGWxZODwpIEGX12740470;     mQtgDvBGWxZODwpIEGX12740470 = mQtgDvBGWxZODwpIEGX92145708;     mQtgDvBGWxZODwpIEGX92145708 = mQtgDvBGWxZODwpIEGX80860777;     mQtgDvBGWxZODwpIEGX80860777 = mQtgDvBGWxZODwpIEGX36498;     mQtgDvBGWxZODwpIEGX36498 = mQtgDvBGWxZODwpIEGX67219388;     mQtgDvBGWxZODwpIEGX67219388 = mQtgDvBGWxZODwpIEGX66704510;     mQtgDvBGWxZODwpIEGX66704510 = mQtgDvBGWxZODwpIEGX74053599;     mQtgDvBGWxZODwpIEGX74053599 = mQtgDvBGWxZODwpIEGX70448343;     mQtgDvBGWxZODwpIEGX70448343 = mQtgDvBGWxZODwpIEGX34381305;     mQtgDvBGWxZODwpIEGX34381305 = mQtgDvBGWxZODwpIEGX67156280;     mQtgDvBGWxZODwpIEGX67156280 = mQtgDvBGWxZODwpIEGX88198734;     mQtgDvBGWxZODwpIEGX88198734 = mQtgDvBGWxZODwpIEGX46696182;     mQtgDvBGWxZODwpIEGX46696182 = mQtgDvBGWxZODwpIEGX74268767;     mQtgDvBGWxZODwpIEGX74268767 = mQtgDvBGWxZODwpIEGX59321316;     mQtgDvBGWxZODwpIEGX59321316 = mQtgDvBGWxZODwpIEGX84547783;     mQtgDvBGWxZODwpIEGX84547783 = mQtgDvBGWxZODwpIEGX54555145;     mQtgDvBGWxZODwpIEGX54555145 = mQtgDvBGWxZODwpIEGX23882803;     mQtgDvBGWxZODwpIEGX23882803 = mQtgDvBGWxZODwpIEGX39044594;     mQtgDvBGWxZODwpIEGX39044594 = mQtgDvBGWxZODwpIEGX9741590;     mQtgDvBGWxZODwpIEGX9741590 = mQtgDvBGWxZODwpIEGX57307537;     mQtgDvBGWxZODwpIEGX57307537 = mQtgDvBGWxZODwpIEGX19528920;     mQtgDvBGWxZODwpIEGX19528920 = mQtgDvBGWxZODwpIEGX65101201;     mQtgDvBGWxZODwpIEGX65101201 = mQtgDvBGWxZODwpIEGX31855172;     mQtgDvBGWxZODwpIEGX31855172 = mQtgDvBGWxZODwpIEGX98735833;     mQtgDvBGWxZODwpIEGX98735833 = mQtgDvBGWxZODwpIEGX82821983;     mQtgDvBGWxZODwpIEGX82821983 = mQtgDvBGWxZODwpIEGX41514386;     mQtgDvBGWxZODwpIEGX41514386 = mQtgDvBGWxZODwpIEGX46056722;     mQtgDvBGWxZODwpIEGX46056722 = mQtgDvBGWxZODwpIEGX30241994;     mQtgDvBGWxZODwpIEGX30241994 = mQtgDvBGWxZODwpIEGX4277347;     mQtgDvBGWxZODwpIEGX4277347 = mQtgDvBGWxZODwpIEGX74959871;     mQtgDvBGWxZODwpIEGX74959871 = mQtgDvBGWxZODwpIEGX98586150;     mQtgDvBGWxZODwpIEGX98586150 = mQtgDvBGWxZODwpIEGX54608994;     mQtgDvBGWxZODwpIEGX54608994 = mQtgDvBGWxZODwpIEGX61821566;     mQtgDvBGWxZODwpIEGX61821566 = mQtgDvBGWxZODwpIEGX20697782;     mQtgDvBGWxZODwpIEGX20697782 = mQtgDvBGWxZODwpIEGX77956822;     mQtgDvBGWxZODwpIEGX77956822 = mQtgDvBGWxZODwpIEGX8457907;     mQtgDvBGWxZODwpIEGX8457907 = mQtgDvBGWxZODwpIEGX54679803;     mQtgDvBGWxZODwpIEGX54679803 = mQtgDvBGWxZODwpIEGX52897387;     mQtgDvBGWxZODwpIEGX52897387 = mQtgDvBGWxZODwpIEGX48709148;     mQtgDvBGWxZODwpIEGX48709148 = mQtgDvBGWxZODwpIEGX23832525;     mQtgDvBGWxZODwpIEGX23832525 = mQtgDvBGWxZODwpIEGX85255188;     mQtgDvBGWxZODwpIEGX85255188 = mQtgDvBGWxZODwpIEGX30546883;     mQtgDvBGWxZODwpIEGX30546883 = mQtgDvBGWxZODwpIEGX63189633;     mQtgDvBGWxZODwpIEGX63189633 = mQtgDvBGWxZODwpIEGX83460295;     mQtgDvBGWxZODwpIEGX83460295 = mQtgDvBGWxZODwpIEGX89422726;     mQtgDvBGWxZODwpIEGX89422726 = mQtgDvBGWxZODwpIEGX39132409;     mQtgDvBGWxZODwpIEGX39132409 = mQtgDvBGWxZODwpIEGX2151093;     mQtgDvBGWxZODwpIEGX2151093 = mQtgDvBGWxZODwpIEGX66542192;     mQtgDvBGWxZODwpIEGX66542192 = mQtgDvBGWxZODwpIEGX25429582;     mQtgDvBGWxZODwpIEGX25429582 = mQtgDvBGWxZODwpIEGX18796823;     mQtgDvBGWxZODwpIEGX18796823 = mQtgDvBGWxZODwpIEGX24156333;     mQtgDvBGWxZODwpIEGX24156333 = mQtgDvBGWxZODwpIEGX82290790;     mQtgDvBGWxZODwpIEGX82290790 = mQtgDvBGWxZODwpIEGX57818153;     mQtgDvBGWxZODwpIEGX57818153 = mQtgDvBGWxZODwpIEGX20181536;     mQtgDvBGWxZODwpIEGX20181536 = mQtgDvBGWxZODwpIEGX64350135;     mQtgDvBGWxZODwpIEGX64350135 = mQtgDvBGWxZODwpIEGX47639269;     mQtgDvBGWxZODwpIEGX47639269 = mQtgDvBGWxZODwpIEGX86006821;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ZEEeyFGRwCpZdDESMyC71772626() {     int CBXtVRUWtQbILYueexl1991148 = -262473927;    int CBXtVRUWtQbILYueexl77666134 = -573894362;    int CBXtVRUWtQbILYueexl71881305 = -781807425;    int CBXtVRUWtQbILYueexl23807465 = -542362613;    int CBXtVRUWtQbILYueexl54774580 = -720556080;    int CBXtVRUWtQbILYueexl22252917 = -589368271;    int CBXtVRUWtQbILYueexl89345993 = -478075006;    int CBXtVRUWtQbILYueexl66374004 = -700967720;    int CBXtVRUWtQbILYueexl40187298 = -819514676;    int CBXtVRUWtQbILYueexl54137648 = 73579325;    int CBXtVRUWtQbILYueexl66951216 = -494868732;    int CBXtVRUWtQbILYueexl93836959 = -11015586;    int CBXtVRUWtQbILYueexl56073195 = -254304267;    int CBXtVRUWtQbILYueexl67219618 = 57757898;    int CBXtVRUWtQbILYueexl60774410 = -69425311;    int CBXtVRUWtQbILYueexl63810429 = -824575749;    int CBXtVRUWtQbILYueexl45945940 = -181124539;    int CBXtVRUWtQbILYueexl76327286 = -774745259;    int CBXtVRUWtQbILYueexl44342728 = -764765090;    int CBXtVRUWtQbILYueexl5221215 = -342246664;    int CBXtVRUWtQbILYueexl2468952 = -840501491;    int CBXtVRUWtQbILYueexl6046347 = -552481318;    int CBXtVRUWtQbILYueexl43807606 = -696571231;    int CBXtVRUWtQbILYueexl10418677 = -174615815;    int CBXtVRUWtQbILYueexl25860767 = -723382718;    int CBXtVRUWtQbILYueexl58045367 = -36327691;    int CBXtVRUWtQbILYueexl99647908 = -288996392;    int CBXtVRUWtQbILYueexl41268811 = -674720121;    int CBXtVRUWtQbILYueexl8138740 = -547415049;    int CBXtVRUWtQbILYueexl56225215 = -439250880;    int CBXtVRUWtQbILYueexl23187052 = 90951623;    int CBXtVRUWtQbILYueexl80538504 = -142403814;    int CBXtVRUWtQbILYueexl36810906 = -174508321;    int CBXtVRUWtQbILYueexl48896218 = -303279256;    int CBXtVRUWtQbILYueexl94064746 = -617870295;    int CBXtVRUWtQbILYueexl34742956 = -192658987;    int CBXtVRUWtQbILYueexl18833242 = -44961738;    int CBXtVRUWtQbILYueexl89627973 = -647663844;    int CBXtVRUWtQbILYueexl71742800 = -864110763;    int CBXtVRUWtQbILYueexl62901825 = -722283731;    int CBXtVRUWtQbILYueexl1160602 = -739221768;    int CBXtVRUWtQbILYueexl30763398 = -507990953;    int CBXtVRUWtQbILYueexl56022570 = 99282579;    int CBXtVRUWtQbILYueexl99856752 = -98061347;    int CBXtVRUWtQbILYueexl16746570 = -425811870;    int CBXtVRUWtQbILYueexl24073878 = -879255705;    int CBXtVRUWtQbILYueexl45913853 = -14618982;    int CBXtVRUWtQbILYueexl92990560 = 50736126;    int CBXtVRUWtQbILYueexl67634853 = -5425223;    int CBXtVRUWtQbILYueexl70381180 = -732159270;    int CBXtVRUWtQbILYueexl93648124 = -134957847;    int CBXtVRUWtQbILYueexl52032213 = -427445269;    int CBXtVRUWtQbILYueexl8625656 = -442569553;    int CBXtVRUWtQbILYueexl20468369 = -899785624;    int CBXtVRUWtQbILYueexl69303674 = -825826078;    int CBXtVRUWtQbILYueexl95944801 = -709992609;    int CBXtVRUWtQbILYueexl33858528 = -877323131;    int CBXtVRUWtQbILYueexl61462628 = -507191611;    int CBXtVRUWtQbILYueexl97946698 = -818979896;    int CBXtVRUWtQbILYueexl96729212 = -584228389;    int CBXtVRUWtQbILYueexl22605008 = -200371880;    int CBXtVRUWtQbILYueexl48077182 = -803354885;    int CBXtVRUWtQbILYueexl58235264 = -53552672;    int CBXtVRUWtQbILYueexl83962082 = -280263797;    int CBXtVRUWtQbILYueexl30950597 = 82627701;    int CBXtVRUWtQbILYueexl86412712 = -252464918;    int CBXtVRUWtQbILYueexl57026053 = -836507265;    int CBXtVRUWtQbILYueexl7176978 = -951025012;    int CBXtVRUWtQbILYueexl73154871 = -324371807;    int CBXtVRUWtQbILYueexl26031454 = -876766325;    int CBXtVRUWtQbILYueexl44977187 = -679614012;    int CBXtVRUWtQbILYueexl56317967 = -533460695;    int CBXtVRUWtQbILYueexl4584486 = -910634497;    int CBXtVRUWtQbILYueexl81440903 = 57518641;    int CBXtVRUWtQbILYueexl4060613 = -603024897;    int CBXtVRUWtQbILYueexl71705554 = -232510539;    int CBXtVRUWtQbILYueexl50023777 = -551763898;    int CBXtVRUWtQbILYueexl43950854 = -498509884;    int CBXtVRUWtQbILYueexl93672106 = -748803946;    int CBXtVRUWtQbILYueexl1786889 = -844127013;    int CBXtVRUWtQbILYueexl12131514 = 78291290;    int CBXtVRUWtQbILYueexl6657349 = -239732519;    int CBXtVRUWtQbILYueexl73633958 = -569294899;    int CBXtVRUWtQbILYueexl37757560 = -815255779;    int CBXtVRUWtQbILYueexl62577091 = -204293034;    int CBXtVRUWtQbILYueexl71154839 = -481603108;    int CBXtVRUWtQbILYueexl71912848 = -699834262;    int CBXtVRUWtQbILYueexl16342537 = -274722698;    int CBXtVRUWtQbILYueexl79592543 = -477453178;    int CBXtVRUWtQbILYueexl98119945 = -907877687;    int CBXtVRUWtQbILYueexl884429 = -315335856;    int CBXtVRUWtQbILYueexl57370614 = -537770128;    int CBXtVRUWtQbILYueexl91681275 = -828683949;    int CBXtVRUWtQbILYueexl75013588 = -179882374;    int CBXtVRUWtQbILYueexl40296817 = -421911852;    int CBXtVRUWtQbILYueexl53083420 = -935866883;    int CBXtVRUWtQbILYueexl72528134 = -354438282;    int CBXtVRUWtQbILYueexl72060487 = -620453625;    int CBXtVRUWtQbILYueexl68906156 = -80689049;    int CBXtVRUWtQbILYueexl30333858 = -262473927;     CBXtVRUWtQbILYueexl1991148 = CBXtVRUWtQbILYueexl77666134;     CBXtVRUWtQbILYueexl77666134 = CBXtVRUWtQbILYueexl71881305;     CBXtVRUWtQbILYueexl71881305 = CBXtVRUWtQbILYueexl23807465;     CBXtVRUWtQbILYueexl23807465 = CBXtVRUWtQbILYueexl54774580;     CBXtVRUWtQbILYueexl54774580 = CBXtVRUWtQbILYueexl22252917;     CBXtVRUWtQbILYueexl22252917 = CBXtVRUWtQbILYueexl89345993;     CBXtVRUWtQbILYueexl89345993 = CBXtVRUWtQbILYueexl66374004;     CBXtVRUWtQbILYueexl66374004 = CBXtVRUWtQbILYueexl40187298;     CBXtVRUWtQbILYueexl40187298 = CBXtVRUWtQbILYueexl54137648;     CBXtVRUWtQbILYueexl54137648 = CBXtVRUWtQbILYueexl66951216;     CBXtVRUWtQbILYueexl66951216 = CBXtVRUWtQbILYueexl93836959;     CBXtVRUWtQbILYueexl93836959 = CBXtVRUWtQbILYueexl56073195;     CBXtVRUWtQbILYueexl56073195 = CBXtVRUWtQbILYueexl67219618;     CBXtVRUWtQbILYueexl67219618 = CBXtVRUWtQbILYueexl60774410;     CBXtVRUWtQbILYueexl60774410 = CBXtVRUWtQbILYueexl63810429;     CBXtVRUWtQbILYueexl63810429 = CBXtVRUWtQbILYueexl45945940;     CBXtVRUWtQbILYueexl45945940 = CBXtVRUWtQbILYueexl76327286;     CBXtVRUWtQbILYueexl76327286 = CBXtVRUWtQbILYueexl44342728;     CBXtVRUWtQbILYueexl44342728 = CBXtVRUWtQbILYueexl5221215;     CBXtVRUWtQbILYueexl5221215 = CBXtVRUWtQbILYueexl2468952;     CBXtVRUWtQbILYueexl2468952 = CBXtVRUWtQbILYueexl6046347;     CBXtVRUWtQbILYueexl6046347 = CBXtVRUWtQbILYueexl43807606;     CBXtVRUWtQbILYueexl43807606 = CBXtVRUWtQbILYueexl10418677;     CBXtVRUWtQbILYueexl10418677 = CBXtVRUWtQbILYueexl25860767;     CBXtVRUWtQbILYueexl25860767 = CBXtVRUWtQbILYueexl58045367;     CBXtVRUWtQbILYueexl58045367 = CBXtVRUWtQbILYueexl99647908;     CBXtVRUWtQbILYueexl99647908 = CBXtVRUWtQbILYueexl41268811;     CBXtVRUWtQbILYueexl41268811 = CBXtVRUWtQbILYueexl8138740;     CBXtVRUWtQbILYueexl8138740 = CBXtVRUWtQbILYueexl56225215;     CBXtVRUWtQbILYueexl56225215 = CBXtVRUWtQbILYueexl23187052;     CBXtVRUWtQbILYueexl23187052 = CBXtVRUWtQbILYueexl80538504;     CBXtVRUWtQbILYueexl80538504 = CBXtVRUWtQbILYueexl36810906;     CBXtVRUWtQbILYueexl36810906 = CBXtVRUWtQbILYueexl48896218;     CBXtVRUWtQbILYueexl48896218 = CBXtVRUWtQbILYueexl94064746;     CBXtVRUWtQbILYueexl94064746 = CBXtVRUWtQbILYueexl34742956;     CBXtVRUWtQbILYueexl34742956 = CBXtVRUWtQbILYueexl18833242;     CBXtVRUWtQbILYueexl18833242 = CBXtVRUWtQbILYueexl89627973;     CBXtVRUWtQbILYueexl89627973 = CBXtVRUWtQbILYueexl71742800;     CBXtVRUWtQbILYueexl71742800 = CBXtVRUWtQbILYueexl62901825;     CBXtVRUWtQbILYueexl62901825 = CBXtVRUWtQbILYueexl1160602;     CBXtVRUWtQbILYueexl1160602 = CBXtVRUWtQbILYueexl30763398;     CBXtVRUWtQbILYueexl30763398 = CBXtVRUWtQbILYueexl56022570;     CBXtVRUWtQbILYueexl56022570 = CBXtVRUWtQbILYueexl99856752;     CBXtVRUWtQbILYueexl99856752 = CBXtVRUWtQbILYueexl16746570;     CBXtVRUWtQbILYueexl16746570 = CBXtVRUWtQbILYueexl24073878;     CBXtVRUWtQbILYueexl24073878 = CBXtVRUWtQbILYueexl45913853;     CBXtVRUWtQbILYueexl45913853 = CBXtVRUWtQbILYueexl92990560;     CBXtVRUWtQbILYueexl92990560 = CBXtVRUWtQbILYueexl67634853;     CBXtVRUWtQbILYueexl67634853 = CBXtVRUWtQbILYueexl70381180;     CBXtVRUWtQbILYueexl70381180 = CBXtVRUWtQbILYueexl93648124;     CBXtVRUWtQbILYueexl93648124 = CBXtVRUWtQbILYueexl52032213;     CBXtVRUWtQbILYueexl52032213 = CBXtVRUWtQbILYueexl8625656;     CBXtVRUWtQbILYueexl8625656 = CBXtVRUWtQbILYueexl20468369;     CBXtVRUWtQbILYueexl20468369 = CBXtVRUWtQbILYueexl69303674;     CBXtVRUWtQbILYueexl69303674 = CBXtVRUWtQbILYueexl95944801;     CBXtVRUWtQbILYueexl95944801 = CBXtVRUWtQbILYueexl33858528;     CBXtVRUWtQbILYueexl33858528 = CBXtVRUWtQbILYueexl61462628;     CBXtVRUWtQbILYueexl61462628 = CBXtVRUWtQbILYueexl97946698;     CBXtVRUWtQbILYueexl97946698 = CBXtVRUWtQbILYueexl96729212;     CBXtVRUWtQbILYueexl96729212 = CBXtVRUWtQbILYueexl22605008;     CBXtVRUWtQbILYueexl22605008 = CBXtVRUWtQbILYueexl48077182;     CBXtVRUWtQbILYueexl48077182 = CBXtVRUWtQbILYueexl58235264;     CBXtVRUWtQbILYueexl58235264 = CBXtVRUWtQbILYueexl83962082;     CBXtVRUWtQbILYueexl83962082 = CBXtVRUWtQbILYueexl30950597;     CBXtVRUWtQbILYueexl30950597 = CBXtVRUWtQbILYueexl86412712;     CBXtVRUWtQbILYueexl86412712 = CBXtVRUWtQbILYueexl57026053;     CBXtVRUWtQbILYueexl57026053 = CBXtVRUWtQbILYueexl7176978;     CBXtVRUWtQbILYueexl7176978 = CBXtVRUWtQbILYueexl73154871;     CBXtVRUWtQbILYueexl73154871 = CBXtVRUWtQbILYueexl26031454;     CBXtVRUWtQbILYueexl26031454 = CBXtVRUWtQbILYueexl44977187;     CBXtVRUWtQbILYueexl44977187 = CBXtVRUWtQbILYueexl56317967;     CBXtVRUWtQbILYueexl56317967 = CBXtVRUWtQbILYueexl4584486;     CBXtVRUWtQbILYueexl4584486 = CBXtVRUWtQbILYueexl81440903;     CBXtVRUWtQbILYueexl81440903 = CBXtVRUWtQbILYueexl4060613;     CBXtVRUWtQbILYueexl4060613 = CBXtVRUWtQbILYueexl71705554;     CBXtVRUWtQbILYueexl71705554 = CBXtVRUWtQbILYueexl50023777;     CBXtVRUWtQbILYueexl50023777 = CBXtVRUWtQbILYueexl43950854;     CBXtVRUWtQbILYueexl43950854 = CBXtVRUWtQbILYueexl93672106;     CBXtVRUWtQbILYueexl93672106 = CBXtVRUWtQbILYueexl1786889;     CBXtVRUWtQbILYueexl1786889 = CBXtVRUWtQbILYueexl12131514;     CBXtVRUWtQbILYueexl12131514 = CBXtVRUWtQbILYueexl6657349;     CBXtVRUWtQbILYueexl6657349 = CBXtVRUWtQbILYueexl73633958;     CBXtVRUWtQbILYueexl73633958 = CBXtVRUWtQbILYueexl37757560;     CBXtVRUWtQbILYueexl37757560 = CBXtVRUWtQbILYueexl62577091;     CBXtVRUWtQbILYueexl62577091 = CBXtVRUWtQbILYueexl71154839;     CBXtVRUWtQbILYueexl71154839 = CBXtVRUWtQbILYueexl71912848;     CBXtVRUWtQbILYueexl71912848 = CBXtVRUWtQbILYueexl16342537;     CBXtVRUWtQbILYueexl16342537 = CBXtVRUWtQbILYueexl79592543;     CBXtVRUWtQbILYueexl79592543 = CBXtVRUWtQbILYueexl98119945;     CBXtVRUWtQbILYueexl98119945 = CBXtVRUWtQbILYueexl884429;     CBXtVRUWtQbILYueexl884429 = CBXtVRUWtQbILYueexl57370614;     CBXtVRUWtQbILYueexl57370614 = CBXtVRUWtQbILYueexl91681275;     CBXtVRUWtQbILYueexl91681275 = CBXtVRUWtQbILYueexl75013588;     CBXtVRUWtQbILYueexl75013588 = CBXtVRUWtQbILYueexl40296817;     CBXtVRUWtQbILYueexl40296817 = CBXtVRUWtQbILYueexl53083420;     CBXtVRUWtQbILYueexl53083420 = CBXtVRUWtQbILYueexl72528134;     CBXtVRUWtQbILYueexl72528134 = CBXtVRUWtQbILYueexl72060487;     CBXtVRUWtQbILYueexl72060487 = CBXtVRUWtQbILYueexl68906156;     CBXtVRUWtQbILYueexl68906156 = CBXtVRUWtQbILYueexl30333858;     CBXtVRUWtQbILYueexl30333858 = CBXtVRUWtQbILYueexl1991148;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void dmDZtnjGzuYwdQvXbck77770976() {     int ARNiBbGQJgPKNDUpTfb11306415 = -165004953;    int ARNiBbGQJgPKNDUpTfb33089057 = -590428864;    int ARNiBbGQJgPKNDUpTfb92033385 = -495448039;    int ARNiBbGQJgPKNDUpTfb81597487 = -734026605;    int ARNiBbGQJgPKNDUpTfb94837819 = -697071237;    int ARNiBbGQJgPKNDUpTfb15796279 = -48237131;    int ARNiBbGQJgPKNDUpTfb63000065 = -277323884;    int ARNiBbGQJgPKNDUpTfb55510160 = -897926868;    int ARNiBbGQJgPKNDUpTfb32995955 = -99575347;    int ARNiBbGQJgPKNDUpTfb22762106 = -847216343;    int ARNiBbGQJgPKNDUpTfb3853201 = -686109804;    int ARNiBbGQJgPKNDUpTfb5074709 = -648385401;    int ARNiBbGQJgPKNDUpTfb51854911 = -939726402;    int ARNiBbGQJgPKNDUpTfb99308259 = 78703794;    int ARNiBbGQJgPKNDUpTfb76050447 = 79044278;    int ARNiBbGQJgPKNDUpTfb68780953 = -852099227;    int ARNiBbGQJgPKNDUpTfb89756707 = -208709626;    int ARNiBbGQJgPKNDUpTfb88519927 = -504802572;    int ARNiBbGQJgPKNDUpTfb26355660 = -718405919;    int ARNiBbGQJgPKNDUpTfb68416562 = -420954505;    int ARNiBbGQJgPKNDUpTfb91148303 = -66201420;    int ARNiBbGQJgPKNDUpTfb30255259 = -375377651;    int ARNiBbGQJgPKNDUpTfb79868873 = -311100231;    int ARNiBbGQJgPKNDUpTfb69625306 = -791776925;    int ARNiBbGQJgPKNDUpTfb88923309 = 57484232;    int ARNiBbGQJgPKNDUpTfb23953185 = -135539332;    int ARNiBbGQJgPKNDUpTfb33406176 = 2114763;    int ARNiBbGQJgPKNDUpTfb12363287 = -81856854;    int ARNiBbGQJgPKNDUpTfb75255647 = -661834484;    int ARNiBbGQJgPKNDUpTfb69006163 = -245335443;    int ARNiBbGQJgPKNDUpTfb93185430 = -619700194;    int ARNiBbGQJgPKNDUpTfb57797867 = -573575109;    int ARNiBbGQJgPKNDUpTfb86670235 = 14400666;    int ARNiBbGQJgPKNDUpTfb37925166 = -886839142;    int ARNiBbGQJgPKNDUpTfb80715022 = -794282890;    int ARNiBbGQJgPKNDUpTfb66567850 = -608884434;    int ARNiBbGQJgPKNDUpTfb56300850 = -746161600;    int ARNiBbGQJgPKNDUpTfb45664771 = -400259207;    int ARNiBbGQJgPKNDUpTfb37968502 = -915326550;    int ARNiBbGQJgPKNDUpTfb39001722 = -429469244;    int ARNiBbGQJgPKNDUpTfb25223736 = -876378186;    int ARNiBbGQJgPKNDUpTfb18415053 = -429263044;    int ARNiBbGQJgPKNDUpTfb77739575 = -122597803;    int ARNiBbGQJgPKNDUpTfb58613653 = -588456235;    int ARNiBbGQJgPKNDUpTfb52696644 = -217587664;    int ARNiBbGQJgPKNDUpTfb94313113 = -104790264;    int ARNiBbGQJgPKNDUpTfb51163484 = -687453127;    int ARNiBbGQJgPKNDUpTfb64461597 = -395807262;    int ARNiBbGQJgPKNDUpTfb33661997 = -241121740;    int ARNiBbGQJgPKNDUpTfb40019082 = -525172972;    int ARNiBbGQJgPKNDUpTfb30615833 = -970833844;    int ARNiBbGQJgPKNDUpTfb16249255 = 24568513;    int ARNiBbGQJgPKNDUpTfb96633313 = -30346459;    int ARNiBbGQJgPKNDUpTfb25049613 = -159638742;    int ARNiBbGQJgPKNDUpTfb86622673 = -760744163;    int ARNiBbGQJgPKNDUpTfb81051155 = -789627303;    int ARNiBbGQJgPKNDUpTfb53220184 = -179328634;    int ARNiBbGQJgPKNDUpTfb22408080 = -703671114;    int ARNiBbGQJgPKNDUpTfb92674177 = -691510837;    int ARNiBbGQJgPKNDUpTfb70884634 = -461531905;    int ARNiBbGQJgPKNDUpTfb82390103 = 49648105;    int ARNiBbGQJgPKNDUpTfb50636779 = -95467031;    int ARNiBbGQJgPKNDUpTfb80254513 = -136092384;    int ARNiBbGQJgPKNDUpTfb63989791 = -854239905;    int ARNiBbGQJgPKNDUpTfb29576675 = -127516150;    int ARNiBbGQJgPKNDUpTfb46055334 = -12534696;    int ARNiBbGQJgPKNDUpTfb18404473 = -562786068;    int ARNiBbGQJgPKNDUpTfb13929745 = 47112740;    int ARNiBbGQJgPKNDUpTfb18593237 = -127013317;    int ARNiBbGQJgPKNDUpTfb9482598 = -312071289;    int ARNiBbGQJgPKNDUpTfb12480104 = -5937627;    int ARNiBbGQJgPKNDUpTfb44091936 = -808450420;    int ARNiBbGQJgPKNDUpTfb50551426 = -589476023;    int ARNiBbGQJgPKNDUpTfb87353938 = -188936675;    int ARNiBbGQJgPKNDUpTfb43192826 = -544576320;    int ARNiBbGQJgPKNDUpTfb72733250 = -636938376;    int ARNiBbGQJgPKNDUpTfb52515683 = -152779849;    int ARNiBbGQJgPKNDUpTfb21255220 = -722643996;    int ARNiBbGQJgPKNDUpTfb16928662 = -474189262;    int ARNiBbGQJgPKNDUpTfb94610196 = -837725505;    int ARNiBbGQJgPKNDUpTfb72789700 = -448086206;    int ARNiBbGQJgPKNDUpTfb68944578 = -602077975;    int ARNiBbGQJgPKNDUpTfb78701290 = -840735115;    int ARNiBbGQJgPKNDUpTfb35236565 = -36661513;    int ARNiBbGQJgPKNDUpTfb38390330 = -274501600;    int ARNiBbGQJgPKNDUpTfb76936175 = -544268708;    int ARNiBbGQJgPKNDUpTfb61164553 = -443228651;    int ARNiBbGQJgPKNDUpTfb61620623 = -825960592;    int ARNiBbGQJgPKNDUpTfb51302493 = -26094980;    int ARNiBbGQJgPKNDUpTfb99663866 = 95344413;    int ARNiBbGQJgPKNDUpTfb13347667 = -329555800;    int ARNiBbGQJgPKNDUpTfb33892770 = 57509513;    int ARNiBbGQJgPKNDUpTfb52990594 = -708748370;    int ARNiBbGQJgPKNDUpTfb67083867 = -353794645;    int ARNiBbGQJgPKNDUpTfb56611618 = -379117349;    int ARNiBbGQJgPKNDUpTfb74586957 = -680911155;    int ARNiBbGQJgPKNDUpTfb38160540 = -193170661;    int ARNiBbGQJgPKNDUpTfb13749784 = -268357898;    int ARNiBbGQJgPKNDUpTfb29036978 = -360940086;    int ARNiBbGQJgPKNDUpTfb6641311 = -165004953;     ARNiBbGQJgPKNDUpTfb11306415 = ARNiBbGQJgPKNDUpTfb33089057;     ARNiBbGQJgPKNDUpTfb33089057 = ARNiBbGQJgPKNDUpTfb92033385;     ARNiBbGQJgPKNDUpTfb92033385 = ARNiBbGQJgPKNDUpTfb81597487;     ARNiBbGQJgPKNDUpTfb81597487 = ARNiBbGQJgPKNDUpTfb94837819;     ARNiBbGQJgPKNDUpTfb94837819 = ARNiBbGQJgPKNDUpTfb15796279;     ARNiBbGQJgPKNDUpTfb15796279 = ARNiBbGQJgPKNDUpTfb63000065;     ARNiBbGQJgPKNDUpTfb63000065 = ARNiBbGQJgPKNDUpTfb55510160;     ARNiBbGQJgPKNDUpTfb55510160 = ARNiBbGQJgPKNDUpTfb32995955;     ARNiBbGQJgPKNDUpTfb32995955 = ARNiBbGQJgPKNDUpTfb22762106;     ARNiBbGQJgPKNDUpTfb22762106 = ARNiBbGQJgPKNDUpTfb3853201;     ARNiBbGQJgPKNDUpTfb3853201 = ARNiBbGQJgPKNDUpTfb5074709;     ARNiBbGQJgPKNDUpTfb5074709 = ARNiBbGQJgPKNDUpTfb51854911;     ARNiBbGQJgPKNDUpTfb51854911 = ARNiBbGQJgPKNDUpTfb99308259;     ARNiBbGQJgPKNDUpTfb99308259 = ARNiBbGQJgPKNDUpTfb76050447;     ARNiBbGQJgPKNDUpTfb76050447 = ARNiBbGQJgPKNDUpTfb68780953;     ARNiBbGQJgPKNDUpTfb68780953 = ARNiBbGQJgPKNDUpTfb89756707;     ARNiBbGQJgPKNDUpTfb89756707 = ARNiBbGQJgPKNDUpTfb88519927;     ARNiBbGQJgPKNDUpTfb88519927 = ARNiBbGQJgPKNDUpTfb26355660;     ARNiBbGQJgPKNDUpTfb26355660 = ARNiBbGQJgPKNDUpTfb68416562;     ARNiBbGQJgPKNDUpTfb68416562 = ARNiBbGQJgPKNDUpTfb91148303;     ARNiBbGQJgPKNDUpTfb91148303 = ARNiBbGQJgPKNDUpTfb30255259;     ARNiBbGQJgPKNDUpTfb30255259 = ARNiBbGQJgPKNDUpTfb79868873;     ARNiBbGQJgPKNDUpTfb79868873 = ARNiBbGQJgPKNDUpTfb69625306;     ARNiBbGQJgPKNDUpTfb69625306 = ARNiBbGQJgPKNDUpTfb88923309;     ARNiBbGQJgPKNDUpTfb88923309 = ARNiBbGQJgPKNDUpTfb23953185;     ARNiBbGQJgPKNDUpTfb23953185 = ARNiBbGQJgPKNDUpTfb33406176;     ARNiBbGQJgPKNDUpTfb33406176 = ARNiBbGQJgPKNDUpTfb12363287;     ARNiBbGQJgPKNDUpTfb12363287 = ARNiBbGQJgPKNDUpTfb75255647;     ARNiBbGQJgPKNDUpTfb75255647 = ARNiBbGQJgPKNDUpTfb69006163;     ARNiBbGQJgPKNDUpTfb69006163 = ARNiBbGQJgPKNDUpTfb93185430;     ARNiBbGQJgPKNDUpTfb93185430 = ARNiBbGQJgPKNDUpTfb57797867;     ARNiBbGQJgPKNDUpTfb57797867 = ARNiBbGQJgPKNDUpTfb86670235;     ARNiBbGQJgPKNDUpTfb86670235 = ARNiBbGQJgPKNDUpTfb37925166;     ARNiBbGQJgPKNDUpTfb37925166 = ARNiBbGQJgPKNDUpTfb80715022;     ARNiBbGQJgPKNDUpTfb80715022 = ARNiBbGQJgPKNDUpTfb66567850;     ARNiBbGQJgPKNDUpTfb66567850 = ARNiBbGQJgPKNDUpTfb56300850;     ARNiBbGQJgPKNDUpTfb56300850 = ARNiBbGQJgPKNDUpTfb45664771;     ARNiBbGQJgPKNDUpTfb45664771 = ARNiBbGQJgPKNDUpTfb37968502;     ARNiBbGQJgPKNDUpTfb37968502 = ARNiBbGQJgPKNDUpTfb39001722;     ARNiBbGQJgPKNDUpTfb39001722 = ARNiBbGQJgPKNDUpTfb25223736;     ARNiBbGQJgPKNDUpTfb25223736 = ARNiBbGQJgPKNDUpTfb18415053;     ARNiBbGQJgPKNDUpTfb18415053 = ARNiBbGQJgPKNDUpTfb77739575;     ARNiBbGQJgPKNDUpTfb77739575 = ARNiBbGQJgPKNDUpTfb58613653;     ARNiBbGQJgPKNDUpTfb58613653 = ARNiBbGQJgPKNDUpTfb52696644;     ARNiBbGQJgPKNDUpTfb52696644 = ARNiBbGQJgPKNDUpTfb94313113;     ARNiBbGQJgPKNDUpTfb94313113 = ARNiBbGQJgPKNDUpTfb51163484;     ARNiBbGQJgPKNDUpTfb51163484 = ARNiBbGQJgPKNDUpTfb64461597;     ARNiBbGQJgPKNDUpTfb64461597 = ARNiBbGQJgPKNDUpTfb33661997;     ARNiBbGQJgPKNDUpTfb33661997 = ARNiBbGQJgPKNDUpTfb40019082;     ARNiBbGQJgPKNDUpTfb40019082 = ARNiBbGQJgPKNDUpTfb30615833;     ARNiBbGQJgPKNDUpTfb30615833 = ARNiBbGQJgPKNDUpTfb16249255;     ARNiBbGQJgPKNDUpTfb16249255 = ARNiBbGQJgPKNDUpTfb96633313;     ARNiBbGQJgPKNDUpTfb96633313 = ARNiBbGQJgPKNDUpTfb25049613;     ARNiBbGQJgPKNDUpTfb25049613 = ARNiBbGQJgPKNDUpTfb86622673;     ARNiBbGQJgPKNDUpTfb86622673 = ARNiBbGQJgPKNDUpTfb81051155;     ARNiBbGQJgPKNDUpTfb81051155 = ARNiBbGQJgPKNDUpTfb53220184;     ARNiBbGQJgPKNDUpTfb53220184 = ARNiBbGQJgPKNDUpTfb22408080;     ARNiBbGQJgPKNDUpTfb22408080 = ARNiBbGQJgPKNDUpTfb92674177;     ARNiBbGQJgPKNDUpTfb92674177 = ARNiBbGQJgPKNDUpTfb70884634;     ARNiBbGQJgPKNDUpTfb70884634 = ARNiBbGQJgPKNDUpTfb82390103;     ARNiBbGQJgPKNDUpTfb82390103 = ARNiBbGQJgPKNDUpTfb50636779;     ARNiBbGQJgPKNDUpTfb50636779 = ARNiBbGQJgPKNDUpTfb80254513;     ARNiBbGQJgPKNDUpTfb80254513 = ARNiBbGQJgPKNDUpTfb63989791;     ARNiBbGQJgPKNDUpTfb63989791 = ARNiBbGQJgPKNDUpTfb29576675;     ARNiBbGQJgPKNDUpTfb29576675 = ARNiBbGQJgPKNDUpTfb46055334;     ARNiBbGQJgPKNDUpTfb46055334 = ARNiBbGQJgPKNDUpTfb18404473;     ARNiBbGQJgPKNDUpTfb18404473 = ARNiBbGQJgPKNDUpTfb13929745;     ARNiBbGQJgPKNDUpTfb13929745 = ARNiBbGQJgPKNDUpTfb18593237;     ARNiBbGQJgPKNDUpTfb18593237 = ARNiBbGQJgPKNDUpTfb9482598;     ARNiBbGQJgPKNDUpTfb9482598 = ARNiBbGQJgPKNDUpTfb12480104;     ARNiBbGQJgPKNDUpTfb12480104 = ARNiBbGQJgPKNDUpTfb44091936;     ARNiBbGQJgPKNDUpTfb44091936 = ARNiBbGQJgPKNDUpTfb50551426;     ARNiBbGQJgPKNDUpTfb50551426 = ARNiBbGQJgPKNDUpTfb87353938;     ARNiBbGQJgPKNDUpTfb87353938 = ARNiBbGQJgPKNDUpTfb43192826;     ARNiBbGQJgPKNDUpTfb43192826 = ARNiBbGQJgPKNDUpTfb72733250;     ARNiBbGQJgPKNDUpTfb72733250 = ARNiBbGQJgPKNDUpTfb52515683;     ARNiBbGQJgPKNDUpTfb52515683 = ARNiBbGQJgPKNDUpTfb21255220;     ARNiBbGQJgPKNDUpTfb21255220 = ARNiBbGQJgPKNDUpTfb16928662;     ARNiBbGQJgPKNDUpTfb16928662 = ARNiBbGQJgPKNDUpTfb94610196;     ARNiBbGQJgPKNDUpTfb94610196 = ARNiBbGQJgPKNDUpTfb72789700;     ARNiBbGQJgPKNDUpTfb72789700 = ARNiBbGQJgPKNDUpTfb68944578;     ARNiBbGQJgPKNDUpTfb68944578 = ARNiBbGQJgPKNDUpTfb78701290;     ARNiBbGQJgPKNDUpTfb78701290 = ARNiBbGQJgPKNDUpTfb35236565;     ARNiBbGQJgPKNDUpTfb35236565 = ARNiBbGQJgPKNDUpTfb38390330;     ARNiBbGQJgPKNDUpTfb38390330 = ARNiBbGQJgPKNDUpTfb76936175;     ARNiBbGQJgPKNDUpTfb76936175 = ARNiBbGQJgPKNDUpTfb61164553;     ARNiBbGQJgPKNDUpTfb61164553 = ARNiBbGQJgPKNDUpTfb61620623;     ARNiBbGQJgPKNDUpTfb61620623 = ARNiBbGQJgPKNDUpTfb51302493;     ARNiBbGQJgPKNDUpTfb51302493 = ARNiBbGQJgPKNDUpTfb99663866;     ARNiBbGQJgPKNDUpTfb99663866 = ARNiBbGQJgPKNDUpTfb13347667;     ARNiBbGQJgPKNDUpTfb13347667 = ARNiBbGQJgPKNDUpTfb33892770;     ARNiBbGQJgPKNDUpTfb33892770 = ARNiBbGQJgPKNDUpTfb52990594;     ARNiBbGQJgPKNDUpTfb52990594 = ARNiBbGQJgPKNDUpTfb67083867;     ARNiBbGQJgPKNDUpTfb67083867 = ARNiBbGQJgPKNDUpTfb56611618;     ARNiBbGQJgPKNDUpTfb56611618 = ARNiBbGQJgPKNDUpTfb74586957;     ARNiBbGQJgPKNDUpTfb74586957 = ARNiBbGQJgPKNDUpTfb38160540;     ARNiBbGQJgPKNDUpTfb38160540 = ARNiBbGQJgPKNDUpTfb13749784;     ARNiBbGQJgPKNDUpTfb13749784 = ARNiBbGQJgPKNDUpTfb29036978;     ARNiBbGQJgPKNDUpTfb29036978 = ARNiBbGQJgPKNDUpTfb6641311;     ARNiBbGQJgPKNDUpTfb6641311 = ARNiBbGQJgPKNDUpTfb11306415;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void jVXBIjWukLffzatGIdT99478788() {     int CJeGNHNSIKwDewaFWur17417050 = -149430983;    int CJeGNHNSIKwDewaFWur15034653 = -342623770;    int CJeGNHNSIKwDewaFWur9388782 = -603409573;    int CJeGNHNSIKwDewaFWur93752128 = -745316066;    int CJeGNHNSIKwDewaFWur72573410 = -586076430;    int CJeGNHNSIKwDewaFWur42018914 = -12166178;    int CJeGNHNSIKwDewaFWur92036367 = -120825328;    int CJeGNHNSIKwDewaFWur74484101 = -888978098;    int CJeGNHNSIKwDewaFWur80378614 = -681254083;    int CJeGNHNSIKwDewaFWur60631278 = -812998692;    int CJeGNHNSIKwDewaFWur84284096 = -523019463;    int CJeGNHNSIKwDewaFWur51189428 = -828269965;    int CJeGNHNSIKwDewaFWur69916943 = -301275965;    int CJeGNHNSIKwDewaFWur36296156 = -798687826;    int CJeGNHNSIKwDewaFWur16964984 = -574130741;    int CJeGNHNSIKwDewaFWur84850894 = -57894421;    int CJeGNHNSIKwDewaFWur39445470 = -644869309;    int CJeGNHNSIKwDewaFWur8573614 = -567396837;    int CJeGNHNSIKwDewaFWur8613772 = -642157282;    int CJeGNHNSIKwDewaFWur21040490 = -289881876;    int CJeGNHNSIKwDewaFWur59370920 = -732155249;    int CJeGNHNSIKwDewaFWur95072548 = -793299251;    int CJeGNHNSIKwDewaFWur52338061 = -516575560;    int CJeGNHNSIKwDewaFWur97267788 = -895002436;    int CJeGNHNSIKwDewaFWur61065649 = -742405654;    int CJeGNHNSIKwDewaFWur65248937 = 77599416;    int CJeGNHNSIKwDewaFWur2087536 = -199347153;    int CJeGNHNSIKwDewaFWur60873937 = -756752796;    int CJeGNHNSIKwDewaFWur54066350 = -430287504;    int CJeGNHNSIKwDewaFWur13711670 = -838237684;    int CJeGNHNSIKwDewaFWur18840659 = -920114366;    int CJeGNHNSIKwDewaFWur40132346 = -674843687;    int CJeGNHNSIKwDewaFWur81833607 = -80156920;    int CJeGNHNSIKwDewaFWur33038568 = -515062640;    int CJeGNHNSIKwDewaFWur24547712 = -592329920;    int CJeGNHNSIKwDewaFWur78121953 = -902676288;    int CJeGNHNSIKwDewaFWur49504152 = -799450848;    int CJeGNHNSIKwDewaFWur49672663 = -167027895;    int CJeGNHNSIKwDewaFWur46892352 = -521931463;    int CJeGNHNSIKwDewaFWur98376552 = -512340152;    int CJeGNHNSIKwDewaFWur18748628 = 70404022;    int CJeGNHNSIKwDewaFWur36263171 = -893197405;    int CJeGNHNSIKwDewaFWur16089914 = -762532641;    int CJeGNHNSIKwDewaFWur5253292 = -164763617;    int CJeGNHNSIKwDewaFWur48667162 = -352745220;    int CJeGNHNSIKwDewaFWur46680277 = 97948949;    int CJeGNHNSIKwDewaFWur96639851 = -187509287;    int CJeGNHNSIKwDewaFWur47802119 = 85535849;    int CJeGNHNSIKwDewaFWur61996115 = -990622589;    int CJeGNHNSIKwDewaFWur72976158 = -199208666;    int CJeGNHNSIKwDewaFWur79575881 = -391682522;    int CJeGNHNSIKwDewaFWur41606232 = -158303555;    int CJeGNHNSIKwDewaFWur20330120 = -814190055;    int CJeGNHNSIKwDewaFWur31268764 = 87971262;    int CJeGNHNSIKwDewaFWur40107868 = -118175223;    int CJeGNHNSIKwDewaFWur22344502 = -356131733;    int CJeGNHNSIKwDewaFWur62696591 = -826048211;    int CJeGNHNSIKwDewaFWur12120994 = -708407138;    int CJeGNHNSIKwDewaFWur32686480 = 97089588;    int CJeGNHNSIKwDewaFWur7324473 = -563675846;    int CJeGNHNSIKwDewaFWur39931378 = -812819026;    int CJeGNHNSIKwDewaFWur31162430 = -364072533;    int CJeGNHNSIKwDewaFWur20417752 = -358690595;    int CJeGNHNSIKwDewaFWur66666944 = -843016400;    int CJeGNHNSIKwDewaFWur41790620 = -892884326;    int CJeGNHNSIKwDewaFWur44151750 = -848175777;    int CJeGNHNSIKwDewaFWur69355820 = -648113046;    int CJeGNHNSIKwDewaFWur36878376 = -786213325;    int CJeGNHNSIKwDewaFWur11748444 = -106357906;    int CJeGNHNSIKwDewaFWur38843030 = -671454453;    int CJeGNHNSIKwDewaFWur35346743 = -258443573;    int CJeGNHNSIKwDewaFWur89772806 = -377841414;    int CJeGNHNSIKwDewaFWur61681261 = 54534625;    int CJeGNHNSIKwDewaFWur10237220 = -29817130;    int CJeGNHNSIKwDewaFWur2291863 = -260285898;    int CJeGNHNSIKwDewaFWur23107750 = -838957844;    int CJeGNHNSIKwDewaFWur78982634 = 69233390;    int CJeGNHNSIKwDewaFWur47084770 = -251811943;    int CJeGNHNSIKwDewaFWur48600626 = -442257217;    int CJeGNHNSIKwDewaFWur14385373 = -740354604;    int CJeGNHNSIKwDewaFWur68609086 = -734891298;    int CJeGNHNSIKwDewaFWur54285416 = -184883002;    int CJeGNHNSIKwDewaFWur98877821 = -766130207;    int CJeGNHNSIKwDewaFWur81090191 = -131078838;    int CJeGNHNSIKwDewaFWur34135788 = -346555162;    int CJeGNHNSIKwDewaFWur77234427 = -661810812;    int CJeGNHNSIKwDewaFWur19802227 = -860653632;    int CJeGNHNSIKwDewaFWur50564843 = -68128182;    int CJeGNHNSIKwDewaFWur92930699 = -296887418;    int CJeGNHNSIKwDewaFWur2203211 = -136198187;    int CJeGNHNSIKwDewaFWur15425363 = 23371923;    int CJeGNHNSIKwDewaFWur37383159 = 8956289;    int CJeGNHNSIKwDewaFWur16986184 = -164117484;    int CJeGNHNSIKwDewaFWur39567879 = -958255617;    int CJeGNHNSIKwDewaFWur58445174 = -699521127;    int CJeGNHNSIKwDewaFWur87586197 = -565523446;    int CJeGNHNSIKwDewaFWur15845419 = -434506810;    int CJeGNHNSIKwDewaFWur49422969 = -919516242;    int CJeGNHNSIKwDewaFWur63462671 = -271879291;    int CJeGNHNSIKwDewaFWur4515412 = -149430983;     CJeGNHNSIKwDewaFWur17417050 = CJeGNHNSIKwDewaFWur15034653;     CJeGNHNSIKwDewaFWur15034653 = CJeGNHNSIKwDewaFWur9388782;     CJeGNHNSIKwDewaFWur9388782 = CJeGNHNSIKwDewaFWur93752128;     CJeGNHNSIKwDewaFWur93752128 = CJeGNHNSIKwDewaFWur72573410;     CJeGNHNSIKwDewaFWur72573410 = CJeGNHNSIKwDewaFWur42018914;     CJeGNHNSIKwDewaFWur42018914 = CJeGNHNSIKwDewaFWur92036367;     CJeGNHNSIKwDewaFWur92036367 = CJeGNHNSIKwDewaFWur74484101;     CJeGNHNSIKwDewaFWur74484101 = CJeGNHNSIKwDewaFWur80378614;     CJeGNHNSIKwDewaFWur80378614 = CJeGNHNSIKwDewaFWur60631278;     CJeGNHNSIKwDewaFWur60631278 = CJeGNHNSIKwDewaFWur84284096;     CJeGNHNSIKwDewaFWur84284096 = CJeGNHNSIKwDewaFWur51189428;     CJeGNHNSIKwDewaFWur51189428 = CJeGNHNSIKwDewaFWur69916943;     CJeGNHNSIKwDewaFWur69916943 = CJeGNHNSIKwDewaFWur36296156;     CJeGNHNSIKwDewaFWur36296156 = CJeGNHNSIKwDewaFWur16964984;     CJeGNHNSIKwDewaFWur16964984 = CJeGNHNSIKwDewaFWur84850894;     CJeGNHNSIKwDewaFWur84850894 = CJeGNHNSIKwDewaFWur39445470;     CJeGNHNSIKwDewaFWur39445470 = CJeGNHNSIKwDewaFWur8573614;     CJeGNHNSIKwDewaFWur8573614 = CJeGNHNSIKwDewaFWur8613772;     CJeGNHNSIKwDewaFWur8613772 = CJeGNHNSIKwDewaFWur21040490;     CJeGNHNSIKwDewaFWur21040490 = CJeGNHNSIKwDewaFWur59370920;     CJeGNHNSIKwDewaFWur59370920 = CJeGNHNSIKwDewaFWur95072548;     CJeGNHNSIKwDewaFWur95072548 = CJeGNHNSIKwDewaFWur52338061;     CJeGNHNSIKwDewaFWur52338061 = CJeGNHNSIKwDewaFWur97267788;     CJeGNHNSIKwDewaFWur97267788 = CJeGNHNSIKwDewaFWur61065649;     CJeGNHNSIKwDewaFWur61065649 = CJeGNHNSIKwDewaFWur65248937;     CJeGNHNSIKwDewaFWur65248937 = CJeGNHNSIKwDewaFWur2087536;     CJeGNHNSIKwDewaFWur2087536 = CJeGNHNSIKwDewaFWur60873937;     CJeGNHNSIKwDewaFWur60873937 = CJeGNHNSIKwDewaFWur54066350;     CJeGNHNSIKwDewaFWur54066350 = CJeGNHNSIKwDewaFWur13711670;     CJeGNHNSIKwDewaFWur13711670 = CJeGNHNSIKwDewaFWur18840659;     CJeGNHNSIKwDewaFWur18840659 = CJeGNHNSIKwDewaFWur40132346;     CJeGNHNSIKwDewaFWur40132346 = CJeGNHNSIKwDewaFWur81833607;     CJeGNHNSIKwDewaFWur81833607 = CJeGNHNSIKwDewaFWur33038568;     CJeGNHNSIKwDewaFWur33038568 = CJeGNHNSIKwDewaFWur24547712;     CJeGNHNSIKwDewaFWur24547712 = CJeGNHNSIKwDewaFWur78121953;     CJeGNHNSIKwDewaFWur78121953 = CJeGNHNSIKwDewaFWur49504152;     CJeGNHNSIKwDewaFWur49504152 = CJeGNHNSIKwDewaFWur49672663;     CJeGNHNSIKwDewaFWur49672663 = CJeGNHNSIKwDewaFWur46892352;     CJeGNHNSIKwDewaFWur46892352 = CJeGNHNSIKwDewaFWur98376552;     CJeGNHNSIKwDewaFWur98376552 = CJeGNHNSIKwDewaFWur18748628;     CJeGNHNSIKwDewaFWur18748628 = CJeGNHNSIKwDewaFWur36263171;     CJeGNHNSIKwDewaFWur36263171 = CJeGNHNSIKwDewaFWur16089914;     CJeGNHNSIKwDewaFWur16089914 = CJeGNHNSIKwDewaFWur5253292;     CJeGNHNSIKwDewaFWur5253292 = CJeGNHNSIKwDewaFWur48667162;     CJeGNHNSIKwDewaFWur48667162 = CJeGNHNSIKwDewaFWur46680277;     CJeGNHNSIKwDewaFWur46680277 = CJeGNHNSIKwDewaFWur96639851;     CJeGNHNSIKwDewaFWur96639851 = CJeGNHNSIKwDewaFWur47802119;     CJeGNHNSIKwDewaFWur47802119 = CJeGNHNSIKwDewaFWur61996115;     CJeGNHNSIKwDewaFWur61996115 = CJeGNHNSIKwDewaFWur72976158;     CJeGNHNSIKwDewaFWur72976158 = CJeGNHNSIKwDewaFWur79575881;     CJeGNHNSIKwDewaFWur79575881 = CJeGNHNSIKwDewaFWur41606232;     CJeGNHNSIKwDewaFWur41606232 = CJeGNHNSIKwDewaFWur20330120;     CJeGNHNSIKwDewaFWur20330120 = CJeGNHNSIKwDewaFWur31268764;     CJeGNHNSIKwDewaFWur31268764 = CJeGNHNSIKwDewaFWur40107868;     CJeGNHNSIKwDewaFWur40107868 = CJeGNHNSIKwDewaFWur22344502;     CJeGNHNSIKwDewaFWur22344502 = CJeGNHNSIKwDewaFWur62696591;     CJeGNHNSIKwDewaFWur62696591 = CJeGNHNSIKwDewaFWur12120994;     CJeGNHNSIKwDewaFWur12120994 = CJeGNHNSIKwDewaFWur32686480;     CJeGNHNSIKwDewaFWur32686480 = CJeGNHNSIKwDewaFWur7324473;     CJeGNHNSIKwDewaFWur7324473 = CJeGNHNSIKwDewaFWur39931378;     CJeGNHNSIKwDewaFWur39931378 = CJeGNHNSIKwDewaFWur31162430;     CJeGNHNSIKwDewaFWur31162430 = CJeGNHNSIKwDewaFWur20417752;     CJeGNHNSIKwDewaFWur20417752 = CJeGNHNSIKwDewaFWur66666944;     CJeGNHNSIKwDewaFWur66666944 = CJeGNHNSIKwDewaFWur41790620;     CJeGNHNSIKwDewaFWur41790620 = CJeGNHNSIKwDewaFWur44151750;     CJeGNHNSIKwDewaFWur44151750 = CJeGNHNSIKwDewaFWur69355820;     CJeGNHNSIKwDewaFWur69355820 = CJeGNHNSIKwDewaFWur36878376;     CJeGNHNSIKwDewaFWur36878376 = CJeGNHNSIKwDewaFWur11748444;     CJeGNHNSIKwDewaFWur11748444 = CJeGNHNSIKwDewaFWur38843030;     CJeGNHNSIKwDewaFWur38843030 = CJeGNHNSIKwDewaFWur35346743;     CJeGNHNSIKwDewaFWur35346743 = CJeGNHNSIKwDewaFWur89772806;     CJeGNHNSIKwDewaFWur89772806 = CJeGNHNSIKwDewaFWur61681261;     CJeGNHNSIKwDewaFWur61681261 = CJeGNHNSIKwDewaFWur10237220;     CJeGNHNSIKwDewaFWur10237220 = CJeGNHNSIKwDewaFWur2291863;     CJeGNHNSIKwDewaFWur2291863 = CJeGNHNSIKwDewaFWur23107750;     CJeGNHNSIKwDewaFWur23107750 = CJeGNHNSIKwDewaFWur78982634;     CJeGNHNSIKwDewaFWur78982634 = CJeGNHNSIKwDewaFWur47084770;     CJeGNHNSIKwDewaFWur47084770 = CJeGNHNSIKwDewaFWur48600626;     CJeGNHNSIKwDewaFWur48600626 = CJeGNHNSIKwDewaFWur14385373;     CJeGNHNSIKwDewaFWur14385373 = CJeGNHNSIKwDewaFWur68609086;     CJeGNHNSIKwDewaFWur68609086 = CJeGNHNSIKwDewaFWur54285416;     CJeGNHNSIKwDewaFWur54285416 = CJeGNHNSIKwDewaFWur98877821;     CJeGNHNSIKwDewaFWur98877821 = CJeGNHNSIKwDewaFWur81090191;     CJeGNHNSIKwDewaFWur81090191 = CJeGNHNSIKwDewaFWur34135788;     CJeGNHNSIKwDewaFWur34135788 = CJeGNHNSIKwDewaFWur77234427;     CJeGNHNSIKwDewaFWur77234427 = CJeGNHNSIKwDewaFWur19802227;     CJeGNHNSIKwDewaFWur19802227 = CJeGNHNSIKwDewaFWur50564843;     CJeGNHNSIKwDewaFWur50564843 = CJeGNHNSIKwDewaFWur92930699;     CJeGNHNSIKwDewaFWur92930699 = CJeGNHNSIKwDewaFWur2203211;     CJeGNHNSIKwDewaFWur2203211 = CJeGNHNSIKwDewaFWur15425363;     CJeGNHNSIKwDewaFWur15425363 = CJeGNHNSIKwDewaFWur37383159;     CJeGNHNSIKwDewaFWur37383159 = CJeGNHNSIKwDewaFWur16986184;     CJeGNHNSIKwDewaFWur16986184 = CJeGNHNSIKwDewaFWur39567879;     CJeGNHNSIKwDewaFWur39567879 = CJeGNHNSIKwDewaFWur58445174;     CJeGNHNSIKwDewaFWur58445174 = CJeGNHNSIKwDewaFWur87586197;     CJeGNHNSIKwDewaFWur87586197 = CJeGNHNSIKwDewaFWur15845419;     CJeGNHNSIKwDewaFWur15845419 = CJeGNHNSIKwDewaFWur49422969;     CJeGNHNSIKwDewaFWur49422969 = CJeGNHNSIKwDewaFWur63462671;     CJeGNHNSIKwDewaFWur63462671 = CJeGNHNSIKwDewaFWur4515412;     CJeGNHNSIKwDewaFWur4515412 = CJeGNHNSIKwDewaFWur17417050;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void oCSTVTzieuzjKWrtvFy69934662() {     int KKRndSQkQDXNlUEdDqN30203217 = -284471675;    int KKRndSQkQDXNlUEdDqN1805541 = -512957784;    int KKRndSQkQDXNlUEdDqN27141581 = 88231045;    int KKRndSQkQDXNlUEdDqN1692955 = -569518342;    int KKRndSQkQDXNlUEdDqN66084514 = 22107105;    int KKRndSQkQDXNlUEdDqN85328984 = -889089492;    int KKRndSQkQDXNlUEdDqN13244126 = -666497399;    int KKRndSQkQDXNlUEdDqN1203215 = -233496355;    int KKRndSQkQDXNlUEdDqN75783424 = -643012175;    int KKRndSQkQDXNlUEdDqN66849983 = -617086325;    int KKRndSQkQDXNlUEdDqN11771479 = -637705478;    int KKRndSQkQDXNlUEdDqN83139933 = -235602781;    int KKRndSQkQDXNlUEdDqN40060246 = -205058622;    int KKRndSQkQDXNlUEdDqN85920234 = -31103024;    int KKRndSQkQDXNlUEdDqN40271537 = -481116572;    int KKRndSQkQDXNlUEdDqN13275964 = -608785810;    int KKRndSQkQDXNlUEdDqN95197287 = -308643775;    int KKRndSQkQDXNlUEdDqN92132098 = -122607139;    int KKRndSQkQDXNlUEdDqN9774402 = -551626477;    int KKRndSQkQDXNlUEdDqN23694986 = -889126015;    int KKRndSQkQDXNlUEdDqN39544977 = -123471513;    int KKRndSQkQDXNlUEdDqN24120368 = -963157598;    int KKRndSQkQDXNlUEdDqN91098356 = -447579454;    int KKRndSQkQDXNlUEdDqN41774918 = -155347448;    int KKRndSQkQDXNlUEdDqN66959908 = -952847579;    int KKRndSQkQDXNlUEdDqN46567582 = -712831783;    int KKRndSQkQDXNlUEdDqN13503072 = -833053433;    int KKRndSQkQDXNlUEdDqN28226862 = -930550901;    int KKRndSQkQDXNlUEdDqN70683402 = -644504744;    int KKRndSQkQDXNlUEdDqN66462785 = -468123839;    int KKRndSQkQDXNlUEdDqN63276654 = -96531116;    int KKRndSQkQDXNlUEdDqN43451170 = -653563365;    int KKRndSQkQDXNlUEdDqN27879557 = 43988296;    int KKRndSQkQDXNlUEdDqN10114941 = -419816858;    int KKRndSQkQDXNlUEdDqN7608245 = -102361800;    int KKRndSQkQDXNlUEdDqN73346068 = -691239392;    int KKRndSQkQDXNlUEdDqN86268212 = -589360199;    int KKRndSQkQDXNlUEdDqN7376687 = -86647987;    int KKRndSQkQDXNlUEdDqN52667738 = -363782040;    int KKRndSQkQDXNlUEdDqN24641282 = -356756998;    int KKRndSQkQDXNlUEdDqN80179935 = -305069971;    int KKRndSQkQDXNlUEdDqN43965627 = -791508739;    int KKRndSQkQDXNlUEdDqN50973384 = -785966086;    int KKRndSQkQDXNlUEdDqN49881829 = -505935860;    int KKRndSQkQDXNlUEdDqN28675652 = -245515180;    int KKRndSQkQDXNlUEdDqN20308406 = 24630510;    int KKRndSQkQDXNlUEdDqN74221871 = -685024339;    int KKRndSQkQDXNlUEdDqN77242085 = -69816930;    int KKRndSQkQDXNlUEdDqN6060165 = -54224564;    int KKRndSQkQDXNlUEdDqN19926579 = -810245129;    int KKRndSQkQDXNlUEdDqN97903374 = -644566831;    int KKRndSQkQDXNlUEdDqN69782779 = -629488893;    int KKRndSQkQDXNlUEdDqN54815269 = -990193337;    int KKRndSQkQDXNlUEdDqN75968489 = -601480480;    int KKRndSQkQDXNlUEdDqN30389685 = -112619709;    int KKRndSQkQDXNlUEdDqN6082850 = -321314077;    int KKRndSQkQDXNlUEdDqN10707184 = 34621670;    int KKRndSQkQDXNlUEdDqN85366663 = -756421507;    int KKRndSQkQDXNlUEdDqN34733046 = -616670764;    int KKRndSQkQDXNlUEdDqN19516932 = -265061112;    int KKRndSQkQDXNlUEdDqN71825912 = 43963941;    int KKRndSQkQDXNlUEdDqN85017263 = -735946498;    int KKRndSQkQDXNlUEdDqN30519812 = -588991612;    int KKRndSQkQDXNlUEdDqN9320640 = -74888337;    int KKRndSQkQDXNlUEdDqN3573329 = -420555209;    int KKRndSQkQDXNlUEdDqN68320308 = -984142114;    int KKRndSQkQDXNlUEdDqN55260377 = -179591078;    int KKRndSQkQDXNlUEdDqN29945306 = -785241764;    int KKRndSQkQDXNlUEdDqN78311990 = -928741224;    int KKRndSQkQDXNlUEdDqN66925468 = -789877180;    int KKRndSQkQDXNlUEdDqN27007751 = 80574388;    int KKRndSQkQDXNlUEdDqN87820601 = -121995789;    int KKRndSQkQDXNlUEdDqN39464361 = -758825100;    int KKRndSQkQDXNlUEdDqN85133120 = -94869480;    int KKRndSQkQDXNlUEdDqN43515051 = -484056044;    int KKRndSQkQDXNlUEdDqN95579350 = -331962774;    int KKRndSQkQDXNlUEdDqN73146984 = -77191513;    int KKRndSQkQDXNlUEdDqN41216528 = -941643595;    int KKRndSQkQDXNlUEdDqN13099266 = -909832269;    int KKRndSQkQDXNlUEdDqN46651502 = -877478089;    int KKRndSQkQDXNlUEdDqN72345711 = 72192556;    int KKRndSQkQDXNlUEdDqN36260986 = -663236503;    int KKRndSQkQDXNlUEdDqN22166698 = -776326337;    int KKRndSQkQDXNlUEdDqN50756824 = -834259615;    int KKRndSQkQDXNlUEdDqN68559410 = -823557009;    int KKRndSQkQDXNlUEdDqN93493875 = -467042224;    int KKRndSQkQDXNlUEdDqN88635900 = -663370028;    int KKRndSQkQDXNlUEdDqN51911067 = -354531224;    int KKRndSQkQDXNlUEdDqN79725256 = -207197150;    int KKRndSQkQDXNlUEdDqN1525395 = -781047723;    int KKRndSQkQDXNlUEdDqN62638884 = -625861062;    int KKRndSQkQDXNlUEdDqN901550 = -832938692;    int KKRndSQkQDXNlUEdDqN72643640 = -469977223;    int KKRndSQkQDXNlUEdDqN33150806 = 1279072;    int KKRndSQkQDXNlUEdDqN52815369 = -300720939;    int KKRndSQkQDXNlUEdDqN95162672 = -569123473;    int KKRndSQkQDXNlUEdDqN13445816 = -102517128;    int KKRndSQkQDXNlUEdDqN41652744 = -611077749;    int KKRndSQkQDXNlUEdDqN46308501 = 14619349;    int KKRndSQkQDXNlUEdDqN60355343 = -284471675;     KKRndSQkQDXNlUEdDqN30203217 = KKRndSQkQDXNlUEdDqN1805541;     KKRndSQkQDXNlUEdDqN1805541 = KKRndSQkQDXNlUEdDqN27141581;     KKRndSQkQDXNlUEdDqN27141581 = KKRndSQkQDXNlUEdDqN1692955;     KKRndSQkQDXNlUEdDqN1692955 = KKRndSQkQDXNlUEdDqN66084514;     KKRndSQkQDXNlUEdDqN66084514 = KKRndSQkQDXNlUEdDqN85328984;     KKRndSQkQDXNlUEdDqN85328984 = KKRndSQkQDXNlUEdDqN13244126;     KKRndSQkQDXNlUEdDqN13244126 = KKRndSQkQDXNlUEdDqN1203215;     KKRndSQkQDXNlUEdDqN1203215 = KKRndSQkQDXNlUEdDqN75783424;     KKRndSQkQDXNlUEdDqN75783424 = KKRndSQkQDXNlUEdDqN66849983;     KKRndSQkQDXNlUEdDqN66849983 = KKRndSQkQDXNlUEdDqN11771479;     KKRndSQkQDXNlUEdDqN11771479 = KKRndSQkQDXNlUEdDqN83139933;     KKRndSQkQDXNlUEdDqN83139933 = KKRndSQkQDXNlUEdDqN40060246;     KKRndSQkQDXNlUEdDqN40060246 = KKRndSQkQDXNlUEdDqN85920234;     KKRndSQkQDXNlUEdDqN85920234 = KKRndSQkQDXNlUEdDqN40271537;     KKRndSQkQDXNlUEdDqN40271537 = KKRndSQkQDXNlUEdDqN13275964;     KKRndSQkQDXNlUEdDqN13275964 = KKRndSQkQDXNlUEdDqN95197287;     KKRndSQkQDXNlUEdDqN95197287 = KKRndSQkQDXNlUEdDqN92132098;     KKRndSQkQDXNlUEdDqN92132098 = KKRndSQkQDXNlUEdDqN9774402;     KKRndSQkQDXNlUEdDqN9774402 = KKRndSQkQDXNlUEdDqN23694986;     KKRndSQkQDXNlUEdDqN23694986 = KKRndSQkQDXNlUEdDqN39544977;     KKRndSQkQDXNlUEdDqN39544977 = KKRndSQkQDXNlUEdDqN24120368;     KKRndSQkQDXNlUEdDqN24120368 = KKRndSQkQDXNlUEdDqN91098356;     KKRndSQkQDXNlUEdDqN91098356 = KKRndSQkQDXNlUEdDqN41774918;     KKRndSQkQDXNlUEdDqN41774918 = KKRndSQkQDXNlUEdDqN66959908;     KKRndSQkQDXNlUEdDqN66959908 = KKRndSQkQDXNlUEdDqN46567582;     KKRndSQkQDXNlUEdDqN46567582 = KKRndSQkQDXNlUEdDqN13503072;     KKRndSQkQDXNlUEdDqN13503072 = KKRndSQkQDXNlUEdDqN28226862;     KKRndSQkQDXNlUEdDqN28226862 = KKRndSQkQDXNlUEdDqN70683402;     KKRndSQkQDXNlUEdDqN70683402 = KKRndSQkQDXNlUEdDqN66462785;     KKRndSQkQDXNlUEdDqN66462785 = KKRndSQkQDXNlUEdDqN63276654;     KKRndSQkQDXNlUEdDqN63276654 = KKRndSQkQDXNlUEdDqN43451170;     KKRndSQkQDXNlUEdDqN43451170 = KKRndSQkQDXNlUEdDqN27879557;     KKRndSQkQDXNlUEdDqN27879557 = KKRndSQkQDXNlUEdDqN10114941;     KKRndSQkQDXNlUEdDqN10114941 = KKRndSQkQDXNlUEdDqN7608245;     KKRndSQkQDXNlUEdDqN7608245 = KKRndSQkQDXNlUEdDqN73346068;     KKRndSQkQDXNlUEdDqN73346068 = KKRndSQkQDXNlUEdDqN86268212;     KKRndSQkQDXNlUEdDqN86268212 = KKRndSQkQDXNlUEdDqN7376687;     KKRndSQkQDXNlUEdDqN7376687 = KKRndSQkQDXNlUEdDqN52667738;     KKRndSQkQDXNlUEdDqN52667738 = KKRndSQkQDXNlUEdDqN24641282;     KKRndSQkQDXNlUEdDqN24641282 = KKRndSQkQDXNlUEdDqN80179935;     KKRndSQkQDXNlUEdDqN80179935 = KKRndSQkQDXNlUEdDqN43965627;     KKRndSQkQDXNlUEdDqN43965627 = KKRndSQkQDXNlUEdDqN50973384;     KKRndSQkQDXNlUEdDqN50973384 = KKRndSQkQDXNlUEdDqN49881829;     KKRndSQkQDXNlUEdDqN49881829 = KKRndSQkQDXNlUEdDqN28675652;     KKRndSQkQDXNlUEdDqN28675652 = KKRndSQkQDXNlUEdDqN20308406;     KKRndSQkQDXNlUEdDqN20308406 = KKRndSQkQDXNlUEdDqN74221871;     KKRndSQkQDXNlUEdDqN74221871 = KKRndSQkQDXNlUEdDqN77242085;     KKRndSQkQDXNlUEdDqN77242085 = KKRndSQkQDXNlUEdDqN6060165;     KKRndSQkQDXNlUEdDqN6060165 = KKRndSQkQDXNlUEdDqN19926579;     KKRndSQkQDXNlUEdDqN19926579 = KKRndSQkQDXNlUEdDqN97903374;     KKRndSQkQDXNlUEdDqN97903374 = KKRndSQkQDXNlUEdDqN69782779;     KKRndSQkQDXNlUEdDqN69782779 = KKRndSQkQDXNlUEdDqN54815269;     KKRndSQkQDXNlUEdDqN54815269 = KKRndSQkQDXNlUEdDqN75968489;     KKRndSQkQDXNlUEdDqN75968489 = KKRndSQkQDXNlUEdDqN30389685;     KKRndSQkQDXNlUEdDqN30389685 = KKRndSQkQDXNlUEdDqN6082850;     KKRndSQkQDXNlUEdDqN6082850 = KKRndSQkQDXNlUEdDqN10707184;     KKRndSQkQDXNlUEdDqN10707184 = KKRndSQkQDXNlUEdDqN85366663;     KKRndSQkQDXNlUEdDqN85366663 = KKRndSQkQDXNlUEdDqN34733046;     KKRndSQkQDXNlUEdDqN34733046 = KKRndSQkQDXNlUEdDqN19516932;     KKRndSQkQDXNlUEdDqN19516932 = KKRndSQkQDXNlUEdDqN71825912;     KKRndSQkQDXNlUEdDqN71825912 = KKRndSQkQDXNlUEdDqN85017263;     KKRndSQkQDXNlUEdDqN85017263 = KKRndSQkQDXNlUEdDqN30519812;     KKRndSQkQDXNlUEdDqN30519812 = KKRndSQkQDXNlUEdDqN9320640;     KKRndSQkQDXNlUEdDqN9320640 = KKRndSQkQDXNlUEdDqN3573329;     KKRndSQkQDXNlUEdDqN3573329 = KKRndSQkQDXNlUEdDqN68320308;     KKRndSQkQDXNlUEdDqN68320308 = KKRndSQkQDXNlUEdDqN55260377;     KKRndSQkQDXNlUEdDqN55260377 = KKRndSQkQDXNlUEdDqN29945306;     KKRndSQkQDXNlUEdDqN29945306 = KKRndSQkQDXNlUEdDqN78311990;     KKRndSQkQDXNlUEdDqN78311990 = KKRndSQkQDXNlUEdDqN66925468;     KKRndSQkQDXNlUEdDqN66925468 = KKRndSQkQDXNlUEdDqN27007751;     KKRndSQkQDXNlUEdDqN27007751 = KKRndSQkQDXNlUEdDqN87820601;     KKRndSQkQDXNlUEdDqN87820601 = KKRndSQkQDXNlUEdDqN39464361;     KKRndSQkQDXNlUEdDqN39464361 = KKRndSQkQDXNlUEdDqN85133120;     KKRndSQkQDXNlUEdDqN85133120 = KKRndSQkQDXNlUEdDqN43515051;     KKRndSQkQDXNlUEdDqN43515051 = KKRndSQkQDXNlUEdDqN95579350;     KKRndSQkQDXNlUEdDqN95579350 = KKRndSQkQDXNlUEdDqN73146984;     KKRndSQkQDXNlUEdDqN73146984 = KKRndSQkQDXNlUEdDqN41216528;     KKRndSQkQDXNlUEdDqN41216528 = KKRndSQkQDXNlUEdDqN13099266;     KKRndSQkQDXNlUEdDqN13099266 = KKRndSQkQDXNlUEdDqN46651502;     KKRndSQkQDXNlUEdDqN46651502 = KKRndSQkQDXNlUEdDqN72345711;     KKRndSQkQDXNlUEdDqN72345711 = KKRndSQkQDXNlUEdDqN36260986;     KKRndSQkQDXNlUEdDqN36260986 = KKRndSQkQDXNlUEdDqN22166698;     KKRndSQkQDXNlUEdDqN22166698 = KKRndSQkQDXNlUEdDqN50756824;     KKRndSQkQDXNlUEdDqN50756824 = KKRndSQkQDXNlUEdDqN68559410;     KKRndSQkQDXNlUEdDqN68559410 = KKRndSQkQDXNlUEdDqN93493875;     KKRndSQkQDXNlUEdDqN93493875 = KKRndSQkQDXNlUEdDqN88635900;     KKRndSQkQDXNlUEdDqN88635900 = KKRndSQkQDXNlUEdDqN51911067;     KKRndSQkQDXNlUEdDqN51911067 = KKRndSQkQDXNlUEdDqN79725256;     KKRndSQkQDXNlUEdDqN79725256 = KKRndSQkQDXNlUEdDqN1525395;     KKRndSQkQDXNlUEdDqN1525395 = KKRndSQkQDXNlUEdDqN62638884;     KKRndSQkQDXNlUEdDqN62638884 = KKRndSQkQDXNlUEdDqN901550;     KKRndSQkQDXNlUEdDqN901550 = KKRndSQkQDXNlUEdDqN72643640;     KKRndSQkQDXNlUEdDqN72643640 = KKRndSQkQDXNlUEdDqN33150806;     KKRndSQkQDXNlUEdDqN33150806 = KKRndSQkQDXNlUEdDqN52815369;     KKRndSQkQDXNlUEdDqN52815369 = KKRndSQkQDXNlUEdDqN95162672;     KKRndSQkQDXNlUEdDqN95162672 = KKRndSQkQDXNlUEdDqN13445816;     KKRndSQkQDXNlUEdDqN13445816 = KKRndSQkQDXNlUEdDqN41652744;     KKRndSQkQDXNlUEdDqN41652744 = KKRndSQkQDXNlUEdDqN46308501;     KKRndSQkQDXNlUEdDqN46308501 = KKRndSQkQDXNlUEdDqN60355343;     KKRndSQkQDXNlUEdDqN60355343 = KKRndSQkQDXNlUEdDqN30203217;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void rpSLqFtZFmMXRGXgxod30679422() {     int hZHdRGroAmTNNCiNGEr55509281 = -240148387;    int hZHdRGroAmTNNCiNGEr17476678 = -964165891;    int hZHdRGroAmTNNCiNGEr67843146 = -739448028;    int hZHdRGroAmTNNCiNGEr13059183 = -765759146;    int hZHdRGroAmTNNCiNGEr61986506 = -533734473;    int hZHdRGroAmTNNCiNGEr89503143 = -719821479;    int hZHdRGroAmTNNCiNGEr52723725 = -967165781;    int hZHdRGroAmTNNCiNGEr87220698 = 19118338;    int hZHdRGroAmTNNCiNGEr9422890 = -783212873;    int hZHdRGroAmTNNCiNGEr72448429 = -96982945;    int hZHdRGroAmTNNCiNGEr32631934 = -197963979;    int hZHdRGroAmTNNCiNGEr91451217 = -737790654;    int hZHdRGroAmTNNCiNGEr83704948 = 81864015;    int hZHdRGroAmTNNCiNGEr62733699 = -544234811;    int hZHdRGroAmTNNCiNGEr53215629 = -537988188;    int hZHdRGroAmTNNCiNGEr35572139 = -908928961;    int hZHdRGroAmTNNCiNGEr88881878 = -691428734;    int hZHdRGroAmTNNCiNGEr80022180 = -175337798;    int hZHdRGroAmTNNCiNGEr92702783 = -444625968;    int hZHdRGroAmTNNCiNGEr116251 = -676858466;    int hZHdRGroAmTNNCiNGEr28855120 = -600233799;    int hZHdRGroAmTNNCiNGEr36768721 = -360887012;    int hZHdRGroAmTNNCiNGEr29511997 = -502166020;    int hZHdRGroAmTNNCiNGEr77052823 = -546789171;    int hZHdRGroAmTNNCiNGEr26836913 = 98334294;    int hZHdRGroAmTNNCiNGEr18406110 = -814825017;    int hZHdRGroAmTNNCiNGEr23753782 = -683075487;    int hZHdRGroAmTNNCiNGEr89258087 = -343726523;    int hZHdRGroAmTNNCiNGEr42723568 = -219107852;    int hZHdRGroAmTNNCiNGEr70290 = -217276877;    int hZHdRGroAmTNNCiNGEr22054180 = -393837328;    int hZHdRGroAmTNNCiNGEr18954242 = -293357059;    int hZHdRGroAmTNNCiNGEr78480794 = -459490930;    int hZHdRGroAmTNNCiNGEr70135808 = -763467352;    int hZHdRGroAmTNNCiNGEr20136638 = -167171842;    int hZHdRGroAmTNNCiNGEr20665869 = 81538445;    int hZHdRGroAmTNNCiNGEr4764187 = -628380027;    int hZHdRGroAmTNNCiNGEr73146414 = -844690112;    int hZHdRGroAmTNNCiNGEr81970676 = -701459290;    int hZHdRGroAmTNNCiNGEr43730975 = -632673960;    int hZHdRGroAmTNNCiNGEr96212620 = -801639008;    int hZHdRGroAmTNNCiNGEr9123277 = -68429916;    int hZHdRGroAmTNNCiNGEr90940526 = -613225457;    int hZHdRGroAmTNNCiNGEr65384529 = -51590497;    int hZHdRGroAmTNNCiNGEr84613774 = -686679173;    int hZHdRGroAmTNNCiNGEr82047843 = -902496278;    int hZHdRGroAmTNNCiNGEr16826787 = -828151522;    int hZHdRGroAmTNNCiNGEr66283604 = -499599599;    int hZHdRGroAmTNNCiNGEr53844383 = 60281254;    int hZHdRGroAmTNNCiNGEr73195728 = -233273297;    int hZHdRGroAmTNNCiNGEr41206239 = -948354454;    int hZHdRGroAmTNNCiNGEr1036434 = -13774602;    int hZHdRGroAmTNNCiNGEr41618930 = -657906834;    int hZHdRGroAmTNNCiNGEr23611552 = -58248462;    int hZHdRGroAmTNNCiNGEr1824303 = -619469310;    int hZHdRGroAmTNNCiNGEr18740560 = -879261376;    int hZHdRGroAmTNNCiNGEr87964681 = -361999872;    int hZHdRGroAmTNNCiNGEr90790323 = -92658858;    int hZHdRGroAmTNNCiNGEr86222269 = -764093440;    int hZHdRGroAmTNNCiNGEr43580397 = -718909457;    int hZHdRGroAmTNNCiNGEr65749362 = 63254007;    int hZHdRGroAmTNNCiNGEr63465637 = -523439259;    int hZHdRGroAmTNNCiNGEr44497131 = -761773811;    int hZHdRGroAmTNNCiNGEr9352600 = -465935997;    int hZHdRGroAmTNNCiNGEr50394250 = -703145617;    int hZHdRGroAmTNNCiNGEr13677693 = -904606920;    int hZHdRGroAmTNNCiNGEr12970424 = -178299724;    int hZHdRGroAmTNNCiNGEr13569140 = -154668633;    int hZHdRGroAmTNNCiNGEr42597062 = -277062969;    int hZHdRGroAmTNNCiNGEr32549760 = -519526633;    int hZHdRGroAmTNNCiNGEr30807953 = -180548935;    int hZHdRGroAmTNNCiNGEr15735464 = -846738622;    int hZHdRGroAmTNNCiNGEr98051504 = -473878508;    int hZHdRGroAmTNNCiNGEr48971808 = -811952009;    int hZHdRGroAmTNNCiNGEr3903631 = -875219459;    int hZHdRGroAmTNNCiNGEr19731843 = -431803884;    int hZHdRGroAmTNNCiNGEr45828195 = -747661555;    int hZHdRGroAmTNNCiNGEr64127467 = -350575524;    int hZHdRGroAmTNNCiNGEr92439049 = -860109998;    int hZHdRGroAmTNNCiNGEr44789070 = 830572;    int hZHdRGroAmTNNCiNGEr1579324 = -986673495;    int hZHdRGroAmTNNCiNGEr57470177 = -83475889;    int hZHdRGroAmTNNCiNGEr35413704 = -304007777;    int hZHdRGroAmTNNCiNGEr69527840 = -985834555;    int hZHdRGroAmTNNCiNGEr58864051 = -268922424;    int hZHdRGroAmTNNCiNGEr21017747 = -280062726;    int hZHdRGroAmTNNCiNGEr77335311 = -635450226;    int hZHdRGroAmTNNCiNGEr54869243 = -301242469;    int hZHdRGroAmTNNCiNGEr68311505 = -43998043;    int hZHdRGroAmTNNCiNGEr1396078 = -287910467;    int hZHdRGroAmTNNCiNGEr32701188 = -556461684;    int hZHdRGroAmTNNCiNGEr13973863 = -435721169;    int hZHdRGroAmTNNCiNGEr86924144 = 19403327;    int hZHdRGroAmTNNCiNGEr38390279 = -982549834;    int hZHdRGroAmTNNCiNGEr77981613 = -595927968;    int hZHdRGroAmTNNCiNGEr32746983 = -178199750;    int hZHdRGroAmTNNCiNGEr64626145 = -306656105;    int hZHdRGroAmTNNCiNGEr81587927 = -47289461;    int hZHdRGroAmTNNCiNGEr14990280 = -348444880;    int hZHdRGroAmTNNCiNGEr70936081 = -240148387;     hZHdRGroAmTNNCiNGEr55509281 = hZHdRGroAmTNNCiNGEr17476678;     hZHdRGroAmTNNCiNGEr17476678 = hZHdRGroAmTNNCiNGEr67843146;     hZHdRGroAmTNNCiNGEr67843146 = hZHdRGroAmTNNCiNGEr13059183;     hZHdRGroAmTNNCiNGEr13059183 = hZHdRGroAmTNNCiNGEr61986506;     hZHdRGroAmTNNCiNGEr61986506 = hZHdRGroAmTNNCiNGEr89503143;     hZHdRGroAmTNNCiNGEr89503143 = hZHdRGroAmTNNCiNGEr52723725;     hZHdRGroAmTNNCiNGEr52723725 = hZHdRGroAmTNNCiNGEr87220698;     hZHdRGroAmTNNCiNGEr87220698 = hZHdRGroAmTNNCiNGEr9422890;     hZHdRGroAmTNNCiNGEr9422890 = hZHdRGroAmTNNCiNGEr72448429;     hZHdRGroAmTNNCiNGEr72448429 = hZHdRGroAmTNNCiNGEr32631934;     hZHdRGroAmTNNCiNGEr32631934 = hZHdRGroAmTNNCiNGEr91451217;     hZHdRGroAmTNNCiNGEr91451217 = hZHdRGroAmTNNCiNGEr83704948;     hZHdRGroAmTNNCiNGEr83704948 = hZHdRGroAmTNNCiNGEr62733699;     hZHdRGroAmTNNCiNGEr62733699 = hZHdRGroAmTNNCiNGEr53215629;     hZHdRGroAmTNNCiNGEr53215629 = hZHdRGroAmTNNCiNGEr35572139;     hZHdRGroAmTNNCiNGEr35572139 = hZHdRGroAmTNNCiNGEr88881878;     hZHdRGroAmTNNCiNGEr88881878 = hZHdRGroAmTNNCiNGEr80022180;     hZHdRGroAmTNNCiNGEr80022180 = hZHdRGroAmTNNCiNGEr92702783;     hZHdRGroAmTNNCiNGEr92702783 = hZHdRGroAmTNNCiNGEr116251;     hZHdRGroAmTNNCiNGEr116251 = hZHdRGroAmTNNCiNGEr28855120;     hZHdRGroAmTNNCiNGEr28855120 = hZHdRGroAmTNNCiNGEr36768721;     hZHdRGroAmTNNCiNGEr36768721 = hZHdRGroAmTNNCiNGEr29511997;     hZHdRGroAmTNNCiNGEr29511997 = hZHdRGroAmTNNCiNGEr77052823;     hZHdRGroAmTNNCiNGEr77052823 = hZHdRGroAmTNNCiNGEr26836913;     hZHdRGroAmTNNCiNGEr26836913 = hZHdRGroAmTNNCiNGEr18406110;     hZHdRGroAmTNNCiNGEr18406110 = hZHdRGroAmTNNCiNGEr23753782;     hZHdRGroAmTNNCiNGEr23753782 = hZHdRGroAmTNNCiNGEr89258087;     hZHdRGroAmTNNCiNGEr89258087 = hZHdRGroAmTNNCiNGEr42723568;     hZHdRGroAmTNNCiNGEr42723568 = hZHdRGroAmTNNCiNGEr70290;     hZHdRGroAmTNNCiNGEr70290 = hZHdRGroAmTNNCiNGEr22054180;     hZHdRGroAmTNNCiNGEr22054180 = hZHdRGroAmTNNCiNGEr18954242;     hZHdRGroAmTNNCiNGEr18954242 = hZHdRGroAmTNNCiNGEr78480794;     hZHdRGroAmTNNCiNGEr78480794 = hZHdRGroAmTNNCiNGEr70135808;     hZHdRGroAmTNNCiNGEr70135808 = hZHdRGroAmTNNCiNGEr20136638;     hZHdRGroAmTNNCiNGEr20136638 = hZHdRGroAmTNNCiNGEr20665869;     hZHdRGroAmTNNCiNGEr20665869 = hZHdRGroAmTNNCiNGEr4764187;     hZHdRGroAmTNNCiNGEr4764187 = hZHdRGroAmTNNCiNGEr73146414;     hZHdRGroAmTNNCiNGEr73146414 = hZHdRGroAmTNNCiNGEr81970676;     hZHdRGroAmTNNCiNGEr81970676 = hZHdRGroAmTNNCiNGEr43730975;     hZHdRGroAmTNNCiNGEr43730975 = hZHdRGroAmTNNCiNGEr96212620;     hZHdRGroAmTNNCiNGEr96212620 = hZHdRGroAmTNNCiNGEr9123277;     hZHdRGroAmTNNCiNGEr9123277 = hZHdRGroAmTNNCiNGEr90940526;     hZHdRGroAmTNNCiNGEr90940526 = hZHdRGroAmTNNCiNGEr65384529;     hZHdRGroAmTNNCiNGEr65384529 = hZHdRGroAmTNNCiNGEr84613774;     hZHdRGroAmTNNCiNGEr84613774 = hZHdRGroAmTNNCiNGEr82047843;     hZHdRGroAmTNNCiNGEr82047843 = hZHdRGroAmTNNCiNGEr16826787;     hZHdRGroAmTNNCiNGEr16826787 = hZHdRGroAmTNNCiNGEr66283604;     hZHdRGroAmTNNCiNGEr66283604 = hZHdRGroAmTNNCiNGEr53844383;     hZHdRGroAmTNNCiNGEr53844383 = hZHdRGroAmTNNCiNGEr73195728;     hZHdRGroAmTNNCiNGEr73195728 = hZHdRGroAmTNNCiNGEr41206239;     hZHdRGroAmTNNCiNGEr41206239 = hZHdRGroAmTNNCiNGEr1036434;     hZHdRGroAmTNNCiNGEr1036434 = hZHdRGroAmTNNCiNGEr41618930;     hZHdRGroAmTNNCiNGEr41618930 = hZHdRGroAmTNNCiNGEr23611552;     hZHdRGroAmTNNCiNGEr23611552 = hZHdRGroAmTNNCiNGEr1824303;     hZHdRGroAmTNNCiNGEr1824303 = hZHdRGroAmTNNCiNGEr18740560;     hZHdRGroAmTNNCiNGEr18740560 = hZHdRGroAmTNNCiNGEr87964681;     hZHdRGroAmTNNCiNGEr87964681 = hZHdRGroAmTNNCiNGEr90790323;     hZHdRGroAmTNNCiNGEr90790323 = hZHdRGroAmTNNCiNGEr86222269;     hZHdRGroAmTNNCiNGEr86222269 = hZHdRGroAmTNNCiNGEr43580397;     hZHdRGroAmTNNCiNGEr43580397 = hZHdRGroAmTNNCiNGEr65749362;     hZHdRGroAmTNNCiNGEr65749362 = hZHdRGroAmTNNCiNGEr63465637;     hZHdRGroAmTNNCiNGEr63465637 = hZHdRGroAmTNNCiNGEr44497131;     hZHdRGroAmTNNCiNGEr44497131 = hZHdRGroAmTNNCiNGEr9352600;     hZHdRGroAmTNNCiNGEr9352600 = hZHdRGroAmTNNCiNGEr50394250;     hZHdRGroAmTNNCiNGEr50394250 = hZHdRGroAmTNNCiNGEr13677693;     hZHdRGroAmTNNCiNGEr13677693 = hZHdRGroAmTNNCiNGEr12970424;     hZHdRGroAmTNNCiNGEr12970424 = hZHdRGroAmTNNCiNGEr13569140;     hZHdRGroAmTNNCiNGEr13569140 = hZHdRGroAmTNNCiNGEr42597062;     hZHdRGroAmTNNCiNGEr42597062 = hZHdRGroAmTNNCiNGEr32549760;     hZHdRGroAmTNNCiNGEr32549760 = hZHdRGroAmTNNCiNGEr30807953;     hZHdRGroAmTNNCiNGEr30807953 = hZHdRGroAmTNNCiNGEr15735464;     hZHdRGroAmTNNCiNGEr15735464 = hZHdRGroAmTNNCiNGEr98051504;     hZHdRGroAmTNNCiNGEr98051504 = hZHdRGroAmTNNCiNGEr48971808;     hZHdRGroAmTNNCiNGEr48971808 = hZHdRGroAmTNNCiNGEr3903631;     hZHdRGroAmTNNCiNGEr3903631 = hZHdRGroAmTNNCiNGEr19731843;     hZHdRGroAmTNNCiNGEr19731843 = hZHdRGroAmTNNCiNGEr45828195;     hZHdRGroAmTNNCiNGEr45828195 = hZHdRGroAmTNNCiNGEr64127467;     hZHdRGroAmTNNCiNGEr64127467 = hZHdRGroAmTNNCiNGEr92439049;     hZHdRGroAmTNNCiNGEr92439049 = hZHdRGroAmTNNCiNGEr44789070;     hZHdRGroAmTNNCiNGEr44789070 = hZHdRGroAmTNNCiNGEr1579324;     hZHdRGroAmTNNCiNGEr1579324 = hZHdRGroAmTNNCiNGEr57470177;     hZHdRGroAmTNNCiNGEr57470177 = hZHdRGroAmTNNCiNGEr35413704;     hZHdRGroAmTNNCiNGEr35413704 = hZHdRGroAmTNNCiNGEr69527840;     hZHdRGroAmTNNCiNGEr69527840 = hZHdRGroAmTNNCiNGEr58864051;     hZHdRGroAmTNNCiNGEr58864051 = hZHdRGroAmTNNCiNGEr21017747;     hZHdRGroAmTNNCiNGEr21017747 = hZHdRGroAmTNNCiNGEr77335311;     hZHdRGroAmTNNCiNGEr77335311 = hZHdRGroAmTNNCiNGEr54869243;     hZHdRGroAmTNNCiNGEr54869243 = hZHdRGroAmTNNCiNGEr68311505;     hZHdRGroAmTNNCiNGEr68311505 = hZHdRGroAmTNNCiNGEr1396078;     hZHdRGroAmTNNCiNGEr1396078 = hZHdRGroAmTNNCiNGEr32701188;     hZHdRGroAmTNNCiNGEr32701188 = hZHdRGroAmTNNCiNGEr13973863;     hZHdRGroAmTNNCiNGEr13973863 = hZHdRGroAmTNNCiNGEr86924144;     hZHdRGroAmTNNCiNGEr86924144 = hZHdRGroAmTNNCiNGEr38390279;     hZHdRGroAmTNNCiNGEr38390279 = hZHdRGroAmTNNCiNGEr77981613;     hZHdRGroAmTNNCiNGEr77981613 = hZHdRGroAmTNNCiNGEr32746983;     hZHdRGroAmTNNCiNGEr32746983 = hZHdRGroAmTNNCiNGEr64626145;     hZHdRGroAmTNNCiNGEr64626145 = hZHdRGroAmTNNCiNGEr81587927;     hZHdRGroAmTNNCiNGEr81587927 = hZHdRGroAmTNNCiNGEr14990280;     hZHdRGroAmTNNCiNGEr14990280 = hZHdRGroAmTNNCiNGEr70936081;     hZHdRGroAmTNNCiNGEr70936081 = hZHdRGroAmTNNCiNGEr55509281;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void gdyyVuEuTbrhotqQhWt61768150() {     int hGdIrZCgPXAYhpHniQm3760889 = -968941839;    int hGdIrZCgPXAYhpHniQm78947327 = -972456392;    int hGdIrZCgPXAYhpHniQm21669211 = -856345871;    int hGdIrZCgPXAYhpHniQm8143502 = -590571661;    int hGdIrZCgPXAYhpHniQm2942779 = -662794470;    int hGdIrZCgPXAYhpHniQm34230654 = 40340124;    int hGdIrZCgPXAYhpHniQm16041553 = -553027119;    int hGdIrZCgPXAYhpHniQm6857322 = -365456758;    int hGdIrZCgPXAYhpHniQm23605141 = -419656304;    int hGdIrZCgPXAYhpHniQm96930332 = 71049296;    int hGdIrZCgPXAYhpHniQm77980446 = -155185652;    int hGdIrZCgPXAYhpHniQm9678194 = -273765888;    int hGdIrZCgPXAYhpHniQm60229982 = -352272672;    int hGdIrZCgPXAYhpHniQm11654421 = -507860368;    int hGdIrZCgPXAYhpHniQm89544589 = -985686200;    int hGdIrZCgPXAYhpHniQm72973961 = -762836306;    int hGdIrZCgPXAYhpHniQm44616872 = 37436816;    int hGdIrZCgPXAYhpHniQm40340324 = -506904551;    int hGdIrZCgPXAYhpHniQm73985474 = -52676317;    int hGdIrZCgPXAYhpHniQm24534203 = 9360780;    int hGdIrZCgPXAYhpHniQm42446615 = 61641616;    int hGdIrZCgPXAYhpHniQm90941799 = -107389771;    int hGdIrZCgPXAYhpHniQm1919276 = -711844257;    int hGdIrZCgPXAYhpHniQm71702790 = -437038265;    int hGdIrZCgPXAYhpHniQm12306434 = -809398988;    int hGdIrZCgPXAYhpHniQm93848850 = -285627090;    int hGdIrZCgPXAYhpHniQm25368310 = -822266195;    int hGdIrZCgPXAYhpHniQm61935912 = -78329820;    int hGdIrZCgPXAYhpHniQm93330388 = -361349564;    int hGdIrZCgPXAYhpHniQm82264946 = -206238829;    int hGdIrZCgPXAYhpHniQm51660728 = -835141330;    int hGdIrZCgPXAYhpHniQm75372226 = -753226387;    int hGdIrZCgPXAYhpHniQm51292331 = -280997473;    int hGdIrZCgPXAYhpHniQm76677770 = -856233651;    int hGdIrZCgPXAYhpHniQm86647585 = -468990045;    int hGdIrZCgPXAYhpHniQm24622639 = -941824200;    int hGdIrZCgPXAYhpHniQm78998695 = -183332039;    int hGdIrZCgPXAYhpHniQm12148161 = -751703109;    int hGdIrZCgPXAYhpHniQm82823026 = -581504715;    int hGdIrZCgPXAYhpHniQm62394344 = -332921666;    int hGdIrZCgPXAYhpHniQm3239869 = -858368017;    int hGdIrZCgPXAYhpHniQm20493198 = -467494438;    int hGdIrZCgPXAYhpHniQm54924015 = -730709432;    int hGdIrZCgPXAYhpHniQm90912506 = -340130706;    int hGdIrZCgPXAYhpHniQm80620671 = 67299108;    int hGdIrZCgPXAYhpHniQm61209332 = -102693661;    int hGdIrZCgPXAYhpHniQm86056176 = -228372313;    int hGdIrZCgPXAYhpHniQm38066302 = -212717614;    int hGdIrZCgPXAYhpHniQm2142710 = -203293715;    int hGdIrZCgPXAYhpHniQm24630314 = -648311694;    int hGdIrZCgPXAYhpHniQm27045086 = -396960312;    int hGdIrZCgPXAYhpHniQm98151195 = -316466534;    int hGdIrZCgPXAYhpHniQm69276880 = -697901665;    int hGdIrZCgPXAYhpHniQm74052852 = -407288852;    int hGdIrZCgPXAYhpHniQm19321535 = -103504659;    int hGdIrZCgPXAYhpHniQm12819089 = -761552069;    int hGdIrZCgPXAYhpHniQm77028051 = -160612136;    int hGdIrZCgPXAYhpHniQm49966421 = -319307607;    int hGdIrZCgPXAYhpHniQm95837068 = -781172673;    int hGdIrZCgPXAYhpHniQm9093928 = -277167381;    int hGdIrZCgPXAYhpHniQm8862344 = -137393682;    int hGdIrZCgPXAYhpHniQm54105641 = -374697300;    int hGdIrZCgPXAYhpHniQm13526933 = 95892806;    int hGdIrZCgPXAYhpHniQm41340195 = -113417475;    int hGdIrZCgPXAYhpHniQm45269604 = -93809375;    int hGdIrZCgPXAYhpHniQm2608221 = -401959266;    int hGdIrZCgPXAYhpHniQm58385863 = -992768415;    int hGdIrZCgPXAYhpHniQm83552212 = -496039021;    int hGdIrZCgPXAYhpHniQm25006836 = 61129677;    int hGdIrZCgPXAYhpHniQm64921951 = 56138000;    int hGdIrZCgPXAYhpHniQm93975266 = -479504268;    int hGdIrZCgPXAYhpHniQm32468711 = -210860075;    int hGdIrZCgPXAYhpHniQm57517297 = -925399836;    int hGdIrZCgPXAYhpHniQm11591131 = -719754652;    int hGdIrZCgPXAYhpHniQm21294335 = -132271203;    int hGdIrZCgPXAYhpHniQm21953417 = -470863946;    int hGdIrZCgPXAYhpHniQm36017785 = -376680339;    int hGdIrZCgPXAYhpHniQm11006769 = -271713551;    int hGdIrZCgPXAYhpHniQm91082118 = -404337373;    int hGdIrZCgPXAYhpHniQm51097101 = -606705328;    int hGdIrZCgPXAYhpHniQm7792674 = 42745222;    int hGdIrZCgPXAYhpHniQm87302008 = -509548581;    int hGdIrZCgPXAYhpHniQm59793203 = -875036105;    int hGdIrZCgPXAYhpHniQm68700074 = -713037870;    int hGdIrZCgPXAYhpHniQm55219860 = -809278517;    int hGdIrZCgPXAYhpHniQm53509533 = -418674797;    int hGdIrZCgPXAYhpHniQm6095346 = 44675277;    int hGdIrZCgPXAYhpHniQm77239478 = -873708622;    int hGdIrZCgPXAYhpHniQm57356235 = -652728993;    int hGdIrZCgPXAYhpHniQm73828496 = -707437977;    int hGdIrZCgPXAYhpHniQm47594587 = -681212065;    int hGdIrZCgPXAYhpHniQm29032274 = -864024433;    int hGdIrZCgPXAYhpHniQm16311093 = -970530436;    int hGdIrZCgPXAYhpHniQm73729098 = -204337335;    int hGdIrZCgPXAYhpHniQm53532000 = -95527985;    int hGdIrZCgPXAYhpHniQm49134228 = -383670718;    int hGdIrZCgPXAYhpHniQm6966265 = -463387245;    int hGdIrZCgPXAYhpHniQm13583820 = -517291957;    int hGdIrZCgPXAYhpHniQm45642903 = -146321332;    int hGdIrZCgPXAYhpHniQm78012450 = -968941839;     hGdIrZCgPXAYhpHniQm3760889 = hGdIrZCgPXAYhpHniQm78947327;     hGdIrZCgPXAYhpHniQm78947327 = hGdIrZCgPXAYhpHniQm21669211;     hGdIrZCgPXAYhpHniQm21669211 = hGdIrZCgPXAYhpHniQm8143502;     hGdIrZCgPXAYhpHniQm8143502 = hGdIrZCgPXAYhpHniQm2942779;     hGdIrZCgPXAYhpHniQm2942779 = hGdIrZCgPXAYhpHniQm34230654;     hGdIrZCgPXAYhpHniQm34230654 = hGdIrZCgPXAYhpHniQm16041553;     hGdIrZCgPXAYhpHniQm16041553 = hGdIrZCgPXAYhpHniQm6857322;     hGdIrZCgPXAYhpHniQm6857322 = hGdIrZCgPXAYhpHniQm23605141;     hGdIrZCgPXAYhpHniQm23605141 = hGdIrZCgPXAYhpHniQm96930332;     hGdIrZCgPXAYhpHniQm96930332 = hGdIrZCgPXAYhpHniQm77980446;     hGdIrZCgPXAYhpHniQm77980446 = hGdIrZCgPXAYhpHniQm9678194;     hGdIrZCgPXAYhpHniQm9678194 = hGdIrZCgPXAYhpHniQm60229982;     hGdIrZCgPXAYhpHniQm60229982 = hGdIrZCgPXAYhpHniQm11654421;     hGdIrZCgPXAYhpHniQm11654421 = hGdIrZCgPXAYhpHniQm89544589;     hGdIrZCgPXAYhpHniQm89544589 = hGdIrZCgPXAYhpHniQm72973961;     hGdIrZCgPXAYhpHniQm72973961 = hGdIrZCgPXAYhpHniQm44616872;     hGdIrZCgPXAYhpHniQm44616872 = hGdIrZCgPXAYhpHniQm40340324;     hGdIrZCgPXAYhpHniQm40340324 = hGdIrZCgPXAYhpHniQm73985474;     hGdIrZCgPXAYhpHniQm73985474 = hGdIrZCgPXAYhpHniQm24534203;     hGdIrZCgPXAYhpHniQm24534203 = hGdIrZCgPXAYhpHniQm42446615;     hGdIrZCgPXAYhpHniQm42446615 = hGdIrZCgPXAYhpHniQm90941799;     hGdIrZCgPXAYhpHniQm90941799 = hGdIrZCgPXAYhpHniQm1919276;     hGdIrZCgPXAYhpHniQm1919276 = hGdIrZCgPXAYhpHniQm71702790;     hGdIrZCgPXAYhpHniQm71702790 = hGdIrZCgPXAYhpHniQm12306434;     hGdIrZCgPXAYhpHniQm12306434 = hGdIrZCgPXAYhpHniQm93848850;     hGdIrZCgPXAYhpHniQm93848850 = hGdIrZCgPXAYhpHniQm25368310;     hGdIrZCgPXAYhpHniQm25368310 = hGdIrZCgPXAYhpHniQm61935912;     hGdIrZCgPXAYhpHniQm61935912 = hGdIrZCgPXAYhpHniQm93330388;     hGdIrZCgPXAYhpHniQm93330388 = hGdIrZCgPXAYhpHniQm82264946;     hGdIrZCgPXAYhpHniQm82264946 = hGdIrZCgPXAYhpHniQm51660728;     hGdIrZCgPXAYhpHniQm51660728 = hGdIrZCgPXAYhpHniQm75372226;     hGdIrZCgPXAYhpHniQm75372226 = hGdIrZCgPXAYhpHniQm51292331;     hGdIrZCgPXAYhpHniQm51292331 = hGdIrZCgPXAYhpHniQm76677770;     hGdIrZCgPXAYhpHniQm76677770 = hGdIrZCgPXAYhpHniQm86647585;     hGdIrZCgPXAYhpHniQm86647585 = hGdIrZCgPXAYhpHniQm24622639;     hGdIrZCgPXAYhpHniQm24622639 = hGdIrZCgPXAYhpHniQm78998695;     hGdIrZCgPXAYhpHniQm78998695 = hGdIrZCgPXAYhpHniQm12148161;     hGdIrZCgPXAYhpHniQm12148161 = hGdIrZCgPXAYhpHniQm82823026;     hGdIrZCgPXAYhpHniQm82823026 = hGdIrZCgPXAYhpHniQm62394344;     hGdIrZCgPXAYhpHniQm62394344 = hGdIrZCgPXAYhpHniQm3239869;     hGdIrZCgPXAYhpHniQm3239869 = hGdIrZCgPXAYhpHniQm20493198;     hGdIrZCgPXAYhpHniQm20493198 = hGdIrZCgPXAYhpHniQm54924015;     hGdIrZCgPXAYhpHniQm54924015 = hGdIrZCgPXAYhpHniQm90912506;     hGdIrZCgPXAYhpHniQm90912506 = hGdIrZCgPXAYhpHniQm80620671;     hGdIrZCgPXAYhpHniQm80620671 = hGdIrZCgPXAYhpHniQm61209332;     hGdIrZCgPXAYhpHniQm61209332 = hGdIrZCgPXAYhpHniQm86056176;     hGdIrZCgPXAYhpHniQm86056176 = hGdIrZCgPXAYhpHniQm38066302;     hGdIrZCgPXAYhpHniQm38066302 = hGdIrZCgPXAYhpHniQm2142710;     hGdIrZCgPXAYhpHniQm2142710 = hGdIrZCgPXAYhpHniQm24630314;     hGdIrZCgPXAYhpHniQm24630314 = hGdIrZCgPXAYhpHniQm27045086;     hGdIrZCgPXAYhpHniQm27045086 = hGdIrZCgPXAYhpHniQm98151195;     hGdIrZCgPXAYhpHniQm98151195 = hGdIrZCgPXAYhpHniQm69276880;     hGdIrZCgPXAYhpHniQm69276880 = hGdIrZCgPXAYhpHniQm74052852;     hGdIrZCgPXAYhpHniQm74052852 = hGdIrZCgPXAYhpHniQm19321535;     hGdIrZCgPXAYhpHniQm19321535 = hGdIrZCgPXAYhpHniQm12819089;     hGdIrZCgPXAYhpHniQm12819089 = hGdIrZCgPXAYhpHniQm77028051;     hGdIrZCgPXAYhpHniQm77028051 = hGdIrZCgPXAYhpHniQm49966421;     hGdIrZCgPXAYhpHniQm49966421 = hGdIrZCgPXAYhpHniQm95837068;     hGdIrZCgPXAYhpHniQm95837068 = hGdIrZCgPXAYhpHniQm9093928;     hGdIrZCgPXAYhpHniQm9093928 = hGdIrZCgPXAYhpHniQm8862344;     hGdIrZCgPXAYhpHniQm8862344 = hGdIrZCgPXAYhpHniQm54105641;     hGdIrZCgPXAYhpHniQm54105641 = hGdIrZCgPXAYhpHniQm13526933;     hGdIrZCgPXAYhpHniQm13526933 = hGdIrZCgPXAYhpHniQm41340195;     hGdIrZCgPXAYhpHniQm41340195 = hGdIrZCgPXAYhpHniQm45269604;     hGdIrZCgPXAYhpHniQm45269604 = hGdIrZCgPXAYhpHniQm2608221;     hGdIrZCgPXAYhpHniQm2608221 = hGdIrZCgPXAYhpHniQm58385863;     hGdIrZCgPXAYhpHniQm58385863 = hGdIrZCgPXAYhpHniQm83552212;     hGdIrZCgPXAYhpHniQm83552212 = hGdIrZCgPXAYhpHniQm25006836;     hGdIrZCgPXAYhpHniQm25006836 = hGdIrZCgPXAYhpHniQm64921951;     hGdIrZCgPXAYhpHniQm64921951 = hGdIrZCgPXAYhpHniQm93975266;     hGdIrZCgPXAYhpHniQm93975266 = hGdIrZCgPXAYhpHniQm32468711;     hGdIrZCgPXAYhpHniQm32468711 = hGdIrZCgPXAYhpHniQm57517297;     hGdIrZCgPXAYhpHniQm57517297 = hGdIrZCgPXAYhpHniQm11591131;     hGdIrZCgPXAYhpHniQm11591131 = hGdIrZCgPXAYhpHniQm21294335;     hGdIrZCgPXAYhpHniQm21294335 = hGdIrZCgPXAYhpHniQm21953417;     hGdIrZCgPXAYhpHniQm21953417 = hGdIrZCgPXAYhpHniQm36017785;     hGdIrZCgPXAYhpHniQm36017785 = hGdIrZCgPXAYhpHniQm11006769;     hGdIrZCgPXAYhpHniQm11006769 = hGdIrZCgPXAYhpHniQm91082118;     hGdIrZCgPXAYhpHniQm91082118 = hGdIrZCgPXAYhpHniQm51097101;     hGdIrZCgPXAYhpHniQm51097101 = hGdIrZCgPXAYhpHniQm7792674;     hGdIrZCgPXAYhpHniQm7792674 = hGdIrZCgPXAYhpHniQm87302008;     hGdIrZCgPXAYhpHniQm87302008 = hGdIrZCgPXAYhpHniQm59793203;     hGdIrZCgPXAYhpHniQm59793203 = hGdIrZCgPXAYhpHniQm68700074;     hGdIrZCgPXAYhpHniQm68700074 = hGdIrZCgPXAYhpHniQm55219860;     hGdIrZCgPXAYhpHniQm55219860 = hGdIrZCgPXAYhpHniQm53509533;     hGdIrZCgPXAYhpHniQm53509533 = hGdIrZCgPXAYhpHniQm6095346;     hGdIrZCgPXAYhpHniQm6095346 = hGdIrZCgPXAYhpHniQm77239478;     hGdIrZCgPXAYhpHniQm77239478 = hGdIrZCgPXAYhpHniQm57356235;     hGdIrZCgPXAYhpHniQm57356235 = hGdIrZCgPXAYhpHniQm73828496;     hGdIrZCgPXAYhpHniQm73828496 = hGdIrZCgPXAYhpHniQm47594587;     hGdIrZCgPXAYhpHniQm47594587 = hGdIrZCgPXAYhpHniQm29032274;     hGdIrZCgPXAYhpHniQm29032274 = hGdIrZCgPXAYhpHniQm16311093;     hGdIrZCgPXAYhpHniQm16311093 = hGdIrZCgPXAYhpHniQm73729098;     hGdIrZCgPXAYhpHniQm73729098 = hGdIrZCgPXAYhpHniQm53532000;     hGdIrZCgPXAYhpHniQm53532000 = hGdIrZCgPXAYhpHniQm49134228;     hGdIrZCgPXAYhpHniQm49134228 = hGdIrZCgPXAYhpHniQm6966265;     hGdIrZCgPXAYhpHniQm6966265 = hGdIrZCgPXAYhpHniQm13583820;     hGdIrZCgPXAYhpHniQm13583820 = hGdIrZCgPXAYhpHniQm45642903;     hGdIrZCgPXAYhpHniQm45642903 = hGdIrZCgPXAYhpHniQm78012450;     hGdIrZCgPXAYhpHniQm78012450 = hGdIrZCgPXAYhpHniQm3760889;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ngREiqLrSdPaIQHAYCY28399355() {     int DQBfoaNWAbhfAjOuBVg48541594 = -365225624;    int DQBfoaNWAbhfAjOuBVg9070012 = -826947376;    int DQBfoaNWAbhfAjOuBVg77894556 = -278524946;    int DQBfoaNWAbhfAjOuBVg53077018 = -782845894;    int DQBfoaNWAbhfAjOuBVg90451184 = -276553151;    int DQBfoaNWAbhfAjOuBVg29191456 = 18556180;    int DQBfoaNWAbhfAjOuBVg31805695 = -492465264;    int DQBfoaNWAbhfAjOuBVg88910988 = -502472729;    int DQBfoaNWAbhfAjOuBVg35191239 = -474402312;    int DQBfoaNWAbhfAjOuBVg83817988 = -877626499;    int DQBfoaNWAbhfAjOuBVg32743560 = -188962382;    int DQBfoaNWAbhfAjOuBVg7192415 = 60221888;    int DQBfoaNWAbhfAjOuBVg62393430 = -468048837;    int DQBfoaNWAbhfAjOuBVg43039705 = -118124830;    int DQBfoaNWAbhfAjOuBVg17843035 = -277928775;    int DQBfoaNWAbhfAjOuBVg86921239 = -93375741;    int DQBfoaNWAbhfAjOuBVg88410816 = -697508253;    int DQBfoaNWAbhfAjOuBVg29292624 = 86681689;    int DQBfoaNWAbhfAjOuBVg36120467 = -804898301;    int DQBfoaNWAbhfAjOuBVg9493007 = -983883676;    int DQBfoaNWAbhfAjOuBVg64543405 = -210866627;    int DQBfoaNWAbhfAjOuBVg40275970 = -606930514;    int DQBfoaNWAbhfAjOuBVg71627525 = -605047599;    int DQBfoaNWAbhfAjOuBVg81052255 = -584103457;    int DQBfoaNWAbhfAjOuBVg54944238 = -725823384;    int DQBfoaNWAbhfAjOuBVg53880762 = -165209610;    int DQBfoaNWAbhfAjOuBVg49325569 = -36639468;    int DQBfoaNWAbhfAjOuBVg38355288 = -146271738;    int DQBfoaNWAbhfAjOuBVg94437063 = -403793487;    int DQBfoaNWAbhfAjOuBVg24489435 = -371399188;    int DQBfoaNWAbhfAjOuBVg6829660 = -610680400;    int DQBfoaNWAbhfAjOuBVg5730751 = -565547335;    int DQBfoaNWAbhfAjOuBVg27917249 = -37740247;    int DQBfoaNWAbhfAjOuBVg95172307 = -527805619;    int DQBfoaNWAbhfAjOuBVg56748276 = -337188966;    int DQBfoaNWAbhfAjOuBVg65180187 = -392849207;    int DQBfoaNWAbhfAjOuBVg53936752 = -649574564;    int DQBfoaNWAbhfAjOuBVg49482683 = -491691374;    int DQBfoaNWAbhfAjOuBVg44125693 = -670915363;    int DQBfoaNWAbhfAjOuBVg30892881 = -995938038;    int DQBfoaNWAbhfAjOuBVg72898942 = -676779451;    int DQBfoaNWAbhfAjOuBVg11812320 = -889519738;    int DQBfoaNWAbhfAjOuBVg5741039 = 53359655;    int DQBfoaNWAbhfAjOuBVg30568847 = -777893561;    int DQBfoaNWAbhfAjOuBVg32569152 = -177728446;    int DQBfoaNWAbhfAjOuBVg36981928 = -655107181;    int DQBfoaNWAbhfAjOuBVg82953178 = -903912196;    int DQBfoaNWAbhfAjOuBVg51880070 = -217026240;    int DQBfoaNWAbhfAjOuBVg72404130 = -538963251;    int DQBfoaNWAbhfAjOuBVg98752382 = -245327326;    int DQBfoaNWAbhfAjOuBVg31524150 = -428557859;    int DQBfoaNWAbhfAjOuBVg31306452 = -795959350;    int DQBfoaNWAbhfAjOuBVg50457338 = -149670117;    int DQBfoaNWAbhfAjOuBVg84375671 = -426730618;    int DQBfoaNWAbhfAjOuBVg63855949 = -628013612;    int DQBfoaNWAbhfAjOuBVg8265625 = -758295111;    int DQBfoaNWAbhfAjOuBVg37442486 = -121899778;    int DQBfoaNWAbhfAjOuBVg96842300 = -694421490;    int DQBfoaNWAbhfAjOuBVg98132780 = 42977490;    int DQBfoaNWAbhfAjOuBVg36570422 = -11343542;    int DQBfoaNWAbhfAjOuBVg79865886 = -944804353;    int DQBfoaNWAbhfAjOuBVg93450407 = -246193526;    int DQBfoaNWAbhfAjOuBVg94473925 = 1320758;    int DQBfoaNWAbhfAjOuBVg10701804 = -3003124;    int DQBfoaNWAbhfAjOuBVg76988328 = -166946100;    int DQBfoaNWAbhfAjOuBVg27012810 = -623415047;    int DQBfoaNWAbhfAjOuBVg79275166 = -902037866;    int DQBfoaNWAbhfAjOuBVg67221122 = -940243219;    int DQBfoaNWAbhfAjOuBVg86291428 = -780935865;    int DQBfoaNWAbhfAjOuBVg52662848 = -885079568;    int DQBfoaNWAbhfAjOuBVg32984487 = -443801177;    int DQBfoaNWAbhfAjOuBVg38928133 = -105816880;    int DQBfoaNWAbhfAjOuBVg85166930 = -242402949;    int DQBfoaNWAbhfAjOuBVg5227587 = -808960264;    int DQBfoaNWAbhfAjOuBVg36594064 = -207104225;    int DQBfoaNWAbhfAjOuBVg52731086 = -321346889;    int DQBfoaNWAbhfAjOuBVg34534932 = -560290169;    int DQBfoaNWAbhfAjOuBVg41058678 = -827154039;    int DQBfoaNWAbhfAjOuBVg48483104 = -306375011;    int DQBfoaNWAbhfAjOuBVg17962310 = 29283797;    int DQBfoaNWAbhfAjOuBVg70927583 = -261297414;    int DQBfoaNWAbhfAjOuBVg97445499 = -819613228;    int DQBfoaNWAbhfAjOuBVg65951157 = -607308488;    int DQBfoaNWAbhfAjOuBVg95684680 = -58466162;    int DQBfoaNWAbhfAjOuBVg92965285 = -942841330;    int DQBfoaNWAbhfAjOuBVg75523208 = -814721050;    int DQBfoaNWAbhfAjOuBVg55273412 = -315877218;    int DQBfoaNWAbhfAjOuBVg43541577 = -611009629;    int DQBfoaNWAbhfAjOuBVg31316358 = -899792008;    int DQBfoaNWAbhfAjOuBVg48482652 = -578893855;    int DQBfoaNWAbhfAjOuBVg27737701 = -170949430;    int DQBfoaNWAbhfAjOuBVg57094452 = -955153075;    int DQBfoaNWAbhfAjOuBVg51349903 = -434668864;    int DQBfoaNWAbhfAjOuBVg7555271 = -559571821;    int DQBfoaNWAbhfAjOuBVg51026994 = 48866314;    int DQBfoaNWAbhfAjOuBVg79448535 = -330585925;    int DQBfoaNWAbhfAjOuBVg17338395 = -790840496;    int DQBfoaNWAbhfAjOuBVg95039234 = -943637222;    int DQBfoaNWAbhfAjOuBVg53580519 = -510947461;    int DQBfoaNWAbhfAjOuBVg5556342 = -365225624;     DQBfoaNWAbhfAjOuBVg48541594 = DQBfoaNWAbhfAjOuBVg9070012;     DQBfoaNWAbhfAjOuBVg9070012 = DQBfoaNWAbhfAjOuBVg77894556;     DQBfoaNWAbhfAjOuBVg77894556 = DQBfoaNWAbhfAjOuBVg53077018;     DQBfoaNWAbhfAjOuBVg53077018 = DQBfoaNWAbhfAjOuBVg90451184;     DQBfoaNWAbhfAjOuBVg90451184 = DQBfoaNWAbhfAjOuBVg29191456;     DQBfoaNWAbhfAjOuBVg29191456 = DQBfoaNWAbhfAjOuBVg31805695;     DQBfoaNWAbhfAjOuBVg31805695 = DQBfoaNWAbhfAjOuBVg88910988;     DQBfoaNWAbhfAjOuBVg88910988 = DQBfoaNWAbhfAjOuBVg35191239;     DQBfoaNWAbhfAjOuBVg35191239 = DQBfoaNWAbhfAjOuBVg83817988;     DQBfoaNWAbhfAjOuBVg83817988 = DQBfoaNWAbhfAjOuBVg32743560;     DQBfoaNWAbhfAjOuBVg32743560 = DQBfoaNWAbhfAjOuBVg7192415;     DQBfoaNWAbhfAjOuBVg7192415 = DQBfoaNWAbhfAjOuBVg62393430;     DQBfoaNWAbhfAjOuBVg62393430 = DQBfoaNWAbhfAjOuBVg43039705;     DQBfoaNWAbhfAjOuBVg43039705 = DQBfoaNWAbhfAjOuBVg17843035;     DQBfoaNWAbhfAjOuBVg17843035 = DQBfoaNWAbhfAjOuBVg86921239;     DQBfoaNWAbhfAjOuBVg86921239 = DQBfoaNWAbhfAjOuBVg88410816;     DQBfoaNWAbhfAjOuBVg88410816 = DQBfoaNWAbhfAjOuBVg29292624;     DQBfoaNWAbhfAjOuBVg29292624 = DQBfoaNWAbhfAjOuBVg36120467;     DQBfoaNWAbhfAjOuBVg36120467 = DQBfoaNWAbhfAjOuBVg9493007;     DQBfoaNWAbhfAjOuBVg9493007 = DQBfoaNWAbhfAjOuBVg64543405;     DQBfoaNWAbhfAjOuBVg64543405 = DQBfoaNWAbhfAjOuBVg40275970;     DQBfoaNWAbhfAjOuBVg40275970 = DQBfoaNWAbhfAjOuBVg71627525;     DQBfoaNWAbhfAjOuBVg71627525 = DQBfoaNWAbhfAjOuBVg81052255;     DQBfoaNWAbhfAjOuBVg81052255 = DQBfoaNWAbhfAjOuBVg54944238;     DQBfoaNWAbhfAjOuBVg54944238 = DQBfoaNWAbhfAjOuBVg53880762;     DQBfoaNWAbhfAjOuBVg53880762 = DQBfoaNWAbhfAjOuBVg49325569;     DQBfoaNWAbhfAjOuBVg49325569 = DQBfoaNWAbhfAjOuBVg38355288;     DQBfoaNWAbhfAjOuBVg38355288 = DQBfoaNWAbhfAjOuBVg94437063;     DQBfoaNWAbhfAjOuBVg94437063 = DQBfoaNWAbhfAjOuBVg24489435;     DQBfoaNWAbhfAjOuBVg24489435 = DQBfoaNWAbhfAjOuBVg6829660;     DQBfoaNWAbhfAjOuBVg6829660 = DQBfoaNWAbhfAjOuBVg5730751;     DQBfoaNWAbhfAjOuBVg5730751 = DQBfoaNWAbhfAjOuBVg27917249;     DQBfoaNWAbhfAjOuBVg27917249 = DQBfoaNWAbhfAjOuBVg95172307;     DQBfoaNWAbhfAjOuBVg95172307 = DQBfoaNWAbhfAjOuBVg56748276;     DQBfoaNWAbhfAjOuBVg56748276 = DQBfoaNWAbhfAjOuBVg65180187;     DQBfoaNWAbhfAjOuBVg65180187 = DQBfoaNWAbhfAjOuBVg53936752;     DQBfoaNWAbhfAjOuBVg53936752 = DQBfoaNWAbhfAjOuBVg49482683;     DQBfoaNWAbhfAjOuBVg49482683 = DQBfoaNWAbhfAjOuBVg44125693;     DQBfoaNWAbhfAjOuBVg44125693 = DQBfoaNWAbhfAjOuBVg30892881;     DQBfoaNWAbhfAjOuBVg30892881 = DQBfoaNWAbhfAjOuBVg72898942;     DQBfoaNWAbhfAjOuBVg72898942 = DQBfoaNWAbhfAjOuBVg11812320;     DQBfoaNWAbhfAjOuBVg11812320 = DQBfoaNWAbhfAjOuBVg5741039;     DQBfoaNWAbhfAjOuBVg5741039 = DQBfoaNWAbhfAjOuBVg30568847;     DQBfoaNWAbhfAjOuBVg30568847 = DQBfoaNWAbhfAjOuBVg32569152;     DQBfoaNWAbhfAjOuBVg32569152 = DQBfoaNWAbhfAjOuBVg36981928;     DQBfoaNWAbhfAjOuBVg36981928 = DQBfoaNWAbhfAjOuBVg82953178;     DQBfoaNWAbhfAjOuBVg82953178 = DQBfoaNWAbhfAjOuBVg51880070;     DQBfoaNWAbhfAjOuBVg51880070 = DQBfoaNWAbhfAjOuBVg72404130;     DQBfoaNWAbhfAjOuBVg72404130 = DQBfoaNWAbhfAjOuBVg98752382;     DQBfoaNWAbhfAjOuBVg98752382 = DQBfoaNWAbhfAjOuBVg31524150;     DQBfoaNWAbhfAjOuBVg31524150 = DQBfoaNWAbhfAjOuBVg31306452;     DQBfoaNWAbhfAjOuBVg31306452 = DQBfoaNWAbhfAjOuBVg50457338;     DQBfoaNWAbhfAjOuBVg50457338 = DQBfoaNWAbhfAjOuBVg84375671;     DQBfoaNWAbhfAjOuBVg84375671 = DQBfoaNWAbhfAjOuBVg63855949;     DQBfoaNWAbhfAjOuBVg63855949 = DQBfoaNWAbhfAjOuBVg8265625;     DQBfoaNWAbhfAjOuBVg8265625 = DQBfoaNWAbhfAjOuBVg37442486;     DQBfoaNWAbhfAjOuBVg37442486 = DQBfoaNWAbhfAjOuBVg96842300;     DQBfoaNWAbhfAjOuBVg96842300 = DQBfoaNWAbhfAjOuBVg98132780;     DQBfoaNWAbhfAjOuBVg98132780 = DQBfoaNWAbhfAjOuBVg36570422;     DQBfoaNWAbhfAjOuBVg36570422 = DQBfoaNWAbhfAjOuBVg79865886;     DQBfoaNWAbhfAjOuBVg79865886 = DQBfoaNWAbhfAjOuBVg93450407;     DQBfoaNWAbhfAjOuBVg93450407 = DQBfoaNWAbhfAjOuBVg94473925;     DQBfoaNWAbhfAjOuBVg94473925 = DQBfoaNWAbhfAjOuBVg10701804;     DQBfoaNWAbhfAjOuBVg10701804 = DQBfoaNWAbhfAjOuBVg76988328;     DQBfoaNWAbhfAjOuBVg76988328 = DQBfoaNWAbhfAjOuBVg27012810;     DQBfoaNWAbhfAjOuBVg27012810 = DQBfoaNWAbhfAjOuBVg79275166;     DQBfoaNWAbhfAjOuBVg79275166 = DQBfoaNWAbhfAjOuBVg67221122;     DQBfoaNWAbhfAjOuBVg67221122 = DQBfoaNWAbhfAjOuBVg86291428;     DQBfoaNWAbhfAjOuBVg86291428 = DQBfoaNWAbhfAjOuBVg52662848;     DQBfoaNWAbhfAjOuBVg52662848 = DQBfoaNWAbhfAjOuBVg32984487;     DQBfoaNWAbhfAjOuBVg32984487 = DQBfoaNWAbhfAjOuBVg38928133;     DQBfoaNWAbhfAjOuBVg38928133 = DQBfoaNWAbhfAjOuBVg85166930;     DQBfoaNWAbhfAjOuBVg85166930 = DQBfoaNWAbhfAjOuBVg5227587;     DQBfoaNWAbhfAjOuBVg5227587 = DQBfoaNWAbhfAjOuBVg36594064;     DQBfoaNWAbhfAjOuBVg36594064 = DQBfoaNWAbhfAjOuBVg52731086;     DQBfoaNWAbhfAjOuBVg52731086 = DQBfoaNWAbhfAjOuBVg34534932;     DQBfoaNWAbhfAjOuBVg34534932 = DQBfoaNWAbhfAjOuBVg41058678;     DQBfoaNWAbhfAjOuBVg41058678 = DQBfoaNWAbhfAjOuBVg48483104;     DQBfoaNWAbhfAjOuBVg48483104 = DQBfoaNWAbhfAjOuBVg17962310;     DQBfoaNWAbhfAjOuBVg17962310 = DQBfoaNWAbhfAjOuBVg70927583;     DQBfoaNWAbhfAjOuBVg70927583 = DQBfoaNWAbhfAjOuBVg97445499;     DQBfoaNWAbhfAjOuBVg97445499 = DQBfoaNWAbhfAjOuBVg65951157;     DQBfoaNWAbhfAjOuBVg65951157 = DQBfoaNWAbhfAjOuBVg95684680;     DQBfoaNWAbhfAjOuBVg95684680 = DQBfoaNWAbhfAjOuBVg92965285;     DQBfoaNWAbhfAjOuBVg92965285 = DQBfoaNWAbhfAjOuBVg75523208;     DQBfoaNWAbhfAjOuBVg75523208 = DQBfoaNWAbhfAjOuBVg55273412;     DQBfoaNWAbhfAjOuBVg55273412 = DQBfoaNWAbhfAjOuBVg43541577;     DQBfoaNWAbhfAjOuBVg43541577 = DQBfoaNWAbhfAjOuBVg31316358;     DQBfoaNWAbhfAjOuBVg31316358 = DQBfoaNWAbhfAjOuBVg48482652;     DQBfoaNWAbhfAjOuBVg48482652 = DQBfoaNWAbhfAjOuBVg27737701;     DQBfoaNWAbhfAjOuBVg27737701 = DQBfoaNWAbhfAjOuBVg57094452;     DQBfoaNWAbhfAjOuBVg57094452 = DQBfoaNWAbhfAjOuBVg51349903;     DQBfoaNWAbhfAjOuBVg51349903 = DQBfoaNWAbhfAjOuBVg7555271;     DQBfoaNWAbhfAjOuBVg7555271 = DQBfoaNWAbhfAjOuBVg51026994;     DQBfoaNWAbhfAjOuBVg51026994 = DQBfoaNWAbhfAjOuBVg79448535;     DQBfoaNWAbhfAjOuBVg79448535 = DQBfoaNWAbhfAjOuBVg17338395;     DQBfoaNWAbhfAjOuBVg17338395 = DQBfoaNWAbhfAjOuBVg95039234;     DQBfoaNWAbhfAjOuBVg95039234 = DQBfoaNWAbhfAjOuBVg53580519;     DQBfoaNWAbhfAjOuBVg53580519 = DQBfoaNWAbhfAjOuBVg5556342;     DQBfoaNWAbhfAjOuBVg5556342 = DQBfoaNWAbhfAjOuBVg48541594;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void GaqOWMkPIFytvvQBieX23285211() {     int OIZwPSxEizhAxcdSCHp9585840 = -256535625;    int OIZwPSxEizhAxcdSCHp18739234 = -962976760;    int OIZwPSxEizhAxcdSCHp48160209 = -846653557;    int OIZwPSxEizhAxcdSCHp71022302 = -611319858;    int OIZwPSxEizhAxcdSCHp16078459 = -429074284;    int OIZwPSxEizhAxcdSCHp82423604 = -398772719;    int OIZwPSxEizhAxcdSCHp47783946 = -919462205;    int OIZwPSxEizhAxcdSCHp66052673 = -527388748;    int OIZwPSxEizhAxcdSCHp62038137 = -358957764;    int OIZwPSxEizhAxcdSCHp17879083 = -876875021;    int OIZwPSxEizhAxcdSCHp85258848 = -301397998;    int OIZwPSxEizhAxcdSCHp43078219 = -247607790;    int OIZwPSxEizhAxcdSCHp77208853 = -784309708;    int OIZwPSxEizhAxcdSCHp87740285 = -69012533;    int OIZwPSxEizhAxcdSCHp32306439 = -669899747;    int OIZwPSxEizhAxcdSCHp78183583 = -165378825;    int OIZwPSxEizhAxcdSCHp44044868 = -912802600;    int OIZwPSxEizhAxcdSCHp50168719 = -503023740;    int OIZwPSxEizhAxcdSCHp98135517 = -804435580;    int OIZwPSxEizhAxcdSCHp64491691 = -284884117;    int OIZwPSxEizhAxcdSCHp78639533 = -329841097;    int OIZwPSxEizhAxcdSCHp45200602 = -13299737;    int OIZwPSxEizhAxcdSCHp45916703 = -286771888;    int OIZwPSxEizhAxcdSCHp76559243 = -953777041;    int OIZwPSxEizhAxcdSCHp17865329 = -317304725;    int OIZwPSxEizhAxcdSCHp94068070 = -518236958;    int OIZwPSxEizhAxcdSCHp92134052 = -508736743;    int OIZwPSxEizhAxcdSCHp42982513 = -545706145;    int OIZwPSxEizhAxcdSCHp48982490 = -114182140;    int OIZwPSxEizhAxcdSCHp83345337 = -314815921;    int OIZwPSxEizhAxcdSCHp47459526 = -941307918;    int OIZwPSxEizhAxcdSCHp80743701 = -612314583;    int OIZwPSxEizhAxcdSCHp61322311 = -633157361;    int OIZwPSxEizhAxcdSCHp78507805 = -648644404;    int OIZwPSxEizhAxcdSCHp23961718 = -989725128;    int OIZwPSxEizhAxcdSCHp21532882 = -25009229;    int OIZwPSxEizhAxcdSCHp52993954 = -994782549;    int OIZwPSxEizhAxcdSCHp76270773 = -323061780;    int OIZwPSxEizhAxcdSCHp15439833 = -780129961;    int OIZwPSxEizhAxcdSCHp3948087 = -931170903;    int OIZwPSxEizhAxcdSCHp53501831 = 78961445;    int OIZwPSxEizhAxcdSCHp45187037 = -993103533;    int OIZwPSxEizhAxcdSCHp44324636 = -628427513;    int OIZwPSxEizhAxcdSCHp41493465 = -750641570;    int OIZwPSxEizhAxcdSCHp24566487 = 56739275;    int OIZwPSxEizhAxcdSCHp49343579 = -116578351;    int OIZwPSxEizhAxcdSCHp2066797 = -320367417;    int OIZwPSxEizhAxcdSCHp77719153 = -576735680;    int OIZwPSxEizhAxcdSCHp46108116 = -302376358;    int OIZwPSxEizhAxcdSCHp77091967 = -584377295;    int OIZwPSxEizhAxcdSCHp22431121 = -551493019;    int OIZwPSxEizhAxcdSCHp42050504 = -87690876;    int OIZwPSxEizhAxcdSCHp37152090 = -473614220;    int OIZwPSxEizhAxcdSCHp69266427 = -933302899;    int OIZwPSxEizhAxcdSCHp44645677 = -349594175;    int OIZwPSxEizhAxcdSCHp64385238 = -143235888;    int OIZwPSxEizhAxcdSCHp72822530 = -576204872;    int OIZwPSxEizhAxcdSCHp71600965 = -892876517;    int OIZwPSxEizhAxcdSCHp53156974 = -194015134;    int OIZwPSxEizhAxcdSCHp22010388 = -910837327;    int OIZwPSxEizhAxcdSCHp90289551 = -890035976;    int OIZwPSxEizhAxcdSCHp4801433 = -273756060;    int OIZwPSxEizhAxcdSCHp17070184 = -313206609;    int OIZwPSxEizhAxcdSCHp78692800 = 55858156;    int OIZwPSxEizhAxcdSCHp70419557 = -935567103;    int OIZwPSxEizhAxcdSCHp4515148 = -689083415;    int OIZwPSxEizhAxcdSCHp81755908 = -614450429;    int OIZwPSxEizhAxcdSCHp98701047 = -35665304;    int OIZwPSxEizhAxcdSCHp63778567 = -79287406;    int OIZwPSxEizhAxcdSCHp10773558 = -544890519;    int OIZwPSxEizhAxcdSCHp25189629 = -170596277;    int OIZwPSxEizhAxcdSCHp67774095 = -489740821;    int OIZwPSxEizhAxcdSCHp34728887 = -722893780;    int OIZwPSxEizhAxcdSCHp94187431 = -873264677;    int OIZwPSxEizhAxcdSCHp10989861 = -263845563;    int OIZwPSxEizhAxcdSCHp33452497 = -336737564;    int OIZwPSxEizhAxcdSCHp875966 = -384872225;    int OIZwPSxEizhAxcdSCHp4423239 = -536130319;    int OIZwPSxEizhAxcdSCHp51992757 = -910516316;    int OIZwPSxEizhAxcdSCHp68521750 = -100726374;    int OIZwPSxEizhAxcdSCHp92001273 = -97869541;    int OIZwPSxEizhAxcdSCHp14414900 = -932001064;    int OIZwPSxEizhAxcdSCHp96874396 = -143329788;    int OIZwPSxEizhAxcdSCHp71890523 = -529804846;    int OIZwPSxEizhAxcdSCHp60914216 = -763322903;    int OIZwPSxEizhAxcdSCHp5409022 = -753617042;    int OIZwPSxEizhAxcdSCHp43591611 = -38700364;    int OIZwPSxEizhAxcdSCHp92055884 = -699854462;    int OIZwPSxEizhAxcdSCHp33862128 = -199050229;    int OIZwPSxEizhAxcdSCHp59576480 = -746489241;    int OIZwPSxEizhAxcdSCHp48710351 = -448804357;    int OIZwPSxEizhAxcdSCHp81392988 = -1906032;    int OIZwPSxEizhAxcdSCHp23113799 = -29046646;    int OIZwPSxEizhAxcdSCHp93429445 = -869292635;    int OIZwPSxEizhAxcdSCHp13658535 = 58865072;    int OIZwPSxEizhAxcdSCHp48700398 = -647282495;    int OIZwPSxEizhAxcdSCHp28116853 = -579896925;    int OIZwPSxEizhAxcdSCHp65631836 = -584285670;    int OIZwPSxEizhAxcdSCHp71073907 = -815074467;    int OIZwPSxEizhAxcdSCHp20051339 = -256535625;     OIZwPSxEizhAxcdSCHp9585840 = OIZwPSxEizhAxcdSCHp18739234;     OIZwPSxEizhAxcdSCHp18739234 = OIZwPSxEizhAxcdSCHp48160209;     OIZwPSxEizhAxcdSCHp48160209 = OIZwPSxEizhAxcdSCHp71022302;     OIZwPSxEizhAxcdSCHp71022302 = OIZwPSxEizhAxcdSCHp16078459;     OIZwPSxEizhAxcdSCHp16078459 = OIZwPSxEizhAxcdSCHp82423604;     OIZwPSxEizhAxcdSCHp82423604 = OIZwPSxEizhAxcdSCHp47783946;     OIZwPSxEizhAxcdSCHp47783946 = OIZwPSxEizhAxcdSCHp66052673;     OIZwPSxEizhAxcdSCHp66052673 = OIZwPSxEizhAxcdSCHp62038137;     OIZwPSxEizhAxcdSCHp62038137 = OIZwPSxEizhAxcdSCHp17879083;     OIZwPSxEizhAxcdSCHp17879083 = OIZwPSxEizhAxcdSCHp85258848;     OIZwPSxEizhAxcdSCHp85258848 = OIZwPSxEizhAxcdSCHp43078219;     OIZwPSxEizhAxcdSCHp43078219 = OIZwPSxEizhAxcdSCHp77208853;     OIZwPSxEizhAxcdSCHp77208853 = OIZwPSxEizhAxcdSCHp87740285;     OIZwPSxEizhAxcdSCHp87740285 = OIZwPSxEizhAxcdSCHp32306439;     OIZwPSxEizhAxcdSCHp32306439 = OIZwPSxEizhAxcdSCHp78183583;     OIZwPSxEizhAxcdSCHp78183583 = OIZwPSxEizhAxcdSCHp44044868;     OIZwPSxEizhAxcdSCHp44044868 = OIZwPSxEizhAxcdSCHp50168719;     OIZwPSxEizhAxcdSCHp50168719 = OIZwPSxEizhAxcdSCHp98135517;     OIZwPSxEizhAxcdSCHp98135517 = OIZwPSxEizhAxcdSCHp64491691;     OIZwPSxEizhAxcdSCHp64491691 = OIZwPSxEizhAxcdSCHp78639533;     OIZwPSxEizhAxcdSCHp78639533 = OIZwPSxEizhAxcdSCHp45200602;     OIZwPSxEizhAxcdSCHp45200602 = OIZwPSxEizhAxcdSCHp45916703;     OIZwPSxEizhAxcdSCHp45916703 = OIZwPSxEizhAxcdSCHp76559243;     OIZwPSxEizhAxcdSCHp76559243 = OIZwPSxEizhAxcdSCHp17865329;     OIZwPSxEizhAxcdSCHp17865329 = OIZwPSxEizhAxcdSCHp94068070;     OIZwPSxEizhAxcdSCHp94068070 = OIZwPSxEizhAxcdSCHp92134052;     OIZwPSxEizhAxcdSCHp92134052 = OIZwPSxEizhAxcdSCHp42982513;     OIZwPSxEizhAxcdSCHp42982513 = OIZwPSxEizhAxcdSCHp48982490;     OIZwPSxEizhAxcdSCHp48982490 = OIZwPSxEizhAxcdSCHp83345337;     OIZwPSxEizhAxcdSCHp83345337 = OIZwPSxEizhAxcdSCHp47459526;     OIZwPSxEizhAxcdSCHp47459526 = OIZwPSxEizhAxcdSCHp80743701;     OIZwPSxEizhAxcdSCHp80743701 = OIZwPSxEizhAxcdSCHp61322311;     OIZwPSxEizhAxcdSCHp61322311 = OIZwPSxEizhAxcdSCHp78507805;     OIZwPSxEizhAxcdSCHp78507805 = OIZwPSxEizhAxcdSCHp23961718;     OIZwPSxEizhAxcdSCHp23961718 = OIZwPSxEizhAxcdSCHp21532882;     OIZwPSxEizhAxcdSCHp21532882 = OIZwPSxEizhAxcdSCHp52993954;     OIZwPSxEizhAxcdSCHp52993954 = OIZwPSxEizhAxcdSCHp76270773;     OIZwPSxEizhAxcdSCHp76270773 = OIZwPSxEizhAxcdSCHp15439833;     OIZwPSxEizhAxcdSCHp15439833 = OIZwPSxEizhAxcdSCHp3948087;     OIZwPSxEizhAxcdSCHp3948087 = OIZwPSxEizhAxcdSCHp53501831;     OIZwPSxEizhAxcdSCHp53501831 = OIZwPSxEizhAxcdSCHp45187037;     OIZwPSxEizhAxcdSCHp45187037 = OIZwPSxEizhAxcdSCHp44324636;     OIZwPSxEizhAxcdSCHp44324636 = OIZwPSxEizhAxcdSCHp41493465;     OIZwPSxEizhAxcdSCHp41493465 = OIZwPSxEizhAxcdSCHp24566487;     OIZwPSxEizhAxcdSCHp24566487 = OIZwPSxEizhAxcdSCHp49343579;     OIZwPSxEizhAxcdSCHp49343579 = OIZwPSxEizhAxcdSCHp2066797;     OIZwPSxEizhAxcdSCHp2066797 = OIZwPSxEizhAxcdSCHp77719153;     OIZwPSxEizhAxcdSCHp77719153 = OIZwPSxEizhAxcdSCHp46108116;     OIZwPSxEizhAxcdSCHp46108116 = OIZwPSxEizhAxcdSCHp77091967;     OIZwPSxEizhAxcdSCHp77091967 = OIZwPSxEizhAxcdSCHp22431121;     OIZwPSxEizhAxcdSCHp22431121 = OIZwPSxEizhAxcdSCHp42050504;     OIZwPSxEizhAxcdSCHp42050504 = OIZwPSxEizhAxcdSCHp37152090;     OIZwPSxEizhAxcdSCHp37152090 = OIZwPSxEizhAxcdSCHp69266427;     OIZwPSxEizhAxcdSCHp69266427 = OIZwPSxEizhAxcdSCHp44645677;     OIZwPSxEizhAxcdSCHp44645677 = OIZwPSxEizhAxcdSCHp64385238;     OIZwPSxEizhAxcdSCHp64385238 = OIZwPSxEizhAxcdSCHp72822530;     OIZwPSxEizhAxcdSCHp72822530 = OIZwPSxEizhAxcdSCHp71600965;     OIZwPSxEizhAxcdSCHp71600965 = OIZwPSxEizhAxcdSCHp53156974;     OIZwPSxEizhAxcdSCHp53156974 = OIZwPSxEizhAxcdSCHp22010388;     OIZwPSxEizhAxcdSCHp22010388 = OIZwPSxEizhAxcdSCHp90289551;     OIZwPSxEizhAxcdSCHp90289551 = OIZwPSxEizhAxcdSCHp4801433;     OIZwPSxEizhAxcdSCHp4801433 = OIZwPSxEizhAxcdSCHp17070184;     OIZwPSxEizhAxcdSCHp17070184 = OIZwPSxEizhAxcdSCHp78692800;     OIZwPSxEizhAxcdSCHp78692800 = OIZwPSxEizhAxcdSCHp70419557;     OIZwPSxEizhAxcdSCHp70419557 = OIZwPSxEizhAxcdSCHp4515148;     OIZwPSxEizhAxcdSCHp4515148 = OIZwPSxEizhAxcdSCHp81755908;     OIZwPSxEizhAxcdSCHp81755908 = OIZwPSxEizhAxcdSCHp98701047;     OIZwPSxEizhAxcdSCHp98701047 = OIZwPSxEizhAxcdSCHp63778567;     OIZwPSxEizhAxcdSCHp63778567 = OIZwPSxEizhAxcdSCHp10773558;     OIZwPSxEizhAxcdSCHp10773558 = OIZwPSxEizhAxcdSCHp25189629;     OIZwPSxEizhAxcdSCHp25189629 = OIZwPSxEizhAxcdSCHp67774095;     OIZwPSxEizhAxcdSCHp67774095 = OIZwPSxEizhAxcdSCHp34728887;     OIZwPSxEizhAxcdSCHp34728887 = OIZwPSxEizhAxcdSCHp94187431;     OIZwPSxEizhAxcdSCHp94187431 = OIZwPSxEizhAxcdSCHp10989861;     OIZwPSxEizhAxcdSCHp10989861 = OIZwPSxEizhAxcdSCHp33452497;     OIZwPSxEizhAxcdSCHp33452497 = OIZwPSxEizhAxcdSCHp875966;     OIZwPSxEizhAxcdSCHp875966 = OIZwPSxEizhAxcdSCHp4423239;     OIZwPSxEizhAxcdSCHp4423239 = OIZwPSxEizhAxcdSCHp51992757;     OIZwPSxEizhAxcdSCHp51992757 = OIZwPSxEizhAxcdSCHp68521750;     OIZwPSxEizhAxcdSCHp68521750 = OIZwPSxEizhAxcdSCHp92001273;     OIZwPSxEizhAxcdSCHp92001273 = OIZwPSxEizhAxcdSCHp14414900;     OIZwPSxEizhAxcdSCHp14414900 = OIZwPSxEizhAxcdSCHp96874396;     OIZwPSxEizhAxcdSCHp96874396 = OIZwPSxEizhAxcdSCHp71890523;     OIZwPSxEizhAxcdSCHp71890523 = OIZwPSxEizhAxcdSCHp60914216;     OIZwPSxEizhAxcdSCHp60914216 = OIZwPSxEizhAxcdSCHp5409022;     OIZwPSxEizhAxcdSCHp5409022 = OIZwPSxEizhAxcdSCHp43591611;     OIZwPSxEizhAxcdSCHp43591611 = OIZwPSxEizhAxcdSCHp92055884;     OIZwPSxEizhAxcdSCHp92055884 = OIZwPSxEizhAxcdSCHp33862128;     OIZwPSxEizhAxcdSCHp33862128 = OIZwPSxEizhAxcdSCHp59576480;     OIZwPSxEizhAxcdSCHp59576480 = OIZwPSxEizhAxcdSCHp48710351;     OIZwPSxEizhAxcdSCHp48710351 = OIZwPSxEizhAxcdSCHp81392988;     OIZwPSxEizhAxcdSCHp81392988 = OIZwPSxEizhAxcdSCHp23113799;     OIZwPSxEizhAxcdSCHp23113799 = OIZwPSxEizhAxcdSCHp93429445;     OIZwPSxEizhAxcdSCHp93429445 = OIZwPSxEizhAxcdSCHp13658535;     OIZwPSxEizhAxcdSCHp13658535 = OIZwPSxEizhAxcdSCHp48700398;     OIZwPSxEizhAxcdSCHp48700398 = OIZwPSxEizhAxcdSCHp28116853;     OIZwPSxEizhAxcdSCHp28116853 = OIZwPSxEizhAxcdSCHp65631836;     OIZwPSxEizhAxcdSCHp65631836 = OIZwPSxEizhAxcdSCHp71073907;     OIZwPSxEizhAxcdSCHp71073907 = OIZwPSxEizhAxcdSCHp20051339;     OIZwPSxEizhAxcdSCHp20051339 = OIZwPSxEizhAxcdSCHp9585840;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void bbIFVuaMxQpAteqOBvz89916415() {     int vDnIByjHSbTFLATrcht54366546 = -752819409;    int vDnIByjHSbTFLATrcht48861918 = -817467744;    int vDnIByjHSbTFLATrcht4385554 = -268832631;    int vDnIByjHSbTFLATrcht15955819 = -803594091;    int vDnIByjHSbTFLATrcht3586865 = -42832965;    int vDnIByjHSbTFLATrcht77384406 = -420556663;    int vDnIByjHSbTFLATrcht63548088 = -858900350;    int vDnIByjHSbTFLATrcht48106340 = -664404720;    int vDnIByjHSbTFLATrcht73624235 = -413703772;    int vDnIByjHSbTFLATrcht4766739 = -725550815;    int vDnIByjHSbTFLATrcht40021963 = -335174728;    int vDnIByjHSbTFLATrcht40592440 = 86379986;    int vDnIByjHSbTFLATrcht79372300 = -900085872;    int vDnIByjHSbTFLATrcht19125570 = -779276996;    int vDnIByjHSbTFLATrcht60604884 = 37857678;    int vDnIByjHSbTFLATrcht92130860 = -595918259;    int vDnIByjHSbTFLATrcht87838812 = -547747670;    int vDnIByjHSbTFLATrcht39121019 = 90562500;    int vDnIByjHSbTFLATrcht60270509 = -456657564;    int vDnIByjHSbTFLATrcht49450495 = -178128573;    int vDnIByjHSbTFLATrcht736324 = -602349340;    int vDnIByjHSbTFLATrcht94534772 = -512840481;    int vDnIByjHSbTFLATrcht15624953 = -179975230;    int vDnIByjHSbTFLATrcht85908709 = -842232;    int vDnIByjHSbTFLATrcht60503132 = -233729121;    int vDnIByjHSbTFLATrcht54099983 = -397819477;    int vDnIByjHSbTFLATrcht16091312 = -823110016;    int vDnIByjHSbTFLATrcht19401888 = -613648064;    int vDnIByjHSbTFLATrcht50089165 = -156626064;    int vDnIByjHSbTFLATrcht25569826 = -479976280;    int vDnIByjHSbTFLATrcht2628458 = -716846987;    int vDnIByjHSbTFLATrcht11102226 = -424635531;    int vDnIByjHSbTFLATrcht37947229 = -389900135;    int vDnIByjHSbTFLATrcht97002342 = -320216372;    int vDnIByjHSbTFLATrcht94062409 = -857924048;    int vDnIByjHSbTFLATrcht62090430 = -576034236;    int vDnIByjHSbTFLATrcht27932011 = -361025074;    int vDnIByjHSbTFLATrcht13605296 = -63050045;    int vDnIByjHSbTFLATrcht76742499 = -869540608;    int vDnIByjHSbTFLATrcht72446623 = -494187276;    int vDnIByjHSbTFLATrcht23160906 = -839449988;    int vDnIByjHSbTFLATrcht36506158 = -315128833;    int vDnIByjHSbTFLATrcht95141660 = -944358426;    int vDnIByjHSbTFLATrcht81149804 = -88404424;    int vDnIByjHSbTFLATrcht76514967 = -188288279;    int vDnIByjHSbTFLATrcht25116174 = -668991871;    int vDnIByjHSbTFLATrcht98963798 = -995907301;    int vDnIByjHSbTFLATrcht91532921 = -581044305;    int vDnIByjHSbTFLATrcht16369537 = -638045893;    int vDnIByjHSbTFLATrcht51214035 = -181392927;    int vDnIByjHSbTFLATrcht26910184 = -583090565;    int vDnIByjHSbTFLATrcht75205761 = -567183692;    int vDnIByjHSbTFLATrcht18332549 = 74617328;    int vDnIByjHSbTFLATrcht79589246 = -952744666;    int vDnIByjHSbTFLATrcht89180091 = -874103128;    int vDnIByjHSbTFLATrcht59831773 = -139978929;    int vDnIByjHSbTFLATrcht33236965 = -537492514;    int vDnIByjHSbTFLATrcht18476845 = -167990399;    int vDnIByjHSbTFLATrcht55452686 = -469864971;    int vDnIByjHSbTFLATrcht49486882 = -645013488;    int vDnIByjHSbTFLATrcht61293094 = -597446647;    int vDnIByjHSbTFLATrcht44146200 = -145252287;    int vDnIByjHSbTFLATrcht98017175 = -407778657;    int vDnIByjHSbTFLATrcht48054409 = -933727492;    int vDnIByjHSbTFLATrcht2138281 = 91296171;    int vDnIByjHSbTFLATrcht28919737 = -910539197;    int vDnIByjHSbTFLATrcht2645212 = -523719880;    int vDnIByjHSbTFLATrcht82369957 = -479869501;    int vDnIByjHSbTFLATrcht25063161 = -921352948;    int vDnIByjHSbTFLATrcht98514454 = -386108086;    int vDnIByjHSbTFLATrcht64198850 = -134893186;    int vDnIByjHSbTFLATrcht74233517 = -384697626;    int vDnIByjHSbTFLATrcht62378520 = -39896892;    int vDnIByjHSbTFLATrcht87823886 = -962470289;    int vDnIByjHSbTFLATrcht26289590 = -338678585;    int vDnIByjHSbTFLATrcht64230166 = -187220508;    int vDnIByjHSbTFLATrcht99393112 = -568482055;    int vDnIByjHSbTFLATrcht34475148 = 8429193;    int vDnIByjHSbTFLATrcht9393742 = -812553954;    int vDnIByjHSbTFLATrcht35386959 = -564737250;    int vDnIByjHSbTFLATrcht55136184 = -401912177;    int vDnIByjHSbTFLATrcht24558391 = -142065711;    int vDnIByjHSbTFLATrcht3032352 = -975602172;    int vDnIByjHSbTFLATrcht98875129 = -975233137;    int vDnIByjHSbTFLATrcht98659642 = -896885715;    int vDnIByjHSbTFLATrcht27422697 = -49663296;    int vDnIByjHSbTFLATrcht92769677 = -399252860;    int vDnIByjHSbTFLATrcht58357982 = -437155470;    int vDnIByjHSbTFLATrcht7822251 = -446113244;    int vDnIByjHSbTFLATrcht34230636 = -617945119;    int vDnIByjHSbTFLATrcht28853465 = 61458278;    int vDnIByjHSbTFLATrcht9455167 = -93034675;    int vDnIByjHSbTFLATrcht58152609 = -593185074;    int vDnIByjHSbTFLATrcht27255617 = -124527120;    int vDnIByjHSbTFLATrcht11153529 = -896740629;    int vDnIByjHSbTFLATrcht79014706 = -594197702;    int vDnIByjHSbTFLATrcht38488983 = -907350177;    int vDnIByjHSbTFLATrcht47087251 = 89369066;    int vDnIByjHSbTFLATrcht79011524 = -79700596;    int vDnIByjHSbTFLATrcht47595230 = -752819409;     vDnIByjHSbTFLATrcht54366546 = vDnIByjHSbTFLATrcht48861918;     vDnIByjHSbTFLATrcht48861918 = vDnIByjHSbTFLATrcht4385554;     vDnIByjHSbTFLATrcht4385554 = vDnIByjHSbTFLATrcht15955819;     vDnIByjHSbTFLATrcht15955819 = vDnIByjHSbTFLATrcht3586865;     vDnIByjHSbTFLATrcht3586865 = vDnIByjHSbTFLATrcht77384406;     vDnIByjHSbTFLATrcht77384406 = vDnIByjHSbTFLATrcht63548088;     vDnIByjHSbTFLATrcht63548088 = vDnIByjHSbTFLATrcht48106340;     vDnIByjHSbTFLATrcht48106340 = vDnIByjHSbTFLATrcht73624235;     vDnIByjHSbTFLATrcht73624235 = vDnIByjHSbTFLATrcht4766739;     vDnIByjHSbTFLATrcht4766739 = vDnIByjHSbTFLATrcht40021963;     vDnIByjHSbTFLATrcht40021963 = vDnIByjHSbTFLATrcht40592440;     vDnIByjHSbTFLATrcht40592440 = vDnIByjHSbTFLATrcht79372300;     vDnIByjHSbTFLATrcht79372300 = vDnIByjHSbTFLATrcht19125570;     vDnIByjHSbTFLATrcht19125570 = vDnIByjHSbTFLATrcht60604884;     vDnIByjHSbTFLATrcht60604884 = vDnIByjHSbTFLATrcht92130860;     vDnIByjHSbTFLATrcht92130860 = vDnIByjHSbTFLATrcht87838812;     vDnIByjHSbTFLATrcht87838812 = vDnIByjHSbTFLATrcht39121019;     vDnIByjHSbTFLATrcht39121019 = vDnIByjHSbTFLATrcht60270509;     vDnIByjHSbTFLATrcht60270509 = vDnIByjHSbTFLATrcht49450495;     vDnIByjHSbTFLATrcht49450495 = vDnIByjHSbTFLATrcht736324;     vDnIByjHSbTFLATrcht736324 = vDnIByjHSbTFLATrcht94534772;     vDnIByjHSbTFLATrcht94534772 = vDnIByjHSbTFLATrcht15624953;     vDnIByjHSbTFLATrcht15624953 = vDnIByjHSbTFLATrcht85908709;     vDnIByjHSbTFLATrcht85908709 = vDnIByjHSbTFLATrcht60503132;     vDnIByjHSbTFLATrcht60503132 = vDnIByjHSbTFLATrcht54099983;     vDnIByjHSbTFLATrcht54099983 = vDnIByjHSbTFLATrcht16091312;     vDnIByjHSbTFLATrcht16091312 = vDnIByjHSbTFLATrcht19401888;     vDnIByjHSbTFLATrcht19401888 = vDnIByjHSbTFLATrcht50089165;     vDnIByjHSbTFLATrcht50089165 = vDnIByjHSbTFLATrcht25569826;     vDnIByjHSbTFLATrcht25569826 = vDnIByjHSbTFLATrcht2628458;     vDnIByjHSbTFLATrcht2628458 = vDnIByjHSbTFLATrcht11102226;     vDnIByjHSbTFLATrcht11102226 = vDnIByjHSbTFLATrcht37947229;     vDnIByjHSbTFLATrcht37947229 = vDnIByjHSbTFLATrcht97002342;     vDnIByjHSbTFLATrcht97002342 = vDnIByjHSbTFLATrcht94062409;     vDnIByjHSbTFLATrcht94062409 = vDnIByjHSbTFLATrcht62090430;     vDnIByjHSbTFLATrcht62090430 = vDnIByjHSbTFLATrcht27932011;     vDnIByjHSbTFLATrcht27932011 = vDnIByjHSbTFLATrcht13605296;     vDnIByjHSbTFLATrcht13605296 = vDnIByjHSbTFLATrcht76742499;     vDnIByjHSbTFLATrcht76742499 = vDnIByjHSbTFLATrcht72446623;     vDnIByjHSbTFLATrcht72446623 = vDnIByjHSbTFLATrcht23160906;     vDnIByjHSbTFLATrcht23160906 = vDnIByjHSbTFLATrcht36506158;     vDnIByjHSbTFLATrcht36506158 = vDnIByjHSbTFLATrcht95141660;     vDnIByjHSbTFLATrcht95141660 = vDnIByjHSbTFLATrcht81149804;     vDnIByjHSbTFLATrcht81149804 = vDnIByjHSbTFLATrcht76514967;     vDnIByjHSbTFLATrcht76514967 = vDnIByjHSbTFLATrcht25116174;     vDnIByjHSbTFLATrcht25116174 = vDnIByjHSbTFLATrcht98963798;     vDnIByjHSbTFLATrcht98963798 = vDnIByjHSbTFLATrcht91532921;     vDnIByjHSbTFLATrcht91532921 = vDnIByjHSbTFLATrcht16369537;     vDnIByjHSbTFLATrcht16369537 = vDnIByjHSbTFLATrcht51214035;     vDnIByjHSbTFLATrcht51214035 = vDnIByjHSbTFLATrcht26910184;     vDnIByjHSbTFLATrcht26910184 = vDnIByjHSbTFLATrcht75205761;     vDnIByjHSbTFLATrcht75205761 = vDnIByjHSbTFLATrcht18332549;     vDnIByjHSbTFLATrcht18332549 = vDnIByjHSbTFLATrcht79589246;     vDnIByjHSbTFLATrcht79589246 = vDnIByjHSbTFLATrcht89180091;     vDnIByjHSbTFLATrcht89180091 = vDnIByjHSbTFLATrcht59831773;     vDnIByjHSbTFLATrcht59831773 = vDnIByjHSbTFLATrcht33236965;     vDnIByjHSbTFLATrcht33236965 = vDnIByjHSbTFLATrcht18476845;     vDnIByjHSbTFLATrcht18476845 = vDnIByjHSbTFLATrcht55452686;     vDnIByjHSbTFLATrcht55452686 = vDnIByjHSbTFLATrcht49486882;     vDnIByjHSbTFLATrcht49486882 = vDnIByjHSbTFLATrcht61293094;     vDnIByjHSbTFLATrcht61293094 = vDnIByjHSbTFLATrcht44146200;     vDnIByjHSbTFLATrcht44146200 = vDnIByjHSbTFLATrcht98017175;     vDnIByjHSbTFLATrcht98017175 = vDnIByjHSbTFLATrcht48054409;     vDnIByjHSbTFLATrcht48054409 = vDnIByjHSbTFLATrcht2138281;     vDnIByjHSbTFLATrcht2138281 = vDnIByjHSbTFLATrcht28919737;     vDnIByjHSbTFLATrcht28919737 = vDnIByjHSbTFLATrcht2645212;     vDnIByjHSbTFLATrcht2645212 = vDnIByjHSbTFLATrcht82369957;     vDnIByjHSbTFLATrcht82369957 = vDnIByjHSbTFLATrcht25063161;     vDnIByjHSbTFLATrcht25063161 = vDnIByjHSbTFLATrcht98514454;     vDnIByjHSbTFLATrcht98514454 = vDnIByjHSbTFLATrcht64198850;     vDnIByjHSbTFLATrcht64198850 = vDnIByjHSbTFLATrcht74233517;     vDnIByjHSbTFLATrcht74233517 = vDnIByjHSbTFLATrcht62378520;     vDnIByjHSbTFLATrcht62378520 = vDnIByjHSbTFLATrcht87823886;     vDnIByjHSbTFLATrcht87823886 = vDnIByjHSbTFLATrcht26289590;     vDnIByjHSbTFLATrcht26289590 = vDnIByjHSbTFLATrcht64230166;     vDnIByjHSbTFLATrcht64230166 = vDnIByjHSbTFLATrcht99393112;     vDnIByjHSbTFLATrcht99393112 = vDnIByjHSbTFLATrcht34475148;     vDnIByjHSbTFLATrcht34475148 = vDnIByjHSbTFLATrcht9393742;     vDnIByjHSbTFLATrcht9393742 = vDnIByjHSbTFLATrcht35386959;     vDnIByjHSbTFLATrcht35386959 = vDnIByjHSbTFLATrcht55136184;     vDnIByjHSbTFLATrcht55136184 = vDnIByjHSbTFLATrcht24558391;     vDnIByjHSbTFLATrcht24558391 = vDnIByjHSbTFLATrcht3032352;     vDnIByjHSbTFLATrcht3032352 = vDnIByjHSbTFLATrcht98875129;     vDnIByjHSbTFLATrcht98875129 = vDnIByjHSbTFLATrcht98659642;     vDnIByjHSbTFLATrcht98659642 = vDnIByjHSbTFLATrcht27422697;     vDnIByjHSbTFLATrcht27422697 = vDnIByjHSbTFLATrcht92769677;     vDnIByjHSbTFLATrcht92769677 = vDnIByjHSbTFLATrcht58357982;     vDnIByjHSbTFLATrcht58357982 = vDnIByjHSbTFLATrcht7822251;     vDnIByjHSbTFLATrcht7822251 = vDnIByjHSbTFLATrcht34230636;     vDnIByjHSbTFLATrcht34230636 = vDnIByjHSbTFLATrcht28853465;     vDnIByjHSbTFLATrcht28853465 = vDnIByjHSbTFLATrcht9455167;     vDnIByjHSbTFLATrcht9455167 = vDnIByjHSbTFLATrcht58152609;     vDnIByjHSbTFLATrcht58152609 = vDnIByjHSbTFLATrcht27255617;     vDnIByjHSbTFLATrcht27255617 = vDnIByjHSbTFLATrcht11153529;     vDnIByjHSbTFLATrcht11153529 = vDnIByjHSbTFLATrcht79014706;     vDnIByjHSbTFLATrcht79014706 = vDnIByjHSbTFLATrcht38488983;     vDnIByjHSbTFLATrcht38488983 = vDnIByjHSbTFLATrcht47087251;     vDnIByjHSbTFLATrcht47087251 = vDnIByjHSbTFLATrcht79011524;     vDnIByjHSbTFLATrcht79011524 = vDnIByjHSbTFLATrcht47595230;     vDnIByjHSbTFLATrcht47595230 = vDnIByjHSbTFLATrcht54366546;}
// Junk Finished

// Junk Code By Troll Face & Thaisen's Gen
void ixSsCObZqRdmeQkDDwx96244962() {     int WhgyIqvNXhMdmWdLqfm9020944 = -90346993;    int WhgyIqvNXhMdmWdLqfm95859537 = -297032558;    int WhgyIqvNXhMdmWdLqfm65118200 = -654217245;    int WhgyIqvNXhMdmWdLqfm87390760 = -809696502;    int WhgyIqvNXhMdmWdLqfm78038535 = -815268204;    int WhgyIqvNXhMdmWdLqfm91558803 = -549707499;    int WhgyIqvNXhMdmWdLqfm84648791 = -60793023;    int WhgyIqvNXhMdmWdLqfm77281443 = -64972952;    int WhgyIqvNXhMdmWdLqfm61398645 = -460557143;    int WhgyIqvNXhMdmWdLqfm87398724 = 95647915;    int WhgyIqvNXhMdmWdLqfm18633258 = -960531300;    int WhgyIqvNXhMdmWdLqfm3357154 = -100044103;    int WhgyIqvNXhMdmWdLqfm43189615 = -703626177;    int WhgyIqvNXhMdmWdLqfm12092001 = -391380574;    int WhgyIqvNXhMdmWdLqfm90828957 = -969263953;    int WhgyIqvNXhMdmWdLqfm81898396 = -226077823;    int WhgyIqvNXhMdmWdLqfm87670575 = 78652501;    int WhgyIqvNXhMdmWdLqfm6717606 = 26998033;    int WhgyIqvNXhMdmWdLqfm61491110 = -742469112;    int WhgyIqvNXhMdmWdLqfm67085050 = -523494719;    int WhgyIqvNXhMdmWdLqfm34910712 = -70432491;    int WhgyIqvNXhMdmWdLqfm45787362 = -679284589;    int WhgyIqvNXhMdmWdLqfm52094784 = -766718651;    int WhgyIqvNXhMdmWdLqfm87337078 = -799883049;    int WhgyIqvNXhMdmWdLqfm56255748 = -606642572;    int WhgyIqvNXhMdmWdLqfm95340929 = -401528262;    int WhgyIqvNXhMdmWdLqfm18081236 = -277954295;    int WhgyIqvNXhMdmWdLqfm72650888 = -621699925;    int WhgyIqvNXhMdmWdLqfm89986841 = -536870939;    int WhgyIqvNXhMdmWdLqfm20005235 = -770734248;    int WhgyIqvNXhMdmWdLqfm54333986 = -165719513;    int WhgyIqvNXhMdmWdLqfm42093836 = -836132059;    int WhgyIqvNXhMdmWdLqfm5603106 = -946417749;    int WhgyIqvNXhMdmWdLqfm91658235 = -337181;    int WhgyIqvNXhMdmWdLqfm28566566 = 24212692;    int WhgyIqvNXhMdmWdLqfm49416972 = -824029832;    int WhgyIqvNXhMdmWdLqfm2636499 = -211451694;    int WhgyIqvNXhMdmWdLqfm26582534 = 63020934;    int WhgyIqvNXhMdmWdLqfm27512148 = -151489210;    int WhgyIqvNXhMdmWdLqfm96433017 = -152495875;    int WhgyIqvNXhMdmWdLqfm79120306 = -952000147;    int WhgyIqvNXhMdmWdLqfm73180816 = -922660919;    int WhgyIqvNXhMdmWdLqfm86141843 = -784863744;    int WhgyIqvNXhMdmWdLqfm90144204 = -662084090;    int WhgyIqvNXhMdmWdLqfm36499031 = -320805876;    int WhgyIqvNXhMdmWdLqfm80449775 = -737781486;    int WhgyIqvNXhMdmWdLqfm15437511 = 77035315;    int WhgyIqvNXhMdmWdLqfm14960231 = -558696678;    int WhgyIqvNXhMdmWdLqfm58712303 = -537776082;    int WhgyIqvNXhMdmWdLqfm96055697 = -421412221;    int WhgyIqvNXhMdmWdLqfm2023724 = -240306067;    int WhgyIqvNXhMdmWdLqfm64587911 = 17750325;    int WhgyIqvNXhMdmWdLqfm50060551 = -765298129;    int WhgyIqvNXhMdmWdLqfm37005004 = -848631150;    int WhgyIqvNXhMdmWdLqfm61334251 = -170011809;    int WhgyIqvNXhMdmWdLqfm63233582 = -411062405;    int WhgyIqvNXhMdmWdLqfm43764753 = -530313907;    int WhgyIqvNXhMdmWdLqfm77781122 = -854334196;    int WhgyIqvNXhMdmWdLqfm31135012 = -103053930;    int WhgyIqvNXhMdmWdLqfm82697605 = -313739943;    int WhgyIqvNXhMdmWdLqfm73477567 = -171753205;    int WhgyIqvNXhMdmWdLqfm11997904 = -439093099;    int WhgyIqvNXhMdmWdLqfm87294601 = -528102014;    int WhgyIqvNXhMdmWdLqfm41393411 = -689822895;    int WhgyIqvNXhMdmWdLqfm33064738 = -738632572;    int WhgyIqvNXhMdmWdLqfm76539421 = -24399241;    int WhgyIqvNXhMdmWdLqfm97754047 = -153626354;    int WhgyIqvNXhMdmWdLqfm51531380 = -603288996;    int WhgyIqvNXhMdmWdLqfm83525434 = -315593267;    int WhgyIqvNXhMdmWdLqfm41411986 = -45234121;    int WhgyIqvNXhMdmWdLqfm79261898 = 85373870;    int WhgyIqvNXhMdmWdLqfm61088041 = -984368433;    int WhgyIqvNXhMdmWdLqfm79205458 = -821512758;    int WhgyIqvNXhMdmWdLqfm65058092 = -489973237;    int WhgyIqvNXhMdmWdLqfm87964744 = -571494573;    int WhgyIqvNXhMdmWdLqfm61729895 = -147771572;    int WhgyIqvNXhMdmWdLqfm59645518 = -894420845;    int WhgyIqvNXhMdmWdLqfm61950580 = -4634562;    int WhgyIqvNXhMdmWdLqfm50838047 = -379077173;    int WhgyIqvNXhMdmWdLqfm75805972 = -868861087;    int WhgyIqvNXhMdmWdLqfm79903419 = -378563578;    int WhgyIqvNXhMdmWdLqfm3121006 = -719257618;    int WhgyIqvNXhMdmWdLqfm13938585 = 16076157;    int WhgyIqvNXhMdmWdLqfm93931144 = -15458719;    int WhgyIqvNXhMdmWdLqfm17981512 = -430428181;    int WhgyIqvNXhMdmWdLqfm89746075 = -83469839;    int WhgyIqvNXhMdmWdLqfm92033284 = 29166069;    int WhgyIqvNXhMdmWdLqfm68598101 = 2213400;    int WhgyIqvNXhMdmWdLqfm30323984 = -830325373;    int WhgyIqvNXhMdmWdLqfm65332984 = -564724903;    int WhgyIqvNXhMdmWdLqfm5652220 = -193715926;    int WhgyIqvNXhMdmWdLqfm24855377 = -357117498;    int WhgyIqvNXhMdmWdLqfm95447522 = -833925136;    int WhgyIqvNXhMdmWdLqfm44814542 = -837749267;    int WhgyIqvNXhMdmWdLqfm22955451 = -980742671;    int WhgyIqvNXhMdmWdLqfm67122403 = -412907048;    int WhgyIqvNXhMdmWdLqfm85886214 = -294558906;    int WhgyIqvNXhMdmWdLqfm44748433 = 4959150;    int WhgyIqvNXhMdmWdLqfm57079466 = -923451518;    int WhgyIqvNXhMdmWdLqfm59959609 = -90346993;     WhgyIqvNXhMdmWdLqfm9020944 = WhgyIqvNXhMdmWdLqfm95859537;     WhgyIqvNXhMdmWdLqfm95859537 = WhgyIqvNXhMdmWdLqfm65118200;     WhgyIqvNXhMdmWdLqfm65118200 = WhgyIqvNXhMdmWdLqfm87390760;     WhgyIqvNXhMdmWdLqfm87390760 = WhgyIqvNXhMdmWdLqfm78038535;     WhgyIqvNXhMdmWdLqfm78038535 = WhgyIqvNXhMdmWdLqfm91558803;     WhgyIqvNXhMdmWdLqfm91558803 = WhgyIqvNXhMdmWdLqfm84648791;     WhgyIqvNXhMdmWdLqfm84648791 = WhgyIqvNXhMdmWdLqfm77281443;     WhgyIqvNXhMdmWdLqfm77281443 = WhgyIqvNXhMdmWdLqfm61398645;     WhgyIqvNXhMdmWdLqfm61398645 = WhgyIqvNXhMdmWdLqfm87398724;     WhgyIqvNXhMdmWdLqfm87398724 = WhgyIqvNXhMdmWdLqfm18633258;     WhgyIqvNXhMdmWdLqfm18633258 = WhgyIqvNXhMdmWdLqfm3357154;     WhgyIqvNXhMdmWdLqfm3357154 = WhgyIqvNXhMdmWdLqfm43189615;     WhgyIqvNXhMdmWdLqfm43189615 = WhgyIqvNXhMdmWdLqfm12092001;     WhgyIqvNXhMdmWdLqfm12092001 = WhgyIqvNXhMdmWdLqfm90828957;     WhgyIqvNXhMdmWdLqfm90828957 = WhgyIqvNXhMdmWdLqfm81898396;     WhgyIqvNXhMdmWdLqfm81898396 = WhgyIqvNXhMdmWdLqfm87670575;     WhgyIqvNXhMdmWdLqfm87670575 = WhgyIqvNXhMdmWdLqfm6717606;     WhgyIqvNXhMdmWdLqfm6717606 = WhgyIqvNXhMdmWdLqfm61491110;     WhgyIqvNXhMdmWdLqfm61491110 = WhgyIqvNXhMdmWdLqfm67085050;     WhgyIqvNXhMdmWdLqfm67085050 = WhgyIqvNXhMdmWdLqfm34910712;     WhgyIqvNXhMdmWdLqfm34910712 = WhgyIqvNXhMdmWdLqfm45787362;     WhgyIqvNXhMdmWdLqfm45787362 = WhgyIqvNXhMdmWdLqfm52094784;     WhgyIqvNXhMdmWdLqfm52094784 = WhgyIqvNXhMdmWdLqfm87337078;     WhgyIqvNXhMdmWdLqfm87337078 = WhgyIqvNXhMdmWdLqfm56255748;     WhgyIqvNXhMdmWdLqfm56255748 = WhgyIqvNXhMdmWdLqfm95340929;     WhgyIqvNXhMdmWdLqfm95340929 = WhgyIqvNXhMdmWdLqfm18081236;     WhgyIqvNXhMdmWdLqfm18081236 = WhgyIqvNXhMdmWdLqfm72650888;     WhgyIqvNXhMdmWdLqfm72650888 = WhgyIqvNXhMdmWdLqfm89986841;     WhgyIqvNXhMdmWdLqfm89986841 = WhgyIqvNXhMdmWdLqfm20005235;     WhgyIqvNXhMdmWdLqfm20005235 = WhgyIqvNXhMdmWdLqfm54333986;     WhgyIqvNXhMdmWdLqfm54333986 = WhgyIqvNXhMdmWdLqfm42093836;     WhgyIqvNXhMdmWdLqfm42093836 = WhgyIqvNXhMdmWdLqfm5603106;     WhgyIqvNXhMdmWdLqfm5603106 = WhgyIqvNXhMdmWdLqfm91658235;     WhgyIqvNXhMdmWdLqfm91658235 = WhgyIqvNXhMdmWdLqfm28566566;     WhgyIqvNXhMdmWdLqfm28566566 = WhgyIqvNXhMdmWdLqfm49416972;     WhgyIqvNXhMdmWdLqfm49416972 = WhgyIqvNXhMdmWdLqfm2636499;     WhgyIqvNXhMdmWdLqfm2636499 = WhgyIqvNXhMdmWdLqfm26582534;     WhgyIqvNXhMdmWdLqfm26582534 = WhgyIqvNXhMdmWdLqfm27512148;     WhgyIqvNXhMdmWdLqfm27512148 = WhgyIqvNXhMdmWdLqfm96433017;     WhgyIqvNXhMdmWdLqfm96433017 = WhgyIqvNXhMdmWdLqfm79120306;     WhgyIqvNXhMdmWdLqfm79120306 = WhgyIqvNXhMdmWdLqfm73180816;     WhgyIqvNXhMdmWdLqfm73180816 = WhgyIqvNXhMdmWdLqfm86141843;     WhgyIqvNXhMdmWdLqfm86141843 = WhgyIqvNXhMdmWdLqfm90144204;     WhgyIqvNXhMdmWdLqfm90144204 = WhgyIqvNXhMdmWdLqfm36499031;     WhgyIqvNXhMdmWdLqfm36499031 = WhgyIqvNXhMdmWdLqfm80449775;     WhgyIqvNXhMdmWdLqfm80449775 = WhgyIqvNXhMdmWdLqfm15437511;     WhgyIqvNXhMdmWdLqfm15437511 = WhgyIqvNXhMdmWdLqfm14960231;     WhgyIqvNXhMdmWdLqfm14960231 = WhgyIqvNXhMdmWdLqfm58712303;     WhgyIqvNXhMdmWdLqfm58712303 = WhgyIqvNXhMdmWdLqfm96055697;     WhgyIqvNXhMdmWdLqfm96055697 = WhgyIqvNXhMdmWdLqfm2023724;     WhgyIqvNXhMdmWdLqfm2023724 = WhgyIqvNXhMdmWdLqfm64587911;     WhgyIqvNXhMdmWdLqfm64587911 = WhgyIqvNXhMdmWdLqfm50060551;     WhgyIqvNXhMdmWdLqfm50060551 = WhgyIqvNXhMdmWdLqfm37005004;     WhgyIqvNXhMdmWdLqfm37005004 = WhgyIqvNXhMdmWdLqfm61334251;     WhgyIqvNXhMdmWdLqfm61334251 = WhgyIqvNXhMdmWdLqfm63233582;     WhgyIqvNXhMdmWdLqfm63233582 = WhgyIqvNXhMdmWdLqfm43764753;     WhgyIqvNXhMdmWdLqfm43764753 = WhgyIqvNXhMdmWdLqfm77781122;     WhgyIqvNXhMdmWdLqfm77781122 = WhgyIqvNXhMdmWdLqfm31135012;     WhgyIqvNXhMdmWdLqfm31135012 = WhgyIqvNXhMdmWdLqfm82697605;     WhgyIqvNXhMdmWdLqfm82697605 = WhgyIqvNXhMdmWdLqfm73477567;     WhgyIqvNXhMdmWdLqfm73477567 = WhgyIqvNXhMdmWdLqfm11997904;     WhgyIqvNXhMdmWdLqfm11997904 = WhgyIqvNXhMdmWdLqfm87294601;     WhgyIqvNXhMdmWdLqfm87294601 = WhgyIqvNXhMdmWdLqfm41393411;     WhgyIqvNXhMdmWdLqfm41393411 = WhgyIqvNXhMdmWdLqfm33064738;     WhgyIqvNXhMdmWdLqfm33064738 = WhgyIqvNXhMdmWdLqfm76539421;     WhgyIqvNXhMdmWdLqfm76539421 = WhgyIqvNXhMdmWdLqfm97754047;     WhgyIqvNXhMdmWdLqfm97754047 = WhgyIqvNXhMdmWdLqfm51531380;     WhgyIqvNXhMdmWdLqfm51531380 = WhgyIqvNXhMdmWdLqfm83525434;     WhgyIqvNXhMdmWdLqfm83525434 = WhgyIqvNXhMdmWdLqfm41411986;     WhgyIqvNXhMdmWdLqfm41411986 = WhgyIqvNXhMdmWdLqfm79261898;     WhgyIqvNXhMdmWdLqfm79261898 = WhgyIqvNXhMdmWdLqfm61088041;     WhgyIqvNXhMdmWdLqfm61088041 = WhgyIqvNXhMdmWdLqfm79205458;     WhgyIqvNXhMdmWdLqfm79205458 = WhgyIqvNXhMdmWdLqfm65058092;     WhgyIqvNXhMdmWdLqfm65058092 = WhgyIqvNXhMdmWdLqfm87964744;     WhgyIqvNXhMdmWdLqfm87964744 = WhgyIqvNXhMdmWdLqfm61729895;     WhgyIqvNXhMdmWdLqfm61729895 = WhgyIqvNXhMdmWdLqfm59645518;     WhgyIqvNXhMdmWdLqfm59645518 = WhgyIqvNXhMdmWdLqfm61950580;     WhgyIqvNXhMdmWdLqfm61950580 = WhgyIqvNXhMdmWdLqfm50838047;     WhgyIqvNXhMdmWdLqfm50838047 = WhgyIqvNXhMdmWdLqfm75805972;     WhgyIqvNXhMdmWdLqfm75805972 = WhgyIqvNXhMdmWdLqfm79903419;     WhgyIqvNXhMdmWdLqfm79903419 = WhgyIqvNXhMdmWdLqfm3121006;     WhgyIqvNXhMdmWdLqfm3121006 = WhgyIqvNXhMdmWdLqfm13938585;     WhgyIqvNXhMdmWdLqfm13938585 = WhgyIqvNXhMdmWdLqfm93931144;     WhgyIqvNXhMdmWdLqfm93931144 = WhgyIqvNXhMdmWdLqfm17981512;     WhgyIqvNXhMdmWdLqfm17981512 = WhgyIqvNXhMdmWdLqfm89746075;     WhgyIqvNXhMdmWdLqfm89746075 = WhgyIqvNXhMdmWdLqfm92033284;     WhgyIqvNXhMdmWdLqfm92033284 = WhgyIqvNXhMdmWdLqfm68598101;     WhgyIqvNXhMdmWdLqfm68598101 = WhgyIqvNXhMdmWdLqfm30323984;     WhgyIqvNXhMdmWdLqfm30323984 = WhgyIqvNXhMdmWdLqfm65332984;     WhgyIqvNXhMdmWdLqfm65332984 = WhgyIqvNXhMdmWdLqfm5652220;     WhgyIqvNXhMdmWdLqfm5652220 = WhgyIqvNXhMdmWdLqfm24855377;     WhgyIqvNXhMdmWdLqfm24855377 = WhgyIqvNXhMdmWdLqfm95447522;     WhgyIqvNXhMdmWdLqfm95447522 = WhgyIqvNXhMdmWdLqfm44814542;     WhgyIqvNXhMdmWdLqfm44814542 = WhgyIqvNXhMdmWdLqfm22955451;     WhgyIqvNXhMdmWdLqfm22955451 = WhgyIqvNXhMdmWdLqfm67122403;     WhgyIqvNXhMdmWdLqfm67122403 = WhgyIqvNXhMdmWdLqfm85886214;     WhgyIqvNXhMdmWdLqfm85886214 = WhgyIqvNXhMdmWdLqfm44748433;     WhgyIqvNXhMdmWdLqfm44748433 = WhgyIqvNXhMdmWdLqfm57079466;     WhgyIqvNXhMdmWdLqfm57079466 = WhgyIqvNXhMdmWdLqfm59959609;     WhgyIqvNXhMdmWdLqfm59959609 = WhgyIqvNXhMdmWdLqfm9020944;}
// Junk Finished
